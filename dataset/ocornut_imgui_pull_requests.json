[
    {
        "merged": false,
        "additions": 20,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2023-10-19T20:00:56Z",
        "closed_at": "2023-10-19T21:01:16Z",
        "merged_at": null,
        "body": "Win32 applications themselves can call `RegisterClassEx`, which will conflict with the set parameters from the ImGui side, and can result in window and swapchain to never be created from the ImGui side.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-10-16T04:22:38Z",
        "closed_at": "2023-10-16T07:44:33Z",
        "merged_at": null,
        "body": "(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\n1. PLEASE CAREFULLY READ: [Contributing Guidelines](https://github.com/ocornut/imgui/blob/master/docs/CONTRIBUTING.md)\r\n\r\n2. Clear this template before submitting your PR.\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T23:07:11Z",
        "closed_at": "2023-10-05T18:41:32Z",
        "merged_at": null,
        "body": "We need F13-F15 for our debug functionality in Special K, I was surprised after updating to modern ImGui (from a version ~2018), that F13-F24 aren't even in the new keymap system.\r\n\r\nThis is a simple fix that adds enumerated values and mapped names for these additional keys. I'd like to see it mainstreamed rather than projects such as NVIDIA Streamline/Reflex that use these infrequently used keys having to modify ImGui code directly.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-30T16:11:48Z",
        "closed_at": "2023-10-09T09:36:11Z",
        "merged_at": null,
        "body": "This flag might be helpful in situations when you want an empty visible label with fully visible ComboBox preview (in a limited space) or when you simply want to save unused space. Right now combobox takes up at least twice of it's label's visible width and does not check for preview width (which makes working with empty labels unbearable). \r\n\r\nI used this solution while working with ComboBox in tables (with ImGuiTableFlags_SizingFixedFit flag), similar example below.\r\n![image](https://github.com/ocornut/imgui/assets/123133847/a9a9b886-8d53-46f6-a8c1-f94716d23526)\r\n![image](https://github.com/ocornut/imgui/assets/123133847/73b0cf03-fdce-4e86-b519-126a417afe64)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-29T03:10:46Z",
        "closed_at": "2023-10-05T09:03:57Z",
        "merged_at": null,
        "body": "See https://github.com/dearimgui/gl3w_stripped/pull/3 for the corresponding change in gl3w_stripped.\r\n\r\nSorry this took some time. This addresses #6668. I have verified an LTO build with a full gl3w now links properly.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-22T14:20:56Z",
        "closed_at": "2023-09-22T15:52:50Z",
        "merged_at": "2023-09-22T15:52:50Z",
        "body": "Comment: Fix a flag name in BeginItemTooltip explanation",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-14T01:40:16Z",
        "closed_at": "2023-09-18T13:31:13Z",
        "merged_at": null,
        "body": "\ud83d\udc4b.\r\n\r\n`The problem`\r\nTab bars in dock nodes draw the bottom line (separator). Tabs trim the top and bottom pixels.\r\n![image](https://github.com/ocornut/imgui/assets/115415388/e8f7da61-693f-4c37-9267-18207839417e)\r\n\r\nThe only solution for disabling that I could find was to hide the bottom line (separator) by pushing a transparent color (see https://github.com/ocornut/imgui/issues/4859, https://github.com/ocornut/imgui/issues/5022, and\u00a0https://github.com/ocornut/imgui/issues/5239). This doesn't remove trimming, leaving 2 pixels of space at the top and bottom, and adds unnecessary calls, \"drawing\" a transparent line.\r\n\r\n`The solution`\r\n* Added a new public flag, \"ImGuiTabBarFlags_NoSeparator\";\r\n* An internal (\"ImGuiTabItemFlags_Preview\") flag already existed and was used once to remove trimming by \"DockNodePreviewDockRender\". It was renamed to \"ImGuiTabItemFlags_NoTrimming\" and is now also assigned by \"TabItemEx\" when the new \"ImGuiTabBarFlags_NoSeparator\" flag is present at its tab bar;\r\n* The \"ImGuiTabBarFlags_NoSeparator\" flag is assigned to tab bars in dock nodes for a better user experience. Previously, users who wanted to disable the line could not do it normally. Now users who want to keep the line can draw it themselves, as shown in the screenshot above.\r\n\r\n`Result`\r\n![image](https://github.com/ocornut/imgui/assets/115415388/2b3a4874-a1bb-4ee2-81b9-b636da48d21a)\r\n\r\nThanks for your time~",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-05T11:31:03Z",
        "closed_at": "2023-09-07T12:10:52Z",
        "merged_at": null,
        "body": "This is upon implementation of the code that I posted and I had issue at https://github.com/ocornut/imgui/issues/6782.\r\nThe generic `CP_ACP` does seem to be prefering the English Layout despite there is different keyboard layout selected.\r\nI implemented member inside `ImGui_ImplWin32_Data` that holds `KeyboardCodePage` and function `ImGui_ImplWin32_UpdateKeyboardCodePage` that updates the keyboard codepage when needed, the update function is called only at initilization and WndProc msg `WM_INPUTLANGCHANGE`.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 21,
        "changed_files": 3,
        "created_at": "2023-08-30T20:11:49Z",
        "closed_at": "2023-08-30T22:02:42Z",
        "merged_at": null,
        "body": "This allows checking if a window is focused/hovered, without a current\r\nwindow. To get the window ID, you can do `ImGui::GetID(\"\")` right after\r\ncalling `ImGui::Begin()`\r\n\r\nSolves #6769\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 586,
        "deletions": 334,
        "changed_files": 3,
        "created_at": "2023-08-29T18:12:06Z",
        "closed_at": "2023-08-29T22:35:45Z",
        "merged_at": null,
        "body": "This makes working with event driven applications much easier.\r\n\r\nIt also gives more control to the handler over whether widgets,\r\nkeyboard/gamepad navigation, etc can handle the input, or not.\r\n\r\nIt might also make more sense to add other event types, such as mouse\r\nenter/leave, and custom user events to the event queue with this now.\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-08-24T08:12:35Z",
        "closed_at": "2023-08-25T12:37:55Z",
        "merged_at": null,
        "body": "The current **example_emscripten_wgpu** demo cannot run properly and will have the following errors:\r\n\r\n![](https://cdn.jsdelivr.net/gh/smileorigin/images/2023/20230824160903.png)\r\n\r\nThe way to fix it is to use `wgpuCreateInstance(nullptr)` to create `wgpu::Surface`, and also add the logic to obtain the best format for the current browser\uff08`Surface:: GetPreferredFormat()`\uff09.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-19T16:02:33Z",
        "closed_at": "2023-08-21T11:15:43Z",
        "merged_at": null,
        "body": "Kindly look at the commit's comments for more information\r\n\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 89,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-08-17T14:20:20Z",
        "closed_at": "2023-08-28T08:52:19Z",
        "merged_at": null,
        "body": "\u2026n/deactivation and editing reports for color widgets and color pickers.\r\n\r\nHi, I found a working solution (and I think a rather elegant one) to #6722.\r\n\r\nBased on `BeginDisabled()`/`EndDisabled()` I added `BeginExcludedFromGroup()`/`EndExcludedFromGroup()`, and used them to fix the various interaction reports fired by the display mode changing context menu for color widgets and pickers. With this exclusion, item interactions don't collect in surrounding groups. Corner cases like a group inside of an excluded popup are handled correctly.\r\n\r\nThe new feature required for the fix also comes in handy for custom widgets.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 65,
        "changed_files": 14,
        "created_at": "2023-08-09T02:56:03Z",
        "closed_at": "2023-08-14T03:59:23Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-04T12:31:00Z",
        "closed_at": "2023-08-04T16:18:57Z",
        "merged_at": "2023-08-04T16:18:57Z",
        "body": "Not much to add here :)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-02T20:37:12Z",
        "closed_at": "2023-08-03T18:15:03Z",
        "merged_at": null,
        "body": "Fixes #6675\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-27T20:05:30Z",
        "closed_at": "2023-08-06T15:25:00Z",
        "merged_at": null,
        "body": "An OOB (out-of-bounds) access can happen inside of `ImDrawList::_CalcCircleAutoSegmentCount`, given a sufficiently large radius value (of approximately 2,147,483,584 or higher).\r\n\r\nThis will happen when attempting to index into the `CircleSegmentCounts` field using an invalid `radius_idx` value.\r\n\r\nThis bug can be reproduced by running the following code:\r\n`DrawList->AddCircle(ImVec2(100, 100), FLT_MAX, 0xFF0000FF);`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-27T19:23:15Z",
        "closed_at": "2023-07-29T14:56:21Z",
        "merged_at": "2023-07-29T14:56:21Z",
        "body": "An ImColor variable cannot be marked as constexpr / constinit when constructed using one of these constructors, as they are not marked as constexpr.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-26T22:51:31Z",
        "closed_at": "2023-07-27T17:46:29Z",
        "merged_at": null,
        "body": "Resolves #4791 (<https://github.com/ocornut/imgui/issues/4791#issuecomment-1652638345>).\r\n\r\nYou can't compile a program using Dear ImGui with the Clang Modules feature\r\nbecause of a C++ Standard library header include that appears not in the global namespace.\r\n~~So unwrap the namespace for the `#include`.~~\r\nSo remove the redundant `#include <string.h>`.\r\n\r\nError log:\r\n```output\r\n/home/johel/Documents/C++/Forks/imgui/imstb_textedit.h:390:1: error: redundant #include of module 'std_string_h' appears within namespace 'ImStb' [-Wmodules-import-nested-redundant]\r\n  390 | #include <string.h>\r\n      | ^\r\n/home/johel/Documents/C++/Forks/imgui/imgui_widgets.cpp:3691:1: note: namespace 'ImStb' begins here\r\n 3691 | namespace ImStb\r\n      | ^\r\n1 error generated.\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-26T08:54:22Z",
        "closed_at": "2023-09-18T16:24:21Z",
        "merged_at": null,
        "body": "I found a color display error in DirectX9 and fixed it",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-25T20:00:51Z",
        "closed_at": "2023-07-26T06:49:27Z",
        "merged_at": null,
        "body": "When I was writing the plugin for L4D2, I noticed that the color display of the imgui was a color deviation caused by some DirectX 9 properties of the game, so I went to him and fixed the sRGB and accompanying Alpha color channel exception.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-07-24T18:20:58Z",
        "closed_at": "2023-08-25T12:51:59Z",
        "merged_at": null,
        "body": "This PR fixes the descriptor pool setup for the Vulkan SDL2 and GLFW examples. The original code passed an unnecessary large set of pool sizes including descriptor types never actually used. It also passed a huge no. of max sets that could be allocated.\r\n\r\nThis has been changed with this PR, which adjusts the pool to what's actually used in the samples: One combined image sampler descriptor type for the font image and one descriptor set.\r\n\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-23T03:42:05Z",
        "closed_at": "2023-07-25T10:01:43Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-21T09:43:40Z",
        "closed_at": "2023-07-25T10:07:52Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-20T23:00:53Z",
        "closed_at": "2023-07-21T12:42:38Z",
        "merged_at": null,
        "body": "SDL_GetWindowWMInfo return 0 on success so putting it into an if like that caused that if to never be entered and it caused a crash on docking branch when ImGui tried to create a new window",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-07-16T18:50:01Z",
        "closed_at": "2023-07-18T09:50:30Z",
        "merged_at": null,
        "body": "This PR does 2 things:\r\n1. Reverts #5625\r\n2. Implements #5625 properly\r\n\r\nBy setting an analogous backend flag to ```ImGuiConfigFlag_NoMouse``` when ```GLFW_CURSOR_DISABLED``` is set, ImGui won't hover items with the virtual cursor, while also providing up-to-date cursor positions (https://github.com/ocornut/imgui/pull/5625#issuecomment-1628600363). \r\nI opted to add a backend flag instead of just using ```ImGuiConfigFlag_NoMouse``` to avoid interfering with the user setting this flag (See also the commit message for da049f3). A version that just uses ```ImGuiConfigFlag_NoMouse``` can be found at the commit c7013bd though.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 173,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-07-10T06:19:48Z",
        "closed_at": "2023-08-01T08:21:20Z",
        "merged_at": null,
        "body": "## Support for OpenType SVG fonts (SVGinOT)\r\n### Motivation\r\n- *SVG in Open Type* is a standard by Adobe and Mozilla for color OpenType and Open Font Format fonts. It allows font creators to embed complete SVG files within a font enabling full color and even animations.\r\n- Popular SVGinOT fonts such as [twemoji](https://github.com/13rac1/twemoji-color-font) and (a build of) [noto-emoji](https://github.com/googlefonts/color-fonts/blob/main/fonts/noto-untouchedsvg.ttf) are currently not supported by dear imgui.\r\n- Using tools like [nanoemoji](https://github.com/googlefonts/nanoemoji) and [scfbuild](https://github.com/13rac1/scfbuild), we can easily make our own custom colorful fonts from SVGs instead of having to [use custom glyphs](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#using-custom-colorful-icons) and deal with bitmap and scaling.\r\n\r\n### How it works\r\n- FreeType provides a way to hook SVG rendering: [svg-hooks](https://freetype.org/freetype2/docs/reference/ft2-properties.html#svg-hooks), [svg-fonts](https://freetype.org/freetype2/docs/reference/ft2-svg_fonts.html#svg_fonts)\r\n- Example code can be found in [freetype-demos/src/rsvg-port.c](https://gitlab.freedesktop.org/freetype/freetype-demos/-/blob/master/src/rsvg-port.c).\r\n\r\n### Enable SVG support and install required libraries\r\n1. Enable FreeType, follow the instructions [here](https://github.com/ocornut/imgui/tree/master/misc/freetype#usage), requires v2.12 and above.\r\n2. Add `#define IMGUI_ENABLE_FREETYPE_OTSVG` in your `imconfig.h`.\r\n3. Install [lunasvg](https://github.com/sammycage/lunasvg) v2.3.2 and above. Get the latest lunasvg binaries or build yourself. Under Windows, you may use vcpkg with: `vcpkg install lunasvg --triplet=x64-windows`.\r\n\r\n### Preview\r\n- Here is a preview of twemoji rendered in dear imgui:\r\n    ![image](https://github.com/ocornut/imgui/assets/136492105/2f2619fd-3fe1-41fb-b138-b3e5352bc3ab)\r\n\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-04T23:32:08Z",
        "closed_at": "2023-07-05T09:01:56Z",
        "merged_at": "2023-07-05T09:01:56Z",
        "body": "SDL3 backend in the docking branch to account for `SDL_WINDOW_SKIP_TASKBAR` being replaced with to `SDL_WINDOW_UTILITY` in the latest SDL3 main branch. See [the migration guide](https://github.com/libsdl-org/SDL/blob/ffcd1c0c26b63c2824050651dfe2e3c67a3de0e9/docs/README-migration.md?plain=1#L1102) for the confirmation.\r\n\r\nI've tested this in my own project and it compiles correctly after this change.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-04T01:20:46Z",
        "closed_at": "2023-07-04T10:23:14Z",
        "merged_at": "2023-07-04T10:23:13Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-01T22:44:28Z",
        "closed_at": "2023-07-03T10:00:17Z",
        "merged_at": null,
        "body": "fixes #6565 \r\n![issue6565](https://github.com/ocornut/imgui/assets/50159766/b55c299c-dc93-44cc-8525-c9fc8c72654d)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-20T10:24:07Z",
        "closed_at": "2023-06-20T13:31:23Z",
        "merged_at": null,
        "body": "The fix added in https://github.com/ocornut/imgui/commit/d96bbf0aae984691e5a9fdcae5d4fd369100ca57 uses `ImGuiTreeNodeFlags_UpsideDownArrow` only if `ImGuiTreeNodeFlags_Framed` is also present. This PR adds identical usage for nodes without the frame. ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-05T17:00:35Z",
        "closed_at": "2023-06-07T11:54:27Z",
        "merged_at": null,
        "body": "The following code draws a triangle using ImDrawList::AddConvexPolyFilled()\r\nwith a rather big fringe scale to be able to visualize it.\r\n```\r\nImGui::PushStyleColor(ImGuiCol_WindowBg, IM_COL32(255,255,255,255));\r\nImGui::Begin(\"AddConvexPolyFilled\", nullptr);\r\nauto dl = ImGui::GetWindowDrawList();\r\ndl->_FringeScale = 20.0;\r\nImVec2 triangle[] = {{250, 50}, {50, 450}, {450, 450}};\r\ndl->AddConvexPolyFilled(triangle, 3, IM_COL32(0,0,0,255));\r\nImGui::End();\r\nImGui::PopStyleColor();\r\n```\r\nThe resulting image follows: The fringe is not visible.\r\nIt seems that currently the fringe is directed inward instead of outward of the polygon.\r\n![current](https://github.com/ocornut/imgui/assets/7933396/aeb1b202-2c0c-4a51-9498-af2a215df1a0)\r\n\r\nAfter this fix, the fringe is now visible:\r\n![after](https://github.com/ocornut/imgui/assets/7933396/ecaa6a05-7a5a-450f-867d-dd6e923be557)\r\nI think this is the expected behavior, right ?\r\nRegards.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-05-31T22:00:55Z",
        "closed_at": "2023-06-01T08:17:32Z",
        "merged_at": "2023-06-01T08:17:32Z",
        "body": "Typing \"abcd\" inserts -65 -64 -63 -62 instead of 65 66 67 68.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-29T20:32:56Z",
        "closed_at": "2023-05-30T08:27:22Z",
        "merged_at": "2023-05-30T08:27:22Z",
        "body": "Resolves #6463 \r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-28T08:18:30Z",
        "closed_at": "2023-05-28T16:08:07Z",
        "merged_at": "2023-05-28T16:08:07Z",
        "body": "> imgui_impl_glfw.cpp.o: undefined symbol: glfwCreateWindowSurface\r\n\r\nWith the latest Emscripten Ports version of GLFW, glfwCreateWindowSurface is not available (which is to be expected as there is no Vulkan support at present).\r\n\r\nThe docking branch of imgui defines GLFW_HAS_VULKAN for any GLFW version above 3.2, which should not apply when building for Emscripten environments.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-05-06T05:34:40Z",
        "closed_at": "2023-05-09T10:12:19Z",
        "merged_at": null,
        "body": "This PR adds the function PopAllStyleColors, which essentially is a version of PopStyleColor() where you do not have to specify the number styles you want to pop. \r\n\r\nThis is specially useful when the count of styles can vary and it helps in a way so you don't have to worry about the \"count\" parameter with extra code. Instead, user can just focus in popping all styles in the color stack.\r\n\r\nExample of a code that shows a gray button when the option is off and a default color button when the option is on:\r\n```cpp\r\n\tif (ImGui::TreeNode(\"Opciones del Builder\"))\r\n\t{\r\n\t\tauto grayColor = IM_COL32(97, 97, 97, 255);\r\n\r\n\t\tstatic bool gridSnapIsActive = false;\r\n\t\tstatic std::string gridSnapLabel = \"GRID SNAP OFF\";\r\n\t\tif (!gridSnapIsActive)\r\n\t\t{\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_Button, grayColor);\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_ButtonHovered, grayColor);\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_ButtonActive, grayColor);\r\n\t\t}\r\n\r\n\t\tif (ImGui::Button(gridSnapLabel.c_str()))\r\n\t\t{\r\n\t\t\tgridSnapIsActive = !gridSnapIsActive;\r\n\t\t\tgridSnapLabel = (gridSnapIsActive) ? \"GRID SNAP ON\" : \"GRID SNAP OFF\";\r\n\r\n\t\t\tmGraphics->GetGraph()->SetSnapToGrid(gridSnapIsActive);\r\n\t\t}\r\n\t\tImGui::PopAllStyleColors();\r\n\r\n\r\n\t\tstatic bool smartGuideIsActive = true;\r\n\t\tstatic std::string smartGuideLabel = \"SMART GUIDES ON\";\r\n\t\tif (!smartGuideIsActive)\r\n\t\t{\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_Button, grayColor);\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_ButtonHovered, grayColor);\r\n\t\t\tImGui::PushStyleColor(ImGuiCol_ButtonActive, grayColor);\r\n\t\t}\r\n\r\n\t\tif (ImGui::Button(smartGuideLabel.c_str()))\r\n\t\t{\r\n\t\t\tsmartGuideIsActive = !smartGuideIsActive;\r\n\t\t\tsmartGuideLabel = (smartGuideIsActive) ? \"SMART GUIDES ON\" : \"SMART GUIDES OFF\";\r\n\r\n\t\t\tmGraphics->GetGraph()->SetSnapToSmartGuides(smartGuideIsActive);\r\n\t\t}\r\n\t\tImGui::PopAllStyleColors();\r\n\r\n\t\tImGui::TreePop();\r\n    }\r\n```\r\n![image](https://user-images.githubusercontent.com/89319333/236602457-59e5335e-35c0-42cb-a33f-509fde0f3cc4.png)\r\n\r\nAlternatively, another option would be that if you don't pass any parameter, all style colors would be deleted by default.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-04-29T22:13:00Z",
        "closed_at": "2023-05-04T15:18:30Z",
        "merged_at": "2023-05-04T15:18:30Z",
        "body": "A recent change (7d40dd4c8c1f9482546fd64d8b963c8888fc6d44) is causing a null pointer dereference on shutdown in the metal backend. This is because `ImGui_ImplMetal_DestroyDeviceObjects` tries to access `BackendRendererUserData`, which is set to `nullptr` before its execution. This PR changes the order so that the objects are destroyed before the pointer is set to null. Similarly, this PR fixes a memory leak on shutdown in the osx backend, where the pointer is also set to null before `IM_DELETE` is called. I have looked whether 7d40dd4c8c1f9482546fd64d8b963c8888fc6d44 introduces issues in other backends as well, but metal and osx seem to be the only ones affected. Thanks!",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-04-26T16:03:44Z",
        "closed_at": "2023-05-09T13:18:51Z",
        "merged_at": null,
        "body": "Visual Pinball uses ImGui to display it's Live UI. \r\n\r\nWhile working on the cross platform port, we were getting a random flicker anytime the Live UI was visible on Android, iOS, and tvOS. The versions all use GL ES 3.0. \r\n\r\nAfter using RenderDoc, we noticed the sampler was different between both frames. \r\n\r\n![Screenshot 2023-04-26 at 11 57 56 AM](https://user-images.githubusercontent.com/1197137/234633260-c95243b0-9b59-4805-a37c-2c44b506636b.jpg)\r\n\r\n`glBindSampler` is supported on [GL ES 3.0+](https://registry.khronos.org/OpenGL-Refpages/es3/html/glBindSampler.xhtml).\r\n\r\nI've updated the code to enable `IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER` when GL ES 3, and then handle it when `IMGUI_IMPL_OPENGL_ES3`\r\n\r\nThis PR can be reworked accordingly as I wasn't sure how to check for ES in `bd->GlVersion`\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-25T21:25:47Z",
        "closed_at": "2023-04-26T14:35:08Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-25T13:42:45Z",
        "closed_at": "2023-04-27T12:38:30Z",
        "merged_at": null,
        "body": "In the question \"How can I load a different font than the default?\" there was a missing parenthesis \")\" in the correct way to use a backslash near size.\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-25T12:28:42Z",
        "closed_at": "2023-04-25T14:25:51Z",
        "merged_at": null,
        "body": "Unary minus can be declared as non-member, so no reason to not expose it. Adds potentially missing functionality for ImVec2 to reduce usage of `IM_VEC2_CLASS_EXTRA`, especially that other math operators can be now easily esposed with `IMGUI_DEFINE_MATH_OPERATORS`.\r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-23T07:04:58Z",
        "closed_at": "2023-04-23T08:39:13Z",
        "merged_at": "2023-04-23T08:39:13Z",
        "body": "Closes #6360 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-04-23T04:52:04Z",
        "closed_at": "2023-04-24T10:18:21Z",
        "merged_at": null,
        "body": "In Vulkan's demo, only discrete GPU has been selected, making the demo unable to run on machines with only integrated GPU.\r\n\r\nThis PR will choose the first device if no discrete GPU is present.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-21T18:34:32Z",
        "closed_at": "2023-04-22T13:37:46Z",
        "merged_at": null,
        "body": "This commit adds a padding byte to INI file reading, which protects against running strlen() on a non-null-terminated buffer in LoadIniSettingsFromMemory() = memory access violation.\r\n\r\nThis bug can be tripped by creating an empty INI file, causing strlen to read beyond the buffer returned by LoadIniSettingsFromDisk()/ImFileLoadToMemory().\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-17T21:15:21Z",
        "closed_at": "2023-04-18T09:31:02Z",
        "merged_at": null,
        "body": "\u2026no label to display\r\n\r\nWhen building custom table header with sorting enabled:\r\n\r\n```\r\n        if ( ImGui::BeginTable( \"##test\", 2, ImGuiTableFlags_Sortable | ImGuiTableFlags_SizingStretchSame, { 600.0f, 300.0f } ) )\r\n        {\r\n            ImGui::TableSetupColumn( \"Column1\", ImGuiTableColumnFlags_WidthFixed, 110.0f );\r\n            ImGui::TableSetupColumn( \"Column2\" );\r\n\r\n            ImGui::TableNextRow( ImGuiTableRowFlags_Headers );\r\n            if ( ImGui::TableSetColumnIndex( 0 ) )\r\n            {\r\n                ImGui::Button( ICON_FA_ARROW_DOWN_A_Z );\r\n\r\n                ImGui::SameLine();\r\n\r\n                const char * column_name = ImGui::TableGetColumnName( 0 );\r\n                ImGui::AlignTextToFramePadding();\r\n                ImGui::Text( column_name );\r\n\r\n                ImGui::SameLine( 0.0f, 0.0f );\r\n\r\n                //! use TableHeader here so we still retain table header highlight and context menu support\r\n                ImGui::TableHeader( \"##column\" );\r\n            }\r\n\r\n            if ( ImGui::TableSetColumnIndex( 1 ) )\r\n                ImGui::TableHeader( ImGui::TableGetColumnName( 1 ) );\r\n\r\n            ImGui::TableNextRow();\r\n\r\n            ImGui::EndTable();\r\n        }\r\n ```\r\nI am calling  ```ImGui::TableHeader( \"##column\" );```  so I still retain native table header highlight and context menu support.\r\n\r\nBut submitting label with no text to display, causes empty tooltip to be shown when the cell is hovered:\r\n<img width=\"482\" alt=\"image\" src=\"https://user-images.githubusercontent.com/48881/232611001-369e0cb9-4171-4923-8ce9-28be4a76b69a.png\">\r\n\r\nThe issue is caused by the calculation of ellipsis_max:\r\n\r\n```\r\n    const float ellipsis_max = cell_r.Max.x - w_arrow - w_sort_text;\r\n```\r\nwhich goes below label_pos.x:\r\n\r\n<img width=\"1011\" alt=\"image\" src=\"https://user-images.githubusercontent.com/48881/232611639-6b95054f-1b6b-4a7b-933b-035ed8a95d7a.png\">\r\n\r\nand makes condition of:\r\n```\r\n    const bool text_clipped = label_size.x > (ellipsis_max - label_pos.x);\r\n```\r\nwrongly positive.\r\n\r\nThis PR forces an assumption that the ellipsis position can not go below the min x position of the label.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-04-17T17:50:21Z",
        "closed_at": "2023-04-18T09:36:10Z",
        "merged_at": null,
        "body": "\u2026Text is deactivated\r\n\r\nCurrently, when InputText is active and is forced to be deactivated with Enter/Escape key it still requests ```WantTextInputNextFrame``` to be set for the next frame which makes ```WantTextInput``` flag to linger one frame longer than it needs to.\r\n\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-04-15T22:54:37Z",
        "closed_at": "2023-04-17T12:45:39Z",
        "merged_at": null,
        "body": "Unlike all other backends' `ImGui_Impl_*_NewFrame()` functions, `ImGui_Impl_GLUT_NewFrame()` called `ImGui::NewFrame()`. This PR aims to make the GLUT backend consistent with the common interface. This is a breaking change, but possible assertion errors are easily fixable.\r\n\r\nMaybe this behavior is intended, I was unable to find any related issues or pull requests though.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-04-15T11:05:47Z",
        "closed_at": "2023-04-17T12:59:35Z",
        "merged_at": null,
        "body": "Android and GLUT backends set `io.BackendPlatformName` during initialization. These backends' shutdowns have previously been no-ops and hence failed to reset `io.BackendPlatformName`. Because they don't use `io.BackendPlatformUserData` only `ImGui::GetCurrentContext()` can be checked. Other backends check for `ImGui::GetCurrentContext() != nullptr` which also fails when `ImGui::GetCurrentContext() == nullptr` and emit the same error message regardless of whether there was no context or no backend data. For this reason it's perfectly consistent to emit the same error message. Consideration about compatibility should be taken: programs may break when they relied on these backends' shutdown not failing. However arguably those could be considered misuses and additionally they'd need to have read the implementation of `ImGui_Impl*_Shutdown` to reason about the safety of calling it out-of-place or multiple times. Having done that they probably wouldn't have called the shutdown function at all (because it didn't do anything). Furthermore, if someone's program breaks due to this change all it takes to exactly restore the old behavior is to not call the shutdown function.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 0,
        "changed_files": 15,
        "created_at": "2023-04-14T21:33:56Z",
        "closed_at": "2023-04-17T12:59:21Z",
        "merged_at": null,
        "body": "Relevant code in `ImGui_ImplOpenGL3_Init()`:\r\n```cpp\r\n#ifdef IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET\r\nif (bd->GlVersion >= 320)\r\n    io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset;  // We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.\r\n#endif\r\n```\r\n(Note: can always be reset, regardless of whether it was actually set on initialization)\r\n\r\n---\r\nRelevant code in `ImGui_ImplGlfw_Init()`:\r\n```cpp\r\nio.BackendFlags |= ImGuiBackendFlags_HasMouseCursors;         // We can honor GetMouseCursor() values (optional)\r\nio.BackendFlags |= ImGuiBackendFlags_HasSetMousePos;          // We can honor io.WantSetMousePos requests (optional, rarely used)\r\n```",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-14T20:59:35Z",
        "closed_at": "2023-04-19T09:57:36Z",
        "merged_at": null,
        "body": "`ImGui_ImplOpenGL3_RenderDrawData()` (in backends/imgui_impl_opengl3.cpp) incorrectly restores `GL_POLYGON_MODE` after rendering. This PR fixes that.\r\nRelevant `glGet*` before setting up and rendering:\r\n```cpp\r\nGLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);\r\n```",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-13T18:16:05Z",
        "closed_at": "2023-04-17T13:00:11Z",
        "merged_at": "2023-04-17T13:00:10Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-04-10T13:56:16Z",
        "closed_at": "2023-04-11T12:12:40Z",
        "merged_at": null,
        "body": "Optimizing, fixed typo",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-04-09T21:57:34Z",
        "closed_at": "2023-04-11T08:01:53Z",
        "merged_at": "2023-04-11T08:01:53Z",
        "body": "This PR adds support for mouse sources to the Android backend similar to https://github.com/ocornut/imgui/commit/f070497cbdccbb0b50d9419d9774612531b4ee02 for other backends.\r\n\r\nI am marking this as a draft for now as I can't currently test the changes properly.\r\n\r\nIt turns out the old Android phone I use for testing web stuff in mobile Chrome is far too old to run the example or even be targeted by the current version of Android Studio at all. (It's running KitKat \ud83d\ude05)\r\n\r\nUnfortunately the emulator is not really suitable to properly test this change as you can only simulate touch and not pen or mouse input. (I did confirm that it at least properly identifies things as touch in the emulator, but it'd be nice to at least see it identify a Bluetooth mouse properly.)\r\n\r\nA generous friend has promised me his old-but-still-modern Android phone, so when I get that in May I'll be able to test this change properly if someone else doesn't volunteer to test it for me before then.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-04-09T20:43:03Z",
        "closed_at": "2023-04-11T08:16:05Z",
        "merged_at": null,
        "body": "This PR adds support for mouse sources to the macOS backend similar to https://github.com/ocornut/imgui/commit/f070497cbdccbb0b50d9419d9774612531b4ee02 for other backends.\r\n\r\n---------------\r\n\r\nI also marked the \"mouse\" input in `example_apple_metal`'s UIKit micro-backend as coming from touch since these devices are touch-first. Since this micro-backend is pretty scrappy I did not spend much effort trying to find how to detect mice or the Apple Pencil on UIKit devices. (I can confirm though that it is at least *different* from AppKit.)\r\n\r\n--------------\r\n\r\n(The remaining is mostly a rehash of the conversation we already had off of GitHub, leaving it here for posterity.)\r\n\r\nmacOS treats trackpads and even Apple Magic Mice as touch devices. ([The former is documented here](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/HandlingTouchEvents/HandlingTouchEvents.html#//apple_ref/doc/uid/10000060i-CH13-SW24).) As such, this change does not support `ImGuiMouseSource_TouchScreen` for macOS since Dear ImGui's concept of touch input expects absolute touch.\r\n\r\nI left some comments indicating as such, so maybe someone more familiar with macOS will see them and can tell us how to tell the difference between relative and absolute touch devices. However I suspect macOS might not actually support it in the first place as AFAIK there are no first-party touch screen devices for the platform and third party devices like touch-enabled Wacom tablets [use a special third-party SDK](https://developer-docs.wacom.com/intuos-cintiq-business-tablets/docs/multitouch-framework-overview).\r\n\r\nI thought [Sidecar](https://support.apple.com/en-us/HT210380) might be a first-party touch screen for macOS, but it turns out it doesn't actually act like a touch screen. (You can only use Apple Pencil with it or trackpad-like gestures. No absolute touch input -- presumably because the macOS UI is not designed for it. -- I confirmed this with a friend who regularly uses Sidecar with his Mac.)\r\n\r\nI tried to find out what macOS does in the presence of a generic touchscreen HID, but I own no such devices and could not find a friend with one. I found a few vague Reddit threads implying it acts like a giant trackpad, but nothing definitive since search results are overwhelmed by rumors of Apple releasing touchscreen MacBooks in 2024.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 284,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-03-31T11:39:11Z",
        "closed_at": "2023-05-30T18:30:30Z",
        "merged_at": "2023-05-30T18:30:30Z",
        "body": "Since SDL3 has changed naming convention for its functions, I propose this fix with two new files (imgui_impl_sdlrenderer3.cpp and imgui_impl_sdlrenderer3.h) where I simply updated the names of the functions that concern sdl, this way it works perfectly also with sdl3",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 934,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-03-23T16:09:56Z",
        "closed_at": "2023-03-24T05:41:24Z",
        "merged_at": null,
        "body": "Implemented a backend for the BGFX library. If you don't know [BGFX](https://github.com/bkaradzic/bgfx) is a rendering library that supports a lot of backends even ones like Gnm for Playstation. I think it would be benefitial for ImGui to have direct support for this rendering library (similar to the support for allegro). BGFX has its own examples related to ImGui but it is a bit harder to setup that if ImGui provided this.\r\n\r\nThere is even something called BIGG stack which is (BGFX, ImGui, GLFW, GLM).\r\n\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-03-20T21:16:21Z",
        "closed_at": "2023-03-21T11:10:22Z",
        "merged_at": null,
        "body": "Fix typed in values are ignored when SliderInt's format specifier includes the + flag:\r\n\r\n> +: the sign of signed conversions is always prepended to the result of\r\n> the conversion (by default the result is preceded by minus only when it\r\n> is negative)\r\n\r\nAlso skip the # flag since it seems valid to use (esp. for octal and hex):\r\n\r\n> \\# : alternative form of the conversion is performed. See the table\r\n> below for exact effects otherwise the behavior is undefined.\r\n\r\nThere are two additional unhandled flags that only affect padding:\r\n- and space. Formatting flags don't make sense in a SliderInt's format string, so I've omitted them.\r\n\r\n# Test\r\nIn this example, editing the value by dragging it to +80\u00ba works but when Ctrl-clicking and typing in 10 it reverts to the previous value after hitting Enter:\r\n\r\n```\r\n\tif (ImGui::Begin(\"Hello\"))\r\n\t{\r\n\t\tstatic int val = 0;\r\n\t\tImGui::SliderInt(\"Slider\", &val, 0, 100, \"%+d\u00ba\");\r\n\t\tImGui::End();\r\n\t}\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-03-18T23:27:38Z",
        "closed_at": "2023-03-21T15:52:22Z",
        "merged_at": null,
        "body": "Version 1.89.4's release notes mention that events can now be added to any context:\r\n\r\n> IO: Lifted constraint to call io.AddEventXXX functions from current context. (https://github.com/ocornut/imgui/issues/4921, https://github.com/ocornut/imgui/pull/5856, https://github.com/ocornut/imgui/issues/6199)\r\n\r\nHowever this is broken:\r\n- `FindLatestInputEvent` called by most AddXXXEvent functions uses the current global context\r\n- `AddKeyEvent` calls `ImGui::GetKeyData` which also uses the current context\r\n- `AddMouseViewportEvent` from the docking branch still has the old \"Can only add events to current context\" assertion\r\n\r\nThere's probably a better solution for `GetKeyData` than temporarily changing the current context. This PR is based on the docking branch because of the last `AddMouseViewportEvent` fix. The first two commits cleanly apply to the current master branch.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-18T22:27:50Z",
        "closed_at": "2023-03-21T11:18:30Z",
        "merged_at": null,
        "body": "SDL_CreateWindow has been simplified and it doesn't take position anymore so SDL_SetWindowPosition is called immediately after.\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-03-18T21:04:28Z",
        "closed_at": "2023-03-21T16:48:27Z",
        "merged_at": null,
        "body": "Fix of https://github.com/ocornut/imgui/issues/5200 by [jamesthomasgriffin](https://github.com/jamesthomasgriffin)\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/87640847/226140001-e610cda9-2ce3-4b9c-8e5c-ecf19349da0b.png)\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/87640847/226140009-91113488-e9a9-4ecf-a72c-9a36af179add.png)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2023-03-07T06:35:28Z",
        "closed_at": "2023-03-07T13:01:38Z",
        "merged_at": null,
        "body": "This PR fixes the Android build, which was broken since using Gradle 8.x (which is now the default on the ubuntu-22.04 Actions runner).\r\n\r\nDetails:\r\n- Updated the Gradle files to use recent versions of the NDK, Android Gradle plugin, etc.\r\n- Removed deprecation warning regarding the package name in `AndroidManifest.xml`\r\n- Added `--stacktrace` to the `gradle assembleDebug` command to see future errors early in the log",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-03-05T01:48:35Z",
        "closed_at": "2023-03-06T10:56:35Z",
        "merged_at": null,
        "body": "This PR fixes #6220 by adding validity checks before restoring the OpenGL program binding.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-04T18:55:18Z",
        "closed_at": "2023-03-07T13:09:34Z",
        "merged_at": null,
        "body": "Hi,\r\nThis crash happens when my application loads a proprietary plugin, which hijacks the window context to display it's own UI.\r\nWhen the plugin is running, the imgui callbacks are still called with a null backend data which makes the code using it crash. When the proprietary plugin closes its UI, the backend data is available again.\r\nChecking if the backend data pointer is null and returning early fixes this issue.\r\nLet me know if that sounds like a reasonable fix.\r\nCheers,\r\nCyril\r\n\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-02-23T12:35:25Z",
        "closed_at": "2023-02-23T14:12:02Z",
        "merged_at": null,
        "body": "This is a casual suggestion for hot-fixing a bug that I'm encountering when using an ImGui UI in a virtual machine. The reason I needed this hotfix is because, without it, an assertion elsewhere in ImGui (`Assertion (g.IO.DeltaTime > 0.0f || g.FrameCount == 0) && \"Need a positive DeltaTime!`) will trigger and crash the application (downstream: https://github.com/ComputationalBiomechanicsLab/opensim-creator/issues/617)\r\n\r\nThis issue appears to be related to #6114 and #3644. The difference here is that I'm running ImGui in a standard x86_64 Ubuntu22 desktop environment, rather than as a wasm binary in a browser - *but* I'm running it inside a VirtualBox VM, which may trigger various hypervisor/CPU mitigations etc. that aren't enabled in a bare-metal machine.\r\n\r\n---\r\n\r\n# More Context\r\n\r\nI develop [OpenSim Creator](https://github.com/ComputationalBiomechanicsLab/opensim-creator), which uses ImGui+SDL+OpenGL to render:\r\n\r\n\r\n![screenshot](https://user-images.githubusercontent.com/4730570/220907178-301c90e6-1805-4122-9d46-2c3f86edbcb5.png)\r\n\r\nWhenever I do a full QA pass on it (e.g. [right now, for 0.4.0](https://github.com/ComputationalBiomechanicsLab/opensim-creator/milestone/3)) I try to go through all of the documentation, new features, etc. manually on a Linux build with `NDEBUG=0`, all assertions force-enabled, `libASAN`, sometimes `valgrind` etc. to ensure that as many runtime bugs as possible are shook out before shipping (this should probably be automated :wink:).\r\n\r\nTo do that, I use a VM because it means I can mostly keep developing on my Windows machine, and it's easier to snapshot VMs, have multiple OSes, etc. - it's not that I believe my UI is likely to be used in a VM very often :-)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-02-23T08:01:16Z",
        "closed_at": "2023-08-29T20:34:11Z",
        "merged_at": null,
        "body": "The wgpu backend was only compatible with emscripten's flavor of WebGPU, which does not exactly match [the officiel webgpu native headers](https://github.com/webgpu-native/webgpu-headers).\r\n\r\nThis PR adds support for the two main (and only?) implementations of WebGPU that one can use when building native binary applications instead of wasm:\r\n\r\n - [Dawn](https://dawn.googlesource.com/dawn) (Chrome's C++ backend)\r\n - [wgpu-native](https://github.com/gfx-rs/wgpu-native) (binding Firefox' Rust backend)\r\n\r\nThe header assumes that the following macros are defined:\r\n\r\n - `WEBGPU_BACKEND_WGPU` iff wgpu-native backend is used\r\n - `WEBGPU_BACKEND_DAWN` iff Dawn backend is used\r\n - If none of the above is defined, `WEBGPU_BACKEND_EMSCRIPTEN` is assumed\r\n\r\n**NB** These macros are automatically defined in the [WebGPU-binaries](https://github.com/eliemichel/WebGPU-binaries) distributions (`main` branch uses wgpu-native, `dawn` branch uses Dawn) which are used in my [LearnWebGPU for native C++](https://eliemichel.github.io/LearnWebGPU) tutorial series. This gives the context in which I adapted this wgpu backend.\r\n\r\n**Notable changes**\r\n\r\n - Switch to WGSL shaders instead of SPIR-V binary blobs\r\n - Add gamma correction when the target texture format requires it (ending with \"Srgb\")\r\n - Handle the Release methods, which are not specified in the standard webgpu.h header and have different names in the wgpu-native implem.\r\n - Align buffer sizes to 16 bytes",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 1320,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-02-20T08:55:54Z",
        "closed_at": "2023-02-20T17:29:38Z",
        "merged_at": null,
        "body": null,
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-17T19:35:59Z",
        "closed_at": "2023-02-20T13:43:40Z",
        "merged_at": "2023-02-20T13:43:40Z",
        "body": "As titled",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-02-16T18:15:56Z",
        "closed_at": "2023-04-13T13:49:43Z",
        "merged_at": null,
        "body": "@omar, @zao, @wolfpld I accidentally closed last PR. Here is the update version of #6109  \r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-02-09T20:59:24Z",
        "closed_at": "2023-02-14T14:40:12Z",
        "merged_at": null,
        "body": "GL_MAJOR_VERSION and GL_MINOR_VERSION are available on GL 3.0 and above. So we have to parse GL_VERSION under GL 2.x\r\n\r\nReference https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_information_queries\r\nRegressed since 459de65477423360176447e79df2f3a785b71f3d\r\nSee https://github.com/ocornut/imgui/pull/3530\r\n",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 727,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-02-04T16:37:03Z",
        "closed_at": "2023-02-07T15:38:23Z",
        "merged_at": null,
        "body": "### SDL 3 Backend\r\n\r\nI literally just today wanted to update my engine to SDL3 and found that ImGui backend no longer works, therefore I translated the backend according to SDL3 rules, and as far as I've tested things, everything seems to work.\r\n\r\nScreenshots:\r\n\r\n<img width=\"1052\" alt=\"image\" src=\"https://user-images.githubusercontent.com/29017432/216778864-18b51977-78c1-4cda-9097-7ca6577055b7.png\">\r\n",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-02-02T23:15:41Z",
        "closed_at": "2023-02-03T19:07:05Z",
        "merged_at": null,
        "body": "In issue #4612 there is a comment about a [hash collision][1] in the `ShowDemoWindow`, in the \"Synced Tables\" section. As it happens there _is_ a collision, but it is not a because of a random chance, but because of how CRC32 works and a faulty assumption in the code, that this PR tries to fix.\r\n\r\nThe issue is in `imgui_tables.cpp:336` that creates a new ID by taking the old ID and adding a number.\r\n```\r\nconst ImGuiID instance_id = id + instance_no;\r\n```\r\nThat looks innocent enough, the hash is different. But later, it does:\r\n```\r\nPushID(instance_no * 3 + column_n);\r\n```\r\nThat basically translates to `PushID(0)`, `PushID(1)`, `PushID(2)`, `PushID(3)`... that in turn will call `ImHashData(&n, sizeof(int), instance_id);`.\r\n\r\nNow, let's see what happens when `id` ends with an hexadecimal 0x1. On one hand we call `ImHasData(&0, sizeof(int), 0xXYZ1)`. That if we look into the CRC32 code will do this line 4 times, being `*data == 0` in all of them:\r\n```\r\ncrc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ *data++]\r\n```\r\nSometime later `instance_no=1` and `column_n=0` it will call `ImHashData(&3, sizeof(int), 0xXYZ2)` that will call the same crc code once with `*data==3` and three times with `*data==0`.\r\n\r\nBut if we compare the first computation of CRC in both cases:\r\n```\r\n/*n=0*/ crc = (0xXYZ1 >> 8) ^ crc32_lut[(0xXYZ1 & 0xFF) ^ 0];\r\n/*n=3*/ crc = (0xXYZ2 >> 8) ^ crc32_lut[(0xXYZ2 & 0xFF) ^ 3];\r\n```\r\nSimplifying a bit:\r\n```\r\n/*n=0*/ crc = 0xXY ^ crc32_lut[0xZ1];\r\n/*n=3*/ crc = 0xXY ^ crc32_lut[0xZ2 ^ 3];\r\n```\r\nBut `0xZ2 ^ 3 == 0xZ1`!! And the next 3 input bytes are identical, and both functions will return the same hash!\r\n\r\nThis is not actually a weakness in CRC32 as it is not an intended use. Changing the seed using an arbitrary arithmetic operation may raise unwanted patterns in the output of the hash. The proper way to derive a new seed is to always run the CRC kernel.\r\n\r\nSo I wrote a small `ImHashAdd()` that does the moral equivalent to an addition, actually calling `ImHashData`.\r\n\r\nI reviewed the whole Dear ImGui codebase and I only found this instance of adding a number to an ID. But maybe I skipped some, or maybe third-party code does it willy-nilly. This is why in addition to this PR I opened thos other one #6138 recommending changing the hash algorithm to a more sophisticated one.\r\n\r\nI'm not sure that is worth it, but other option to avoid unwanted arithmetic to IDs would be to typedef it not to be an integer, a new-type pattern:\r\n```\r\ntypedef unsigned int        ImGuiID_;\r\nstruct ImGuiID { ImGuiID_ id; };\r\n```\r\nThen `ImHashAdd()` could be converted into `ImGuiID::operator+(int)` and everybody would be happy.\r\n\r\n\r\n\r\n[1]: https://github.com/ocornut/imgui/issues/4612#issuecomment-939421854",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-01-30T17:41:14Z",
        "closed_at": "2023-01-31T17:07:42Z",
        "merged_at": null,
        "body": "When using the Light style, the font texture displayed in the demo window (Widgets/Images) and the Metrics/Debug window is white on a light background and nearly unreadable (especially the magnified part under the mouse cursor)\r\n\r\n![font-texture-white-tint](https://user-images.githubusercontent.com/5308037/215549964-faf86407-a88c-40e8-a564-1b2cbe5873e2.png)\r\n\r\n![metric-debug-white-tint](https://user-images.githubusercontent.com/5308037/215550011-2d8b2c59-d3a5-4ecd-93ae-69250a057402.png)\r\n\r\nThis is caused by a fixed white tint being applied to the font texture image which is fine for the Dark and Classic styles but is not suitable for the Light style.\r\n\r\n`ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);`\r\n\r\nChanging the tint_col to use the styles text colour fixes the image display for the Light style and leaves the Dark and Classic styles unchanged as their font colour is light\r\n\r\n`ImVec4 tint_col = ImGui::GetStyleColorVec4(ImGuiCol_Text);`\r\n\r\nResult with fixed applied\r\n\r\n![font-texture-style-tint](https://user-images.githubusercontent.com/5308037/215551213-3f72b24e-cb10-4e83-bec5-f4eab76fd9c9.png)\r\n\r\n![metric-debug-style-tint](https://user-images.githubusercontent.com/5308037/215551279-1e7e20d8-de49-472a-9753-18e79c3f9ebc.png)\r\n\r\nDark style unaffected - before -\r\n\r\n![dark-style-white-tint](https://user-images.githubusercontent.com/5308037/215551403-87076085-22ec-418d-9ed7-2d49a5b72bc9.png)\r\n\r\nAfter -\r\n\r\n![dark-style-use-style-tint](https://user-images.githubusercontent.com/5308037/215551447-af3ecd15-5018-4a39-b782-b9ebbd695821.png)\r\n\r\n\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-23T16:22:26Z",
        "closed_at": "2023-01-25T13:17:40Z",
        "merged_at": null,
        "body": "This PR covers a quite uncommon corner case with SDL under emscripten.\r\n\r\nConsecutive calls to SDL_GetPerformanceCounter() might lead to the same result, which will result in `IM_ASSERT(g.IO.DeltaTime > 0.0f)` to fail later, inside `ImGui::ErrorCheckNewFrameSanityChecks()`\r\n\r\nThis happens only under emscripten, and with specific javascript engines (it is quite common with Safari under macOS, but does not happen with firefox under macOS).\r\n\r\n\r\n\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-01-22T12:33:56Z",
        "closed_at": "2023-02-16T18:12:39Z",
        "merged_at": null,
        "body": "Since VulkanSDK 1.3.216 it is mandatory to use the `VK_KHR_PORTABILITY_subset` extension. Fixed by adding\r\n```cpp\r\ncreate_info.flags = VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;\r\n```\r\naswell as adding `VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME` and `VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME` to the extensions array.\r\nIssue: #6101\n**Note:**\nMaybe considure changing the extensions array to a vector, for better readability and for easier adding new extensions. ",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-18T22:55:07Z",
        "closed_at": "2023-04-28T13:42:35Z",
        "merged_at": null,
        "body": "A couple of small fixes for targeting GLFW with Emscripten.\r\n\r\nPlease let me know if anything needs improving \ud83d\ude42 ",
        "comments": 32
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 30,
        "changed_files": 2,
        "created_at": "2023-01-18T10:17:28Z",
        "closed_at": "2023-01-20T23:56:57Z",
        "merged_at": null,
        "body": "Increase the maximum number of columns in tables from 64 to 320.\r\n\r\nThis PR is developed from a patch file originally contributed by @Necrolis in issue https://github.com/ocornut/imgui/issues/3572.\r\n\r\nI've been applying these changes to various versions of ImGui on Kubuntu for approximately 2 years and have had no issues with tables larger than 64 columns. It works well combined with the clipper. \r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-16T18:30:53Z",
        "closed_at": "2023-01-18T18:05:42Z",
        "merged_at": null,
        "body": "I think it would be a great idea to show more feedback when the combo box is active. This flips the arrow on the right side of the combo box when it is active (just like in treenodes, collapsing headers, etc.)\r\n\r\nBefore:\r\n\r\n![Before](https://cdn.discordapp.com/attachments/783966433641365504/1064610812829900800/before.gif)\r\n\r\nAfter:\r\n\r\n![After](https://cdn.discordapp.com/attachments/783966433641365504/1064610813152870511/after.gif)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 498,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-01-15T16:29:24Z",
        "closed_at": "2023-04-19T14:56:27Z",
        "merged_at": null,
        "body": "I've added an example on how to use the win32 opengl api in use with dear imgui.\r\nyou can ignore the existing templates with upgrading platform toolset.\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-14T17:25:50Z",
        "closed_at": "2023-01-24T14:59:41Z",
        "merged_at": null,
        "body": "Fixes a typo in the readme",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14181,
        "deletions": 69,
        "changed_files": 19,
        "created_at": "2023-01-10T03:39:06Z",
        "closed_at": "2023-01-10T07:28:38Z",
        "merged_at": null,
        "body": "(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\n1. PLEASE CAREFULLY READ: [Contributing Guidelines](https://github.com/ocornut/imgui/blob/master/docs/CONTRIBUTING.md)\r\n\r\n2. Clear this template before submitting your PR.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-01-09T10:22:36Z",
        "closed_at": "2023-03-22T19:50:47Z",
        "merged_at": null,
        "body": "This change includes period (`.`) as a delimiter so that pressing `ctrl+arrow key` or `ctrl+backspace/delete` in InputText fields doesn't skip past them.\r\n\r\nHitting `ctrl+backspace` with the cursor at the end of a buffer containing a command in the form `cmd.shadows.enabled|` will, after this change, result in `cmd.shadows.|` where previously the entire buffer would be cleared.\r\n\r\nThis change also introduces support for `ctrl+delete`, matching the behavior of `ctrl+backspace` but in the opposite direction. `shift+delete` still works to cut text with this change.\r\n\r\nThese are standard behaviors in all text editors, so this change makes `InputText` widgets better match what users' intuitions are.\r\n\r\nIn the following video you can see the effect of consecutively pressing `ctrl+backspace`, and then once again from the beginning with `ctrl+delete`:\r\n\r\nhttps://user-images.githubusercontent.com/4230924/211286064-444de394-a48b-474c-8fd2-815ff9da4053.mp4\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-01-03T01:27:29Z",
        "closed_at": "2023-01-03T07:28:58Z",
        "merged_at": null,
        "body": "Often I have felt the need for specifying the bg color for specific Dear ImGui windows. Since I couldn't find the feature, I have added one myself and therefore creating a PR.\r\n\r\nUsage\r\n```C++\r\nImGui::SetNextWindowSize(ImVec2(400, 400), ImGuiCond_FirstUseEver);\r\nImGui::Begin(\"3D Exhibitor\");\r\n\r\nImVec4 bgColor;\r\nbgColor.x = 1.0f;\r\nbgColor.y = 0.75f;\r\nbgColor.z = 0.80f;\r\nbgColor.w = 1.0f;\r\n\r\nImGui::GetCurrentWindow()->DrawList->SetWindowBackgroundColor(bgColor);\r\n\r\nImGui::End();\r\n```\r\nThe result is like so\r\n\r\n![image](https://user-images.githubusercontent.com/2173654/210289611-be15aac5-08a6-4397-80e5-2945b94968f2.png)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-12-24T06:01:17Z",
        "closed_at": "2023-01-02T14:03:28Z",
        "merged_at": null,
        "body": "see #5974 \r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-12-19T17:37:24Z",
        "closed_at": "2022-12-20T05:44:12Z",
        "merged_at": null,
        "body": "Hi! This pull request contains fixes for two small bugs we noticed when performing static analysis on one of our projects that uses Dear ImGui.\r\n\r\n1. In `ScrollToRectEx()`, when scrolling horizontally to center a rectangle that could be fully visible, the computation of the X scroll position averages the minimum X coordinate and the maximum Y coordinate, rather than the minimum and maximum X coordinates:\r\n\r\nhttps://github.com/ocornut/imgui/blob/59b63defe5421642fb0cdcfd1fa850fc85a13791/imgui.cpp#L9669\r\n\r\nI figure this should probably be `... (item_rect.Min.x + item_rect.Max.x) * 0.5f ...`, based on the code for centering along the Y axis later in the function:\r\n\r\nhttps://github.com/ocornut/imgui/blob/59b63defe5421642fb0cdcfd1fa850fc85a13791/imgui.cpp#L9684\r\n\r\n2. When the `stbtt__cid_get_glyph_subrs()` function of `stb_truetype` and Dear ImGui's `imstb_truetype` fork encounters an error, it constructs a null `stbtt__buf` object, but then doesn't return it (returning a null `stbtt_buf` is common in other parts of the codebase). This is a bug in the upstream version of `stb_truetype`, and we've created [a pull request](https://github.com/nothings/stb/pull/1422) there, but here's the fix applied to Dear ImGui's fork in case it saves time!\r\n\r\nPlease let me know if there's anything I can do to help integrate these; for instance, although I've combined them here (since they are small individually), I'm happy to separate them into individual branches.\r\n\r\nThank you!",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 70,
        "changed_files": 1,
        "created_at": "2022-12-16T16:01:47Z",
        "closed_at": "2023-01-02T15:30:58Z",
        "merged_at": null,
        "body": "Do not set VkDescriptorSetLayoutBinding::pImmutableSamplers\r\n    \r\nFrom https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBinding.html :\r\n    \r\n\"pImmutableSamplers affects initialization of samplers. If descriptorType specifies a VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER type descriptor, then pImmutableSamplers can be used to initialize a set of immutable samplers. Immutable samplers are permanently bound into the set layout and must not be changed; updating a VK_DESCRIPTOR_TYPE_SAMPLER descriptor with immutable samplers is not allowed and updates to a VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER descriptor with immutable samplers does not modify the samplers (the image views are updated, but the sampler updates are ignored).\"\r\n    \r\nSo setting it means the same sampler will be used for all textures, basically making sampler argument to `ImGui_ImplVulkan_AddTexture()` useless.\r\n    \r\nFixes #5502 .\r\n\r\n(Also removes some dead code, see first commit, to not have to make same fix in two places.)\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-12-10T16:34:55Z",
        "closed_at": "2023-01-02T15:04:50Z",
        "merged_at": null,
        "body": "Fixes MSVC warning C4390 when `/W3` and `/DIMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS` are specified. \r\n\r\nMinimal repro commandline:\r\n\r\n```batch\r\ncl /W3 -c *.cpp -DIMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS\r\n```\r\n\r\nThis warning is triggered when `IMGUI_DEBUG_PRINTF` is defined as empty and is called as the only statement for `if`, e.g.:\r\n\r\n```c++\r\nif (condition)\r\n    IMGUI_DEBUG_PRINTF(\"abc\");    // When IMGUI_DEBUG_PRINTF is empty, the compiler only sees the remaining semicolon.\r\n```\r\n\r\nThis PR defines `IMGUI_DEBUG_PRINTF` as non-empty with the good old `do{}while(0)` trick.\r\n\r\nAn alternative solution is to add braces to the call-site so the if-statement becomes the following after preprocessing:\r\n\r\n```c++\r\nif (condition)\r\n{\r\n    ;    // MSVC seems content with this.\r\n}\r\n```\r\n\r\nHere's a godbolt link with x64 MSVC v19.latest and /W4 that contains both solutions (just change the #define at the top to choose the solution): https://godbolt.org/z/a4TKfMPnv\r\n\r\nCheers and thanks for this awesome library!\r\n\r\nMSVC version: 19.34.31933 for x64\r\nOS: Windows 11 Pro 22H2 (22621.819)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-12-09T22:51:14Z",
        "closed_at": "2022-12-23T10:42:20Z",
        "merged_at": null,
        "body": "sdl uses it's own set of macros for the fields in SDL_SysWMinfo. For windows, it uses `SDL_VIDEO_DRIVER_WINDOWS`.\r\n\r\nOn winrt however, `SDL_VIDEO_DRIVER_WINRT` is defined instead.\r\n\r\nthis breaks the sdl backend when used for winrt",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-12-07T20:06:09Z",
        "closed_at": "2022-12-08T09:21:52Z",
        "merged_at": null,
        "body": "Instead of doing this:\r\n``` cpp\r\nImVec2 vec3 = ImVec2(vec1.x + vec2.x, vec1.y + vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x - vec2.x, vec1.y - vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x * vec2.x, vec1.y * vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x / vec2.x, vec1.y / vec2.y);\r\n/// OR ->>>\r\nImVec2 vec3 = ImVec2(vec1.x + 10, vec1.y + 10);\r\nImVec2 vec3 = ImVec2(vec1.x - 10, vec1.y - 10);\r\nImVec2 vec3 = ImVec2(vec1.x * 10, vec1.y * 10);\r\nImVec2 vec3 = ImVec2(vec1.x / 10, vec1.y / 10);\r\n```\r\nUse the operators alternative:\r\n``` cpp\r\nImVec2 vec3 = vec1 + vec2;\r\nImVec2 vec3 = vec1 - vec2;\r\nImVec2 vec3 = vec1 * vec2;\r\nImVec2 vec3 = vec1 / vec2;\r\n/// OR ->>>\r\nImVec2 vec3 = vec1 + 10;\r\nImVec2 vec3 = vec1 - 10;\r\nImVec2 vec3 = vec1 * 10;\r\nImVec2 vec3 = vec1 / 10;\r\n```\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-12-07T20:02:08Z",
        "closed_at": "2022-12-08T09:20:15Z",
        "merged_at": null,
        "body": "Instead of doing this:\r\n``` cpp\r\nImVec2 vec3 = ImVec2(vec1.x + vec2.x, vec1.y + vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x - vec2.x, vec1.y - vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x * vec2.x, vec1.y * vec2.y);\r\nImVec2 vec3 = ImVec2(vec1.x / vec2.x, vec1.y / vec2.y);\r\n/// OR ->>>\r\nImVec2 vec3 = ImVec2(vec1.x + 10, vec1.y + 10);\r\nImVec2 vec3 = ImVec2(vec1.x - 10, vec1.y - 10);\r\nImVec2 vec3 = ImVec2(vec1.x * 10, vec1.y * 10);\r\nImVec2 vec3 = ImVec2(vec1.x / 10, vec1.y / 10);\r\n```\r\nUse the operators alternative:\r\n``` cpp\r\nImVec2 vec3 = vec1 + vec2;\r\nImVec2 vec3 = vec1 - vec2;\r\nImVec2 vec3 = vec1 * vec2;\r\nImVec2 vec3 = vec1 / vec2;\r\n/// OR ->>>\r\nImVec2 vec3 = vec1 + 10;\r\nImVec2 vec3 = vec1 - 10;\r\nImVec2 vec3 = vec1 * 10;\r\nImVec2 vec3 = vec1 / 10;\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2022-12-06T22:24:36Z",
        "closed_at": "2023-01-24T20:53:02Z",
        "merged_at": null,
        "body": "The current win32 examples will truncate the window title if you try to modify it with `Platform_SetWindowTitle`.\r\n\r\nBefore\r\n![image](https://user-images.githubusercontent.com/814966/206033959-d4686dd4-7363-45bc-ba34-efa495dc9a6e.png)\r\nAfter\r\n![image](https://user-images.githubusercontent.com/814966/206034037-ed4d4ea1-e665-4a78-b3db-fdea2cef1e85.png)\r\n\r\nIt took me a while to figure out it was because the examples are using `DefWindowProc` instead `DefWindowProcW`.\r\nThe issue is `setWindowTextW`  sends a `WM_SETTEXT` message to `WndProc` and gets interpreted as ascii.\r\nMaybe this fix will help others from having to debug this issue when they are getting started using the examples :)",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-12-04T01:29:18Z",
        "closed_at": "2022-12-04T10:43:55Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-11-30T20:04:05Z",
        "closed_at": "2022-12-01T16:45:48Z",
        "merged_at": null,
        "body": "Currently, the condition checks for `__SSE__`, `__x86_64__`, or `_M_X64` macros, none of which are defined when building in 32-bit mode with MSVC.  The correct macros to check is `_M_IX86_FP`:\r\n\r\n> _M_IX86_FP Defined as an integer literal value that indicates the [/arch](https://learn.microsoft.com/en-us/cpp/build/reference/arch-arm?view=msvc-170) compiler option that was set, or the default. This macro is always defined when the compilation target is an x86 processor. Otherwise, undefined. When defined, the value is:\r\n> \r\n> 0 if the /arch:IA32 compiler option was set.\r\n> \r\n> 1 if the /arch:SSE compiler option was set.\r\n> \r\n> 2 if the /arch:SSE2, /arch:AVX, /arch:AVX2, or /arch:AVX512 compiler option was set. This value is the default if an /arch compiler option wasn't specified. When /arch:AVX is specified, the macro __AVX__ is also defined. When /arch:AVX2 is specified, both __AVX__ and __AVX2__ are also defined. When /arch:AVX512 is specified, __AVX__, __AVX2__, __AVX512BW__, __AVX512CD__, __AVX512DQ__, __AVX512F__, and __AVX512VL__ are also defined.\r\n> \r\n\r\nPlease refer to [this page](https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?redirectedfrom=MSDN&view=msvc-170) for details.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-11-30T17:45:49Z",
        "closed_at": "2023-01-05T23:45:09Z",
        "merged_at": null,
        "body": "`examples/example_sdl_sdlrenderer` is unnecessarily complex and doesn't work properly on Mac. (Ventura 13.0.1) We can keep it as it is but I would like to fix the UI so that other Mac users can get ImGui easily up and running.\r\n\r\nThe `SDL_WINDOW_ALLOW_HIGHDPI` is not worth the confusion it can cause to new ImGui users. \r\n\r\n**Before:**\r\n\r\nhttps://user-images.githubusercontent.com/14946081/204870192-670ee9f9-2c20-4ebe-bc1c-541d2b7a86ef.mp4\r\n\r\n**After:**\r\n\r\nhttps://user-images.githubusercontent.com/14946081/204870209-e9f464b0-599d-42a3-9bd1-f9ad7939e5dc.mp4\r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-11-29T23:41:44Z",
        "closed_at": "2022-12-01T17:41:25Z",
        "merged_at": null,
        "body": "**Context:**\r\n\r\nSome time back, Allegro's DirectX implementation of al_draw_indexed_prim broke. This originated commit 185b4dd in Dear ImGui. Some time later though, version 5.2.5 (February 2019) of Allegro ended up fixing this problem.\r\n\r\n**My changes:**\r\n\r\nI brought back the indexed primitive logic from that Dear ImGui commit, and updated it to today's code. Not only is this more optimized since it makes use of indexing, but it also removes an annoying compilation warning `(\"variable \u2018indices\u2019 set but not used [-Wunused-but-set-variable]\")` considering `indices` is no longer unused. One thing to note: al_draw_indexed_prim doesn't seem to like it when the num_vtx argument is 0, which Dear ImGui sometimes does. I figured if'ing that case and skipping was the best solution.\r\n\r\nI admit I'm not 100% familiar with how that code works, but I'm confident enough to submit this PR. Basically, only the latest commit matters. But if this PR ends up being an unwanted change for some reason, then I instead propose using the first commit of the branch, which just removes the unused bit of code with the `indices` variable. Functionally, it's the same as before my PR, but with fewer compilation warnings. (That commit was made some hours ago before I realized Allegro had fixed the problem, and that I should probably try my hand at updating the backend. Oops.)\r\n\r\n**Testing:**\r\n\r\nI've tried running the Dear ImGui demo with my PR's branch and found absolutely no problems. Tested on my Lubuntu machine, tested DirectX on a dinky Windows 7 virtual machine, and tested OpenGL and DirectX on a Windows 10 64-bit machine.\r\n* Linux compiler: g++ (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\r\n* Windows VM compiler: Visual Studio Community 2019.\r\n* Operating System: Lubuntu 22.04.1 LTS 64-bit",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-11-27T13:06:00Z",
        "closed_at": "2023-01-04T11:16:08Z",
        "merged_at": null,
        "body": "https://learn.microsoft.com/en-us/windows/win32/direct3darticles/directx-warp?redirectedfrom=MSDN\r\n\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-11-23T21:10:42Z",
        "closed_at": "2022-11-24T11:52:50Z",
        "merged_at": null,
        "body": "Default initializing WGPUCompareFunction params sets them to .undefined, which triggers the following validation error:\r\n\r\n```\r\nerror: gpu: validation error: Invalid value for WGPUCompareFunction\r\n - While validating depthStencil state.\r\n - While calling [Device].CreateRenderPipeline([RenderPipelineDescriptor]).\r\n```\r\n\r\nDefault values defined  [here](https://www.w3.org/TR/webgpu/#depth-stencil-state) and [here](https://www.w3.org/TR/webgpu/#dictdef-gpustencilfacestate)\r\n\r\nWGPUCompareFunction definition\r\nhttps://github.com/webgpu-native/webgpu-headers/blob/main/webgpu.h#L161",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 826,
        "deletions": 700,
        "changed_files": 9,
        "created_at": "2022-11-22T00:20:48Z",
        "closed_at": "2022-11-22T17:16:42Z",
        "merged_at": null,
        "body": "I don't know why it can pass the most GitHub workflows, but when I compile locally, I can easily notice this error.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-11-21T09:43:51Z",
        "closed_at": "2022-11-28T14:45:22Z",
        "merged_at": null,
        "body": "Hello, i found out that MSVC (v143) generates some dead-code on `ImGui::DebugLog` calls when `IMGUI_DISABLE_DEBUG_TOOLS` is defined (possibly because it doesn't optimize va_args).\r\n\r\nThis PR will fix that problem.\r\n\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2022-11-07T20:58:31Z",
        "closed_at": "2022-11-10T15:29:30Z",
        "merged_at": null,
        "body": "With webgpu, imgui does not work anymore when you add a depth buffer attachment because the graphic pipeline does not match the format of  the attachment. This PR allows to tell imgui the depth buffer format and sets up the depth-stencil state.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 184,
        "deletions": 100,
        "changed_files": 5,
        "created_at": "2022-11-05T16:09:58Z",
        "closed_at": "2022-11-05T17:22:17Z",
        "merged_at": null,
        "body": "> **Note**\r\n> This PR is a subsidiary work regarding the main pull request to make Dear ImGui able to support multiple contexts (#5856). The detailed purpose of this initiative can be read in the main PR description.\r\n\r\nThis PR contains the first 5 commits of the #5856 pull request.\r\n\r\n# Goal\r\n\r\nThe goal of that PR is to refactor ImGui to make classes, memory allocator, and callback independent from implicit context.\r\n\r\n#\u00a0Purpose\r\n\r\nThis work has as small impact on the code base, but it has a big impact toward refactoring Dear ImGui to support multiple contexts, because it contains all the custom work required to make Dear ImGui support multiple contexts.\r\n\r\nRemaining work even if big regarding the number of modifications, should be less risky because very predictable and straightforward.\r\n\r\n# Content\r\n\r\n- `ImGuiIO`, `ImGuiWindow`, `ImGuiInputTextCallback`, `ImGuiListClipper`, `ImGuiTextFilter`, `ImGuiStackSize`, and `ImGuiTextInputState` are refactored to be independent from the implicit context.\r\n- Clipboard and IME callback have been refactored to be independent from the implicit context\r\n- `MemAlloc` and `MemFree` have been refactored to be independent from the implicit context\r\n\r\nDetails are explained in commit messages.\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-11-01T17:18:24Z",
        "closed_at": "2022-11-02T11:03:57Z",
        "merged_at": null,
        "body": "## Issue\r\nOn macos (12.6 running on M1), \r\nwhen the window comes into focus, the reported mouse cursor position has an offset.\r\nOnce the user clicks somewhere in the window the offset is gone.\r\n\r\nIt seems that before the user clicks somewhere in the window, imgui reports the screen coordinate instead of the window coordinate.\r\n<img width=\"1201\" alt=\"imgui-issue\" src=\"https://user-images.githubusercontent.com/20865091/199295801-357dfdd3-31cf-41c8-9730-c85906ee9fc5.png\">\r\n\r\n\r\n## How to reproduce the problem\r\nBuild and run `example_apple_metal_macos`.  Unless the window is placed at the top-left, the highlighted UI element will be offset relative to the cursor initially.  Once the user clicks somewhere inside the window, the UI element under the mouse cursor will be selected.\r\n\r\n## Reason\r\nNSEvent's `locationInWindow` property is used to retrieve the window coordinate of the cursor when handling mouse events in `ImGui_ImplOSX_HandleEvent` of `imgui_impl_osx.mm` backend, but according to the [reference](https://developer.apple.com/documentation/appkit/nsevent/1529068-locationinwindow), this property may contain the screen coordinate, if the NSEvent's `.window` property is nil.\r\n\r\n## Fix\r\nCheck the `.window` property of the NSEvent.  If null, convert from screen coordinate to the window coordinate associated with the view",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-10-30T00:29:10Z",
        "closed_at": "2022-10-31T11:10:18Z",
        "merged_at": null,
        "body": "Version: 1.88 (issue bisected to e278277d53c961b6b345388b79644187bd0d0339, v1.87)\r\nBranch: docking\r\nBackends: imgui_impl_win32.cpp (and custom)\r\n\r\n**My Issue:**\r\n\r\n`IsWindowHovered` returns true for one frame in the window under the viewport under the mouse when releasing the left mouse button.\r\n\r\nThis happens only if the backend uses the new `io.AddMouseViewportEvent` instead of directly setting `io.MouseHoveredViewport`.\r\n\r\n`NewFrame` calls `UpdateViewportsNewFrame` before `UpdateInputEvents`, so there is a one frame delay before the former sees the new `io.MouseHoveredViewport` set by the latter.\r\n\r\n**Screenshot/Video**\r\n\r\n![Video](https://user-images.githubusercontent.com/4297676/198856607-2ca49f6e-158b-46d1-bdff-8e12530279ac.gif)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-10-29T22:32:42Z",
        "closed_at": "2022-10-31T10:48:37Z",
        "merged_at": null,
        "body": "The output of `imgui.ini` will be placed in app-specific [Internal storage directories](https://developer.android.com/training/data-storage/app-specific)\r\n\r\n[Internal storage directories](https://developer.android.com/training/data-storage/app-specific) is used because it can safetly save any files in this directory and doesn't require any permission storage.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-10-28T08:19:25Z",
        "closed_at": "2023-01-04T14:22:03Z",
        "merged_at": null,
        "body": "Skip with spacebar (codepoint 32) or only advanceX for glyphs that cannot create image data.\r\n\r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-10-25T10:43:51Z",
        "closed_at": "2022-10-25T14:04:27Z",
        "merged_at": null,
        "body": "It's not really important but `HasGamepad` and `WantUpdateHasGamepad` variables are not used anyway when `IMGUI_IMPL_WIN32_DISABLE_GAMEPAD` is defined.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-10-21T20:36:28Z",
        "closed_at": "2022-10-22T23:23:18Z",
        "merged_at": null,
        "body": "`WantUpdateHasGamepad` and `HasGamepad` variables are not needed when `IMGUI_IMPL_WIN32_DISABLE_GAMEPAD` is defined.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-10-20T00:53:33Z",
        "closed_at": "2022-10-20T06:25:00Z",
        "merged_at": "2022-10-20T06:25:00Z",
        "body": "While answering https://github.com/ocornut/imgui/issues/5797 I noticed a few comments around shader compilation were slightly stale (seemingly copied from one of the other Direct3D backends.)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-10-18T05:26:52Z",
        "closed_at": "2023-01-04T14:21:58Z",
        "merged_at": null,
        "body": "Some koreans seems to be a little bigger.  \r\nSo if we use freetype, it is necessary to increase the width of the correct when packing.\r\n\r\nChanges:\r\n\r\n-    When you start freetype packing, rects[i].w *= 2 \r\n\r\n[NanumSquareB_ttf.zip](https://github.com/ocornut/imgui/files/9806907/NanumSquareB_ttf.zip)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-10-11T19:18:00Z",
        "closed_at": "2022-10-14T18:21:57Z",
        "merged_at": null,
        "body": "Changed hardcoded linear filtering, to being configurable by `ImFontAtlasFlags_NoBakedLines` or `style.AntiAliasedLinesUseTex.` When enabling the flags above, the textures still had linear filtering, but this new change allows the user to change the texture filtering for ImGui textures. for webgpu backends. \r\n\r\nNOTE: It also changes the image supplied to `ImGui::Image` to use the filtering specified.\r\n\r\nWhen `io.Fonts->Flags |= ImFontAtlasFlags_NoBakedLines` or `ImGui::GetStyle().AntiAliasedLinesUseTex = false`:\r\n![image](https://user-images.githubusercontent.com/65868911/195179384-2d3262ed-3cea-4f0a-b54b-2b85b31eb110.png)\r\n\r\nWhen `ImFontAtlasFlags_NoBakedLines` not set or `ImGui::GetStyle().AntiAliasedLinesUseTex = true`:\r\n![image](https://user-images.githubusercontent.com/65868911/195179581-682c7cd5-202f-46af-bc13-fb34bd438c4b.png)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 977,
        "deletions": 952,
        "changed_files": 23,
        "created_at": "2022-10-11T18:19:06Z",
        "closed_at": "2022-10-22T02:02:53Z",
        "merged_at": null,
        "body": "As we're switching to C++11, it would be nice to use `nullptr` instead of `NULL`.\r\n\r\nChanges:\r\n- All `NULL` was replaced with `nullptr`\r\n- `NULL`s in comments are replaced where it's needed, the CHANGELOG section wasn't changed.\r\n- Strings like `\"NULL\"`, `\"<NULL>\"` and `\".... NULL ....\"` wasn't changed.\r\n\r\nNotice: In imgui_demo.cpp, the comment for including stdlib.h was modified\r\n```diff\r\n- #include <stdlib.h>         // NULL, malloc, free, atoi\r\n+ #include <stdlib.h>         // malloc, free, atoi\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-10-11T14:28:42Z",
        "closed_at": "2022-10-11T15:45:28Z",
        "merged_at": "2022-10-11T15:45:28Z",
        "body": "`ImFontAtlas::CustomRect` was renamed to `ImFontAtlasCustomRect` on 2022/01/01 (1.87).\r\n`rects_ids[rect_n]` seems to be a mistake, fixed as `rect_ids[rect_n]`\r\n```diff --git a/docs/FONTS.md b/docs/FONTS.md\r\n\r\n for (int rect_n = 0; rect_n < IM_ARRAYSIZE(rect_ids); rect_n++)\r\n {\r\n-    int rect_id = rects_ids[rect_n];\r\n-    if (const ImFontAtlas::CustomRect* rect = io.Fonts->GetCustomRectByIndex(rect_id))\r\n+    int rect_id = rect_ids[rect_n];\r\n+    if (const ImFontAtlasCustomRect* rect = io.Fonts->GetCustomRectByIndex(rect_id))\r\n     {\r\n         // Fill the custom rectangle with red pixels (in reality you would draw/copy your bitmap data here!)\r\n         for (int y = 0; y < rect->Height; y++)\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-10-09T03:13:19Z",
        "closed_at": "2022-10-11T21:28:05Z",
        "merged_at": null,
        "body": "There is a memory leak where font data is handled.\r\nI found it by using ``` _CrtDumpMemoryLeaks() ``` , which is available in Visual Studio.\r\nAfter applying this change, no memory leak detected.\r\n\r\nThe memory leak detector reported like this:\r\n\r\n```\r\nDetected memory leaks!\r\nDumping objects ->\r\n{491} normal block at 0x00000254A12E2070, 9527428 bytes long.\r\n Data: <ttcf           (> 74 74 63 66 00 02 00 00 00 00 00 04 00 00 00 28 \r\nObject dump complete\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-09-29T04:09:56Z",
        "closed_at": "2022-09-30T14:14:13Z",
        "merged_at": null,
        "body": "`FreeTypeFont::BlitGlyph` may write past the destination buffer if the glyph cannot fit in `BITMAP_BUFFERS_CHUNK_SIZE` bytes (weird font or just by requesting a huge size).\r\n\r\n```cpp\r\n#define IMGUI_ENABLE_FREETYPE\r\n// ...\r\nio.Fonts->AddFontFromFileTTF(\"/usr/share/fonts/TTF/DejaVuSans.ttf\", 1<<16);\r\n```\r\n\r\nThis PR makes it assert instead of corrupting memory.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-09-28T12:29:59Z",
        "closed_at": "2022-09-28T15:43:51Z",
        "merged_at": null,
        "body": "This PR brings forward the few changes we have to use on our game that also supports the Wii U (through a custom GX2 backend).\r\n\r\nI've made the initial commit specifically about the Wii U to open conversation about whether these changes can in fact be upstreamed and also if there's a better solution. The final result can likely generalize the checks to something that's non Wii U specific.\r\n\r\n**Context on changes:**\r\nWe opt out of usages of `alloca` for that platform because that's not available in the build system for Wii U -- and we have one check to avoid clearing state flags. As we use our own backend to support the system, we use the state flags to open the keyboard where necessary but for some reason they're getting cleared here (is this an ImGui bug?).",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-09-28T11:06:20Z",
        "closed_at": "2022-09-28T13:28:24Z",
        "merged_at": null,
        "body": "This PR primarily adds support for swapped AB & XY buttons (classic on Nintendo consoles)\r\n\r\nIt also disables `SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE` for the `__SWITCH__` platform but I'm not sure if its ok to add this check when there's no build workflow for it. Though one could likely be added using homebrew development tools. But again that's up for discussion.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-09-26T21:46:41Z",
        "closed_at": "2022-10-05T12:16:48Z",
        "merged_at": null,
        "body": "Use case: have an opengles2 renderer initialized under the windows platform with IMGUI used with OpenGL3 compatibility.\r\nWhen I use opengles2 renderer on the windows platform, glDebugMessageCallbackARB gives me an error: BAD_ENUM.\r\n\r\nIt does not find `GL_POLYGON_MODE`.\r\nAlso, the shader header (version) is wrong, since opengles2 is only used when specific other requirements are met.\r\n\r\nWith this changes, user can run opengles2 renderer on windows with opengl 3 compatibility mode set on imgui, for example, with cmake, one can write: \r\n`add_compile_definitions( IMGUI_IMPL_OPENGL_ES2_ON_DESKTOP=1 )`\r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2022-09-26T20:56:07Z",
        "closed_at": "2023-04-07T14:56:05Z",
        "merged_at": null,
        "body": "This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.\r\nIt is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2022-09-23T17:42:06Z",
        "closed_at": "2022-12-26T12:45:24Z",
        "merged_at": null,
        "body": "Add CMake build scripts for example_sdl_vulkan.\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 64,
        "changed_files": 20,
        "created_at": "2022-09-14T16:52:22Z",
        "closed_at": "2022-09-14T18:36:59Z",
        "merged_at": null,
        "body": "Sorry for flooding, just wanted to address [the issue](https://github.com/ocornut/imgui/pull/5675#pullrequestreview-1107220618) pointed out by @leonwoud.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 101,
        "changed_files": 4,
        "created_at": "2022-09-12T22:29:38Z",
        "closed_at": "2022-09-13T09:26:50Z",
        "merged_at": null,
        "body": "Fixed typos and grammar",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 56,
        "deletions": 56,
        "changed_files": 3,
        "created_at": "2022-09-11T05:42:32Z",
        "closed_at": "2022-09-13T09:25:35Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2022-09-06T08:33:30Z",
        "closed_at": "2022-09-06T09:46:24Z",
        "merged_at": "2022-09-06T09:46:24Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2022-08-30T20:57:48Z",
        "closed_at": "2023-07-18T09:52:54Z",
        "merged_at": null,
        "body": "The GLFW backend currently ignores that the cursor is disabled (GLFW_CURSOR_DISABLED is set by glfwSetInputMode).\r\nThis leads to an invisible cursor, that still highlights new ImGui elements when moving the mouse around, even though the cursor should remain static and only highlight the element it was last over before being disabled. This PR adds an check for the flag and returns out of function before ImGuiIO's position is updated. \r\n\r\nThe current behavior stems from the fact, that GLFW still provides updated cursor position when GLFW_CURSOR_DISABLED is set. I don't know if this is intended though (The [documentation](https://www.glfw.org/docs/3.3/input_guide.html#cursor_mode) is a bit unclear about that, I think). \r\n\r\n",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-28T17:14:01Z",
        "closed_at": "2022-09-05T14:29:11Z",
        "merged_at": null,
        "body": "2 lines of code change.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-24T06:33:17Z",
        "closed_at": "2022-08-24T08:58:44Z",
        "merged_at": null,
        "body": "If an ImVector is being initialised by another ImVector that does not have any allocated memory yet, it causes `memcpy` to be called with `null, null, 0`. According to the C specification this is undefined behaviour and triggers undefined behaviour sanitisers.\r\n\r\n> Where an argument declared as size_t n specifies the length of the array for a function, n can have the value zero on a call to that function. **Unless explicitly stated otherwise in the description of a particular function in this subclause, pointer arguments on such a call shall still have valid values, as described in 7.1.4**. On such a call, a function that locates a character finds no occurrence, a function that compares two character sequences returns zero, and a function that copies characters copies zero characters.\r\n\r\nThe reference indicated here points to this:\r\n\r\n> If an argument to a function has an invalid value (such as a value outside the domain of the function, or a pointer outside the address space of the program, **or a null pointer**, or a pointer to non-modifiable storage when the corresponding parameter is not const-qualified) or a type (after promotion) not expected by a function with variable number of arguments, the behavior is undefined.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-22T20:58:23Z",
        "closed_at": "2022-08-23T10:53:08Z",
        "merged_at": null,
        "body": "The `sampleCount` property is [deprecated](https://developer.apple.com/documentation/metal/mtlrenderpipelinedescriptor/1514699-samplecount?language=objc) and will be removed in the next macOS version. This updates the code to use the new proper property to set.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-22T10:52:10Z",
        "closed_at": "2022-08-22T14:11:10Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-22T07:00:07Z",
        "closed_at": "2022-08-22T08:57:15Z",
        "merged_at": null,
        "body": "Version 18.04 to version 20.04, because 18.04 is deprecated :)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 87,
        "deletions": 127,
        "changed_files": 2,
        "created_at": "2022-08-03T21:42:08Z",
        "closed_at": "2022-08-08T11:22:46Z",
        "merged_at": null,
        "body": "A follow-up for #5540.\r\n\r\nWith some initializers moved to struct definition, I had to replace memset with a bunch of default initializers. No strong opinion on exact syntax. Its just `= {}` felt like the best fit for this repo that avoids most vexing parse.",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 161,
        "deletions": 83,
        "changed_files": 2,
        "created_at": "2022-08-02T16:14:29Z",
        "closed_at": "2023-06-13T11:06:28Z",
        "merged_at": null,
        "body": "### Problem\r\nI caught memory leaks when using `backends/imgui_impl_metal.mm` mixed with `backends/imgui_impl_sdl.cpp`\r\nI'm using the `metal-cpp` interface headers\r\nI found out that I have to manually call autoRelease() on every allocated object (that we're supposed to own of course ...).\r\nAccording to Cocoa's conventions, you own every object that you create.\r\nMethods starting with `alloc`, `new`, `copy`, `mutableCopy` or `create` give us ownership of the object to release.\r\n\r\n### Reproduce the issue\r\n- Compile any sample app with imgui using metal-cpp interface (and usual SDL2 or whatever alternative ...)\r\n[I will try to create a sample app for you to reproduce with, hello world example is more than enough to reproduce it]\r\n- Run using `leaks -atExit -- ./App` to check for leaks\r\n\r\n### Suggested solution\r\n1. Define `IMGUI_METAL_CPP_AUTO_RELEASE_POOL` to limit the changes to be applied only when using metal-cpp interface\r\n2. Call `[<xptr> autoRelease];` on the objects that were allocated and that we have ownership of\r\n\r\n\r\n### ImGui details\r\nimgui version: `v1.88`\r\nimgui backend: `Metal` | `SDL`\r\n\r\n\r\n",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-26T15:42:46Z",
        "closed_at": "2022-07-27T07:25:22Z",
        "merged_at": null,
        "body": "Operator `=` should probably be used in `push_back()` function instead of `memcpy`, because if object `v` is a local variable and it contains any pointer member, when it goes out of scope its destructor will automatically be called, then the memory blocks pointed by that pointer member will very likely be freed, resulting in that pointer in `Data[Size]` object pointing to an invalid memory address. Take the following code for an example:\r\n```cpp\r\nImVector<ImVector<int>> func()\r\n{\r\n    ImVector<ImVector<int>> mat;\r\n    ImVector<int> row;\r\n    row.push_back(1);\r\n    row.push_back(2);\r\n    row.push_back(3);\r\n    mat.push_back(row);\r\n\r\n    return mat;\r\n}\r\n\r\nvoid func2()\r\n{\r\n    ImVector<ImVector<int>> mat = func();\r\n    printf(\"%d\\n\", mat[0][0]);  //wrong result\r\n}\r\n```\r\nWhen `func()` returns, destructor for local variable row is called, the memory blocks pointed by `row.Data` are freed. So given that `mat[0].Data` and `row.Data` has the same value, the memory address pointed by `mat[0].Data` becomes invalid. So perhaps operator `=` should be used instead of simply memcpy data from `v` object to `Data[Size]`, so that data pointed by the pointers can be manually copied by overloading operator `=`.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 35,
        "changed_files": 8,
        "created_at": "2022-07-05T23:01:19Z",
        "closed_at": "2022-07-06T07:19:27Z",
        "merged_at": null,
        "body": "Runtime exception occurred due to the access violation of glClearColor(). Adding gladLoadGL() at the appropriate location fixed the issue and now your example code for glfw opengl3 is fixed! It took a bit to figure out what was wrong but hopefully, other new folks will not have to waste time behind it.\r\n\r\nThanks",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2022-07-02T21:34:07Z",
        "closed_at": "2022-07-05T13:25:10Z",
        "merged_at": null,
        "body": "This pull request proposes to add a `@synchronized` mutex to control access to `self.bufferCache` on the Metal implementation file. This avoids a situation where this `NSArray` is mutated by the `dispatch_async(...)` while being enumerated by `dequeueReusableBufferOfLength(...)`. This scenario happens when the ImGui render loop is offloaded to a different thread after being initialized on a parent thread. As far as I understand, this change won't add overhead while running on a single thread but will avoid eventual crashes if the circumstance described above happens.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 103,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2022-07-02T17:01:19Z",
        "closed_at": "2023-07-04T13:02:44Z",
        "merged_at": null,
        "body": "Version of #5037 for docking branch as requested by https://github.com/ocornut/imgui/pull/5037#issuecomment-1152482524. Sorry for the delay, completely forgot about my original PR.\r\n\r\nAs we now load function pointers manually, it's possible for `vkCmdBeginRenderingKHR` and `vkCmdEndRenderingKHR` to be nullptr. Is it fine to just cause a segfault in `ImGui_ImplVulkan_RenderWindow` when `UseDynamicRendering` is enabled but the extension wasn't enabled on the device and the function pointers therefore possibly be nullptr?",
        "comments": 32
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-01T16:01:38Z",
        "closed_at": "2022-07-18T08:53:31Z",
        "merged_at": null,
        "body": "Hi @ocornut!\r\n\r\nI have been missing this function for a while, so instead of writing `IsItemHovered() && IsMouseDoubleClicked(...)` all over the place, let me propose this small change instead.\r\n\r\nThis helper is just like IsItemClicked but handling double-click events.\r\n\r\nPD: Sorry for the commit names, I dropped it very quickly. Feel free to squash-merge if approved.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-06-29T08:10:57Z",
        "closed_at": "2022-06-29T13:48:17Z",
        "merged_at": null,
        "body": "Hello there, this is the follow up to https://github.com/ocornut/imgui/issues/4616 ... I put the explanations and captures in the last comment of the issue, not sure if I need to put it in the PR too. If that's the case just tell me, I will do it.\r\n\r\nNothing fancy for this PR, I just moved the declaration of g_GlfwWndProc before ImGui_ImplGlfw_Shutdown() in order to be able to reset it inside the function. That way rendering can be reset without having an exception raised when a window gets outside the parent in multi viewport.\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2022-06-16T20:57:55Z",
        "closed_at": "2022-06-30T18:21:01Z",
        "merged_at": null,
        "body": "Apple has released some additional extensions to metal-cpp that provide the ability to create full macOS applications in C++. While working with these and implementing a simple test application, I came across some issues in imgui that this PR should address.\r\n\r\nIn ARC based systems, `__bridge` is needed for the casts between the metal-cpp objects and their native types. For non-ARC systems, this is just a warning.\r\n\r\nThe docking code assumes a BGRA8Unorm pixel format, but that may not be correct. The correct format is pulled from the frame buffer description to prevent a crash.\r\n\r\nThe MetalContext initializer was losing references to `renderPipelineStateCache` and `bufferCache` for systems within an autorelease pool. The initializer now uses the property setters to ensure memory management is correct regardless of memory management scheme.\r\n\r\nWWDC22 introduced some new extensions akin to metal-cpp to allow for a full app creation in C++. There are conflicts with the OSX backend. The backend has been updated similarly to the metal-cpp support in the Metal backend. A `IMGUI_IMPL_METAL_CPP_EXTENSIONS` preprocessor macro and supporting functions has been added to allow use of these APIs that then handle the proper bridging / casting.\r\n\r\nSample application using these changes: https://github.com/stack/walnut-apple\r\nWWDC22 session: https://developer.apple.com/wwdc22/10160",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-06-14T20:56:45Z",
        "closed_at": "2022-06-21T16:51:57Z",
        "merged_at": null,
        "body": "This PR adds a dedicated function to use `glfwSetTime` function safely.\r\n\r\nCurrently, calling `glfwSetTime(0)` each frame makes the program throw runtime error caused by [this](https://github.com/ocornut/imgui/blob/master/imgui.cpp#L8022) assertion.\r\n\r\nThis behavior makes sense due to how `DeltaTime` is calculated [here](https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_glfw.cpp#L650). This function will always yield invalid `DeltaTime` if `glfwSetTime` is called each frame.\r\n\r\nI implemented a custom function that updates the timestamp before calling `glfwSetTime` so that `DeltaTime` is properly calculated",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2022-06-11T03:36:45Z",
        "closed_at": "2022-06-11T10:52:27Z",
        "merged_at": "2022-06-11T10:52:27Z",
        "body": "**Platform:** Windows\r\n**Compiler:** MSBuild 17.2.1+52cd2da31\r\n\r\nSmall fix for in certain unity build globs I'll sometimes be presented with `error C2011: 'VERTEX_CONSTANT_BUFFER': 'struct' type redefinition`.\r\nUnity Build Enabled via Directory.Build.props `EnableUnitySupport>true</EnableUnitySupport`.\r\n\r\nI could change the name of `VERTEX_CONSTANT_BUFFER` in each implementation (DX10, 11 and 12) but figured there may be some use long term in a shared implementation header for types. Kept shared includes however to each impl.cpp.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2022-06-04T12:47:49Z",
        "closed_at": "2022-06-10T17:00:54Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\na little change in the signature of two methods for have the ability to add_text wraped first then cliped.\r\n\r\nin my project, without the change i have that result\r\n<img src=\"https://user-images.githubusercontent.com/1434736/171999360-1292e03e-11d0-4887-81c9-87746e195a67.png\" width=\"600\" />\r\n\r\nnow i have that result : \r\n<img src=\"https://user-images.githubusercontent.com/1434736/171999385-f49ebe3d-9655-4e38-a68f-ddbbcbf090ef.png\" width=\"600\" />\r\n\r\nif i decided to only wrap the text, i got this result (when item wdith is small, the text is out of the selected zone)\r\n<img src=\"https://user-images.githubusercontent.com/1434736/171999473-cb327a76-93ef-46e5-9b02-ee7abb1daaab.png\" width=\"600\" />\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-06-03T09:40:55Z",
        "closed_at": "2022-06-07T12:06:36Z",
        "merged_at": null,
        "body": "accross -> across\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-06-01T13:06:35Z",
        "closed_at": "2022-06-02T12:32:43Z",
        "merged_at": "2022-06-02T12:32:43Z",
        "body": "The window flag \"ImGuiWindowFlags_NoResize\" is already a part of the window flag \"ImGuiWindowFlags_NoDecoration.\"",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-27T05:31:09Z",
        "closed_at": "2022-05-29T19:59:38Z",
        "merged_at": null,
        "body": "When the ini file has zero length, `LoadIniSettingsFromDisk` passes 0 as `ini_size` to `LoadIniSettingsFromMemory`. However, `LoadIniSettingsFromMemory` understands it as \"detect ini size\" and promptly runs `strlen` on the buffer. Here, the buffer is zero-sized, so `strlen` reads out-of-bounds, trying to find the null terminator in vain.\r\n\r\nThe solution is to just not call `LoadIniSettingsFromMemory` when there is nothing to parse anyway.\r\n\r\nExample ASan error:\r\n\r\n```\r\n    #0 0x7f6cfc6f4b10 in __interceptor_strlen ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:370\r\n    #1 0x55f13e3fcb18 in ImGui::LoadIniSettingsFromMemory(char const*, unsigned long) /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:11606\r\n    #2 0x55f13e3fca2c in ImGui::LoadIniSettingsFromDisk(char const*) /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:11591\r\n    #3 0x55f13e3fc02f in UpdateSettings /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:11494\r\n    #4 0x55f13e3a14ad in ImGui::NewFrame() /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:4237\r\n    #5 0x55f13e35be4b in igNewFrame (/home/quantum/build/LookingGlass/client/build/looking-glass-client+0x19ae4b)\r\n    #6 0x55f13e2c601b in app_renderOverlay /home/quantum/build/LookingGlass/client/src/app.c:862\r\n    #7 0x55f13e5c01df in egl_render /home/quantum/build/LookingGlass/client/renderers/EGL/egl.c:1099\r\n    #8 0x55f13e29622a in renderThread /home/quantum/build/LookingGlass/client/src/main.c:291\r\n    #9 0x55f13e623261 in threadWrapper /home/quantum/build/LookingGlass/common/src/platform/linux/thread.c:40\r\n    #10 0x7f6cfbe75ea6 in start_thread nptl/pthread_create.c:477\r\n    #11 0x7f6cfba24dee in __clone (/lib/x86_64-linux-gnu/libc.so.6+0xfddee)\r\n\r\n0x6020000a8631 is located 0 bytes to the right of 1-byte region [0x6020000a8630,0x6020000a8631)\r\nallocated by thread T4 here:\r\n    #0 0x7f6cfc761e8f in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145\r\n    #1 0x55f13e37d3c7 in MallocWrapper /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:1019\r\n    #2 0x55f13e399e0e in ImGui::MemAlloc(unsigned long) /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:3603\r\n    #3 0x55f13e3871de in ImFileLoadToMemory(char const*, char const*, unsigned long*, int) /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:1802\r\n    #4 0x55f13e3fc9e8 in ImGui::LoadIniSettingsFromDisk(char const*) /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:11588\r\n    #5 0x55f13e3fc02f in UpdateSettings /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:11494\r\n    #6 0x55f13e3a14ad in ImGui::NewFrame() /home/quantum/build/LookingGlass/repos/cimgui/imgui/imgui.cpp:4237\r\n    #7 0x55f13e35be4b in igNewFrame (/home/quantum/build/LookingGlass/client/build/looking-glass-client+0x19ae4b)\r\n    #8 0x55f13e2c601b in app_renderOverlay /home/quantum/build/LookingGlass/client/src/app.c:862\r\n    #9 0x55f13e5c01df in egl_render /home/quantum/build/LookingGlass/client/renderers/EGL/egl.c:1099\r\n    #10 0x55f13e29622a in renderThread /home/quantum/build/LookingGlass/client/src/main.c:291\r\n    #11 0x55f13e623261 in threadWrapper /home/quantum/build/LookingGlass/common/src/platform/linux/thread.c:40\r\n    #12 0x7f6cfbe75ea6 in start_thread nptl/pthread_create.c:477\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2022-05-19T20:42:00Z",
        "closed_at": "2022-06-20T16:24:54Z",
        "merged_at": null,
        "body": "I saw that the v1.88 milestone has clicking on the slider knob changing its position (#1946) as one of the milestones. This is my first contribution, so I figured it would be a good place to start. \r\n\r\nWhat I changed:\r\n* Added new slider flag `ImGuiSliderFlags_NoChangeInsideHandle`. Sliders behave exactly the same as before if this flag isn't passed. \r\n* When `ImGuiSliderFlags_NoChangeInsideHandle` is passed, sliders will ignore clicks inside the handle unless the handle is being dragged.\r\n* Added an extra checkbox to Widgets/Drag and Slider Flags in the demo window to demo `ImGuiSliderFlags_NoChangeInsideHandle`\r\n\r\nSee attached screen recording for example behaviour\r\n\r\nhttps://user-images.githubusercontent.com/80700901/169400922-b4ec266b-27e7-4cdf-8296-9a779e4bd9cb.mp4",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-05-18T08:53:37Z",
        "closed_at": "2022-05-23T10:56:34Z",
        "merged_at": null,
        "body": "```\r\nwarning: 'TARGET_OS_IOS' is not defined, evaluates to 0 [-Wundef-prefix=TARGET_OS_]\r\nwarning: 'TARGET_OS_TV' is not defined, evaluates to 0 [-Wundef-prefix=TARGET_OS_]\r\n```\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-16T13:22:17Z",
        "closed_at": "2022-05-16T16:29:16Z",
        "merged_at": null,
        "body": "Version/Branch of Dear ImGui: `master`\r\n\r\nBack-end/Renderer/Compiler/OS:\r\nWindows, Dx11\r\n\r\nMy Issue/Question:\r\nA few months ago in production this crash happened to our users as an extremely rare edge case.\r\nThe crash ceased to occur when adding the bounds check before the array is indexed.\r\n\r\nScreenshots/Video:\r\nI did not archive anything from that time. \r\n\r\nStandalone, minimal, complete and verifiable example:\r\nCall `_CalcCircleAutoSegmentCount` with something negative and watch what happens.\r\n\r\nP.S. I did not go and try to see if this function receiving a negative value was a side effect of another part of the codebase. I did what was necessary to fix the crash and did not observe any consequences of adding the bounds check.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-05-13T11:38:13Z",
        "closed_at": "2022-05-13T13:08:59Z",
        "merged_at": "2022-05-13T13:08:59Z",
        "body": "See #5310 \r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2022-05-12T21:20:56Z",
        "closed_at": "2022-05-13T13:15:20Z",
        "merged_at": null,
        "body": "This is a tiny PR that allows users to specify the start and the end of a label for `Button` and `SmallButton`. It eases integrating buttons into text without making a copy of the labels.\r\n\r\nI can also add the same functionality to `Checkbox` and `RadioButton` in this PR if needed.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 113,
        "deletions": 52,
        "changed_files": 3,
        "created_at": "2022-05-11T19:21:45Z",
        "closed_at": "2023-01-20T23:57:57Z",
        "merged_at": null,
        "body": "This PR will be remove column limits, mentioned into #3572.\r\nAlso, I add useful functions for Bit array and vectors, for future expansion and usage.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-06T01:15:00Z",
        "closed_at": "2022-05-06T07:47:18Z",
        "merged_at": "2022-05-06T07:47:18Z",
        "body": "Stop from opening the editor for freetype/README.md\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2022-05-04T06:35:56Z",
        "closed_at": "2022-05-04T10:12:17Z",
        "merged_at": null,
        "body": "Allow the use of BeginTabBar without drawing a separator under the tabs",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-05-02T01:19:32Z",
        "closed_at": "2022-05-02T12:12:23Z",
        "merged_at": null,
        "body": "Fix a possible dx9 impl. memory leak",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-04-30T07:25:05Z",
        "closed_at": "2022-04-30T13:36:51Z",
        "merged_at": null,
        "body": "fix for #5260\r\nkeyboard io, glfw, untranslate keys returned as lower case letters.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-04-23T13:11:33Z",
        "closed_at": "2022-11-10T15:32:33Z",
        "merged_at": null,
        "body": "This adds a `__has_include` condition to the `#include` directives for the SDL2 header files in `backends/imgui_impl_sdl.cpp`, so that the SDL2 header files can be found in multiple places.\r\n\r\nThe reason is that the location of the SDL2 headers seems to vary and can be either at:\r\n* `<SDL2/SDL.h>` / `<SDL2/SDL_syswm.h>` - this is the case on my Linux system and in my Windows set-up.\r\n* `<SDL.h>` / `<SDL_syswm.h>` - this is the case on my macOS system (with SDL2 installed using MacPorts).\r\n\r\nChecking first for the existence of the header files with the added `SDL2/` prefix seemed the best option to me (as opposed to doing it the other way around), because without the prefix the [headers from SDL-1.2](https://github.com/libsdl-org/SDL-1.2/tree/main/include) might accidentally get included instead of the SDL2 headers if there was also an old SDL 1 version installed on the system.\r\n\r\nIf `__has_include` is not supported by the compiler, there is a fallback to the original `#include` directives, without the `SDL2/` prefix.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 129,
        "deletions": 69,
        "changed_files": 2,
        "created_at": "2022-04-20T13:51:02Z",
        "closed_at": "2022-04-27T13:19:42Z",
        "merged_at": null,
        "body": "Restructure imgui_impl_metal.mm and imgui_impl_osx.mm for support Muti-contexts",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 612,
        "deletions": 28,
        "changed_files": 5,
        "created_at": "2022-04-16T02:49:42Z",
        "closed_at": "2022-04-23T19:33:40Z",
        "merged_at": null,
        "body": "//WINDOW: Minimize Window\r\nstatic void WinMinimize() {\r\n    ::ShowWindow(::GetActiveWindow(), SW_MINIMIZE);\r\n}\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2022-04-13T00:39:00Z",
        "closed_at": "2022-04-13T12:57:59Z",
        "merged_at": null,
        "body": "From the TODO list:\r\n\"- listbox: expose hovered item for a simplified ListBox api\"\r\n\r\nThis PR does:\r\nExposing the hovered state of a Selectable and using the new function SelectableHover in the ListBox function for exposing the hovered item. This is very useful for visually giving a hint elsewhere if an item is hovered is a list box. \r\n\r\nFor now, I changed only one demo so the effect can be observed and it didn't took me too much time if the PR is rejected ;)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2022-04-12T16:01:22Z",
        "closed_at": "2022-04-13T18:43:56Z",
        "merged_at": null,
        "body": "This pull requests allow big endian systems to use ImgUi \r\nAnd related to this added also amigaos4 support\r\n\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-04-08T16:54:42Z",
        "closed_at": "2022-04-11T15:12:04Z",
        "merged_at": null,
        "body": "Happened to notice during https://github.com/ocornut/imgui/issues/5177 that for whatever reason this command was renamed in Visual Studio 2017.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 148,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2022-04-06T06:20:18Z",
        "closed_at": "2023-04-19T14:56:18Z",
        "merged_at": null,
        "body": "Adds support for Win32 + OpenGL backends.  Previously, this combination didn't work correctly because spawned windows weren't given rendering contexts.  This PR makes it so OpenGL contexts are created and destroyed correctly for each new window.  Additionally, it links the contexts to the main one via `wglShareLists()`.\r\n\r\nThe only API change is the addition of an optional parameter, `hglrc`, in `ImGui_ImplWin32_Init()`.  Passing in the main window's render context handle here will engage the new code.  If only the first parameter is passed, a non-OpenGL API will be inferred.  This makes it so existing projects using the Win32 backend will be able to merge this change without issue.\r\n\r\nWhen an OpenGL render context is specified, four WGL functions, `wglCreateContext()`, `wglDeleteContext()`, `wglMakeCurrent()`, and `wglShareLists()` will be loaded dynamically to enable the context management.  The OpenGL library will not be loaded if no `hglrc` is specified.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-03-31T17:48:03Z",
        "closed_at": "2022-04-01T06:31:26Z",
        "merged_at": null,
        "body": "Simple typo fix in docs/README.md\r\nMiscallaneous -> Miscellaneous",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-03-23T00:50:47Z",
        "closed_at": "2022-03-23T15:00:55Z",
        "merged_at": null,
        "body": "Texture-based anti-aliasing is broken after loading a font using imgui_freetype.cpp with `ImGuiFreeTypeBuilderFlags_LoadColor` set in `ImFontConfig::FontBuilderFlags`. Using the OpenGL3 backend (haven't tested others).\r\n\r\n![Screenshot of the bug](https://i.imgur.com/ycIk32k.png)\r\n\r\n```cpp\r\n#define IMGUI_ENABLE_FREETYPE\r\n// ...\r\nImFontConfig cfg;\r\ncfg.FontBuilderFlags |= ImGuiFreeTypeBuilderFlags_LoadColor;\r\nio.Fonts->AddFontFromFileTTF(\"/usr/share/fonts/TTF/DejaVuSans.ttf\", 14, &cfg);\r\n```\r\n\r\nThis appears to be because `ImFontAtlasBuildRenderLinesTexData` uses transparent black when writing to `TexPixelsRGBA32`. Transparent white is produced (via `GetTexDataAsRGBA32`) when it writes to `TexPixelsAlpha8`.\r\n\r\nThis PR removes that difference by having `ImFontAtlasBuildRenderLinesTexData` write transparent white to `TexPixelsRGBA32`. It restores anti-aliasing (although I don't fully understand why, so I'm not 100% certain whether this is the correct fix):\r\n\r\n![Patched to write transparent white](https://i.imgur.com/TCwwZZH.png)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-03-19T23:17:15Z",
        "closed_at": "2022-03-22T16:23:08Z",
        "merged_at": null,
        "body": "Add the X1 and X2 mouse button handling to the SDL backend.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-03-19T16:39:51Z",
        "closed_at": "2022-03-28T08:58:28Z",
        "merged_at": "2022-03-28T08:58:27Z",
        "body": "Solves compile error https://github.com/ocornut/imgui/issues/5122\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 674,
        "deletions": 663,
        "changed_files": 1,
        "created_at": "2022-03-19T02:26:57Z",
        "closed_at": "2022-03-27T20:22:56Z",
        "merged_at": null,
        "body": null,
        "comments": 5
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2022-03-02T21:02:35Z",
        "closed_at": "2022-03-13T05:52:28Z",
        "merged_at": null,
        "body": "(note: this is a very small change)\r\n\r\nI added an option to customize **stb_sprintf.h** include path in **imconfig.h**. This makes it more consistent with the other STB libraries, since **stb_truetype.h** and **stb_rect_pack.h** are both configurable.\r\n\r\n```cpp\r\n// (imconfig.h)\r\n// this can be used in imconfig.h to change the stb_sprintf.h include directory\r\n#define IMGUI_STB_SPRINTF_FILENAME \"my_folder/stb_sprintf.h\"\r\n```\r\nI feel like having this options is a bit simpler than changing the include paths somewhere in a project config ...\r\n\r\nI've been using this custom **stb_sprintf.h filepath option** in a project I'm working on, so It has been tested.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-02-19T19:31:47Z",
        "closed_at": "2023-07-04T13:02:59Z",
        "merged_at": null,
        "body": "With the `VK_KHR_dynamic_rendering` extension Vulkan received a whole new way of how to rasterize. In the end, it got rid of `VkRenderPass` and `VkFramebuffer`, which is the reason for me opening this PR. Developers who want to utilize the new extension, which also got made core in Vulkan 1.3, and are attempting to use its functionality would have to fallback to the old `VkRenderPass` and `VkFramebuffer` system, effectively being unable to utilize anything new.\r\n\r\nWith this PR, one can set a boolean in the `ImGui_ImplVulkan_InitInfo` struct while initializing the backend so that it does not require a valid `VkRenderPass` to be passed into `ImGui_ImplVulkan_Init`. The new dynamic_rendering functionality only requires an attachment format, which is the reasoning for the new `ColorAttachmentFormat` member in the `ImGui_ImplVulkan_InitInfo` struct. This value is used while creating the pipeline instead of the render pass. The color format is allowed to be `0`, or `VK_FORMAT_UNDEFINED`, which is why I do not assert there. The application developer is also responsible for checking if the extension is present or if the device supports Vulkan 1.3.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2022-02-15T19:28:35Z",
        "closed_at": "2022-02-16T16:02:43Z",
        "merged_at": null,
        "body": "This allow to use added variables in other source files via extern declaration.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-02-09T04:21:24Z",
        "closed_at": "2022-02-09T08:47:11Z",
        "merged_at": "2022-02-09T08:47:11Z",
        "body": "This C++20 warning was first observed and reported with clang in #3040 were it was decided that is should be ignored\r\n\r\nThe warning also appears with gcc 11 and and std=c++20 so this commit disables it as per #3040\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2022-02-08T01:17:51Z",
        "closed_at": "2022-02-11T11:30:55Z",
        "merged_at": null,
        "body": "This change actually lets us save 400 KB of machine code in our .exe file because a bunch of Dear ImgUi-related calculations can be moved from runtime to compile-time.\r\n\r\nYour guidelines document says that C++11 isn't required, but there are recent commits that seem to say that pre-C++11 isn't being supported anymore, so I assume that the guidelines are out of date on this.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2022-01-27T18:00:37Z",
        "closed_at": "2022-01-31T10:59:21Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-01-27T17:52:12Z",
        "closed_at": "2022-01-31T10:59:10Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-01-27T12:25:08Z",
        "closed_at": "2022-06-08T13:27:51Z",
        "merged_at": null,
        "body": "Implement a function to update the undo/redo state for an `InputText`\r\nafter a user callback has modified the buffer.\r\n\r\nThis function is a bit weird in that it uses the wide string from the\r\nstate for the old text and a utf8 buffer for the new text. It does this\r\nbecause these are the formats that are already available at the time we\r\nneed them without requiring additional storage.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2022-01-24T15:19:52Z",
        "closed_at": "2022-01-31T11:02:14Z",
        "merged_at": null,
        "body": "imgui's context doesn't seem to need to contain mutable ImFonts. Once a ImFont is created it cannot change. This change alters the interface to make things a little bit more clear on the intent.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-01-22T23:38:07Z",
        "closed_at": "2022-01-24T11:09:03Z",
        "merged_at": "2022-01-24T11:09:03Z",
        "body": "Fixes following warnings generated when building with intel compiler\r\n\r\n1>imgui_internal.h(351): warning #161: unrecognized #pragma\r\n1>  IM_MSVC_RUNTIME_CHECKS_OFF\r\n1>  ^\r\n1>\r\n1>imgui_internal.h(351): warning #296: expected a \",\"\r\n1>  IM_MSVC_RUNTIME_CHECKS_OFF",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-01-22T17:40:49Z",
        "closed_at": "2022-01-24T13:13:10Z",
        "merged_at": null,
        "body": "The test should never fail: if it fails then the user is on\r\na 32-bit machine and neglected to redefine ImTextureID.\r\n\r\nIt confused me a lot that this test was done where it is done\r\n(in code executed every frame). Although it should end up as a\r\nno-op, it suggests that the user is *allowed* to redefine\r\nImTextureID to something that is less than 64-bit, in which\r\ncase the `desc_set[0] = bd->FontDescriptorSet;` would be\r\nnecessary, under certain circumstances. And that suggests\r\nthat ImTextureID is *still* under the users control, despite\r\nusing this backed.\r\n\r\nThis backend (imgui_impl_vulkan.cpp) uses ImTextureID to store\r\na VkDescriptorSet - no matter what the user does. And therefore\r\nthis backend should not allow the user to have an ImTextureID\r\nthat can't contain 64-bits of data, at all.\r\n\r\nThe patch moves the test of a 32-bit user neglecting to redefine\r\nImTextureID to a more logical place and simply always fails if\r\nthey didn't, as it should with this backend when ImTextureID can't\r\nhold a VkDescriptorSet.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-01-22T15:26:22Z",
        "closed_at": "2022-01-24T11:20:39Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 19,
        "changed_files": 4,
        "created_at": "2022-01-22T14:10:06Z",
        "closed_at": "2022-02-04T15:52:01Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-01-21T12:09:48Z",
        "closed_at": "2022-01-31T11:26:16Z",
        "merged_at": null,
        "body": "`SDL_WINDOW_OPENGL` is only necessary when using OpenGL directly, bypassing SDL2's Renderer API. There's a similar flag for doing the same with Vulkan - `SDL_WINDOW_VULKAN`. Since this example doesn't bypass the Renderer API, these flags aren't needed.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-01-14T19:50:24Z",
        "closed_at": "2022-01-16T17:16:39Z",
        "merged_at": "2022-01-16T17:16:39Z",
        "body": "There was a missing `)` after hyperlinks to opengl and vulkan backends.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-01-14T04:54:40Z",
        "closed_at": "2022-01-14T13:10:17Z",
        "merged_at": null,
        "body": "Calls to ImGui_ImplGlfw_TranslateUntranslatedKey result in JavaScript exceptions, relevant code: https://github.com/emscripten-core/emscripten/blob/main/src/library_glfw.js#L1556",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-01-12T01:42:27Z",
        "closed_at": "2022-01-12T13:12:26Z",
        "merged_at": "2022-01-12T13:12:26Z",
        "body": "The simplest PR?",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-01-11T22:00:58Z",
        "closed_at": "2022-01-12T13:17:06Z",
        "merged_at": null,
        "body": "[SetIndexBuffer](https://www.w3.org/TR/webgpu/#dom-gpurenderencoderbase-setindexbuffer) and [SetVertexBuffer](https://www.w3.org/TR/webgpu/#dom-gpurenderencoderbase-setvertexbuffer) require size parameter in bytes.\r\n(This update fixed an app crash)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-01-10T09:29:05Z",
        "closed_at": "2022-01-13T17:47:41Z",
        "merged_at": null,
        "body": "Compilation error:\r\n```c++\r\n$ g++ -o imsdl.o imgui_impl_sdl.cpp -I/usr/include/SDL2 -c\r\nimgui_impl_sdl.cpp: In function \u2018bool ImGui_ImplSDL2_Init(SDL_Window*)\u2019:\r\nimgui_impl_sdl.cpp:253:13: error: \u2018ImGuiKey_KeypadEnter\u2019 was not declared in this scope; did you mean \u2018ImGuiKey_KeyPadEnter\u2019?\r\n  253 |   io.KeyMap[ImGuiKey_KeypadEnter] = SDL_SCANCODE_KP_ENTER;\r\n      |             ^~~~~~~~~~~~~~~~~~~~\r\n      |             ImGuiKey_KeyPadEnter\r\n```",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-01-08T03:24:13Z",
        "closed_at": "2022-01-08T09:28:26Z",
        "merged_at": null,
        "body": "make sure _UNICODE and UNICODE macro definition are both defined or not.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 27,
        "changed_files": 2,
        "created_at": "2022-01-07T23:53:58Z",
        "closed_at": "2023-01-20T23:58:02Z",
        "merged_at": null,
        "body": "This belongs to issue #3572\r\n\r\nIt allows using more than 64 columns in a table. I've applied the patches mentioned in https://github.com/ocornut/imgui/issues/3572. Just the \"IsEqual\" method was missing there.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-01-05T22:50:38Z",
        "closed_at": "2023-05-15T06:48:05Z",
        "merged_at": null,
        "body": "In order to use ImGui with Vulkan you need to provide a descriptor set pool, which in many cases will get exclusively allocated for ImGui. This PR makes the parameter optional and automatically creates/destroys an internal pool if non is provided.\r\n\r\nI oriented the creation code on the examples, but the pool is obviously waaayy oversized for ImGui alone, it should probably get adopted to the real sizes needed.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 10113,
        "deletions": 451,
        "changed_files": 51,
        "created_at": "2022-01-04T20:55:49Z",
        "closed_at": "2022-01-04T22:32:13Z",
        "merged_at": null,
        "body": "Translate window coordinates and handle mouse capture for GLFW windows that are child HWNDs.  At present the only way GLFW windows _can be_ child HWNDs is if the ImGui caller explicitly setparents them.  See https://github.com/ocornut/imgui/issues/4860 for the use case.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2021-12-23T20:19:01Z",
        "closed_at": "2021-12-30T14:04:26Z",
        "merged_at": null,
        "body": "This pull request adds support for the [Metal C++ Bindings](https://developer.apple.com/metal/cpp/) distributed by Apple. This has to be enabled explicitly with `#define IMGUI_IMPL_METAL_CPP`. It also make possible to include `imgui_impl_metal.h` from the C++ code. ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-12-21T04:45:26Z",
        "closed_at": "2021-12-21T13:33:15Z",
        "merged_at": null,
        "body": "In SDL 2.0.19 the SDL Renderer function ```SDL_RenderGeometryRaw()``` was changed from taking an ```int``` pointer for color to an ```SDL_Color``` pointer. Doesn't cause too much of a problem since bytewise they're both RGBA, just need to change the pointer casts and add a preprocessor guard so it won't break for people using SDL 2.0.18 (the latest stable version).",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-12-11T14:06:40Z",
        "closed_at": "2021-12-13T10:38:13Z",
        "merged_at": null,
        "body": "Results in an infinite loop if the user passes upper range = UINT16_MAX or UINT32_MAX with ImWchar32.\r\n\r\nAssumes IM_UNICODE_CODEPOINT_MAX < UINT32_MAX.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-11-27T10:41:57Z",
        "closed_at": "2021-11-28T23:05:58Z",
        "merged_at": "2021-11-28T23:05:58Z",
        "body": "This prevents compilation on ARM GCC. Compilation log:\r\n```\r\nerror: missing binary operator before token \"defined\"\r\n  267 | #elif defined(__GNUC__) defined(__arm__) && !defined(__thumb__)\r\n      |                         ^~~~~~~\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 271,
        "deletions": 93,
        "changed_files": 6,
        "created_at": "2021-11-24T19:34:27Z",
        "closed_at": "2021-12-13T11:03:39Z",
        "merged_at": null,
        "body": "This PR makes changes to the macOS backend and the Apple example that uses the macOS backend.\r\n\r\nFirstly, the PR addresses some issues and shortcomings of in `imgui_impl_osx.mm` as follows\r\n\r\n* Fixed keyboard support using `kVK_` codes and keyboard modifier handling.\r\n    * Keyboard navigation now works correctly for features such as navigating windows\r\n* Added complete gamepad support via GameController framework\r\n\r\nSecondly, the `example_apple_metal.mm` example has addressed the unhandled key event chimes, which adds a `keyDown:` handler.\r\n\r\nThis PR does not touch the core of IMGUI.\r\n\r\n**NOTE**: \r\n\r\nThere is a single breaking change to the `ImGui_ImplOSX_Init` API, which now takes the same `NSView` being used by the `ImGui_ImplOSX_NewFrame`. This NSView is used to attach an `NSTextInputClient` to the responder chain to process key presses using the same approach as GLFW and SDL. This approach ensures the macOS ImGui backend us macOS APIs for determining characters that should be accepted as text input.",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2021-11-14T23:59:50Z",
        "closed_at": "2023-07-11T10:48:59Z",
        "merged_at": null,
        "body": "Hey! I got into styling ImGui quite a bit, and needed to modify the thickness of the docking splitter.\r\n\r\nI moved the existing global variable into the style, I've updated the various places it was used, and added it to the style tab in imgui_demo.cpp\r\n\r\nMy only notes/questions are:\r\n- Did I miss anything? \ud83e\udd72 \r\n- There's a spot in code where I've updated a comment that's questioning the relation to the splitter size and I'm not completely sure what eventually calls ImGui::DockNodeTreeFindVisibleNodeByPos, so I left it alone for now\r\n- `const float dock_spacing = 0.0f;// g.Style.ItemInnerSpacing.x; // FIXME: Relation to Style.DockingSplitterSize?`\r\n\r\n![Example](https://raw.githubusercontent.com/wobbier/MitchEngine/master/Docs/GitHub/Havana.png)\r\n![Ik544P236z](https://user-images.githubusercontent.com/3254047/141704104-a3aaa0d6-57dd-4076-9025-123061ce9b3d.gif)\r\n\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-11-08T03:05:28Z",
        "closed_at": "2021-11-08T14:57:15Z",
        "merged_at": null,
        "body": "This fixes the broken conditional inclusion logic for GLFW_HAS_MOUSE_PASSTHROUGH.\r\n\r\n#4635 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2021-10-26T14:44:08Z",
        "closed_at": "2021-11-02T13:12:59Z",
        "merged_at": null,
        "body": "I am currently using an [ImDrawList](https://gist.github.com/ocornut/51367cc7dfd2c41d607bb0acfa6caf66) like in the party's to do custom drawing for a record button using a ImGui::InvisibleButton. I draw the background of the button  i.e. : \r\n```\r\nif(!ImGui::IsItemDisabled() && mouse.x > 0.0f  && mouse.x < 1.0f && mouse.y > 0.0f && mouse.y < 1.0f){\r\n    col = colors[ImGuiCol_ButtonHovered];\r\n}\r\n d->AddRectFilled(a,b,ImGui::GetColorU32(col),0.0f,ImDrawFlags_None);\r\n```\r\nAs I needed to detect if my item was disabled and the BeginDisabled api is Beta I saw the need to add it. The workaround would of needed that I include imgui_internal.h in my project to have access to the ImGuiContext struct def.\r\n\r\nI imagine that imgui_internal should not be used by users ? \r\n\r\n\r\nExample:\r\nhttps://imgur.com/a/AiJ4sHk",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-10-23T23:13:37Z",
        "closed_at": "2021-11-02T11:51:22Z",
        "merged_at": "2021-11-02T11:51:22Z",
        "body": "This probably happened due to word wrapping - at least with GitHub's editor, `ImDrawListSharedData` is wrapped to the start of a line, so the backtick was placed one (wrapped) line above it.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-10-21T12:47:42Z",
        "closed_at": "2021-11-02T11:48:53Z",
        "merged_at": null,
        "body": "As dicussed in PR #4656",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-10-18T19:44:17Z",
        "closed_at": "2021-10-19T12:17:29Z",
        "merged_at": null,
        "body": "Simple update to the readme on the opengl emscripten example to let others know why firefox might not be working.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-10-15T15:03:04Z",
        "closed_at": "2021-10-21T12:29:24Z",
        "merged_at": null,
        "body": "Been experimenting a bit with my application which uses ImGui with GLFW and OpenGL3 as its backend. Sometimes when closing the application I notices the following output:\r\n```\r\n/mnt/data/dev/DLXEmu/external/imgui/backends/imgui_impl_glfw.cpp:703:25: runtime error: member access within null pointer of type 'ImGui_ImplGlfw_Data'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /mnt/data/dev/DLXEmu/external/imgui/backends/imgui_impl_glfw.cpp:703:25 in\r\n```\r\nLook like the function is trying to deference a null pointer, which this patch should prevent.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-10-13T16:16:49Z",
        "closed_at": "2021-11-04T13:36:05Z",
        "merged_at": null,
        "body": "In case of Windows and custom loader file, no OpenGL API is visible to OpenGL3 implementation.\r\nIt is needed to include loader header that provides it.\r\n\r\nCan be provided via CMake for example:\r\n\r\n`target_compile_definitions(target PRIVATE IMGUI_IMPL_OPENGL_LOADER_CUSTOM=\"custom_opengl3_loader.h\")`\r\n",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-10-06T20:45:06Z",
        "closed_at": "2021-10-07T12:58:10Z",
        "merged_at": "2021-10-07T12:58:10Z",
        "body": "Initializes a missing local variable leading to wrong memory accesses in Google Dawn\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-10-04T09:57:52Z",
        "closed_at": "2021-10-06T10:01:16Z",
        "merged_at": null,
        "body": "\r\nHey,\r\nWhen compiling with mingw bundled clang, it will complain that the `gnu_printf` format argument is not supported.\r\nusing the other macro with `printf` however works fine.\r\n\r\n```\r\n./imgui.h:608:118: warning: 'format' attribute argument not supported: gnu_printf [-Wignored-attributes]\r\n    IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);\r\n                                                                                                                     ^\r\n./imgui.h:98:52: note: expanded from macro 'IM_FMTLIST'\r\n#define IM_FMTLIST(FMT)             __attribute__((format(gnu_printf, FMT, 0)))\r\n                                                   ^\r\n```\r\n\r\nI changed the conditions so it will use `format(printf, ...)` on mingw clang, but still use `format(gnu_printf,...)` for mingw gcc\r\n\r\nTested with mingw clang/gcc and also native windows clang. All report no errors with this fix.\r\n\r\n```\r\n>g++ --version\r\ng++.exe (Rev5, Built by MSYS2 project) 10.3.0\r\nCopyright (C) 2020 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n>clang++ --version\r\nclang version 12.0.1\r\nTarget: x86_64-w64-windows-gnu\r\nThread model: posix\r\nInstalledDir: C:/msys64/mingw64/bin\r\n>/a/LLVM/bin/clang++ --version              \r\nclang version 12.0.1\r\nTarget: x86_64-pc-windows-msvc\r\nThread model: posix\r\nInstalledDir: A:\\LLVM\\bin\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2021-09-20T17:50:21Z",
        "closed_at": "2021-09-21T10:37:12Z",
        "merged_at": null,
        "body": "Fixes #4557 by replacing CFAbsoluteTimeGetCurrent with mach_absolute_time. Tested.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-09-14T19:35:34Z",
        "closed_at": "2021-09-15T10:14:27Z",
        "merged_at": null,
        "body": "Before: \"Your renderer is not using the font texture correctly or it hasn't be uploaded to GPU.\"\r\nAfter: \"Your renderer is not using the font texture correctly or it hasn't been uploaded to the GPU.\"\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2021-09-05T21:51:55Z",
        "closed_at": "2021-10-06T15:53:01Z",
        "merged_at": null,
        "body": "This change is a follow-up to #4472 and implements WebGPU changes up to dawn tagged for chrome 4633.\r\nThis was done according to https://hackmd.io/OxDovqjoTXqC_r_WY-aM1Q , however, the current version of Emscriptem seems not up to date yet.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-08-30T19:41:24Z",
        "closed_at": "2021-08-31T10:53:08Z",
        "merged_at": null,
        "body": "I noticed when I put a window near the bottom right of the display then resizing the window to be small, that anything inside started to be shown outside of it. This is more obvious with large images.\r\n\r\nI tracked down the problem, and it was that al_set_clipping_rectangle takes position and size, not minimum and maximum position.\r\n\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-08-14T04:19:50Z",
        "closed_at": "2021-08-17T11:48:55Z",
        "merged_at": null,
        "body": "- Fixed a typo\r\n\r\n(Apologies if this is a bad pull request)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-08-13T08:16:29Z",
        "closed_at": "2021-08-17T11:47:17Z",
        "merged_at": "2021-08-17T11:47:17Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 51,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2021-08-11T11:22:03Z",
        "closed_at": "2021-11-20T14:15:02Z",
        "merged_at": null,
        "body": "\u2026ices for 12 segment case (#4419)\r\n\r\nBefore introduction of adaptive arcs PathArcToFast() were operating on 12 vertices table.\r\nNow it is replaced by internal _PathArcToFastEx() doing same job but with greater granularity,\r\nPathArcToFast was left as a fallback.\r\n",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-08-08T02:29:19Z",
        "closed_at": "2021-08-17T14:25:01Z",
        "merged_at": null,
        "body": "This change leverages the existing < 0x20 check and it's newline/tab-to-flag matching to allow those characters to explicitly bypass the named filter checks when the given flag is enabled.\r\n\r\nYou can thus have a multiline input text that only allows, e.g, uppercase hex characters, but still have multipline lines.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 124,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2021-08-07T09:26:48Z",
        "closed_at": "2023-06-30T09:26:38Z",
        "merged_at": null,
        "body": "I have encountered several problems using gamepads with imgui:\r\n\r\n- It is not possible to use multiple gamepads.\r\n- The GLFW backend incorrectly reports my mouse and keyboard as joysticks on Linux and therefore prevents me from using my gamepad.\r\n- The current implementation of the gamepad dpad buttons for GLFW does not work on Linux.\r\nThis is probably a result of a bug in GLFW.\r\nIf we want to retrieve the gamepad state on Linux with the code below, we will only be able to navigate downwards with dpad right and we can only get up by pressing the right stick.\r\nApparently `buttons` is indexed differently on (Manjaro) Linux and Windows.\r\n```c++\r\n#define MAP_BUTTON(NAV_NO, BUTTON_NO)       { if (buttons_count > BUTTON_NO && buttons[BUTTON_NO] == GLFW_PRESS) io.NavInputs[NAV_NO] = 1.0f; }\r\n#define MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) { float v = (axes_count > AXIS_NO) ? axes[AXIS_NO] : V0; v = (v - V0) / (V1 - V0); if (v > 1.0f) v = 1.0f; if (io.NavInputs[NAV_NO] < v) io.NavInputs[NAV_NO] = v; }\r\nint axes_count = 0, buttons_count = 0;\r\nconst float* axes = glfwGetJoystickAxes(GLFW_JOYSTICK_1, &axes_count);\r\nconst unsigned char* buttons = glfwGetJoystickButtons(GLFW_JOYSTICK_1, &buttons_count);\r\n...\r\nMAP_BUTTON(ImGuiNavInput_DpadLeft,   13);    // D-Pad Left\r\nMAP_BUTTON(ImGuiNavInput_DpadRight,  11);    // D-Pad Right\r\nMAP_BUTTON(ImGuiNavInput_DpadUp,     10);    // D-Pad Up\r\nMAP_BUTTON(ImGuiNavInput_DpadDown,   12);    // D-Pad Down\r\n...\r\n#undef MAP_BUTTON\r\n```\r\n- If we change this as follows, dpad navigation will work fine (on Linux).\r\n```c++\r\n...\r\nMAP_BUTTON(ImGuiNavInput_DpadLeft, GLFW_GAMEPAD_BUTTON_DPAD_LEFT);\r\nMAP_BUTTON(ImGuiNavInput_DpadRight, GLFW_GAMEPAD_BUTTON_DPAD_RIGHT);\r\nMAP_BUTTON(ImGuiNavInput_DpadUp, GLFW_GAMEPAD_BUTTON_DPAD_UP);\r\nMAP_BUTTON(ImGuiNavInput_DpadDown, GLFW_GAMEPAD_BUTTON_DPAD_DOWN);\r\n...\r\n```\r\n- Since we are only interested in gamepads, we can use `glfwGetGamepadState` instead, which behaves consistently and is especially made for gamepads.\r\n\r\nAll of that should be resolved with this commit.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 106,
        "deletions": 85,
        "changed_files": 3,
        "created_at": "2021-08-06T22:04:32Z",
        "closed_at": "2021-08-07T09:26:55Z",
        "merged_at": null,
        "body": "I have encountered several problems using gamepads with imgui:\r\n\r\n- It is not possible to use multiple gamepads.\r\n- The GLFW backend incorrectly reports my mouse and keyboard as joysticks on Linux and therefore prevents me from using my gamepad.\r\n- The current implementation of the gamepad dpad buttons for GLFW does not work on Linux.\r\nThis is probably a result of a bug in GLFW.\r\nIf we want to retrieve the gamepad state on Linux with the code below, we will only be able to navigate downwards with dpad right and we can only get up by pressing the right stick.\r\nApparently `buttons` is indexed differently on (Manjaro) Linux and Windows.\r\n```c++\r\n#define MAP_BUTTON(NAV_NO, BUTTON_NO)       { if (buttons_count > BUTTON_NO && buttons[BUTTON_NO] == GLFW_PRESS) io.NavInputs[NAV_NO] = 1.0f; }\r\n#define MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) { float v = (axes_count > AXIS_NO) ? axes[AXIS_NO] : V0; v = (v - V0) / (V1 - V0); if (v > 1.0f) v = 1.0f; if (io.NavInputs[NAV_NO] < v) io.NavInputs[NAV_NO] = v; }\r\nint axes_count = 0, buttons_count = 0;\r\nconst float* axes = glfwGetJoystickAxes(GLFW_JOYSTICK_1, &axes_count);\r\nconst unsigned char* buttons = glfwGetJoystickButtons(GLFW_JOYSTICK_1, &buttons_count);\r\n...\r\nMAP_BUTTON(ImGuiNavInput_DpadLeft,   13);    // D-Pad Left\r\nMAP_BUTTON(ImGuiNavInput_DpadRight,  11);    // D-Pad Right\r\nMAP_BUTTON(ImGuiNavInput_DpadUp,     10);    // D-Pad Up\r\nMAP_BUTTON(ImGuiNavInput_DpadDown,   12);    // D-Pad Down\r\n...\r\n#undef MAP_BUTTON\r\n```\r\n- If we change this as follows, dpad navigation will work fine (on Linux).\r\n```c++\r\n...\r\nMAP_BUTTON(ImGuiNavInput_DpadLeft, GLFW_GAMEPAD_BUTTON_DPAD_LEFT);\r\nMAP_BUTTON(ImGuiNavInput_DpadRight, GLFW_GAMEPAD_BUTTON_DPAD_RIGHT);\r\nMAP_BUTTON(ImGuiNavInput_DpadUp, GLFW_GAMEPAD_BUTTON_DPAD_UP);\r\nMAP_BUTTON(ImGuiNavInput_DpadDown, GLFW_GAMEPAD_BUTTON_DPAD_DOWN);\r\n...\r\n```\r\n- Since we are only interested in gamepads, we can use `glfwGetGamepadState` instead, which behaves consistently and is especially made for gamepads.\r\n\r\nAll of that should be resolved with this commit.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 2,
        "changed_files": 8,
        "created_at": "2021-08-02T18:28:22Z",
        "closed_at": "2021-08-17T18:15:24Z",
        "merged_at": null,
        "body": "This PR address #3532.\r\n\r\nImplemented on all backends. Exceptions:\r\nglut - no explicit API available to handle focus\r\nmarmalade - not supported (SDK is no longer available anywhere)\r\niOS - backend is very basic and handle only touches, not relevant to this PR\r\nAndroid - focus event appears to not event be fully exposed in native API, not a single example was found; this is usually handled in onPause/onResume, can be considered out of the scope of this PR; using hardware keyboard isn't usual use case",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-07-29T00:32:40Z",
        "closed_at": "2021-07-29T07:52:43Z",
        "merged_at": null,
        "body": "\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-07-21T22:50:17Z",
        "closed_at": "2021-08-31T11:15:03Z",
        "merged_at": null,
        "body": "It's a really small fix. I guess nobody has histograms with negative values. \r\n\r\nmin < 0\r\nmax > 0\r\n\r\n0 at the top\r\n1 at the bottom\r\n\r\nzero_line_t = 1 - (-min / (max-min)) = 1 + min / (max - min) ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 29,
        "changed_files": 2,
        "created_at": "2021-07-21T22:36:04Z",
        "closed_at": "2021-07-26T14:40:23Z",
        "merged_at": null,
        "body": "(Apologies for the notification spam, apparently you can't reopen a PR if you force-push to it while it is closed.)\r\n\r\nThis PR fixes https://github.com/ocornut/imgui/issues/4346 as well as the unnecessary recreation of backend-owned device objects mentioned in https://github.com/ocornut/imgui/pull/4347#issuecomment-884540385.\r\n\r\nNot sure why this example was recreating the entire swap chain on resize (it's been like that forever), but `ResizeBuffers` is the correct way to react to `WM_SIZE`.\r\n\r\nOnly the Direct3D 12 sample was affected, other samples and viewport-aware backends are fine:\r\n\r\n* [Direct3D 10 Sample](https://github.com/ocornut/imgui/blob/c881667c00655c98dba41deb942587e0041d0ed0/examples/example_win32_directx10/main.cpp#L229)\r\n* [Direct3D 11 Sample](https://github.com/ocornut/imgui/blob/c881667c00655c98dba41deb942587e0041d0ed0/examples/example_win32_directx11/main.cpp#L233)\r\n* [Direct3D 10 Docking Backend](https://github.com/ocornut/imgui/blob/7bfc379a23e97b6777eb80aafb50a8e6248904cd/backends/imgui_impl_dx10.cpp#L666)\r\n* [Direct3D 11 Docking Backend](https://github.com/ocornut/imgui/blob/7bfc379a23e97b6777eb80aafb50a8e6248904cd/backends/imgui_impl_dx11.cpp#L683)\r\n* [Direct3D 12 Docking Backend](https://github.com/ocornut/imgui/blob/7bfc379a23e97b6777eb80aafb50a8e6248904cd/backends/imgui_impl_dx12.cpp#L997)\r\n\r\n-------\r\n\r\nNote that there is still an unrelated alt+enter debug layer crash on the docking branch even with this fix. It's a more complicated issue that I need to investigate further. (It _seems_ that command queues owned by platform windows are referencing the main viewport's back buffers for some reason.)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2021-07-11T10:40:02Z",
        "closed_at": "2021-07-12T16:33:39Z",
        "merged_at": null,
        "body": "Let me know if the whitespace change was inappropriate, it's not totally clear to me what the scheme is here.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2021-07-07T15:40:45Z",
        "closed_at": "2023-10-16T19:32:27Z",
        "merged_at": null,
        "body": "The idea of this new flag is to create an imgui window the size of the parent Windows window and then to redirect movement to it. This allows for very easy creation of simple apps with a UI.\r\nThis only works on windows.\r\n\r\nThe result:\r\n![Desktop_2021 07 07_-_17 09 17 01_Trim](https://user-images.githubusercontent.com/67655795/124789223-60d3cf80-df4a-11eb-8a05-db9b9e2048bb.gif)\r\n\r\nNow making the windows window transparent you can get something nice looking like this:\r\n![Desktop_2021 07 07_-_17 35 40 04_Trim](https://user-images.githubusercontent.com/67655795/124789026-341fb800-df4a-11eb-9671-252d17f9486f.gif)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-07-07T03:40:59Z",
        "closed_at": "2021-07-07T16:23:21Z",
        "merged_at": null,
        "body": "clear references when remove DockNode",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-06-29T13:37:53Z",
        "closed_at": "2021-06-30T13:51:38Z",
        "merged_at": null,
        "body": "Updated Gallery Thread link from the issue #3488 (PART 12) to the newest issue, #3793 (PART 13)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2021-06-25T03:02:07Z",
        "closed_at": "2021-06-25T14:20:55Z",
        "merged_at": null,
        "body": "Fix issue: https://github.com/ocornut/imgui/issues/4266",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2021-06-19T18:10:46Z",
        "closed_at": "2021-06-21T09:52:20Z",
        "merged_at": null,
        "body": "In OpenGL, after a shader program has been linked, shader objects don't need to be kept, neither attached to the program nor at all, so we can destroy them right away.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2021-06-13T14:59:18Z",
        "closed_at": "2021-06-14T15:44:40Z",
        "merged_at": null,
        "body": "On Win32 higher buts from the texture id are cut off\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2021-06-08T02:12:14Z",
        "closed_at": "2021-06-14T15:59:14Z",
        "merged_at": null,
        "body": "The fence being waited upon was not the one associated with the current frame.\r\nThis results in validation error detecting a reset of command buffers still in\r\nuse and resetting fences while still in use.\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-06-05T13:08:00Z",
        "closed_at": "2021-06-05T14:27:31Z",
        "merged_at": "2021-06-05T14:27:31Z",
        "body": "This fix is to solve the problem due to a commit 556689591c529855ceb07e779dd8a46a12f38008 for  #4170.\r\nIn some platform, `extension` returned from `glGetStringi` can be `NULL`, and then, it causes access violation in `strcmp`.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2021-05-30T19:29:21Z",
        "closed_at": "2021-05-30T23:52:31Z",
        "merged_at": null,
        "body": "Solves issue: https://github.com/ocornut/imgui/issues/769\r\n\r\nDescription:\r\nThis pull request adds an `ImGuiSelectableFlags_AllowRightClick` flag allowing selection of an item with right click.\r\n\r\nUsage:\r\n```\r\nif (ImGui::Selectable(<label>, <selected>, ImGuiSelectableFlags_SpanAllColumns | ImGuiSelectableFlags_AllowRightClick))\r\n{\r\n    if (ImGui::IsMouseReleased(ImGuiMouseButton_Right))\r\n    {\r\n        // Rick click pressed on current item\r\n    }\r\n}\r\n```",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2021-05-24T03:14:45Z",
        "closed_at": "2021-06-15T13:29:21Z",
        "merged_at": null,
        "body": "My application has a material editor that allows you to pick from a small fixed set of colours, and I wanted to use a combo box. I thought it would be nice to display preview swatches next to them. I can do this by adding rectangles to the DrawList, but there's no elegant way to adjust the position of the combo preview text without modifying BeginCombo().\r\n\r\nThis PR adds the following functionality:\r\n\r\n- New flag: `ImGuiComboFlags_ColorPreview`\r\n- New flag: `ImGuiSelectableFlags_ColorPreview`\r\n- `col_preview` parameter (of type ImVec4) added to BeginCombo() and Selectable()\r\n  - Displays a swatch to the left of the text when the corresponding flag is enabled\r\n  - RenderColorRectWithAlphaCheckerboard is used to match the previews shown by ColorEdit, etc. for colours with alpha channels\r\n- The demo is updated to demonstrate this\r\n\r\n<img width=\"305\" alt=\"imgui_combo_color_preview\" src=\"https://user-images.githubusercontent.com/228195/119290581-ac554700-bc44-11eb-83fb-2742f8050e41.png\">\r\n\r\nThere are some questions I wasn't sure about:\r\n\r\n- Adding an extra parameter to these two functions just for one use case makes the API surface a bit more cluttered - is there a better way to do this? (Pushing to a stack or calling a new SetNextXXX function...?)\r\n- Should the colour be supplied as an ImVec4 or an ImU32?\r\n- The swatches may need to use one of the rounding settings from the style\r\n\r\nI don't know if this is the ideal implementation, but hopefully it's a good starting point.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2021-05-22T10:40:52Z",
        "closed_at": "2021-05-24T15:15:11Z",
        "merged_at": null,
        "body": "A trivial fix for HiDPI framebuffers.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-05-17T23:30:00Z",
        "closed_at": "2021-05-18T12:50:29Z",
        "merged_at": null,
        "body": "Details in the following ticket: https://github.com/ocornut/imgui/issues/4155",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2363,
        "deletions": 2347,
        "changed_files": 8,
        "created_at": "2021-05-17T22:29:33Z",
        "closed_at": "2021-05-19T19:46:31Z",
        "merged_at": null,
        "body": "While working on my own C++ bindings for Dear ImGui I noticed a lot of bloatifacts in the generated code. C++11 introduced a \"noexcept\" specifier that tells compilers a function will not throw any exceptions, allowing for additional optimizations and a smaller code fingerprint.\r\n\r\nSee this trivial example at https://gcc.godbolt.org/z/fWdYPMfTT\r\n\r\n```\r\nstruct S { ~S(); };\r\nstruct T { ~T() noexcept; };\r\n\r\nextern S& ext_std(S* s);\r\nextern T& ext_nox(T* t) noexcept;\r\n\r\nextern S f1(S& a)\r\n{\r\n    S x(a);\r\n    return ext_std(&x);\r\n}\r\n\r\nextern T f2(T& a)\r\n{\r\n    T x(a);\r\n    return ext_nox(&x);\r\n}\r\n```\r\n\r\nEven in this most trivial example, the noexcept specifier reduces compile time and output instructions by 6:\r\n\r\n```\r\nf1(S&):\r\n        pushq   %r12\r\n        movq    %rdi, %r12\r\n        subq    $16, %rsp\r\n        leaq    15(%rsp), %rdi\r\n        call    ext_std(S*)\r\n        leaq    15(%rsp), %rdi\r\n        call    S::~S() [complete object destructor]\r\n        addq    $16, %rsp\r\n        movq    %r12, %rax\r\n        popq    %r12\r\n        ret\r\n        movq    %rax, %r12\r\n        jmp     .L2\r\nf1(S&) [clone .cold]:\r\n.L2:\r\n        leaq    15(%rsp), %rdi\r\n        call    S::~S() [complete object destructor]\r\n        movq    %r12, %rdi\r\n        call    _Unwind_Resume\r\nf2(T&):\r\n        pushq   %r12\r\n        movq    %rdi, %r12\r\n        subq    $16, %rsp\r\n        leaq    15(%rsp), %rdi\r\n        call    ext_nox(T*)\r\n        leaq    15(%rsp), %rdi\r\n        call    T::~T() [complete object destructor]\r\n        addq    $16, %rsp\r\n        movq    %r12, %rax\r\n        popq    %r12\r\n        ret\r\n```\r\n\r\nThe absence of exceptions can be deduced by the compiler within a compilation unit, at the cost of additional compilation time.\r\n\r\nSo, people who are using a unity build (not Unity(R)) or for calls within imgui functions themselves, adding the specifier has little effect.\r\n\r\nHowever anyone writing modern C++ code and using a vendor'd or librarized imgui can expect to see their code suddenly behaving as though exceptions were turned on.\r\n\r\nThis PR:\r\n\r\na) Limits itself to entry/exit points (Begin/End) that are intended to be invoked externally, as these typically straddle scope changes (`if (ImGui::Begin(...)) { ... }`, these appear to be commonly associated in use and bindings with object construction (scope guards), see https://github.com/kfsone/imguiwrap\r\nb) Introduces IMGUI_NOEXCEPT in imconfig.h, annotated but commented out and with a `#if __cplusplus >= 201103L` to disable it for earlier C++ versions,\r\nc) Ensures it is defined-null in imgui.h if it is not already defined to eliminate the effect on users not opting in.\r\n\r\nA demonstration of it impacting scope guarding: https://gcc.godbolt.org/z/5r7aoof5b\r\n\r\nSome cases are more dramatic than others:\r\n\r\n![image](https://user-images.githubusercontent.com/323009/118564138-a3381780-b724-11eb-8489-85777a06cbbc.png)\r\n",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-05-17T19:06:24Z",
        "closed_at": "2021-05-18T13:08:42Z",
        "merged_at": null,
        "body": "![image](https://user-images.githubusercontent.com/33091666/118542359-9387f580-b75b-11eb-9b92-d78feff023ca.png)\r\n\r\nI added these macros because without them, an application wouldn't compile if user defined \"IMGUI_IMPL_VULKAN_NO_PROTOTYPES\" macro. \r\n\r\nOs: KDE Neon 20.04 lts \r\nCompiler: g++ with cmake\r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 840,
        "deletions": 688,
        "changed_files": 9,
        "created_at": "2021-05-17T01:43:17Z",
        "closed_at": "2021-05-18T13:01:54Z",
        "merged_at": null,
        "body": "I ran into this strange crash bug when working on a project using the `features/string_view` branch (since it cooperates far better with Rust), with `IMGUI_USE_WCHAR32` defined in `imconfig.h`.\r\n\r\nThe default implementation of `ImFileOpen` on Windows copies its arguments into an `ImVector<ImWchar>` using Windows API functions which accept wchar_t.\r\n\r\nOn the main Dear ImGui branch, this works fine - half of the elements remain unused, but that's OK.\r\n\r\nThe string view branch inserts a null terminator by indexing the ImVector directly. This breaks when ImWchar is 32 bits since `MultiByteToWideChar` is only filling up half of the space before the terminator.\r\n\r\nThis patch changes the vector's element type to wchar_t and removes the casts which are now unnecessary. I believe this is safe since the input is always UTF-8 and `_wfopen` always accepts wchar_t, so there's no reason for this function to use ImWchar at all.\r\n\r\n---\r\n\r\nI was able to trigger this issue using the Windows examples on the `features/string_view` branch, Visual Studio 2019 and the following steps:\r\n\r\n- Uncomment `#define IMGUI_USE_WCHAR32` in `imconfig.h`\r\n- Build and run any of the examples\r\n- The first NewFrame call attempts to load the settings INI, causing `_wfopen` to crash the application with an invalid argument error",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2021-05-15T01:25:14Z",
        "closed_at": "2021-06-29T14:44:16Z",
        "merged_at": null,
        "body": "This work enables the OpenGL2 backend to be used with multiple contexts.\r\n\r\nThis tries to solve a common problem with happens with music plugins (VST).\r\nOne may want to load more that one of a particular instrument in a music session.\r\nIf creating 2 instruments, the first UI opens with its context, the second UI conflicts and crashes.\r\n\r\nThe problem is resolved by associating the OpenGL data with the ImGui context, instead of it being global.\r\n\r\nAmong many  others, the [Carla] software permits to experience this problem.\r\nThis is the original [issue] about the music plugin where the problem is present.\r\n\r\n[Carla]: https://github.com/falkTX/Carla\r\n[issue]: https://github.com/jpcima/dpf-imgui-example/issues/1",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 98,
        "deletions": 172,
        "changed_files": 2,
        "created_at": "2021-05-08T16:51:08Z",
        "closed_at": "2021-05-16T17:14:41Z",
        "merged_at": null,
        "body": "This changeset introduces some implementation simplifications proposed by @Kangz [here](https://github.com/ocornut/imgui/pull/3632#issuecomment-784083295) and updates the code to be compatible with Emscripten 2.0.20 as described [here](https://github.com/ocornut/imgui/pull/3632#issuecomment-833466167).\r\n\r\nThe major changes are:\r\n* Make use of automatic bind group generation instead of explicitly creating them\r\n* Update the API to the latest WebGPU changes as outlined [here](https://hackmd.io/BtRPZXulQICjbcZi4tLCdg)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2021-05-06T18:49:20Z",
        "closed_at": "2021-05-07T13:12:10Z",
        "merged_at": "2021-05-07T13:12:10Z",
        "body": "Hi! Just noticed that the example build command for both `sdl-gl2` and `sdl-gl3` is missing adding in the backend for the include paths, so it wouldn't find the *impl header.\r\n\r\nThis PR just adds that path to the linux (tested) and macos (not tested, should be fine) commands in the README's\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-05-01T18:48:37Z",
        "closed_at": "2021-05-07T13:18:58Z",
        "merged_at": null,
        "body": "After `Capture()`, `Release()` must be called. See [Remarks](https://docs.microsoft.com/en-us/windows/win32/api/d3d9helper/nf-d3d9helper-idirect3dstateblock9-capture#remarks).\r\n\r\n[Once again, since the stateblock object is an interface, you will need to release it when you are done with it.](https://docs.microsoft.com/en-us/windows/win32/direct3d9/state-blocks-save-and-restore-state#capture-individual-states)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-04-30T06:43:49Z",
        "closed_at": "2021-04-30T16:19:22Z",
        "merged_at": null,
        "body": "\r\nThere is an unused-variable warning when compiling in ```Release``` mode which I experienced when compiling with gcc version 7.5.0 on Ubuntu 18.04. When I compile with ```-Werror``` and ```-Wall``` flags, this results in a compilation error. The reason is as far as I can understand that the ```IM_ASSERT``` macro is removed in ```Release``` builds which renders the local ```g``` variable unused. The changes made in this PR resolved the problem for me.\r\n\r\nHere is the the compiler output:\r\n```\r\nint ImGui::FindWindowFocusIndex(ImGuiWindow*)\u2019:\r\nimgui/imgui.cpp:9509:19: error: unused variable \u2018g\u2019 [-Werror=unused-variable]\r\n     ImGuiContext& g = *GImGui;\r\ncc1plus: all warnings being treated as errors\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-04-25T21:53:39Z",
        "closed_at": "2021-04-26T07:29:39Z",
        "merged_at": "2021-04-26T07:29:39Z",
        "body": "This is an incredibly long PR to review, sorry in advance.\r\n\r\nOne notorious OS is case-insensitive in its file paths, and the others are typically not. By using this long and complex patch, one gains the power to use other OSes to cross-compile to the notorious OS without resorting to symlinks and other wizard tricks, and yet, by the miracle of case-insentiveness, the notorious OS is not affected by this change.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-04-25T17:35:56Z",
        "closed_at": "2021-04-29T15:12:37Z",
        "merged_at": null,
        "body": "This PR fixes a warning caused by an uninitialized pointer in the `ImGuiStoragePair` struct.\r\n\r\n### Warning Info\r\nThe warning log from the compiler is as follows:\r\n![IMGUI warning image](https://i.imgur.com/C4XuFis.png)\r\n\r\nThe warning is thrown in `imgui.h` on line 1888 and 1889. It is shown below.\r\n```cpp\r\n// [Internal]\r\nstruct ImGuiStoragePair\r\n{\r\n    ImGuiID key;\r\n    union { int val_i; float val_f; void* val_p; }; //val_p is not initialized\r\n    ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; } //warning on 1888 \r\n    ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; } //warning on 1889\r\n    ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }\r\n};\r\n```\r\n\r\n### Compiler info\r\nCompiler: MSVC / Visual studio 2019\r\nWarning Level: /W3\r\n\r\n### Fix Info\r\nThis PR fixes it by setting a default value to the `val_p` pointer to nullptr.\r\n\r\n### Testing\r\nI tested this change with the Dear Imgui demo window, and a few windows of my own. It was fully functional without any issue.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-04-22T01:18:46Z",
        "closed_at": "2021-04-26T08:15:55Z",
        "merged_at": "2021-04-26T08:15:55Z",
        "body": "When defining `ImTextureID` to a type such as `Texture*` using the suggested `#define ImTextureID Texture*`, the const-qualifier here stops us from using the texture ID and failing compilation with the below error. Effectively, `const Texture*` is not valid to be pushed as a texture ID anymore. I don't see any other such usages of `ImTextureID` so I just removed the const-qualifier entirely here.\r\n\r\n```\r\n2>imgui\\imgui_draw.cpp(3756,40): error C2664: 'void ImDrawList::PushTextureID(Texture *)': cannot convert argument 1 from 'const Texture *' to 'Texture *'\r\n2>imgui\\imgui_draw.cpp(3756,34): message : Conversion loses qualifiers\r\n```\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2021-04-11T23:37:35Z",
        "closed_at": "2021-04-16T16:36:06Z",
        "merged_at": null,
        "body": "\u2728 CRLF: Because Teletype machines are still relevant in 2021 \u2728\r\n\r\n# Background\r\n\r\nThis PR fixes the clipboard corruption bug described in https://github.com/ocornut/imgui/issues/4029\r\n\r\nIn short: For whatever reason, that user's clipboard gets corrupted when copying text containing non-CRLF newlines. Unfortunately, even after configuring my system to use Russian I was unable to reproduce the issue locally so we're not 100% sure what causes this.\r\n\r\nRegardless though, [the Windows documentation](https://docs.microsoft.com/en-us/windows/win32/dataxchg/standard-clipboard-formats) *does* state that the `CF_UNICODETEXT` clipboard format is expected to use CRLF newlines, so using CRLF newlines is the technically correct thing to do:\r\n\r\n> Unicode text format. **Each line ends with a carriage return/linefeed (CR-LF) combination.** A null character signals the end of the data.\r\n\r\nAs a random anecdotal sample: [SDL's `WIN_SetClipboardText` function](https://github.com/libsdl-org/SDL/blob/bd06538778102f72bad8393ef07da5a1ec444217/src/video/windows/SDL_windowsclipboard.c#L81-L87) expands LF to CRLF as well.\r\n\r\n# Changes\r\n\r\nThe changes to the existing implementation are essentially:\r\n\r\n1. Scan the input string and count LF newlines that are not a part of a CRLF newline.\r\n2. Over-allocate the clipboard text buffer by the number of bare LF newlines to make room for the CRs to be added later.\r\n3. After the UTF8 -> UTF16 widening, convert the bare LF newlines to CRLF.\r\n\r\nThe widening is implemented by iterating over the string backwards and copying it to the end of the buffer to avoid the need for allocating an extra buffer. It's also skipped if the copied text did not contain any newlines. (If that chubby for loop grosses you out too much, I can rewrite it to be simpler at the expense of double-allocating the clipboard buffer.)\r\n\r\n# Performance\r\n\r\nSince this bug seems to be extremely niche I took some basic performance metrics to see how the changes affected things. Unsurprisingly, the performance impact is negligible for a function called so rarely (and usually with very little data.) The results on my machine are summarized below:\r\n\r\nSample Data | Current Implementation | This PR's Implementation\r\n-----|-----|-----\r\n\"Hello, world!\" | 0.073100 ms | 0.491900 ms\r\n`imgui.cpp` with CRLF line endings (566 KB) | 1.428400 ms | 8.495800 ms\r\n`imgui.cpp` with LF line endings (555 KB) | 1.161600 ms | 11.585000 ms\r\nThe complete works of William Shakespeare (10.8 MB) | 28.956500 ms | 90.826100 ms\r\n\r\nSince this isn't a proper microbenchmark, those results tend to be pretty noisy. Either way I don't think people are regularly copying the entirety of the complete works of William Shakespeare from a Dear ImGui app, so I don't think the performance regression will hurt anyone \ud83d\ude05\r\n\r\nYou can find these source of these quick-and-dirty benchmarks in my [`GH-4029` branch](https://github.com/PathogenDavid/imgui/tree/GH-4029) in the `example_glfw_opengl3` project.\r\n\r\n# GLFW\r\n\r\n[GLFW's `_glfwPlatformSetClipboardString` implementation](https://github.com/glfw/glfw/blob/b925a54ef11adab250e4e9592afe918c1f8caebb/src/win32_window.c#L2200) also has this issue.\r\n\r\nAs such, I've modified `imgui_impl_glfw.cpp` to use Dear ImGui's built-in clipboard handling when building for Windows. I did this mainly because our GLFW backend appears to prefer keeping backwards compatibility with older versions of GLFW and the GLFW clipboard implementation offers little value over our own.\r\n\r\n(If I get around to submitting a PR to GLFW we could put it behind a version gate on Windows once it's merged and released.)\r\n\r\n# Allegro\r\n\r\n[Allegro's `win_set_clipboard_text` implementation](https://github.com/liballeg/allegro5/blob/4aa54e6c994af21bc63d8b593673ab3df62390f8/src/win/wclipboard.c#L85-L86) also has this issue. The linked comment suggests they might be resistant to changing this.\r\n\r\nAs such, I disabled the use of Allegro's clipboard in `imgui_impl_allegro5.cpp` on Windows as well.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2021-04-10T16:17:14Z",
        "closed_at": "2021-05-07T15:43:42Z",
        "merged_at": "2021-05-07T15:43:42Z",
        "body": "\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-04-05T12:58:41Z",
        "closed_at": "2021-04-06T07:16:35Z",
        "merged_at": "2021-04-06T07:16:35Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2021-04-03T15:22:43Z",
        "closed_at": "2021-04-06T10:02:14Z",
        "merged_at": null,
        "body": "Note: This PR is based on `docking` branch, but I can create a master branch PR if required.\r\n\r\nCurrently pasting a valid unicode character (such as when using an icon font) can result in it being filtered by the lines:\r\n\r\n```C++\r\n    // Filter private Unicode range. GLFW on OSX seems to send private characters for special keys like arrow keys (FIXME)\r\n    if (c >= 0xE000 && c <= 0xF8FF)\r\n        return false;\r\n```\r\n\r\nSince pastes originate from the clipboard, they are likely valid unicode and do not originate from these special keys, thus my proposed solution is a flag which hints the data source is from a clipboard, rather than from key presses:\r\n\r\n```C++\r\n    // Filter private Unicode range. GLFW on OSX seems to send private characters for special keys like arrow keys (FIXME)\r\n    if ( !(flags & ImGuiInputTextFlags_FromClipboard) && c >= 0xE000 && c <= 0xF8FF)\r\n        return false;\r\n```\r\n\r\nThis is a 3 line change (actually 4 since there is a separator needed on the last flag), with limited surface area. Since it's fairly simple it may be easiest for you to modify the code directly rather than accept this PR.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2021-04-03T14:08:08Z",
        "closed_at": "2021-04-06T10:47:19Z",
        "merged_at": null,
        "body": "Homebrew on Apple Silicon (i.e. Macbook Air/Pro M1) use\r\n`/opt/homebrew` instead of `/usr/local`. This patch adds this path when\r\nsearching for GLFW.\r\n\r\nSDL uses the `sdl2-config` helper tool, so that doesn't require any change.\r\n\r\nThis solves errors like this on Apple silicon where glfw IS installed:\r\n\r\n```\r\nc++ -I../.. -I../../backends -g -Wall -Wformat -I../libs/gl3w -DIMGUI_IMPL_OPENGL_LOADER_GL3W -I/usr/local/include -I/opt/local/include -c -o main.o main.cpp\r\nmain.cpp:40:10: fatal error: 'GLFW/glfw3.h' file not found\r\n#include <GLFW/glfw3.h>\r\n         ^~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2021-04-02T14:02:29Z",
        "closed_at": "2021-04-06T10:42:21Z",
        "merged_at": null,
        "body": "On OpenGL 3.20 with GLEW I have found that GL_CLIP_ORIGIN is defined and therefore the code block is run but it is invalid to call glGetIntegerv on GL_CLIP_ORIGIN in OpenGL 3.20 (Intel HD 4000).\r\n\r\nThe resulting invalid call causes a GL_INVALID_ENUM to be returned.\r\n\r\nThis fix adds a runtime check to ensure that we're using OpenGL 4.5 before using the clip control functionality.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2021-03-31T16:31:08Z",
        "closed_at": "2021-04-01T15:21:15Z",
        "merged_at": null,
        "body": "As the title says, it's just a public overload for the OpenPopup() function with an ImGuiID parameter instead of string id.\r\n\r\nUntil a rework/rethinking of the popups is done, this helps to obtain the popup id at the same id stack level and then pass it down.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-03-28T14:14:01Z",
        "closed_at": "2021-03-29T13:51:12Z",
        "merged_at": null,
        "body": "The comment for ImGui::OpenPopupOnItemClick() states:\r\n\r\n_// helper to open popup when clicked on last item. return true when just opened. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)_\r\n\r\nhowever the return type of the function is `void`. \r\n\r\nThis pull-request fixes the function to return `bool` to match the comment.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-03-27T20:20:23Z",
        "closed_at": "2021-03-29T10:54:02Z",
        "merged_at": null,
        "body": "**Version/Branch of Dear ImGui:** Latest, Master\r\n\r\n**Back-end/Renderer/Compiler/OS:** imgui_impl_GLUT.h, all renderers/Compilers/OS\r\n\r\n**My Issue/Question:**\r\n\r\nThere's a small misunderstanding in the comments of `imgui_impl_GLUT.h`, FreeGLUT is updated and continually maintained while GLUT is obsolete and incredibly old software\r\n\r\n**Standalone, minimal, complete and verifiable example:** N/A",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-03-24T10:33:49Z",
        "closed_at": "2021-03-24T13:37:00Z",
        "merged_at": null,
        "body": "In `imgui.cpp` change `you assert macro` to `your assert macro`.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-03-21T17:00:16Z",
        "closed_at": "2021-03-22T11:42:03Z",
        "merged_at": null,
        "body": "If using the Vulkan backend and either `vertex_size` or `index_size` is not a multiple of `VkPhysicalDeviceLimits::nonCoherentAtomSize`, then the call to `vkFlushMappedMemoryRanges` in `ImGui_ImplVulkan_RenderDrawData` could result in the following validation error (on some machines):\r\n\r\n> Validation Error: [ VUID-VkMappedMemoryRange-size-01389 ] Object 0: handle = 0xb200000000b2, type = VK_OBJECT_TYPE_DEVICE_MEMORY; | MessageID = 0xee4872d | vkFlushMappedMemoryRanges: Size in pMemRanges[1] is VK_WHOLE_SIZE and the mapping end (0x792 = 0x0 + 0x792) not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40) and not equal to the end of the memory object (0x800). The Vulkan spec states: If size is equal to VK_WHOLE_SIZE, the end of the current mapping of memory must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize bytes from the beginning of the memory object, or be equal to the end of the memory object (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01389)\r\n\r\nI fixed this locally by setting `rb->VertexBufferSize` and `rb->IndexBufferSize` to the aligned size in `CreateOrResizeBuffer`, and then used them as the size parameter in the calls to `vkMapMemory` instead of the original sizes.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2021-03-20T15:02:10Z",
        "closed_at": "2021-03-26T12:31:03Z",
        "merged_at": null,
        "body": "The modern OpenGL backend (`imgui_impl_opengl3`) already supports OpenGL ES via the `IMGUI_IMPL_OPENGL_ES2` define. But the SDL + OpenGL example (`example_sdl_opengl3`) only supports Desktop GL so far.\r\n\r\nThis PR adds support for OpenGL ES 2.0 to the SDL + OpenGL example on Linux. To keep things simple in the Makefile, I followed how the different GL loaders are configured, by adding commented out lines that can be enabled (instead of the default gl3w loader config) to build for GL ES.\r\n\r\nThe motivation for this PR is supporting the Raspberry Pi and other Linux-based SBC devices, therefore I limited the changes to Linux and OpenGL ES 2.0 as that seems like a good start.\r\n\r\nSee #2837 for more background and discussion.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-03-20T14:17:26Z",
        "closed_at": "2021-03-22T14:09:12Z",
        "merged_at": null,
        "body": "## Description\r\n\r\nThis extends the run-time check that tests if global mouse position is\r\navailable to cover all SDL backends that don't support global mouse\r\nposition, instead of just Wayland. This is done by using a \"allow-list\"\r\napproach of known backends that do support global mouse position, as opposed to listing backends that don't support it.\r\n\r\nThe list of known backends was determined by looking through the SDL\r\nsource code and finding all backends that expose a `GetGlobalMouseState`\r\nfunction. Example:\r\n\r\nhttps://github.com/libsdl-org/SDL/blob/4acd1dcad41d154093ca14eb0adf35f4f99bd06a/src/video/windows/SDL_windowsmouse.c#L294\r\n\r\n## Motivation\r\n\r\nThe main purpose of this change is to have working mouse input on platforms that don't support global mouse position, like Raspberry Pi (RPI backend in SDL) or other SBCs running Linux which might be using the KMS/DRM backend to run without an X server.\r\n\r\nSome affected platforms like Android/iOS are easily detected via compile time defines. But for the aforementioned cases like Raspberry Pi and other SBCs, there's no easy way to detect them at build time, since they all appear as generic Linux platforms in terms of available defines etc. By doing a run-time check based on the SDL backend being used, as was already done for Wayland, we can make mouse input work on these platforms as well without having to introduce custom defines into the build system.\r\n\r\nSee #2837 for some more discussion/background.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 132,
        "deletions": 80,
        "changed_files": 2,
        "created_at": "2021-03-17T19:54:38Z",
        "closed_at": "2021-06-29T14:51:51Z",
        "merged_at": null,
        "body": "I have the same situation as #3012 where I am integrating into a large existing code base that manages multiple windows via `glfwCreateWindow` and `glfwMakeContextCurrent`. ImGui is currently _very_ close to supporting this out of the box, the only issue is the global state in `imgui_impl_glfw.cpp`.\r\n\r\nThe first patch removes the global `g_Window` in favor of `glfwGetCurrentContext()`. This allows the user to manage their own glfw and imgui contexts and the imgui glfw backend will use which ever one is currently active.\r\n\r\nThe second patch encapsulates the other cross-frame state and keeps an instance of it per glfw window in a `ImguiStorage` global. I'm not sure if this is the best data structure to use.\r\n\r\nThe more general solution would probably be related to the Viewports work but it was not obvious to me how to achieve my integration with that branch.",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 777,
        "deletions": 1,
        "changed_files": 13,
        "created_at": "2021-03-16T15:51:50Z",
        "closed_at": "2021-09-21T17:31:10Z",
        "merged_at": null,
        "body": "If this SDL2 pull request is merged\r\nhttps://github.com/libsdl-org/SDL/pull/4195\r\nThen it will be possible to render triangles with SDL_Renderer.\r\n\r\nThis current PR is simply an example using ImGui + SDL/SDL_renderer  \r\n(could be opengl, gles2, d3d11, metal or software rendering back-end underneath)\r\n\r\nOnly tested on linux with Makefile.\r\nThough I've updated all build files taken from the initial \"example_sdl_opengl2\" example.\r\n\r\nNB: \r\nI've never use ImGui before and this was just done in a couple of hours. \r\nIt was just done as a proof of concept and it may need to be implemented in a better way.\r\n\r\n",
        "comments": 18
    },
    {
        "merged": false,
        "additions": 56,
        "deletions": 61,
        "changed_files": 3,
        "created_at": "2021-03-16T02:58:59Z",
        "closed_at": "2021-03-16T11:44:52Z",
        "merged_at": null,
        "body": "This PR addresses some mistakes in the documentation comments. No code logic has been changed, only grammatical and punctuation improvements, deletion of unnecessary words. These commits are also gpg signed.\r\n\r\nLet me know if you have any objections/questions, I'll work on it as soon as possible.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-03-16T01:00:55Z",
        "closed_at": "2021-03-16T11:56:44Z",
        "merged_at": null,
        "body": "This makes API consistent with typed `Drag<T><N>` widgets which allow to not specify `v_speed` manually",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-03-14T20:22:57Z",
        "closed_at": "2021-03-15T11:07:30Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-03-12T17:08:13Z",
        "closed_at": "2021-04-08T11:09:32Z",
        "merged_at": null,
        "body": "This is an optional PR.\r\nIt affect some win32 programs that PeekMessage main HWND only.\r\n(Some windows have their message flow)\r\n\r\nWe can reproduce that we modify this line\r\nhttps://github.com/ocornut/imgui/blob/fe6369b03dab08c6636e32f57757e72c047e7cf1/examples/example_win32_directx9/main.cpp#L88\r\nto\r\n```\r\nif (::PeekMessage(&msg, hwnd, 0U, 0U, PM_REMOVE) || ::PeekMessage(&msg, NULL, 96, 96, PM_REMOVE)) \r\n```\r\n\r\nThe message-id 96 is an internal Windows Message.\r\nIf skip the message, the program can't receive WM_QUIT.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-03-11T05:53:19Z",
        "closed_at": "2021-03-11T09:04:51Z",
        "merged_at": "2021-03-11T09:04:50Z",
        "body": "This commit fixed an unused variable warning in function ImGui::EndListBox().\r\n\r\n**Compiler log:**\r\n```\r\n[  0%] Building CXX object External/imgui/CMakeFiles/imgui.dir/imgui_widgets.cpp.o\r\n/home/even/Projects/cherrysoda-engine/External/imgui/imgui_widgets.cpp: In function \u2018void ImGui::EndListBox()\u2019:\r\n/home/even/Projects/cherrysoda-engine/External/imgui/imgui_widgets.cpp:6198:18: warning: unused variable \u2018window\u2019 [-Wunused-variable]\r\n 6198 |     ImGuiWindow* window = g.CurrentWindow;\r\n      |                  ^~~~~~\r\n[100%] Linking CXX static library ../../lib/libimgui.a\r\n```\r\n\r\n**Compiler version:** gcc (GCC) 10.2.0\r\n**Platform:** Linux 5.11.2-1-MANJARO x86_64\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2021-03-05T03:50:56Z",
        "closed_at": "2021-03-05T13:28:27Z",
        "merged_at": null,
        "body": "This PR is support TTF bitmap for CJK.\r\nWe need it because the font is not clear when screen resolution is 1080P or below.\r\nthe freetype support bitmap, the stb_truetype don't support it yet.\r\n\r\nBefore :\r\n![B](https://user-images.githubusercontent.com/52752725/110063902-f8f85700-7da6-11eb-8c0b-cd9cfdbe8718.PNG)\r\n\r\nBefore : (Monochrome)\r\n![C](https://user-images.githubusercontent.com/52752725/110065414-019e5c80-7daa-11eb-8fa8-e7079d4cb5bf.PNG)\r\n\r\nAfter :\r\n![A](https://user-images.githubusercontent.com/52752725/110063914-ff86ce80-7da6-11eb-9c17-087dcb1a2448.PNG)\r\n\r\nExample code :\r\n```\r\n    ImFontConfig font_config;\r\n    font_config.SizePixels = 13.0f;\r\n    font_config.FontBuilderFlags = ImGuiFreeTypeBuilderFlags_Bitmap;\r\n    io.Fonts->AddFontFromFileTTF(\"C:\\\\Windows\\\\Fonts\\\\msgothic.ttc\", 13.0f, &font_config, io.Fonts->GetGlyphRangesJapanese());\r\n```",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-02-28T12:27:46Z",
        "closed_at": "2021-06-30T13:23:17Z",
        "merged_at": null,
        "body": "When using the imgui_imlp_osx backend and rendering off the main input thread (eg. using a CVDisplayLink callback) often keypresses get missed. I think this is because they arrive at the wrong time, too late to be processed, but then get cleared at the end of the frame. This PR buffers them and then sends them at the start of the frame, in my testing the issue is resolved and all keypresses are registered.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 176,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2021-02-27T12:30:53Z",
        "closed_at": "2021-03-02T22:03:20Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\ni propose this PR for add the possibility to export sizes settings in more than just colors.\r\n\r\nBecause when we tune a theme, its a pain to gain the sizes settings. i made this PR for solve this :)\r\n \r\nI Have added a button \"Export\" in Sizes tab (in a similar way to color export way)\r\nI have also added an \"Export Sizes & Colors\" in the main window for have the ability to export sizes and colors in one time.\r\n\r\n![7Ji49EESsA](https://user-images.githubusercontent.com/1434736/109387055-47b57500-78ff-11eb-98e0-86190a66c7d6.gif)\r\n\r\nthis is the result obtained with the defautl imgui theme :\r\n\r\n```cpp\r\nImVec4* colors = ImGui::GetStyle().Colors;\r\ncolors[ImGuiCol_Text]                   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);\r\ncolors[ImGuiCol_TextDisabled]           = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);\r\ncolors[ImGuiCol_WindowBg]               = ImVec4(0.06f, 0.06f, 0.06f, 0.94f);\r\ncolors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\r\ncolors[ImGuiCol_PopupBg]                = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);\r\ncolors[ImGuiCol_Border]                 = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);\r\ncolors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\r\ncolors[ImGuiCol_FrameBg]                = ImVec4(0.16f, 0.29f, 0.48f, 0.54f);\r\ncolors[ImGuiCol_FrameBgHovered]         = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);\r\ncolors[ImGuiCol_FrameBgActive]          = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);\r\ncolors[ImGuiCol_TitleBg]                = ImVec4(0.04f, 0.04f, 0.04f, 1.00f);\r\ncolors[ImGuiCol_TitleBgActive]          = ImVec4(0.16f, 0.29f, 0.48f, 1.00f);\r\ncolors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.00f, 0.00f, 0.00f, 0.51f);\r\ncolors[ImGuiCol_MenuBarBg]              = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);\r\ncolors[ImGuiCol_ScrollbarBg]            = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);\r\ncolors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);\r\ncolors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);\r\ncolors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);\r\ncolors[ImGuiCol_CheckMark]              = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_SliderGrab]             = ImVec4(0.24f, 0.52f, 0.88f, 1.00f);\r\ncolors[ImGuiCol_SliderGrabActive]       = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_Button]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);\r\ncolors[ImGuiCol_ButtonHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_ButtonActive]           = ImVec4(0.06f, 0.53f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_Header]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.31f);\r\ncolors[ImGuiCol_HeaderHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);\r\ncolors[ImGuiCol_HeaderActive]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_Separator]              = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);\r\ncolors[ImGuiCol_SeparatorHovered]       = ImVec4(0.10f, 0.40f, 0.75f, 0.78f);\r\ncolors[ImGuiCol_SeparatorActive]        = ImVec4(0.10f, 0.40f, 0.75f, 1.00f);\r\ncolors[ImGuiCol_ResizeGrip]             = ImVec4(0.26f, 0.59f, 0.98f, 0.20f);\r\ncolors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);\r\ncolors[ImGuiCol_ResizeGripActive]       = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);\r\ncolors[ImGuiCol_Tab]                    = ImVec4(0.18f, 0.35f, 0.58f, 0.86f);\r\ncolors[ImGuiCol_TabHovered]             = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);\r\ncolors[ImGuiCol_TabActive]              = ImVec4(0.20f, 0.41f, 0.68f, 1.00f);\r\ncolors[ImGuiCol_TabUnfocused]           = ImVec4(0.07f, 0.10f, 0.15f, 0.97f);\r\ncolors[ImGuiCol_TabUnfocusedActive]     = ImVec4(0.14f, 0.26f, 0.42f, 1.00f);\r\ncolors[ImGuiCol_PlotLines]              = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);\r\ncolors[ImGuiCol_PlotLinesHovered]       = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);\r\ncolors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);\r\ncolors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);\r\ncolors[ImGuiCol_TableHeaderBg]          = ImVec4(0.19f, 0.19f, 0.20f, 1.00f);\r\ncolors[ImGuiCol_TableBorderStrong]      = ImVec4(0.31f, 0.31f, 0.35f, 1.00f);\r\ncolors[ImGuiCol_TableBorderLight]       = ImVec4(0.23f, 0.23f, 0.25f, 1.00f);\r\ncolors[ImGuiCol_TableRowBg]             = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\r\ncolors[ImGuiCol_TableRowBgAlt]          = ImVec4(1.00f, 1.00f, 1.00f, 0.06f);\r\ncolors[ImGuiCol_TextSelectedBg]         = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);\r\ncolors[ImGuiCol_DragDropTarget]         = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);\r\ncolors[ImGuiCol_NavHighlight]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\r\ncolors[ImGuiCol_NavWindowingHighlight]  = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);\r\ncolors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);\r\ncolors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);\r\n\r\nImGuiStyle& style = ImGui::GetStyle();\r\n\r\n// Main\r\nstyle.WindowPadding            = ImVec2(8.00f, 8.00f);\r\nstyle.FramePadding             = ImVec2(4.00f, 3.00f);\r\nstyle.ItemSpacing              = ImVec2(8.00f, 4.00f);\r\nstyle.ItemInnerSpacing         = ImVec2(4.00f, 4.00f);\r\nstyle.TouchExtraPadding        = ImVec2(0.00f, 0.00f);\r\nstyle.IndentSpacing            = 21.00f;\r\nstyle.ScrollbarSize            = 14.00f;\r\nstyle.GrabMinSize              = 10.00f;\r\n\r\n// Borders\r\nstyle.WindowBorderSize         = 1.00f;\r\nstyle.ChildBorderSize          = 1.00f;\r\nstyle.PopupBorderSize          = 1.00f;\r\nstyle.FrameBorderSize          = 0.00f;\r\nstyle.TabBorderSize            = 0.00f;\r\n\r\n// Rounding\r\nstyle.WindowRounding           = 0.00f;\r\nstyle.ChildRounding            = 0.00f;\r\nstyle.FrameRounding            = 0.00f;\r\nstyle.PopupRounding            = 0.00f;\r\nstyle.ScrollbarRounding        = 9.00f;\r\nstyle.GrabRounding             = 0.00f;\r\nstyle.TabRounding              = 4.00f;\r\n\r\n// Alignment\r\nstyle.WindowTitleAlign         = ImVec2(0.00f, 0.50f);\r\nstyle.WindowMenuButtonPosition = ImGuiDir_Left;\r\nstyle.ColorButtonPosition      = ImGuiDir_Right;\r\nstyle.ButtonTextAlign          = ImVec2(0.50f, 0.50f);\r\nstyle.SelectableTextAlign      = ImVec2(0.00f, 0.00f);\r\n\r\n// Safe Area Padding\r\nstyle.DisplaySafeAreaPadding   = ImVec2(3.00f, 3.00f);\r\n```\r\n\r\ni have used section in comments  (like Alignment, Rounding, etc..) for clarity, but not sure if its needed :)\r\n\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 473,
        "deletions": 174,
        "changed_files": 1,
        "created_at": "2021-02-26T02:52:37Z",
        "closed_at": "2021-03-04T06:04:02Z",
        "merged_at": null,
        "body": "## 1. BGRA color packing (also fix a bug)\r\n\r\nDX9 using B8G8R8A8 color packing (D3DCOLOR). I notice that imgui_impl_dx9 do color packing converting but in core library there is a IMGUI_USE_BGRA_PACKED_COLOR macro. \r\nSo I think we can avoid color packing converting:\r\n* before:\r\n```c++\r\nvtx_dst->col = (vtx_src->col & 0xFF00FF00) | ((vtx_src->col & 0xFF0000) >> 16) | ((vtx_src->col & 0xFF) << 16);     // RGBA --> ARGB for DirectX9\r\n```\r\n* after:\r\n```c++\r\n#ifndef IMGUI_USE_BGRA_PACKED_COLOR\r\n    vtx_dst->col = (vtx_src->col & 0xFF00FF00) | ((vtx_src->col & 0xFF0000) >> 16) | ((vtx_src->col & 0xFF) << 16);     // RGBA --> ARGB for DirectX9\r\n#else\r\n    vtx_dst->col = vtx_src->col;\r\n#endif\r\n```\r\nThis change will also fix a bug (default dark theme):\r\n* before:\r\n![image](https://user-images.githubusercontent.com/40131112/109278856-fb612b00-7853-11eb-8a29-bdaca118e7bf.png)\r\n* after:\r\n![image](https://user-images.githubusercontent.com/40131112/109279192-6c084780-7854-11eb-8dc4-e74900862add.png)\r\n\r\n## 2. Bug fix\r\n\r\nI think we forget to validate device and texture before drawing. My game crashes in some cases because of this.\r\n```c++\r\n// Render function.\r\nvoid ImGui_ImplDX9_RenderDrawData(ImDrawData* draw_data)\r\n{\r\n    // Avoid rendering when device or texture is invalid\r\n    if (!g_pd3dDevice || !g_FontTexture)\r\n        return;\r\n```\r\n\r\n## 3. ~~The ordering of state recovery~~\r\n\r\n~~I don't known why, but this did fix a bug in my game.\r\n(see commits)~~\r\n\r\n## 4. Static texture\r\n\r\nWe can create static texture to improve performance.\r\n```c++\r\n// Create a texture without D3DUSAGE_DYNAMIC (static texture)\r\n// https://github.com/Microsoft/DirectXTex\r\n\r\n// 1. Create staging texture and write pixel data\r\nIDirect3DTexture9* texture_staging = NULL;\r\nstruct com_helper\r\n{\r\n    // This is a helper to manage COM object\r\n    // We can also using Microsoft::WRL::ComPtr (wrl.h) or CComPtr (ATL)\r\n    IDirect3DTexture9*& ptr;\r\n    com_helper(IDirect3DTexture9*& tex) : ptr(tex) {}\r\n    ~com_helper() { if (ptr) { ptr->Release(); ptr = NULL; } }\r\n} texture_staging_ref(texture_staging);\r\nif (D3D_OK != g_pd3dDevice->CreateTexture(width, height, 1, D3DUSAGE_DYNAMIC, D3DFMT_A8R8G8B8, D3DPOOL_SYSTEMMEM, &texture_staging, NULL))\r\n    return false;\r\nD3DLOCKED_RECT tex_locked_rect;\r\nif (D3D_OK != texture_staging->LockRect(0, &tex_locked_rect, NULL, 0))\r\n    return false;\r\nfor (int y = 0; y < height; y++)\r\n    memcpy((unsigned char*)tex_locked_rect.pBits + tex_locked_rect.Pitch * y, pixels + (width * bytes_per_pixel) * y, (width * bytes_per_pixel));\r\nif (D3D_OK != texture_staging->UnlockRect(0))\r\n    return false;\r\n\r\n// 2. Upload to graphic card memory\r\ng_FontTexture = NULL;\r\nif (D3D_OK != g_pd3dDevice->CreateTexture(width, height, 1, 0, D3DFMT_A8R8G8B8, D3DPOOL_DEFAULT, &g_FontTexture, NULL))\r\n    return false;\r\nif (D3D_OK != g_pd3dDevice->UpdateTexture(texture_staging, g_FontTexture))\r\n    return false;\r\n```\r\n\r\nThanks Dear-ImGui\r\n",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 127,
        "deletions": 34,
        "changed_files": 2,
        "created_at": "2021-02-25T16:04:44Z",
        "closed_at": "2021-11-04T13:32:24Z",
        "merged_at": null,
        "body": "### Current limitation\r\n\r\nWhen using the list clipper, only the visible subset of elements is actually calculated, which saves a lot of processing time in larger lists. However, if a drag&drop source is scrolled out and gets clipped, the tooltip no longer gets generated and jumps back to \"...\". If that is not good enough, the current workaround would be to detect if an item was displayed and fall back to an alternative with additional code which can complicate things.\r\n\r\n### Solution\r\n\r\nI enhanced the list clipper with a new method \"ForceDisplay\", with that the user can specify a single element that will be displayed even if it isn't visible. This allows the user to generate drag&drop tooltips (or possibly for other reasons) as if the element were visible. The forced element is optional (no change in functionality if it isn't used). It introduces another instance of Step() returning true only if the element is not handled by another step. The order of elements is also maintained, the additional step happens before or after the main step depending on element indices.\r\n\r\n### Example test code\r\n\r\nWhen running this example code, drag an element and scroll it out of the visible set with the mouse wheel. With the \"Use ForceDisplay\" checkbox checked, the tooltip gets continually updated, with it unchecked the tooltip reverts to \"...\". If you comment out the single call to ForceDisplay, the code works with the current ImGui version.\r\n\r\n```c++\r\nvoid TestForcedElement()\r\n{\r\n\tconst int  NumItems       = 100;\r\n\tstatic int draggedItem    = -1;\r\n\tint        itemsSubmitted = 0;\r\n\r\n\tstatic bool useForceDisplay = true;\r\n\r\n\tif (ImGui::GetDragDropPayload() == nullptr)\r\n\t\tdraggedItem = -1;\r\n\r\n\t// instructions and test settings\r\n\tImGui::SetNextWindowSize(ImVec2(320, 240), ImGuiCond_FirstUseEver);\r\n\tif (ImGui::Begin(\"Forced Element Settings\"))\r\n\t{\r\n\t\tImGui::PushTextWrapPos();\r\n\t\tImGui::TextUnformatted(\"Drag any item while scrolling the list so that the dragged item is no longer visible.\");\r\n\t\tImGui::PopTextWrapPos();\r\n\r\n\t\tImGui::Checkbox(\"Use ForceDisplay\", &useForceDisplay);\r\n\t}\r\n\tImGui::End();\r\n\r\n\t// test window, use drag&drop on items\r\n\tImGui::SetNextWindowSize(ImVec2(320, 480), ImGuiCond_FirstUseEver );\r\n\tif (ImGui::Begin(\"Forced Element Test\"))\r\n\t{\r\n\t\tImGuiListClipper clipper;\r\n\r\n\t\tclipper.Begin(100);\r\n\r\n#if 1\t// deactivate this for unenhanced list clipper\r\n\t\tif (useForceDisplay)\r\n\t\t\tclipper.ForceDisplay(draggedItem);\t// if >= 0, this item will be displayed regardless of visibility\r\n#endif\r\n\r\n\t\twhile (clipper.Step())\r\n\t\t{\r\n\t\t\tfor (int i = clipper.DisplayStart; i < clipper.DisplayEnd; ++i)\r\n\t\t\t{\r\n\t\t\t\tchar buffer[32];\r\n\t\t\t\tsprintf_s(buffer, \"item #%d\", i);\r\n\r\n\t\t\t\tImGui::Selectable(buffer);\r\n\r\n\t\t\t\tif (ImGui::BeginDragDropSource())\r\n\t\t\t\t{\r\n\t\t\t\t\tint data = i;\r\n\r\n\t\t\t\t\tImGui::SetDragDropPayload(\"Test Payload\", &data, sizeof(data));\r\n\t\t\t\t\tImGui::TextUnformatted(buffer);\r\n\t\t\t\t\tImGui::EndDragDropSource();\r\n\r\n\t\t\t\t\tdraggedItem = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\titemsSubmitted++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tImGui::End();\r\n\r\n\t// append metrics to test settings window\r\n\tif (ImGui::Begin(\"Forced Element Settings\"))\r\n\t{\r\n\t\tif (ImGui::BeginTable(\"Metrics\", 2))\r\n\t\t{\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::TextUnformatted(\"Number of Items:\");\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::Text(\"%d\", NumItems);\r\n\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::TextUnformatted(\"Items submitted:\");\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::Text(\"%d\", itemsSubmitted);\r\n\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::TextUnformatted(\"Dragged item index:\");\r\n\t\t\tif (ImGui::TableNextColumn()) ImGui::Text(\"%d\", draggedItem);\r\n\r\n\t\t\tImGui::EndTable();\r\n\t\t}\r\n\t}\r\n\tImGui::End();\r\n}\r\n```\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2021-02-22T04:57:54Z",
        "closed_at": "2021-02-22T10:58:51Z",
        "merged_at": "2021-02-22T10:58:51Z",
        "body": "While working on my C# bindings for ImGui I noticed this function was the odd one out of having variable arguments but not having a `va_list` overload.\r\n\r\nThis PR adds one, which makes it easier to call from languages other than C++.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-02-16T00:06:20Z",
        "closed_at": "2021-02-18T12:55:00Z",
        "merged_at": null,
        "body": "Fixes https://github.com/ocornut/imgui/issues/3813\r\n\r\n- Replace `glBlendFunc()` with `glBlendFuncSeparate()` in imgui_impl_opengl3.cpp",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 80,
        "deletions": 32,
        "changed_files": 5,
        "created_at": "2021-02-13T13:05:27Z",
        "closed_at": "2021-02-17T13:26:44Z",
        "merged_at": null,
        "body": "This PR improves on automatic number of circle segment calculation for anti-aliased and non anti-aliased shapes.\r\n\r\n# The Old\r\nAfter analyzing equation in `IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC` few issues were discovered:\r\n - number of segments `N` was two times bigger than necessary (error was applied to half of an angle spanned by the segment)\r\n    This is event somewhat acknowledged in the code, because small circles received too many segments:\r\n    `FIXME: the minimum number of auto-segment may be undesirably high for very small radiuses (e.g. 1.0f)`.\r\n - N was floored, but should be ceiled, this was reducing quality but cannot be spotted due to first issue\r\n - `CircleSegmentMaxError` claim to be expressed in pixels, but default value 1.6 seems to not reflect that\r\n\r\n# The New\r\nEquation for number of circle segments was derived from scratch using method described in this [stackoverflow post](https://stackoverflow.com/a/2244088/15194693). Which lead to discoveries listed above about old method.\r\n\r\nNew method:\r\n - Defaults `CircleSegmentMaxError` to 0.5f, which is half of a pixel\r\n - N is ceiled up and rounded to next even value\r\n - N is different for anti-aliased and not anti-aliased shapes\r\n\r\n## More details\r\nNumber of segments (N) is calculated using equation:\r\n\r\n```\r\n             /          pi         \\\r\n   N = ceil | --------------------- |     where r > 0, error <= r\r\n             \\ acos(1 - error / r) /\r\n```\r\nNote:\r\n>    Equation is significantly simpler that one in the post thanks for choosing segment\r\n>    that is perpendicular to X axis. Follow steps in the article from this starting condition\r\n>    and you will get this result.\r\n\r\nRendering circles with an odd number of segments, while mathematically correct will produce\r\nasymmetrical results on the raster grid. Therefore we're rounding `N` to next even number.\r\n(7 became 8, 11 became 12, but 8 will still be 8).\r\n\r\nError value is expressed in pixels and defaults to 0.5f, half a pixel. Which produce\r\nnon anti-aliased circles where segments cannot be spotted.\r\nAnti-aliasing work on much finer grid than pixels which make segments visible. To mitigate this\r\nissue error is scaled by `IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_AA_ERROR_SCALE_FACTOR` defaulting to `0.5f`.\r\nThis make anti-aliased circles use `0.25f` as an error value, making segments unnoticeable.\r\n\r\n## Derivation\r\n`N` equation was derived by following steps in method described in this [stackoverflow post](https://stackoverflow.com/a/2244088/15194693). What I did differently is I choose different `A` and `B` points to make calculations simpler.\r\n\r\n![image](https://user-images.githubusercontent.com/1197433/107850154-98f23e80-6e00-11eb-8ada-c5998c3ebdc6.png)\r\n\r\n\r\n# Comparison\r\nAt previews you can see actual maximum error value used.\r\n\r\n## Old vs. New\r\n### Anti-Aliased\r\n| Old |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850238-364d7280-6e01-11eb-9ad5-93f5c58a348e.png) |\r\n\r\n| New |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850265-6dbc1f00-6e01-11eb-898e-ac0d52b535f4.png) |\r\n\r\n### Non Anti-Aliased\r\nNotice there are gaps on the circumference of the circle N 27 in the Old. They appear if mesh is too dense.\r\n| Old |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850378-25e9c780-6e02-11eb-9f3e-f48eddfa9d14.png) |\r\n\r\n| New |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850387-37cb6a80-6e02-11eb-8d03-19b665aa5a82.png) |\r\n\r\n## New Method: AA vs. Non AA\r\n### Maximum error: 0.5\r\nNotice that you can spot line segments when circle is drawn with same number of segments for AA and not-AA circles.\r\n| Non AA |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850543-701f7880-6e03-11eb-9115-c9a7833dacb7.png) |\r\n\r\n| AA |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850551-7b72a400-6e03-11eb-9915-ba6a6066d473.png) |\r\n\r\n### Maximum error: 0.25\r\nNotice that non anti-aliased primitives has gaps due to too dense mesh (first circle), but anti-aliased drawing give the desired result.\r\n| Non AA |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850581-b96fc800-6e03-11eb-8586-529574a127e4.png) |\r\n\r\n| AA |\r\n| :- |\r\n| ![image](https://user-images.githubusercontent.com/1197433/107850591-cdb3c500-6e03-11eb-8e76-4202db7f1103.png) |\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-02-04T20:10:00Z",
        "closed_at": "2021-02-10T16:19:54Z",
        "merged_at": null,
        "body": "This is a fairly common question which we receive on the discord server. I decided that it'd be worth it to add as an FAQ entry.\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 17,
        "changed_files": 9,
        "created_at": "2021-02-03T01:55:31Z",
        "closed_at": "2021-02-03T11:38:27Z",
        "merged_at": null,
        "body": "\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-01-31T18:37:43Z",
        "closed_at": "2021-02-01T16:35:09Z",
        "merged_at": null,
        "body": "Great project, thanks and kudos for all the tremendous effort!!!\r\n\r\nSearched the FAQ and possibly similar issues, such as this old [issue](https://github.com/ocornut/imgui/issues/919) and more recent [issue](https://github.com/ocornut/imgui/issues/3388).\r\n\r\nI maybe missing something, but an ImGui::SliderInt makes a value 0, while dragging, if min_range==max_range even if min_range=42 (for example).\r\n\r\nSimple reproduction case:\r\n\r\n~~~~~~~~~~~~~~~~~\r\nstatic int test=42;\r\nint min_range = 42;\r\nint max_range = 42;\r\nif(ImGui::SliderInt(\"Test\",&test,min_range,max_range,0,ImGuiSliderFlags_ClampOnInput))\r\n{\r\n    printf(\"test=%d\\n\",test);\r\n}\r\n~~~~~~~~~~~~~~~~~\r\n\r\nIt prints test=0 while dragging the slider, would like it to stay in range 42,42\r\n\r\n~~~~~~~~~~~\r\nPatch makes it work, but perhaps breaks other widgets?\r\n\r\n// Convert a parametric position on a slider into a value v in the output space (the logical opposite of ScaleRatioFromValueT)\r\ntemplate<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>\r\nTYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_halfsize)\r\n{\r\n    if (v_min == v_max)\r\n        return (TYPE)v_min;\r\n\r\ninstead of\r\n\r\n// Convert a parametric position on a slider into a value v in the output space (the logical opposite of ScaleRatioFromValueT)\r\ntemplate<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>\r\nTYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_halfsize)\r\n{\r\n    if (v_min == v_max)\r\n        return (TYPE)0.0f;\r\n~~~~~~~~~~~\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-01-30T19:36:35Z",
        "closed_at": "2021-02-03T15:35:54Z",
        "merged_at": null,
        "body": "@ocornut, @Henauxg, I don't quite understand what has changed in the Chrome WebGPU backend, as the previous implementation worked both in Chrome and when using the native Dawn library.\r\nHowever, the blending function for the alpha value was wrongly configured. The fixed version works both for Dawn and Version 90.0.4403.7.\r\n\r\nIn addition, this PR makes the WebGPU backend compatible with the latest WebGPU updates in Emscripten (merged right after 2.0.13)\r\nhttps://github.com/emscripten-core/emscripten/commit/f825fa99d9605437c0fae0abada4e9113b36c833",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-01-27T17:53:54Z",
        "closed_at": "2021-01-28T15:04:30Z",
        "merged_at": null,
        "body": "A pull request to fix #3758.\r\n\r\nProblem: When resizing a viewport window (on linux) vulkan will throw a VK_ERROR_OUT_OF_DATE result. Causing a program to crash.\r\n\r\nSolution: Check if it throw a VK_ERROR_OUT_OF_DATE and recreate/resize the window.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2021-01-27T17:26:24Z",
        "closed_at": "2021-01-28T19:57:04Z",
        "merged_at": null,
        "body": "<img width=\"557\" alt=\"Screenshot 2021-01-27 at 14 15 32\" src=\"https://user-images.githubusercontent.com/47660154/106028728-35f46e00-60c4-11eb-8d8e-3960096e6823.png\">\r\n( e.g. \r\n\r\nin the blue rectangle :    \"B0 Cell 1\" should be \"B1 Cell 0\" \r\n\r\nin the yellow rectangle:  \"B1 Cell 0  should be \"B0 Cell 1\" \r\n\r\nin the green rectangle:   \"A1 Cell 0 should be \"A0 Cell 1\"\r\n\r\nin the red rectangle:       \"A0 Cell 1 should be \"A1 Cell 0\"\r\n)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 122,
        "deletions": 79,
        "changed_files": 1,
        "created_at": "2021-01-27T00:05:16Z",
        "closed_at": "2021-02-10T15:10:11Z",
        "merged_at": null,
        "body": "* Eliminate path handling on Windows\r\n    * ~~MSVC paths through https://github.com/ilammy/msvc-dev-cmd~~\r\n    * Deps paths through https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable\r\n* Use heredocs for pasting source code\r\n* Remove fetch-depth arg, it's the default\r\n* Merge the `brew install`s, it's simpler and maybe even faster",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 110,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2021-01-26T17:54:19Z",
        "closed_at": "2021-01-27T12:46:52Z",
        "merged_at": null,
        "body": " - It adds an optional feature to support the dynamic linkage of Vulkan instead of using default linkage. It can be set by either uncommenting `#define IMGUI_IMPL_VULKAN_NO_PROTOTYPES ` in `imgui_impl_vulkan.h` or add declaration of `IMGUI_IMPL_VULKAN_NO_PROTOTYPES ` in your compilation flags. \r\n - It makes it possible to have several potentially working implementations besides the Vulkan one, and on the fly, users can decide to use it or not.\r\n - If the user wants to use it the `GetVulkanProcAddressFn` has to be provided in the `ImGui_ImplVulkan_InitInfo`. ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2021-01-23T09:40:41Z",
        "closed_at": "2021-01-26T13:10:21Z",
        "merged_at": null,
        "body": "Fixed some Clang compile warnings under Windows, on Docking branch\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2021-01-23T08:59:20Z",
        "closed_at": "2021-01-26T14:20:07Z",
        "merged_at": null,
        "body": "Added support to remove a hook\r\nLinked issue: #3580\r\n\r\nSimilar to previous pull request: https://github.com/ocornut/imgui/pull/3626 but with only the hook removal\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2021-01-23T00:26:06Z",
        "closed_at": "2021-08-02T14:41:11Z",
        "merged_at": null,
        "body": "In all other GUIs that I know of, including windows, it is possible to to trigger hover events as well as scroll in windows that are not currently selected/focused. Right now in ImGui, these events are completely ignored unless the window currently has focus. \r\n\r\nI saw there is already a pull request for this same functionality open for the Win32 backend (#2696).",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-01-22T16:34:55Z",
        "closed_at": "2021-01-25T14:12:00Z",
        "merged_at": null,
        "body": "Fixed currently incorrectly set storage mode when targetting mac catalyst.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2021-01-14T17:03:20Z",
        "closed_at": "2021-02-01T16:58:26Z",
        "merged_at": null,
        "body": "Most of the calls to DockNodeMoveWindows() had a call to DockSettingsRenameNodeReferences() following, but in DockNodeTreeSplit() this call was missing.\r\n\r\n----------\r\n**Update:** The steps described reproduce the bug only when I use the DockBuilder for an initial dock node setup. The bug can still be reproduced with pure manual splitting, see [here](https://github.com/ocornut/imgui/pull/3716#issuecomment-760761240) for the exact steps. The fix still remains the same.\r\n----------\r\n\r\nA few steps to reproduce the docking bug...\r\n\r\n1. create a dock space (every frame)\r\n2. open \"Window 1\", dock it on the left side (or any other)\r\n3. close \"Window 1\"\r\n4. open \"Window 2\", dock it on the left again\r\n5. open \"Window 3\", dock it under \"Window 2\" (split its dock node)\r\n6. optionally close \"Window 2\" and/or \"Window 3\"\r\n7. open \"Window 1\" again\r\n\r\nIf you do these steps, \"Window 1\" will reappear undocked. It memorized the dock node ID from step 2, but that one was made into a split node later, so now \"Window 1\" cannot dock into that node again. With the added call to DockSettingsRenameNodeReferences(), the memorized DockId will be updated for currently closed windows on subsequent splits.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2021-01-09T15:48:26Z",
        "closed_at": "2021-01-11T17:48:17Z",
        "merged_at": null,
        "body": "Hi, @ocornut updated make file so web instance is automated; please test",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 35,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-01-04T09:22:13Z",
        "closed_at": "2021-01-11T10:12:32Z",
        "merged_at": null,
        "body": "Recently I've worked on two separate projects that both use ImGui and needed Windows 7 support for a D3D12 game overlay. This PR is an attempt to get the most important changes required for this to work merged upstream.\r\n\r\nBackground: D3D12 support for Windows 7 is called [D3D12On7](https://devblogs.microsoft.com/directx/porting-directx-12-games-to-windows-7/) and requires loading a separate DLL located in the application directory or a subdirectory of it. Both changes in this PR are related to accommodating local (non-System32) versions of `d3d12.dll`:\r\n\r\n- Attempt to load `d3d12.dll` from local D3D12On7 paths before falling back to System32: this change is the most important one. I based the code for this on the [Microsoft recommended way to load d3d12.dll](https://microsoft.github.io/DirectX-Specs/d3d/D3D12onWin7.html#load-dlls-properly), with the added change that there are three local paths tried instead of one. The local paths tried are those I've seen used in the wild by various games. Finally, if there is a `d3d12.dll` already loaded, it is given priority. This covers the case where a different path was used to load the DLL.\r\n- Do not statically import `D3D12SerializeRootSignature`: this change is required in order for ImGui not to fail to be loaded on Windows 7 when `d3d12.dll` is in a local subdirectory. I based the code for this change on the existing `GetProcAddress`-using code in `imgui_impl_win32.cpp`.\r\n\r\nThe current PR should suffice for anyone integrating ImGui in an application that already has working D3D12On7 support. That means that **not** included in this PR are changes required to make the DX12 sample work on Windows 7. The reason for this is that I felt the amount of added code required for this would make the sample harder to follow due to having two separate `Present()` paths, while not adding much value except for a small subset of users. Another reason is the dependency on the redistributable binary `d3d12.dll`. However if desired I can add this to the PR as well.\r\n\r\nMore information on D3D12On7:\r\n- [Development Guidance Document](https://microsoft.github.io/DirectX-Specs/d3d/D3D12onWin7.html)\r\n- [D3D12On7 NuGet package](https://www.nuget.org/packages/Microsoft.Direct3D.D3D12On7) (to obtain `d3d12.dll` for Windows 7)\r\n- [D3D12On7 sample](https://github.com/microsoft/DirectX-Graphics-Samples/tree/develop/Samples/Desktop/D3D12On7)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 225,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2020-12-20T19:18:47Z",
        "closed_at": "2020-12-21T15:33:50Z",
        "merged_at": null,
        "body": "Demo code for Quadratic/Cubic Bezier curves in Custom Rendering Window\r\n\r\n![ivJhemhm0c](https://user-images.githubusercontent.com/1434736/102722308-9a235580-4300-11eb-9a2b-ed9d1abd549c.gif)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 75,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2020-12-20T19:10:20Z",
        "closed_at": "2020-12-21T15:32:22Z",
        "merged_at": null,
        "body": "3 functions added in imgui_draw.cpp :\r\nadd ImQuadBezierCalc\r\nadd PathQuadBezierToCasteljau\r\nadd PathQuadBezierCurveTo\r\n\r\nthe Cubic Version was not renamed, just a comment was added to explain the difference\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2020-12-19T21:08:31Z",
        "closed_at": "2020-12-21T14:57:08Z",
        "merged_at": null,
        "body": "ImGuiListClipper did not correctly calculate item height for single-item lists and therefore got the total y-offset wrong in the end. Code like this\r\n\r\n```cpp\r\nfor(auto& resList : resLists) {\r\n  ImGui::Text(\"Begin\");\r\n  \r\n  ImGuiListClipper clipper;\r\n  clipper.Begin(int(resMap.size()));\r\n  \r\n  while(clipper.Step()) {\r\n    for(auto i = clipper.DisplayStart; i < clipper.DisplayEnd; ++i) {\r\n      auto& entry = resList[i];\r\n      auto label = name(*entry.second);\r\n      if(ImGui::Button(label.c_str())) {\r\n        select(*entry.second.get());\r\n      }\r\n    }\r\n  }\r\n  \r\n  ImGui::Text(\"End\");\r\n  ImGui::Separator();\r\n}\r\n```\r\n\r\nGenerates the following problem:\r\n\r\n![19 12_21 38 52](https://user-images.githubusercontent.com/13062371/102699245-97165f80-4243-11eb-82ed-5b34cc6e087e.png)\r\n\r\n(This problem is present without the \"Begin\"/\"End\" texts and separators as well, they are for issue clarification).\r\nFixed this issue by moving the item height calculation before the early-out and End() call.\r\nThis is just a quick fix, it makes the code uglier and even more spaghettish, you might want to find something cleaner. I tested that it still works for lists with any number of items (including 0).\r\n\r\n![19 12_21 55 06](https://user-images.githubusercontent.com/13062371/102699426-e0b37a00-4244-11eb-9372-2165a353d68b.png)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-12-18T18:01:37Z",
        "closed_at": "2020-12-19T21:56:22Z",
        "merged_at": null,
        "body": "No features are added/changed to the existing `binary_to_compressed_c` utility but this change allows a user to insert, during code generation, custom code before and after the \"generated code\".\r\n\r\nOne way this is done is by defining the name of the \"callback\" and including the code in a new translation unit:\r\n```cpp\r\n#define CUSTOM_BINARY_TO_COMPRESSED_C custom_binary_to_compressed_c\r\n#include \"binary_to_compressed_c.cpp\"\r\n\r\nbool custom_binary_to_compressed_c(const char* filename, const char* symbol, bool use_base85_encoding, bool use_compression)\r\n{\r\n    FILE* out = stdout;\r\n\r\n    fprintf(out, \"// before\\n\");\r\n\r\n    bool result = binary_to_compressed_c(filename, symbol, use_base85_encoding, use_compression);\r\n    if(!result) {return result;}\r\n\r\n    fprintf(out, \"// after\\n\");\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nThe real-world usage is not to add some comments but (in my case) to add custom include and a constexpr code to generate a constant with a  constant name but a type depending on the arguments to more easily switch between compression/base85 options without modifying the code ([example](https://github.com/madeso/tred/commit/5a9e8b41c31c08e5e4eda9ae0e3dab12b8ea32fe)). This could of course be implemented differently depending on how much C++ one wants.\r\n\r\nExample usage (with custom modifications not shown):\r\n```cpp\r\n#include \"DroidSans.ttf.h\"\r\n\r\nvoid LoadFont(EmbeddedBinary binary);\r\nvoid LoadFont(CompressedBinary binary);\r\n\r\n// ...\r\n\r\nLoadFont(DROIDSANS_TTF);\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 139,
        "deletions": 15,
        "changed_files": 31,
        "created_at": "2020-12-17T18:56:30Z",
        "closed_at": "2020-12-19T18:25:09Z",
        "merged_at": null,
        "body": "Essentially, I want to use ImGui as a static library in my project. However, to achieve this, I would also need to copy over ImGui header files and such in my project. \r\n\r\nTo isolate projects from each other, I have decided to add in this flag, IMGUI_STATIC_LIBRARY, that will allow you to include the headers you need for whatever backend, and use ImGui that way.\r\n\r\nExcuse me for my very plain and boring English, it been a very long day!",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2020-12-09T16:41:04Z",
        "closed_at": "2021-01-25T15:33:08Z",
        "merged_at": null,
        "body": "See: https://github.com/ocornut/imgui/issues/3645\r\nRelated Pull Request:https://github.com/ocornut/imgui/pull/3248\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1249,
        "deletions": 0,
        "changed_files": 10,
        "created_at": "2020-12-01T22:04:09Z",
        "closed_at": "2021-01-28T14:56:14Z",
        "merged_at": null,
        "body": "This change adds a sample implementation of a WebGPU backend for ImGui including an example. The code is compatible with a recent version of Google's Dawn library (1.12.2020), and Emscpripten 2.0.11.\r\nNote that to date WebGPU is a moving target, which will require future adaptations to this sample.\r\n\r\nThe example uses GLFW as a window toolkit. Support for initializing GLFW in a WebGPU compatible way was added with 2.0.11 (PR: https://github.com/emscripten-core/emscripten/pull/12907).\r\nHere's a screenshot of running the example in chrome canary version with WebGPU enabled:\r\n![image](https://user-images.githubusercontent.com/9641704/100802270-77043500-3429-11eb-9994-3cb44a05f1f6.png)\r\n",
        "comments": 36
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-11-29T18:20:32Z",
        "closed_at": "2021-05-21T17:10:46Z",
        "merged_at": null,
        "body": "Just redefining 3 more macros for stb_truetype, because I am not using the default implementations and stbtt throws.\r\nThis way, stbtt will compile without any more modifications (if the user properly redefined the math functions, obviously [#ifdef/#endif]).\r\n\r\nI'm not sure for STBTT_strlen, I havn't seen a strlen function in ImGui, only one for wide chars I believe. Feel free to modify if there is actually one.\r\n\r\nThose 2 functions can also be overriden:\r\n```\r\nSTBTT_memcpy\r\nSTBTT_memset\r\n```\r\n\r\nIt throws because I am not implementing the default ones, and instead use/define my own functions (using SS3/AVX-512) :\r\n\r\n![image](https://user-images.githubusercontent.com/15068742/100550275-24841680-3279-11eb-9e02-c01e6a7f009d.png)\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 65,
        "deletions": 35,
        "changed_files": 1,
        "created_at": "2020-11-28T12:51:30Z",
        "closed_at": "2020-12-02T11:25:07Z",
        "merged_at": null,
        "body": "Hello!\r\n\r\nThis PR makes `ImFontAtlas::GetGlyphRangesJapanese()` support more Japanese characters (Kanjis defined by the Government of Japan) out of the box.\r\n* 2136 Joyo (meaning \"for regular use\" or \"for common use\") characters\r\n* 863 Jinmeiyo (meaning \"for personal name\") characters\r\n\r\n\r\n## What this PR do\r\n\r\nThe commit https://github.com/ocornut/imgui/commit/0e6b84c6c4e1a1cf39afae1fcaccc720dd81d007 rebuilds internal offset table in `ImFontAtlas::GetGlyphRangesJapanese`.\r\n\r\n### Source of the offset table\r\n\r\nAs a reliable source of this offset table, I chose the character information database of the Information-technology Promotion Agency (IPA, an administrative entity of Japan).\r\n\r\nIPA provides REST API to access their database https://mojikiban.ipa.go.jp/mji/ .\r\nThe information acquired from the database is freely available under the terms of Creative Commons Attribution-ShareAlike 2.1 Japan (CC BY-SA 2.1 JP).\r\n* https://creativecommons.org/licenses/by-sa/2.1/jp/deed.en\r\n* https://creativecommons.org/licenses/by-sa/2.1/jp/legalcode\r\n\r\n### Supplemental scripts\r\n\r\nI made a repository https://github.com/vaiorabbit/everyday_use_kanji that contains several Ruby scripts to\r\n* query the IPA database, and\r\n* generate `GetGlyphRangesJapanese()` implementation (e.g. https://github.com/vaiorabbit/everyday_use_kanji/blob/master/imgui/GetGlyphRangesJapanese.cpp ).\r\n\r\nThese scripts will be useful when we want to keep `GetGlyphRangesJapanese()` up-to-date in the future.\r\n\r\n\r\n## Motivation\r\n\r\n<details><summary>Click here to expand</summary>\r\n\r\nCurrent `GetGlyphRangesJapanese()` implementation supports 1946 characters, but this is not enough to support 2136 Joyo (common-use) characters and 863 Jinmeiyo (for personal names) characters, which are defined by the Government of Japan).\r\n\r\nSo we often see garbled characters in relatively simple Japanese sentences and people's names\r\n(displayed by the replacement character (\"?\") as a fallback in this screenshot).\r\n\r\n* <img src=\"https://user-images.githubusercontent.com/1689749/100513829-664a8980-31b3-11eb-91be-94f9fd636ec9.png\" height=\"100\" />\r\n\r\nThough Sometimes GetGlyphRangesChineseFull is recommended as a replacement,\r\n\r\n* using `GetGlyphRangesChineseFull()` tends to produce texture larger than that of `GetGlyphRangesJapanese`. Though it would depend on the configuration, `GetGlyphRangesChineseFull` produces 4096 x 4096 font texture internally, which is quite large compared to `GetGlyphRangesJapanese()` implementation, which produces only 1024 x 2048 texture.\r\n  * Font texture (`GetGlyphRangesChineseFull`) displayed in RenderDoc\r\n    * <img src=\"https://user-images.githubusercontent.com/1689749/100514101-3d2af880-31b5-11eb-9734-0f11e6b4db8c.png\" height=\"100\" />\r\n  * Font texture (`GetGlyphRangesJapanese`) displayed in RenderDoc\r\n    * <img src=\"https://user-images.githubusercontent.com/1689749/100514134-78c5c280-31b5-11eb-91c0-2a5277aec515.png\" height=\"100\" />\r\n* but still fails to display several Joyo characters.\r\n  * <img src=\"https://user-images.githubusercontent.com/1689749/100514035-d1489000-31b4-11eb-8fc8-d48a76c33895.png\" height=\"100\" />\r\n\r\n\r\nThere is another alternative called GetGlyphRangesChineseSimplifiedCommon that supports 2500 characters,\r\n* but covers different ranges that does not used from Japanese characters, results in more garbled characters.\r\n  * <img src=\"https://user-images.githubusercontent.com/1689749/100514186-f4c00a80-31b5-11eb-87b1-807e5f791be5.png\" height=\"100\" />\r\n\r\n\r\nI thought it would be easy and reasonable to rebuild the internal tables in `GetGlyphRangesJapanese()` to support Japanese characters defined by the government.\r\n\r\n</details>\r\n\r\n## Limitations\r\n\r\nWhat you will about to read below is a topic that is difficult even for the Japanese people. But I will try to explain it somehow.\r\n\r\nIn short:\r\n* In the current Joyo kanji table, there is only one character that its code point cannot be represented in 2-byte variable.\r\n* To avoid/alleviate the problem, I made a tweak so that most Japanese wouldn't notice.\r\n* Those who wants to handle this character correctly, IMGUI_USE_WCHAR32 and ImFontGlyphRangesBuilder easily solve the problem.\r\n\r\n<details><summary>Limitation and workaround due to the code point of \"\ud842\udf9f\"</summary>\r\n\r\n### Limitation and workaround due to the code point of \"\ud842\udf9f\"\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1689749/100514394-b0ce0500-31b7-11eb-8b0e-7b0914f46374.png\" width=\"800\" height=\"85\" />\r\n\r\nIn a commit in the previous similar PR ( https://github.com/ocornut/imgui/pull/1650 ), [we can see a line that says](https://github.com/ocornut/imgui/pull/1650/commits/15bec84a42f133b9cfee923d9f30a6a0a93228fa#diff-cae83989d4c25e9856fcccd946a85f9276f60655964430213b41230401931c8aR2007):\r\n\r\n    // FIXME: We lost U+20B9F because it's out of range.\r\n\r\nThis means the character corresponding to the code point 0x20B9F(==134047) exceeds the range of 2-byte variable (short or ImWchar16) so cannot be displayed.\r\n\r\nThe actual character is \"\ud842\udf9f\" (scold, rebuke or reprimand, etc.).\r\n\r\n*   \ud842\udf9f (code point 0x20b9f(==134047)\r\n    *   encoded as F0 A0 AE 9F in UTF-8\r\n    *   was added as the Joyo Kanji in 2010\r\n    *   *is the only character in 2136 Joyo characters that requires more than 2 bytes to express its code point*\r\n\r\n\"\ud842\udf9f\" still can cause garbled character. When we try to use \"\ud842\udf9f\" in Windows, Microsoft's standard Japanese IME displays attention \"\u74b0\u5883\u4f9d\u5b58(environment-dependent)\", that means \"this character may cause garbled characters because there are several environments that cannot handle this character code\".\r\n\r\n* <img src=\"https://user-images.githubusercontent.com/1689749/100515119-0527b380-31bd-11eb-8de5-7fd92c306eb4.png\" height=\"100\" />\r\n\r\nSo, this character is often substituted by the variant character \"\u53f1\" (U+53F1).\r\n\r\n*   \u53f1 (code point 0x53f1(==21489)\r\n    *   encoded as E5 8F B1 in UTF-8\r\n    *   is the traditional form of \u300c\ud842\udf9f\u300d\r\n    *   means \"scold, rebuke or reprimand\", etc. So the only difference between the two kanji is in design.\r\n    *   *can be stored its code point in 2-byte variable (short or ImWchar16).*\r\n    *   *has been used for a long time before the modern form \u300c\ud842\udf9f\u300d was added in 2010, and still used*\r\n\r\nActual history of this problem is a bit more complex, but in terms of actual use cases, these two characters can be recognized as the same character, differing only in design.\r\n\r\nSo in this PR, I intentionally used \"\u53f1 (U+53F1)\" at everywhere \"\ud842\udf9f (u+20B9F)\" should come but unusable.\r\n\r\n* (\u2235) 0x20B9F - 0xFFFF == 134047 - 65535 == 68512 > 0xFFFF.\r\n  * It's impossible to store the offset into `static const short accumulative_offsets_from_0x4E00[]`.\r\n* I used the list of Joyo characters [\"regular_use_force_2byte_codepoint_utf8.csv\"](https://github.com/vaiorabbit/everyday_use_kanji/blob/master/regular_use_force_2byte_codepoint_utf8.csv#L2136) to generate `GetGlyphRangesJapanese()`. In this list, as a workaround the character \"\ud842\udf9f (U+20B9F, modern form)\" is replaced with \"\u53f1 (U+53F1, traditional form)\" to represent all characters in 2 bytes.\r\n  * This csv file was generated by this Ruby script. Character substitution is also performed inside.\r\n    * https://github.com/vaiorabbit/everyday_use_kanji/blob/master/scripts/generate_csv.rb#L20-L23\r\n\r\nEven after this PR was merged, `GetGlyphRangesJapanese()` can display \"\u53f1\" (U+53F1) but cannot display \"\ud842\udf9f (u+20B9F)\".\r\nUsers who want to display \"\ud842\udf9f (modern form)\" should follow these steps:\r\n*   Build ImGui with IMGUI_USE_WCHAR32 enabled\r\n*   Prepare appropriate font (e.g. Google Noto Fonts)\r\n*   Write codes like:\r\n\r\n    ```c++\r\n    ImFontGlyphRangesBuilder builder;\r\n    builder.AddRanges(io.Fonts->GetGlyphRangesJapanese());\r\n    #ifdef IMGUI_USE_WCHAR32\r\n    builder.AddText(u8\"\ud842\udf9f\"); // code point 0x20b9f(==134047, exceeds the range of ImWchar16), encoded as F0 A0 AE 9F in UTF-8\r\n    #endif\r\n    ImVector<ImWchar> out_ranges;\r\n    builder.BuildRanges(&out_ranges);\r\n    ImFont* font = io.Fonts->AddFontFromFileTTF(\"/font/NotoSansMonoCJKjp-Regular.otf\", 20.0f, nullptr, out_ranges.Data);\r\n    ```\r\n\r\n* References\r\n  * \ud842\udf9f (modern form)\r\n    * https://en.wiktionary.org/wiki/%F0%A0%AE%9F\r\n  * \u53f1 (traditional form)\r\n    * https://en.wiktionary.org/wiki/%E5%8F%B1\r\n\r\n</details>\r\n\r\n\r\n## Test and Performance\r\n\r\nI made a small test code that tries to display all 2136 Joyo characters and 863 Jinmeiyo characters.\r\n\r\n* Test code can be found here:\r\n  * https://github.com/vaiorabbit/imgui_fork/blob/feature/japanese_glyph_range_test/examples/example_sdl_opengl3/japanese_glyph_test.cpp\r\n* I used [the List of j\u014dy\u014d kanji (Wikipedia)](https://en.wikipedia.org/wiki/List_of_j%C5%8Dy%C5%8D_kanji) as the source of test data and made into several text files by hand:\r\n  * https://github.com/vaiorabbit/imgui_fork/tree/feature/japanese_glyph_range_test/examples/example_sdl_opengl3/kanji\r\n\r\n<details><summary>Screenshots</summary>\r\n\r\n### Screenshot (/w current GetGlyphRangesJapanese(), IMGUI_USE_WCHAR32 disabled)\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1689749/100514585-5e8de380-31b9-11eb-9058-d5e9b017fe5f.png\" width=\"800\" height=\"470\" />\r\n\r\n* causes several garbled characters.\r\n\r\n### Screenshot (/w new GetGlyphRangesJapanese(), IMGUI_USE_WCHAR32 disabled)\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1689749/100515351-d7dc0500-31be-11eb-811f-d60ea536200c.png\" width=\"800\" height=\"470\" />\r\n\r\n* can display all 2999 characters, except for \u300c\u53f1 (modern form)\u300d\r\n\r\n### Screenshot (/w new GetGlyphRangesJapanese(), enable IMGUI_USE_WCHAR32 and use ImFontGlyphRangesBuilder::AddText)\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1689749/100515362-ec200200-31be-11eb-89ec-5b5a6f88e86b.png\" width=\"800\" height=\"470\" />\r\n\r\n* [`builder.AddText(u8\"\ud842\udf9f\")` solves the problem](https://github.com/vaiorabbit/imgui_fork/blob/feature/japanese_glyph_range_test/examples/example_sdl_opengl3/japanese_glyph_test.cpp#L171-L178) and we're done!\r\n\r\n</details>\r\n\r\n<details><summary>Performance issue</summary>\r\n\r\n### Size of font texture\r\n\r\nThough it would depend on the configuration, both current `GetGlyphRangesJapanese()` and new implementation created 1024x2048 font texture internally [in the test code](https://github.com/vaiorabbit/imgui_fork/blob/feature/japanese_glyph_range_test/examples/example_sdl_opengl3/japanese_glyph_test.cpp#L179). The increase in texture size was not so great.\r\n\r\n* GetGlyphRangesJapanese[Current]\r\n  * <img src=\"https://user-images.githubusercontent.com/1689749/100514134-78c5c280-31b5-11eb-91c0-2a5277aec515.png\" height=\"100\" />\r\n* GetGlyphRangesJapanese[New]\r\n  * <img src=\"https://user-images.githubusercontent.com/1689749/100515574-7b79e500-31c0-11eb-852e-b3e3ac322bcc.png\" height=\"100\" />\r\n\r\n\r\n### Memory consumption\r\n\r\nThe test code reports memory consumption by ImGui [when the macro MEASURE_MEMORY_ALLOCATION is defined](https://github.com/vaiorabbit/imgui_fork/blob/feature/japanese_glyph_range_test/examples/example_sdl_opengl3/japanese_glyph_test.cpp#L57)\r\n(by using the allocator hooks provided by ImGui::SetAllocatorFunctions).\r\nThe increase in memory consumption due to the new implementation is less than 100K Bytes.\r\n\r\n    [Windows x64 / Visual Studio 2019 Version 16.7.4 / ImGui 1.80 WIP]\r\n    GetGlyphRangesJapanese[Current]\r\n      (Debug, IMGUI_USE_WCHAR32 undefined)   -> GetAllocatedSize=27718242\r\n      (Debug, IMGUI_USE_WCHAR32 defined)     -> GetAllocatedSize=28537544\r\n      (Release, IMGUI_USE_WCHAR32 undefined) -> GetAllocatedSize=27730578\r\n      (Release, IMGUI_USE_WCHAR32 defined)   -> GetAllocatedSize=28549880\r\n\r\n    GetGlyphRangesJapanese[New]\r\n      (Debug, IMGUI_USE_WCHAR32 undefined)   -> GetAllocatedSize=27790566\r\n      (Debug, IMGUI_USE_WCHAR32 defined)     -> GetAllocatedSize=28613312\r\n      (Release, IMGUI_USE_WCHAR32 undefined) -> GetAllocatedSize=27802902\r\n      (Release, IMGUI_USE_WCHAR32 defined)   -> GetAllocatedSize=28625648\r\n\r\n    GetGlyphRangesChineseFull\r\n      (Debug, IMGUI_USE_WCHAR32 undefined)   -> GetAllocatedSize=102034930\r\n      (Debug, IMGUI_USE_WCHAR32 defined)     -> GetAllocatedSize=102847380\r\n      (Release, IMGUI_USE_WCHAR32 undefined) -> GetAllocatedSize=102034924\r\n      (Release, IMGUI_USE_WCHAR32 defined)   -> GetAllocatedSize=102847374\r\n\r\n</details>\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2020-11-28T03:29:31Z",
        "closed_at": "2021-01-23T08:59:33Z",
        "merged_at": null,
        "body": "-Fixed a compile warning about an unused variable in release (only used in IM_ASSERT)\r\n-Added support to remove a hook\r\n-Retrieve active context **after** calling hook, allowing context change within a hook\r\n_(needed by **netImgui** to swap with a void context, ignoring input/draws for a frame)_\r\n\r\nLinked issue: #3580 \r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2020-11-27T19:27:21Z",
        "closed_at": "2021-01-28T15:50:30Z",
        "merged_at": null,
        "body": "Adding `ImGui::GetWindowContentRegionHeight()` as a companion to `ImGui::GetWindowContentRegionWidth()`\r\n\r\nI was building a vertical menu bar on the left size of a window and had need of this one to get the correct height. I've used `ImGui::GetContentContentRegionWidth()` several times and was surprised to learn there is no companion. So I duplicated that function and change Width to Height and wallah!",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2020-11-18T20:11:19Z",
        "closed_at": "2020-11-18T21:49:33Z",
        "merged_at": null,
        "body": "This is related to https://github.com/ocornut/imgui/pull/3601\r\n\r\n_Note that the CI is expected to fail after this commit. The fix is in the aforementioned PR_\r\n\r\nTwo CI steps weren't being run. Calling `vcvarsall` causes the CI step to immediately complete with a success ignoring subsequent commands.\r\n\r\nThe fix is to use `call` of a complete batch file (the steps are being exectuted as a batch file and the correct way to \"source\" batch from batch is to use `call`)\r\n\r\nAnother fix here is the cmd `echo`-s in the MSVC DLL build step. `echo` on cmd doesn't work the same way it does on bash. The single quotes are literally echoed back. So removing the quotes fixes echo to output valid C++\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-11-18T14:45:12Z",
        "closed_at": "2020-11-18T21:49:40Z",
        "merged_at": null,
        "body": "When building ImGui as a DLL on Windows there's a compilation error as Windows compilers don't allow giving a DLL interface to specific methods of a class which itself has a DLL interface. It should be one or the other.\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-11-10T09:45:03Z",
        "closed_at": "2020-11-11T14:15:22Z",
        "merged_at": null,
        "body": "This PR want fix a bug about InputText callback:\r\n\r\nIn  InputText callback I want translate chinese pinyin 'hao' to '\u597d', before callback 'hao' length is 3,  \r\nafter callback '\u597d''s utf-8 length is 3 too. So ImTextCountCharsFromUtf8 was ignored, that's not right.\r\nAnyway, ImTextCountCharsFromUtf8 should be called to calculate real length.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2020-11-08T06:27:21Z",
        "closed_at": "2020-11-11T14:23:12Z",
        "merged_at": null,
        "body": "This allows for binding the pipeline/sending draw commands\r\n(via `ImGui_ImplVulkan_RenderDrawData`) against any subpass, rather than\r\nbeing restricted to only the first subpass.\r\n\r\nWithout this, attempting to bind the pipeline against a subpass other than\r\nthe first one results in validation layer errors and, at worst, some drivers\r\nfailing if the subpass attachments differ.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2020-10-27T15:14:18Z",
        "closed_at": "2020-10-29T17:21:07Z",
        "merged_at": "2020-10-29T17:21:07Z",
        "body": "There is no mention of IMGUI_USE_WCHAR32 in the font documentation.\r\nThis stumped me for a while. I'd like to save someone else such frustration.\r\n\r\nThere may be a better more obvious place for this.\r\nJust wanted to bring attention to the omission of documentation on this feature. Thanks.\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2020-10-23T17:06:43Z",
        "closed_at": "2020-11-03T14:43:07Z",
        "merged_at": null,
        "body": "This PR fixes a few warnings in the macOS (`imgui_impl_osx.mm`) and Metal (`imgui_impl_metal.mm`) backends encountered when compiling with `-Wimplicit-float-conversion`, `-Wsign-conversion`, and `-Wshadow`.\r\n\r\nThe compiler used is:\r\n```\r\n% /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang --version\r\nApple clang version 12.0.0 (clang-1200.0.32.2)\r\nTarget: x86_64-apple-darwin19.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n```\r\n\r\nI've attached the compiler logs.\r\n[imgui_impl_metal.mm.log](https://github.com/ocornut/imgui/files/5430852/imgui_impl_metal.mm.log)\r\n[imgui_impl_osx.mm.log](https://github.com/ocornut/imgui/files/5430853/imgui_impl_osx.mm.log)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2020-10-22T18:46:56Z",
        "closed_at": "2020-10-23T19:19:16Z",
        "merged_at": null,
        "body": "### Description:\r\nThis code is to modify our blending settings to make the alpha result to be source determined if destination alpha is set to 0. The function can be seen as: (Dest Alpha* 1)  + (Source Alpha * (1 - Dest Alpha)).\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-10-21T00:58:26Z",
        "closed_at": "2020-10-21T07:13:55Z",
        "merged_at": "2020-10-21T07:13:55Z",
        "body": "The backends directory was not included, so the\r\nbuild was failing.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 442,
        "deletions": 565,
        "changed_files": 15,
        "created_at": "2020-10-18T21:04:57Z",
        "closed_at": "2020-11-11T14:34:09Z",
        "merged_at": null,
        "body": "This PR retains the behavior of the Apple iOS/macOS Metal example as much as possible, while simplifying the code and structure of the project and reducing its size on disk by ~10kB.\r\n\r\n - The `Renderer` class has been removed in favor of doing all rendering work in the view controller\r\n - Storyboards have been stripped down to their bare minimum in favor of creating windows, etc. directly in code\r\n - All classes have been consolidated into main.mm instead of spread over 7 different files.\r\n\r\nThis PR expressly does not address context cleanup or other known issues, but it does set the stage for making such changes more easily in the future.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-10-15T03:46:13Z",
        "closed_at": "2020-10-15T17:49:16Z",
        "merged_at": null,
        "body": "If we use imgui_impl_opengl3 as backend in desktop GL 2.x, the g_GlVersion may be initialized with weird numbers and maybe pass the checking like (g_GlVersion >= 330)\r\n\r\nGL_MAJOR_VERSION and GL_MINOR_VERSION are available on GL 3.0 and above. So we have to parse GL_VERSION under GL 2.x\r\n\r\nreference: https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_information_queries",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-10-10T13:52:32Z",
        "closed_at": "2020-10-15T18:21:28Z",
        "merged_at": null,
        "body": "Fix for https://github.com/ocornut/imgui/issues/2717\r\n\r\nProblem was that `ImGui::AcceptDragDropPayload` takes the smallest drop target bounding box. In case of no padding it would select window instead of dockspace. This patch fixes problem by accepting last call with the same surface size.\r\nCode for testing can be found in issue.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2020-10-08T07:51:16Z",
        "closed_at": "2020-10-08T11:56:06Z",
        "merged_at": "2020-10-08T11:56:06Z",
        "body": "",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2020-09-28T10:55:09Z",
        "closed_at": "2021-12-15T13:31:56Z",
        "merged_at": null,
        "body": "The menus are not able to close under popup window. You can't close it by clicking the menubar again, nor by clicking outside of the menu. I am trying to fix it by following methods:\r\n1. To check whether `menuset_is_open`, it seems we should use flag `ImGuiWindowFlags_MenuBar`, since now popup may also contains menus.\r\n2. When clicking outside of the menus, it will try to close the menus by function `ClosePopupsOverWindow`, which will not check the popup with flag `ImGuiWindowFlags_ChildWindow`. So we should not add the flag for window with menubar.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 778,
        "deletions": 24,
        "changed_files": 4,
        "created_at": "2020-09-24T21:34:26Z",
        "closed_at": "2021-03-11T10:28:14Z",
        "merged_at": null,
        "body": "This PR adds `ImDrawList::PathArcToAdaptive()`. An implementation of `PathArcTo` that automatically adjust number of used samples according to used arc radius.\r\n\r\nImplementation use 32 element lookup table to fill arc content. On worst case scenario calculate two sampling points when start or end angles are not in lookup table. 32 samples cover radii up to 80 pixels.\r\n\r\nTo complete this PR decision to call `PathArcToAdptive` instead of `PathArcTo` by default in `AddXXX` functions should be made.\r\n\r\nI'm looking for your feedback.\r\n\r\nNode: Demo in **DO NOT MERGE** commit may not work out of the box.\r\n\r\n### Drawing results\r\n![image](https://user-images.githubusercontent.com/1197433/94201851-db03fd80-febc-11ea-9586-c863ca2ee4d6.png)\r\n\r\n### Benchmark results\r\nNotice a jump around 80 pixel radius. This is where fallback to `PathArcTo` kick in.\r\n\r\n#### With PathArcToFast\r\n| ![bench_2_25](https://user-images.githubusercontent.com/1197433/94203898-8b273580-fec0-11ea-875c-310f1ac1bc47.png) | ![bench_2_50](https://user-images.githubusercontent.com/1197433/94203901-8bbfcc00-fec0-11ea-975f-defddb452ecf.png)  |\r\n|--------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|\r\n| ![bench_2_75](https://user-images.githubusercontent.com/1197433/94203902-8bbfcc00-fec0-11ea-9009-f471cfc5095a.png) | ![bench_2_100](https://user-images.githubusercontent.com/1197433/94203903-8c586280-fec0-11ea-92e8-5017b309b0dc.png) |\r\n#### With PathArcTo\r\n| ![bench_25](https://user-images.githubusercontent.com/1197433/94202425-ea377b00-febd-11ea-86b5-10a57757e04b.png) | ![bench_50](https://user-images.githubusercontent.com/1197433/94202426-ead01180-febd-11ea-8def-491e4aac6ce9.png)  |\r\n|------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\r\n| ![bench_75](https://user-images.githubusercontent.com/1197433/94202428-eb68a800-febd-11ea-90ef-8b8f1fbb7711.png) | ![bench_100](https://user-images.githubusercontent.com/1197433/94202429-eb68a800-febd-11ea-8993-d03724fe4628.png) |",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-09-17T01:52:46Z",
        "closed_at": "2020-09-17T07:48:01Z",
        "merged_at": null,
        "body": "Currently the example imgui_impl_win32 does not respond to changes of **ImGuiViewportFlags_TopMost** as the **SWP_NOZORDER** _uFlags_ and **NULL** _hWndInsertAfter_ passed to _SetWindowPos_() prevents a window from changing its topmost style.\r\n\r\nAccording to https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos _hWndInsertAfter_ must be either **HWND_TOPMOST** or **HWND_NOTOPMOST** and _uFlags_ must not contain **SWP_NOZORDER** in order to change the topmost style.\r\n\r\nTestcase:\r\n```\r\nstatic bool topmost = true;\r\nImGui::Begin(\"Topmost Test\");\r\nImGui::Checkbox(\"Topmost\", &topmost);\r\n\r\nif (topmost)\r\n    ImGui::GetWindowViewport()->Flags |= ImGuiViewportFlags_TopMost;\r\nelse\r\n    ImGui::GetWindowViewport()->Flags &= ~ImGuiViewportFlags_TopMost;\r\n\r\nImGui::End();\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-09-16T13:43:52Z",
        "closed_at": "2020-09-16T14:53:51Z",
        "merged_at": null,
        "body": "When a window with columns is dragged horizontally outside of the viewport, the `ClipRect` of a column may fall entirely outside `ClipRect` of the containing window. Intersecting those `ClipRects` using `ClipWith()` member function may cause the resulting rectangle to be invalid (meaning: `ClipRect.Min.x > ClipRect.Max.x`).\r\n\r\nFix this issue by using `ClipWithFull()` instead.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2020-09-15T10:43:00Z",
        "closed_at": "2020-09-16T09:07:52Z",
        "merged_at": null,
        "body": "In the event where the scissor rect is 0 width or 0 height, don't call Draw, as it generates warnings if the D3D12 Debug Layer is enabled, and nothing would have been drawn anyway.\r\n\r\nHere's the warning that was being emitted:\r\n`D3D12 WARNING: ID3D12CommandList::DrawIndexedInstanced: Viewport: 0 is non-empty while the corresponding scissor rectangle is empty.  Nothing will be written to the render target when this viewport is selected.  In D3D12, scissor testing is always enabled. [ EXECUTION WARNING #695: DRAW_EMPTY_SCISSOR_RECTANGLE]`",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2020-09-10T18:09:17Z",
        "closed_at": "2020-09-17T07:49:40Z",
        "merged_at": null,
        "body": "I'm using OpenGL 3.1 ES on a Raspberry Pi 4 and was getting a segfault at glBindSampler(). Using GLEW, #ifdef GL_SAMPLER_BINDING always evaluates to true because it is defined in glew.h even if sampler binding is not supported. In glew.h: \r\n\r\n/* ------------------------- GL_ARB_sampler_objects ------------------------ */\r\n\r\n#ifndef GL_ARB_sampler_objects\r\n#define GL_ARB_sampler_objects 1\r\n\r\n#define GL_SAMPLER_BINDING 0x8919\r\n\r\nTesting against imgui's own g_GlVersion variable to make sure OpenGL version is above 3.2 (after which sampler binding is supported) clears up this error.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-09-09T21:29:06Z",
        "closed_at": "2021-05-31T17:11:07Z",
        "merged_at": null,
        "body": "This was already done if the selected node was hovered or held.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2020-09-08T08:38:25Z",
        "closed_at": "2020-09-08T10:18:28Z",
        "merged_at": "2020-09-08T10:18:28Z",
        "body": "(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\nPLEASE CAREFULLY READ:\r\nhttps://github.com/ocornut/imgui/issues/2261\r\n\r\nExplicit mark the parameter is const to let user know the API internal doesn't modify it, it's can fix some c++ project compiler issue which use c++ const qualifier when integrating with ```imgui```.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-09-08T03:52:49Z",
        "closed_at": "2020-09-08T10:21:06Z",
        "merged_at": null,
        "body": "Since ImVector use signed int to store Size and Capacity, its max_size should not execeed signed INT_MAX.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 151,
        "deletions": 87,
        "changed_files": 4,
        "created_at": "2020-09-06T19:13:38Z",
        "closed_at": "2020-09-08T15:15:19Z",
        "merged_at": null,
        "body": "When a new window is created for a GUI component going out of the current window, a fresh render-pass is created that is not likely to be compatible with the user's render pass used when doing the GUI rendering in her/his window.\r\nThis PR addresses this issue by associating a pipeline with the created window that is compatible with the new render-pass.\r\n\r\nTwo more minor commits due to newer versions of Vulkan on Mac not liking the old validation layer. Also the CMake finding/linking with Vulkan is slightly updated to the more modern way.\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-09-04T15:32:24Z",
        "closed_at": "2020-09-07T08:50:26Z",
        "merged_at": null,
        "body": "Due to an issue with GLFW (not yet reported, I am working on that now) on Windows, glfwGetMonitorWorkarea can report a zero size workarea after a monitor change.\r\n\r\nThe effect of this is to cause all windows with ImGuiWindowFlags_AlwaysAutoResize set to become almost 0 size, and for some Dear ImGui interactions to fail to work properly.\r\n\r\nThe simple future proof workaround is to detect 0 size workareas and set the size to the video mode size, and the position to the MainPos as per when the function is not available.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-09-01T18:56:19Z",
        "closed_at": "2020-09-01T21:19:34Z",
        "merged_at": "2020-09-01T21:19:34Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-09-01T05:34:33Z",
        "closed_at": "2021-02-18T12:52:48Z",
        "merged_at": null,
        "body": "formula\r\n1. Result_alpha = Src_alpha + Dst_alpha * (1 - Src_alpha)\r\n2. Result_rgb = Result_color * Result_alpha = Src_color * Src_alpha + Dst_color * Dst_alpha * (1 - Src_alpha)\r\n\r\nassume\r\n1. Dst_rgb = Dst_color * Dst_alpha\r\n2. texture (like fonts) is (Src_color, Src_alpha), not premultiplied alpha, so Src_rgb = Src_color\r\n\r\nthen\r\n1. Result_alpha = Src_alpha + Dst_alpha * (1 - Src_alpha)\r\n2. Result_rgb = Result_color * Result_alpha = Src_rgb * Src_alpha + Dst_rgb * (1 - Src_alpha)\r\n\r\nso\r\n1. SrcBlendAlpha = **D3D12_BLEND_ONE**\r\n2. DestBlendAlpha = **D3D12_BLEND_INV_SRC_ALPHA**\r\n\r\nWhy nobody found this bug? Because Dst_alpha is useless In the general case (only use Src_alpha, see `SrcBlend` and `DestBlend`)\r\nI found this bug when I use two context, one for game, one for editor, and the error alpha in game context exposed in editor context.\r\n\r\nHere I show a demo (there are two contexts, one in game window)\r\n\r\nerror result (text disappeared)\r\n![CWM4(W2 SV9YR{`%0(CG L3](https://user-images.githubusercontent.com/15104079/91794887-bebec900-ec4e-11ea-924f-0623f0fec41b.png)\r\n\r\ncorrect result\r\n![{BRG~JRTKZFV_PMK5LYM}I9](https://user-images.githubusercontent.com/15104079/91794985-fc235680-ec4e-11ea-85db-dd005d462fef.png)\r\n\r\nif fonts texture is premultiplied alpha, the blend mode should set to\r\nSrcBlend = D3D12_BLEND_ONE",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 770,
        "deletions": 2,
        "changed_files": 14,
        "created_at": "2020-08-31T22:41:30Z",
        "closed_at": "2021-03-04T09:35:44Z",
        "merged_at": "2021-03-04T09:35:44Z",
        "body": "I am working on a native Android backend with the goals of using the _available OpenGL 3 renderer_, and _not having other dependencies_ (such as SDL).\r\n\r\nThe PR branch contains the native Android backend, an example app and CI integration (GitHub Actions). The Android app project itself is (I believe) as tiny as possible. It is a \"modern\" Android project, based on CMake and Gradle with small wrapper code written in Kotlin.\r\n\r\nProgress: see backends/imgui_impl_android.cpp\r\n\r\nMaybe this is useful to others.\r\n\r\n![device-2021-02-26-135247](https://user-images.githubusercontent.com/8150800/109303018-6f8ed500-783a-11eb-8432-e60db5f3a4c8.png)",
        "comments": 31
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-08-24T15:29:36Z",
        "closed_at": "2020-08-25T18:10:04Z",
        "merged_at": null,
        "body": "Simple fix for an issue when using InputTextMultiline with the \"ImGuiInputTextFlags_Password\".\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2020-08-17T21:56:26Z",
        "closed_at": "2020-08-18T10:34:42Z",
        "merged_at": null,
        "body": "They changed the compiler backend to llvm and broke default builds, [example](https://github.com/ocornut/imgui/pull/3372/checks?check_run_id=995595916). https://github.com/emscripten-core/emscripten/issues/11319. Yay webdev! Hard coding to 1.40.1 works for now and fixes CI. I don't know really anything about emscripten, perhaps someone who does can bring it up to 2.0.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-08-09T18:12:01Z",
        "closed_at": "2020-08-10T23:18:23Z",
        "merged_at": null,
        "body": "`SDL.h` defines `M_PI` if it's not defined yet. This causes a warning (on MSVC) if later on we include `math.h`, because of `M_PI` being redefined. By always including `math.h` before `SDL.h` we workaround this problem.\r\n\r\nNote that on top of including `math.h`, MSVC needs `_USE_MATH_DEFINES` to actually define `M_PI`.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2020-08-04T23:18:07Z",
        "closed_at": "2022-01-17T17:26:37Z",
        "merged_at": null,
        "body": "In response to #2787 I'm attempting a low impact way of addressing dropped inputs over the course of a frame. This can happen at the standard 60hz refresh with high frequency devices like high quality keyboards. It's also possible this happens when frame rate drops.\r\n\r\nThis changes the KeysDown array from an array of bits to an array of unsigned integers. That change alone has no affect on any code since a standard C++ bool is 1/0 and not a special object. This means existing implementations can gradually adopt this change along with widgets. From there in the example win32 impl when we process pending window message we total up all the down events for that key. This also introduces KeysUp and KeysUpPrev arrays of unsigned integers. When processing the window messages, tally the up events into the KeysU array.\r\n\r\nWe have two Up arrays so we can process Up events in the next frame. Upon NewFrame, we subtract the Down events from Up events that occurred the _previous_ frame. This way we capture the down event and can process it when there is a down and up within the same frame.\r\n\r\nI thought about also changing MouseUp/Down in this way. The more I thought about it the more I think that may actually make the problem worse with errant clicks in areas the user doesn't expect. Currently it appears the input interface checks if the mouse is down and then gets the current position of the mouse. This could lead to situations where the last recognized mouse position on a lagged frame was different than the position the user actually clicked causing inputs they didn't expect. I can't think of a quick slot in solution for that situation like this keyboard input one. I think we'd need either encoding a mouse click with the coordinates of the mouse at that moment in time or go full on event list and replay the events in order every frame. Both of those are a monumental undertaking and may not be worth the effort.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 130,
        "deletions": 25,
        "changed_files": 4,
        "created_at": "2020-07-30T10:27:59Z",
        "closed_at": "2021-02-01T15:35:44Z",
        "merged_at": null,
        "body": "### Why?\r\nFreeType supports color-layered glyphs since version 2.10.0. This feature allows render scalable icons. Different emoji, for, example.\r\nNow any can use colored glyphs as icons in ImGui applications.\r\n\r\n### Screenshot\r\n![Annotation 2020-07-30 132631](https://user-images.githubusercontent.com/244044/88912692-51430580-d268-11ea-972f-9c9dad6f5099.png)\r\n",
        "comments": 24
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2020-07-01T21:38:33Z",
        "closed_at": "2020-07-10T12:36:31Z",
        "merged_at": null,
        "body": "This PR will add [glad 2](https://github.com/Dav1dde/glad) as OpenGL loader.\r\n\r\nThe name of the header files changed and also the interface of the loader is different to glad 1.x.\r\n\r\nglad 2 is currently still in beta, but it might be already useful to add support. For example the [GLFW quick start docs](https://www.glfw.org/docs/latest/quick.html#quick_include) also already uses glad 2.\r\n\r\nAs recommended in the [glad wiki](https://github.com/Dav1dde/glad/wiki/C#built-in-loader), the examples use the loader function from the windowing library.\r\n\r\nThe webservice for generating glad 2 sources can be found here: https://gen.glad.sh/",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2020-06-25T17:15:19Z",
        "closed_at": "2020-07-16T15:22:48Z",
        "merged_at": null,
        "body": "A question on discord came up about scrolling and when I went to check the demo I noticed we didn't show how this parameter affected scroll Y here. I also had some UX issues that I fixed up a bit to make the demo easier to use and more visible what was happening.\r\n\r\n![list_demo](https://user-images.githubusercontent.com/22896740/85766622-129bb780-b6cc-11ea-86e7-ad92ef1a2861.gif)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-06-18T22:59:36Z",
        "closed_at": "2020-06-19T09:43:38Z",
        "merged_at": null,
        "body": "Platform: Win32, DX11\r\nBranch: docking\r\n\r\nI had a problem that popup modals were sometimes drifting upwards on their own, exactly 1 pixel per frame. This also happened in the \"Delete?\" sample modal in the demo window.\r\n\r\nI added a breakpoint to window->Pos and saw that inside ClampWindowRect, `Pos.y` went from 472.0 -> 471.999969, and later in the code this got floored to 471.0.\r\n\r\nAvoiding unnecessary (a+b)-b calculation fixes the problem for me.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 211,
        "deletions": 59,
        "changed_files": 3,
        "created_at": "2020-06-02T17:08:41Z",
        "closed_at": "2022-03-19T21:23:24Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2020-05-26T10:40:30Z",
        "closed_at": "2020-05-27T20:29:51Z",
        "merged_at": null,
        "body": "ImGui had a `GetContentRegionWidth` function but surprisingly not one for `GetContentRegionHeight` so I decided to add the function here.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2020-05-25T06:50:29Z",
        "closed_at": "2020-05-25T09:46:49Z",
        "merged_at": null,
        "body": "This PR addresses the \"missing clicks\" issue on mac, which happens very easily with the trackpad when using the soft click feature (it generates very quick Press/Release events that often do not span over two frames).\r\n\r\nIt was also reported in https://github.com/ocornut/imgui/issues/1992 . The ideal solution requires a refactoring to add event queues, but a simple workaround was suggested by just following the GLFW example, this is the approach I took here. It is slightly different because it does not rely on an API call to get the instant mouse state, but instead maintains the freshest mouseDown state locally with `g_MouseDown`, and only forwards it to `ImGuiIO` when there was no press during that same frame.\r\n\r\nI found that another more general fix was proposed in https://github.com/ocornut/imgui/pull/2525 , but since there is already an event queue design in the pipe, it might make sense to just merge the quick fix for macOS for now?\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2020-05-25T06:08:53Z",
        "closed_at": "2020-05-25T09:30:05Z",
        "merged_at": null,
        "body": "The macOS examples example_apple_metal and example_apple_opengl2 do not catch the `right` and `other` mouse buttons.\r\n\r\nAs a consequence the Dear ImGui Demo does not work properly, for example the `Popups & Modal Windows / Context Menus` does not work as it requires a right click.\r\n\r\nNote: the glfw examples are fine on macOS, so this PR only fixes the Cocoa-based examples.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2020-05-25T00:46:58Z",
        "closed_at": "2020-05-25T16:39:40Z",
        "merged_at": null,
        "body": "Fixes crash when minimized / recover from minimized of SDL_Vulkan example by adding additional events,\r\nSDL_WINDOWEVENT_MINIMIZED and SDL_WINDOWEVENT_RESTORED\r\n\r\nThomas\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2020-05-19T16:09:52Z",
        "closed_at": "2021-12-13T14:00:16Z",
        "merged_at": null,
        "body": "- Move visual studio 'Fix Projects' step to standalone script\r\n- Simplify the script, so that it searches for a regex match instead of a hardcoded version.\r\n\r\nThe rationale behind moving it to a standalone script is that it makes it easier for people to upgrade to a specific version that is most convenient for them.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 32,
        "changed_files": 10,
        "created_at": "2020-05-18T21:37:15Z",
        "closed_at": "2021-01-25T15:34:02Z",
        "merged_at": null,
        "body": "This PR concludes the discussion from #2716.\r\n\r\nPR consists of two separable commits, however they are logically related:\r\n* The first commit makes all Win32 examples link to xinput9_1_0.dll by default instead of xinput1_4.dll. This is realized by linking against xinput9_1_0.lib and making that compilation unit target Windows 7, unless specified otherwise.\r\n* The second commit addresses a nasty catch I spotted while working on the first one. When compiling examples, I noticed that XInput headers referenced XInput 1.4, but samples got linked against XInput 1.3. This could lead to some nasty bugs where the sample looks like it links against XInput 1.4, but in reality it doesn't. To address this, I verified all uses of `DXSDK_DIR`, and turns out they are all useless with the current setup. To avoid such ambiguities, I removed them all.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 30,
        "changed_files": 2,
        "created_at": "2020-05-18T17:19:09Z",
        "closed_at": "2020-05-25T16:58:04Z",
        "merged_at": null,
        "body": "OpenGL 3 backend header has some logic to auto-detect the GL loader, however that is only necessary for the implementation in the cpp, not in the header. This change moves the code from the header to the cpp. This avoids unnecessary global macro pollution as well as potential for mistakes since previously `IMGUI_IMPL_OPENGL_LOADER_*` and `IMGUI_IMPL_OPENGL_*` would have to have consistent values every time `imgui_impl_opengl3.h` was included.\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 11,
        "changed_files": 8,
        "created_at": "2020-05-18T10:16:46Z",
        "closed_at": "2021-06-30T13:08:25Z",
        "merged_at": null,
        "body": "`SDL_Window*` is stored in a global (`g_Window`) by `ImGui_ImplSDL2_Init`. However some apis in the SDL backend use the global and some don't, creating potential for inconsistency/mistakes when starting a new frame, or when processing events. This change makes the SDL backend always use the window passed to `ImGui_ImplSDL2_Init` originally.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-05-15T01:47:43Z",
        "closed_at": "2020-06-06T16:57:01Z",
        "merged_at": null,
        "body": "It is possible to get VtxCurrentOffset and VtxCurrentIdx out of sync with buffers state. This scenario triggers it: Do PrimReserve , which thinks you are reserving too many vertices and triggers new draw command and vtxoffset update. Then you do unreserve same amount (leaving emptry draw command). Next clip rect update this draw command gets poped but does not restore vtx/idx buffer offset, resulting all following draw commands reference incorrect vertex data",
        "comments": 21
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-05-15T00:20:07Z",
        "closed_at": "2020-05-15T08:51:52Z",
        "merged_at": "2020-05-15T08:51:52Z",
        "body": "I pulled the latest code today, and my `DragScalar` and `SliderScalar` scalar calls with `double` values suddenly cause a crash when I type in a value. I used `git bisect` to find that the commit with the error is 0679e0567764d5b3362628bdf1e75c608b2a1b8b.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 18,
        "changed_files": 4,
        "created_at": "2020-05-14T23:39:31Z",
        "closed_at": "2021-10-25T12:33:07Z",
        "merged_at": null,
        "body": "A question came up on the Discord about supporting triple click line select in text boxes. This change is the first step in that direction, giving imgui the ability to detect multiple clicks in a row.\r\n\r\nI have a follow up change that affects the text editing functionality. I'm trying to recruit some people to check how it feels on Mac/Linux unless you want to just add it to this PR.\r\n\r\nhttps://github.com/kudaba/imgui/commit/6ab9896af44dd2652b20aca19a89a9303ee738eb\r\n\r\nOne issues I didn't address here is that by tracking with a char it will wrap after 127 consecutive clicks, but won't register as a new click until a full 256.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 243,
        "deletions": 91,
        "changed_files": 2,
        "created_at": "2020-05-14T04:50:53Z",
        "closed_at": "2021-01-27T11:54:14Z",
        "merged_at": null,
        "body": "Some Vulkan applications don't link against libVulkan. Instead, proc addresses\r\nfor Vulkan functions are resolved dynamically at runtime. When this is done, all\r\ntranslation units are compiled with `VK_NO_PROTOTYPES` defined somewhere and each\r\nVulkan API callsite looking at a dispatch table. This scheme was incompatible\r\nwith the working of imgui_impl_vulkan as specifying `VK_NO_PROTOTYPES` would cause\r\ncompile failures. Now specifying\r\n`ImGui_ImplVulkan_InitInfo::GetVulkanProcAddressFn` will delegate proc address\r\nresolution responsibilities to the caller. If the caller does not specify this\r\ncallback and has not compiled the imgui_impl_vulkan.cpp translation unit with\r\n`VK_NO_PROTOTYPES`, the proc address table is populated with static addresses as\r\nbefore. So existing users should not have to change anything.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-05-10T19:55:21Z",
        "closed_at": "2020-07-04T08:11:11Z",
        "merged_at": null,
        "body": "When using a touchpad gesture to perform mouse wheel scrolling, it is almost impossible to do horizontal scrolling as movement axes are not cleanly separated as for real mouse wheels. So for most of the horizontal movements `g.IO.MouseWheel != 0.0f` is still valid, and this leads to a marginal Y movement \"capturing\" the event and without a current window that is Y-scrollable the window will be replaced with its parent possibly up to the root. This leads to scrolling only sometimes erratically happening, when the user manages to do a straight x-only movement giving a sticky feeling.\r\n\r\nThis suggestion adds a small test for the axis of major movement and skips the vertical mouse wheel scrolling block in case of dominant X axis movement. The result is, that now in the demo window horizontal scrolling with touchpad gestures works as expected (e.g. in the \"Fizz Buzz\" scroller).",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2020-05-10T05:23:14Z",
        "closed_at": "2020-05-11T15:54:23Z",
        "merged_at": null,
        "body": "Looks like a change didn't get finished completely. The metrics windows crashes when hovering over a viewport's drawcmd.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1211,
        "deletions": 5,
        "changed_files": 11,
        "created_at": "2020-05-09T22:26:45Z",
        "closed_at": "2023-04-19T14:55:56Z",
        "merged_at": null,
        "body": "Mashed together DirectX9 + glfw opengl2 into a new example that runs on Winapi + OpenGL2\r\nBuilt on Visual studio 2017, win10, docking branch.\r\n\r\nPlatform windows work:\r\n![2020-05-10_00-16-09](https://user-images.githubusercontent.com/610685/81486383-bfbd8c00-9254-11ea-9f98-69545cc2eb32.png)\r\n\r\nProject downgraded to use the same platform toolset as the rest.\r\n",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-05-09T22:04:11Z",
        "closed_at": "2020-05-11T16:02:17Z",
        "merged_at": null,
        "body": "from 0xD79D to 0xD7A3\r\nhttps://en.wikipedia.org/wiki/Hangul_Syllables\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-05-09T05:49:23Z",
        "closed_at": "2020-05-11T17:31:52Z",
        "merged_at": null,
        "body": "I noticed that my windows were increasing in size when I dragged them out of the main application. The issue what that I was calling ``ImGui_ImplWin32_EnableDpiAwareness`` after ``ImGui_ImplWin32_Init``. While the easy solution is to just call it first (which I do now), this seemed like a good way to make the function just act as expected without having to issue and error or assert or otherwise notify users of the problem.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2020-05-07T20:56:22Z",
        "closed_at": "2020-05-08T15:27:05Z",
        "merged_at": null,
        "body": "Tested with detaching/attaching a viewport and resizing it. DX12 debug\r\nlayer is clean.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-05-05T19:05:12Z",
        "closed_at": "2020-05-08T15:32:55Z",
        "merged_at": null,
        "body": "GLSL version '130' is not supported on MacOS.\r\n\r\nOutput without this patch:\r\n```\r\nERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to compile vertex shader!\r\nERROR: 0:1: '' :  version '130' is not supported\r\nERROR: 0:2: '' :  #version required and missing.\r\n\r\nERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to compile fragment shader!\r\nERROR: 0:1: '' :  version '130' is not supported\r\nERROR: 0:2: '' :  #version required and missing.\r\n\r\nERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to link shader program! (with GLSL '#version 130\r\n')\r\nERROR: One or more attached shaders not successfully compiled\r\n```",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-05-03T21:21:51Z",
        "closed_at": "2020-07-13T10:13:34Z",
        "merged_at": null,
        "body": "# Problem\r\n\r\nWhen running the Vulkan SDL example I noticed that the display can be scaled incorrectly. This occurs when the example is launched on a non-retina monitor that is used with a retina Macbook. It doesn't just look incorrect - the cursor behaves as though the display has been scaled correctly, making mouse input unusable.\r\n\r\nThe first screenshot shows the expected behaviour with the SDL + OpenGL3 example, and the second shows the issue with the SDL + Vulkan example:\r\n\r\n## SDL + OpenGL3\r\n![Screenshot 2020-05-03 at 21 13 07](https://user-images.githubusercontent.com/1374614/80925494-1c6a0400-8d88-11ea-9e3d-fa3c0a85f722.png)\r\n\r\n## SDL + Vulkan\r\n![Screenshot 2020-05-03 at 21 13 18](https://user-images.githubusercontent.com/1374614/80925496-20962180-8d88-11ea-8424-7a2659d484d0.png)\r\n\r\nIn `examples/imgui_impl_sdl.cpp` The code to determine the framebuffer scale looks like this:\r\n```cpp\r\nint w, h;\r\nint display_w, display_h;\r\nSDL_GetWindowSize(window, &w, &h);\r\nSDL_GL_GetDrawableSize(window, &display_w, &display_h);\r\nio.DisplaySize = ImVec2((float)w, (float)h);\r\nif (w > 0 && h > 0)\r\n    io.DisplayFramebufferScale = ImVec2((float)display_w / w, (float)display_h / h);\r\n```\r\n\r\nThe code always uses `SDL_GL_GetDrawableSize` but when using Vulkan, `SDL_Vulkan_GetDrawableSize`[1] should be used instead.\r\n\r\n# Solution\r\nThe correct `SDL_*_GetDrawableSize` function can be determined by inspecting whether the window has the Vulkan flag set. If it doesn't, the original behaviour is used:\r\n\r\n```cpp\r\nif (SDL_GetWindowFlags(window) & SDL_WINDOW_VULKAN)\r\n    SDL_Vulkan_GetDrawableSize(window, &display_w, &display_h);\r\nelse\r\n    SDL_GL_GetDrawableSize(window, &display_w, &display_h);\r\n```\r\n\r\nHowever, `SDL_GL_GetDrawableSize` comes from `SDL_Video.h` which is included by default, but `SDL_Vulkan_GetDrawableSize` comes from `SDL_vulkan.h` which is not included by default. To prevent bringing a whole new include in, I propose forward declaring the function instead:\r\n\r\n```\r\nextern \"C\" {\r\n    extern DECLSPEC void SDLCALL SDL_Vulkan_GetDrawableSize(SDL_Window * window, int * w, int * h);\r\n}\r\n```\r\n\r\n# Testing\r\nFirstly, I encountered the issue mentioned in #3177 and had to apply the fix from that PR locally.\r\n\r\nThen I used the following Makefile from the root of the `imgui` repo to build the SDL OpenGL and Vulkan examples.\r\n\r\n```makefile\r\nIMGUI_SRC_DIR := .\r\nIMGUI_INCLUDE_DIR := .\r\nSDL2_INCLUDE_DIR := /usr/local/include/SDL2\r\nIMGUI_IMPL_INCLUDE_DIR := ./examples\r\nIMGUI_IMPL_SRC_DIR := ./examples\r\nGL3W_DIR := ./examples/libs/gl3w/GL\r\nGL3W_INCLUDE_DIR := ./examples/libs/gl3w\r\nOUT_GL := imgui-sdl-gl\r\nOUT_VULKAN := imgui-sdl-vulkan\r\n\r\nGL3W_CFLAGS := -Wall -I$(GL3W_INCLUDE_DIR)\r\n\r\nSDL_IMPL_CFLAGS = -I$(IMGUI_INCLUDE_DIR) -I$(IMGUI_IMPL_INCLUDE_DIR) -I$(SDL2_INCLUDE_DIR)\r\nOPENGL3_IMPL_CFLAGS = -I$(GL3W_INCLUDE_DIR) -I$(IMGUI_INCLUDE_DIR) -I$(IMGUI_IMPL_INCLUDE_DIR) -DIMGUI_IMPL_OPENGL_LOADER_GL3W\r\nVULKAN_IMPL_CFLAGS = -I$(IMGUI_INCLUDE_DIR) -I$(IMGUI_IMPL_INCLUDE_DIR)\r\n\r\nGL_CFLAGS := -Wall -I$(IMGUI_INCLUDE_DIR) -I$(IMGUI_IMPL_INCLUDE_DIR) -I$(SDL2_INCLUDE_DIR) -I$(GL3W_INCLUDE_DIR) -g -DIMGUI_IMPL_OPENGL_LOADER_GL3W\r\nGL_LFLAGS := -lSDL2 -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo -lc++ -lvulkan\r\n\r\nVULKAN_CFLAGS := -Wall -I$(IMGUI_INCLUDE_DIR) -I$(IMGUI_IMPL_INCLUDE_DIR) -I$(SDL2_INCLUDE_DIR) -g\r\nVULKAN_LFLAGS := -lSDL2 -framework Cocoa -framework IOKit -framework CoreVideo -lc++ -lvulkan -lMoltenVK\r\n\r\nOBJS_IMGUI = \\\r\n\timgui.o\t\\\r\n\timgui_demo.o \\\r\n\timgui_draw.o \\\r\n\timgui_widgets.o \\\r\n\r\nOBJS_SDL = imgui_impl_sdl.o\r\n\r\nOBJS_GL = \\\r\n\timgui_impl_opengl3.o \\\r\n\tgl3w.o \\\r\n\tmain-gl.o \\\r\n\tmain-gl\r\n\r\nOBJS_VULKAN = \\\r\n\timgui_impl_vulkan.o \\\r\n\tmain-vulkan.o \\\r\n\tmain-vulkan\r\n\r\n.PHONY: all clean\r\n\r\nall: $(OBJS_IMGUI) $(OBJS_SDL) $(OBJS_GL) $(OBJS_VULKAN)\r\n\r\nmain-gl: main-gl.o imgui.o imgui_demo.o imgui_draw.o imgui_widgets.o gl3w.o imgui_impl_sdl.o imgui_impl_opengl3.o\r\n\t$(CXX) \\\r\n\t\t$(IMGUI_SRC_DIR)/main-gl.o \\\r\n\t\t$(IMGUI_IMPL_SRC_DIR)/imgui_impl_sdl.o \\\r\n\t\t$(IMGUI_IMPL_SRC_DIR)/imgui_impl_opengl3.o \\\r\n\t\t$(GL3W_DIR)/gl3w.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_demo.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_draw.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_widgets.o \\\r\n\t\t-o $(OUT_GL) $(GL_LFLAGS)\r\n\r\nmain-vulkan: main-vulkan.o imgui.o imgui_demo.o imgui_draw.o imgui_widgets.o imgui_impl_sdl.o imgui_impl_vulkan.o\r\n\t$(CXX) \\\r\n\t\t$(IMGUI_SRC_DIR)/main-vulkan.o \\\r\n\t\t$(IMGUI_IMPL_SRC_DIR)/imgui_impl_sdl.o \\\r\n\t\t$(IMGUI_IMPL_SRC_DIR)/imgui_impl_vulkan.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_demo.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_draw.o \\\r\n\t\t$(IMGUI_SRC_DIR)/imgui_widgets.o \\\r\n\t\t-o $(OUT_VULKAN) $(VULKAN_LFLAGS)\r\n\r\nimgui_impl_sdl.o: $(IMGUI_IMPL_SRC_DIR)/imgui_impl_sdl.cpp $(IMGUI_IMPL_SRC_DIR)/imgui_impl_sdl.h\r\n\t$(CXX) $(SDL_IMPL_CFLAGS) -c $< -o $(IMGUI_IMPL_SRC_DIR)/$@\r\n\r\nimgui_impl_opengl3.o: $(IMGUI_IMPL_SRC_DIR)/imgui_impl_opengl3.cpp $(IMGUI_IMPL_SRC_DIR)/imgui_impl_opengl3.h\r\n\t$(CXX) $(OPENGL3_IMPL_CFLAGS) -c $< -o $(IMGUI_IMPL_SRC_DIR)/$@\r\n\r\nimgui_impl_vulkan.o: $(IMGUI_IMPL_SRC_DIR)/imgui_impl_vulkan.cpp $(IMGUI_IMPL_SRC_DIR)/imgui_impl_vulkan.h\r\n\t$(CXX) $(VULKAN_IMPL_CFLAGS) -c $< -o $(IMGUI_IMPL_SRC_DIR)/$@\r\n\r\ngl3w.o: $(GL3W_DIR)/gl3w.c $(GL3W_DIR)/gl3w.h $(GL3W_DIR)/glcorearb.h\r\n\t$(CC) $(GL_CFLAGS) -c $< -o $(GL3W_DIR)/$@\r\n\r\nmain-gl.o: $(IMGUI_IMPL_SRC_DIR)/example_sdl_opengl3/main.cpp\r\n\t$(CXX) $(GL_CFLAGS) -c $< -o $(IMGUI_SRC_DIR)/$@\r\n\r\nmain-vulkan.o: $(IMGUI_IMPL_SRC_DIR)/example_sdl_vulkan/main.cpp\r\n\t$(CXX) $(VULKAN_CFLAGS) -c $< -o $(IMGUI_SRC_DIR)/$@\r\n\r\nclean:\r\n\trm -f $(IMGUI_SRC_DIR)/*.o\r\n\trm -f $(IMGUI_IMPL_SRC_DIR)/*.o\r\n\trm -f $(GL3W_DIR)/*.o\r\n\trm -f $(OUT_GL)\r\n\trm -f $(OUT_VULKAN)\r\n```\r\n\r\nBefore applying the fix, this resulted in the screenshots above when launching the example code on a non-retina monitor that is attached to a retina Macbook. After applying the fix, the behaviour for the Vulkan example aligned with the OpenGL one as expected.\r\n\r\nThe issue is not present when running the examples on just a retina Macbook, or with a retina display attached to a retina Macbook.\r\n\r\n# References\r\n\r\n[1] [libsdl.org/SDL_Vulkan_GetDrawableSize](https://wiki.libsdl.org/SDL_Vulkan_GetDrawableSize)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2020-05-03T08:43:53Z",
        "closed_at": "2020-05-03T10:04:52Z",
        "merged_at": null,
        "body": "Still working on this but had some success already. Feel free to comment!",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2020-05-02T07:22:21Z",
        "closed_at": "2020-05-05T04:47:55Z",
        "merged_at": null,
        "body": "As some platforms need to implement their own geometry generation, e.g. through saving the drawcalls and passing them to a remote device, this PR adds a define to override ImDrawList. \r\n\r\nThe custom ImDrawList needs to inherit from the base class to avoid breaking existing code (even though the implementer would add their own).\r\nThis seems to be the method that introduces the least change to the codebase.\r\n\r\nWill add an example implementation in a separate PR if accepted.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2020-05-02T04:40:15Z",
        "closed_at": "2020-05-06T07:37:28Z",
        "merged_at": null,
        "body": "You can apply arithmetic operators +,-,*,/ on numerical values.\r\ne.g. [ 100 ], input '++2', result becomes [ 102 ]\r\ne.g. [ 100 ], input '--2', result becomes [  98 ]\r\ne.g. [ 100 ], input '*2', result becomes [ 200 ]\r\ne.g. [ 100 ], input '/2', result becomes [  50 ]",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2020-04-30T00:16:14Z",
        "closed_at": "2020-05-05T23:33:47Z",
        "merged_at": null,
        "body": "Upgrade from ocornut/imgui\r\n\r\n(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\nPLEASE CAREFULLY READ:\r\nhttps://github.com/ocornut/imgui/issues/2261\r\n\r\n(Clear this template before submitting your PR)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-04-29T14:03:21Z",
        "closed_at": "2021-07-07T14:44:36Z",
        "merged_at": null,
        "body": "This PR fixes the issue #3111.\r\n\r\nAdded NULL check for node before accessing ParentNode in DockBuilderRemoveNode(), as @ocornut suggested in #3111. (https://github.com/ocornut/imgui/issues/3111#issuecomment-611485445)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-04-28T23:28:40Z",
        "closed_at": "2020-05-04T09:08:29Z",
        "merged_at": null,
        "body": "Apologies as I'm rather new to imgui. I ran into this trying my first integration. There is probably a better solution than this work around but I don't know the depths of imgui yet. I'm hoping this PR gets the conversation started and towards the correct fix.\r\n\r\nThere's a bug with `imgui_impl_vulkan` where if the GUI elements are initially off screen on the first frame, the `TotalIdxCount` and `TotalVtxCount` are `0`. When this happens later on we try and allocate a vulkan buffer with size 0, which Vulkan gives us an error code -2, `VK_ERROR_OUT_OF_DEVICE_MEMORY`. (terrible error since size 0 isn't out of memory, it's invalid). \r\n\r\nInterestingly if we just skip rendering frames where the vertex count is 0 `GetDrawData` has vertices again. It looks like imgui repositions off screen elements back into the viewable area? This leads me to the belief that there may be a bug within `GetDrawData` and this hack is covering it up.\r\n\r\nWe can easily reproduce the behavior by placing this ini alongside a built Vulkan example. The `check_vk_result` on line 355/356 fails because of the 0 size passed into `vkMapMemory`\r\n\r\n```\r\n[Window][Debug##Default]\r\nPos=60,60\r\nSize=400,400\r\nCollapsed=0\r\n\r\n[Window][Hello, world!]\r\nPos=45,56\r\nSize=345,169\r\nCollapsed=0\r\n\r\n[Window][Dear ImGui Demo]\r\nPos=516,129\r\nSize=550,680\r\nCollapsed=0\r\n```",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 61,
        "deletions": 38,
        "changed_files": 3,
        "created_at": "2020-04-28T19:59:11Z",
        "closed_at": "2020-05-04T09:43:27Z",
        "merged_at": null,
        "body": "When researching how to strip the `d3dcompiler_47.dll` dependency from the DX11 example implementation (I admit I did not pay close enough attention to the example files, but they detail the problem very well), I spotted that shader binary blobs in DX10 and DX11 are kept alive during the entire lifetime of the application.\r\n\r\nThis is not needed (possibly a bit wasteful), so in this PR I moved them to local variables, and I release blobs as soon as they are not needed anymore.\r\n\r\nEDIT:\r\nI don't know what is your stance on using `FAILED()` and `SUCCEEDED()` macros for HRESULT variables, so I went ahead and used them. To be honest, I would also go ahead and start using them wherever possible in Windows specific code instead of comparing against specific error codes - I **have** seen cases where the code did just that instead of using a macro, and it did not include one of possible **success** error codes, and thus treated it as a failure. While I admit those macros may be ugly, they are just the safest.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2020-04-25T12:17:21Z",
        "closed_at": "2020-06-08T21:04:08Z",
        "merged_at": null,
        "body": "This is fix for ImDrawListSplitter::Merge - corrupted data in buffer (64k+ vertices) with 16-bits indices #3129\r\n\r\nThanks for @ShironekoBen for finding underlying issue and making initial patch.\r\n\r\nBasically issue was caused by draw commands cached while making channel split and when switching channels, they internal state (texture ID, clip rect and vertex offset) may no longer match on in ImDrawList.\r\n\r\nAnother partial fix will be to not create draw commands while preparing split since check now is always present in SetCurrentChannel. Fill will be partial because on heavy use of vertices we can still hit state when draw command is stale.\r\n\r\nPre-allocating single draw command on split may no longer be necessary since SetCurrentChannel always check for validity after switch. Also for sparse channel splits there are a lot of unused draw commands allocated, just to be discarded on merge.\r\nThis is a case for Node Editor where each node has few assigned channels, where most of them are empty (one for selection, one for highlights, one for background, etc) most of the time. So maybe this change can also be considered.\r\n\r\n![image](https://user-images.githubusercontent.com/1197433/80279480-4410fa80-86fe-11ea-8941-48f3d3694290.png)\r\n\r\nIntroduction of channel merging based on bounding boxes may further reduce number of generated draw commands. They number can quickly explode when 16-bit indices are used with large meshes:\r\n![image](https://user-images.githubusercontent.com/1197433/80279559-cb5e6e00-86fe-11ea-89b1-66858373ea1b.png)\r\n\r\nCode used for testing:\r\nhttps://gist.github.com/thedmd/e384a83c0fe9e82ec0f69c869510ad44\r\n\r\nRepro on non-patched ImGui copy:\r\n * Copy&paste above gist\r\n * Invoke `TestSplitterBug()`\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 29,
        "changed_files": 8,
        "created_at": "2020-04-24T20:57:43Z",
        "closed_at": "2020-04-28T14:13:01Z",
        "merged_at": null,
        "body": "Lintian found a string typo in a package I was working on, which used imgui. That led me to run codespell on the whole codebase, and thus here we are.\r\n\r\nI split out the \"vertexes->vertices\" change into its own commit since that tends to be controversial and subject to regional usage, despite being in the codespell dictionary, and thus can be cherry-picked-around if desired.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-04-22T05:31:31Z",
        "closed_at": "2020-04-28T14:12:10Z",
        "merged_at": null,
        "body": "I don't mind leaving the demo functions in, but this statement is untrue. I have had the imgui_demo code show up unused in several of my release builds and have seen it even in commercial games like Quake Champions. I think since the functions are not static, the compiler cannot tell if they are used externally and leaves them in.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2020-04-21T00:50:24Z",
        "closed_at": "2020-04-22T08:12:05Z",
        "merged_at": null,
        "body": "This should fix #3143 \r\nI've tested `example_glfw_opengl3` and `example_sdl_opengl3` with all four combinations of `GL_LOWER_LEFT`, `GL_UPPER_LEFT` and `GL_NEGATIVE_ONE_TO_ONE`, `GL_ZERO_TO_ONE`. Technically, the projection matrix is wrong in case of `GL_ZERO_TO_ONE`, but since we draw everything with z=0 and we have `glDisable(GL_DEPTH_TEST)`, it doesn't really matter.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-04-19T12:42:35Z",
        "closed_at": "2020-04-22T08:13:21Z",
        "merged_at": "2020-04-22T08:13:21Z",
        "body": "It's a very minor nitpick, but since code explicitly serves as a documentation for the project, I think it does make sense to fix such.\r\n\r\nThis PR fixes a simple error in the comment for `ImGuiCond_Once`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-04-17T18:23:50Z",
        "closed_at": "2020-04-18T09:09:45Z",
        "merged_at": "2020-04-18T09:09:44Z",
        "body": "This fixes a clang error:\r\nerror: unused variable 'backup_dock_id' [-Werror,-Wunused-variable]\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2020-04-17T13:33:28Z",
        "closed_at": "2022-04-04T12:43:44Z",
        "merged_at": null,
        "body": "If used with an hexadecimal format, `ImGui::Slider*` functions would break when coming across values including letters.\r\n\r\nE.g.\r\n```c++\r\nstatic int n = 0;`\r\nImGui::SliderInt(\"foobar\", &n, 0, 0x20, \"0x%02X\");\r\n```\r\n\r\n![slider_issue](https://user-images.githubusercontent.com/11278694/79574378-57014a80-80c0-11ea-8781-9df3508c651c.gif)\r\n\r\nIt is caused by `ImAtoi()` which assumes the given string is a decimal number. So instead we use `scanf()` by feeding it back the given format (and in case it fails we fallback to the previous method).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2020-04-13T16:00:09Z",
        "closed_at": "2022-03-18T08:57:27Z",
        "merged_at": null,
        "body": "Hi, this is alternative implementation of PR #2749 . I'm in similiar situation where I don't need to render UI all the time, just rendering updates when they happen will do. The strategy I chose is it to report for each non-static widget a time in the future relative to current frame when it'll end up rendering something different. Then platform code using this information may choose to sleep for specified period of time. I've updated win32 dx12 sample to demonstrate this behavoiur and made text cursor blinking report it's time when it's goint to blink. Other examples which I didn't touch will work same way as they were before the change.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-04-13T01:09:55Z",
        "closed_at": "2020-04-13T13:26:32Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-04-11T20:06:33Z",
        "closed_at": "2020-04-12T06:53:34Z",
        "merged_at": null,
        "body": "1. C++11 move semantics and noexcept for swapping\r\n2. erazing range of zero elements at the end of the array now works and doesn't give an assert\r\n3. There's now std::swap(a,b) for better integration with std library\r\n3. insert now also accepts ranges",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2020-04-09T19:42:22Z",
        "closed_at": "2022-01-05T13:34:04Z",
        "merged_at": null,
        "body": "This PR is to continue the discussion in https://github.com/ocornut/imgui/pull/3108#issuecomment-611435871\r\n\r\nAs of now, I only cherry-picked the commit into this PR. I think changing\r\nit from Vec2 to Vec4 would be nicer, but we need to have a good definition\r\nof what that rectangle is (the cursor shape? the next char? the existing chars\r\nwith proposed text (markedText)?).\r\n\r\nI don't have a Windows to continue the discussion on changing the\r\ndefaultImpl to use poll. I think it would be interesting to do that, and is\r\nprobably the right change, but don't have full context yet.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-04-07T23:43:16Z",
        "closed_at": "2022-01-12T13:35:12Z",
        "merged_at": null,
        "body": "This PR added basic IME support for macOS. Particularly, a very simple\r\nTextInputClient implementation added to facilitate the inputs.\r\n\r\n![Screen Shot 2020-04-07 at 4 37 28 PM](https://user-images.githubusercontent.com/127987/78729415-d471d180-78ee-11ea-81da-5b667cfcce3f.png)\r\n\r\nTest Plan:\r\n\r\nRun the example, add proper font support. Typing Chinese / Japanese in\r\nthe input box of the demo. See it now works.\r\n\r\nTODO:\r\n\r\nNeed to position the IME window properly (likely to return reasonable\r\nposition in firstRectForCharacterRange:actualRange:).\r\n\r\nNeed to figure out whether need to add markedText support and how.\r\nIt requires to display the markedText, but not sure with imgui, what's\r\nthe best way of doing that (I want to avoid taint the input text, so\r\nmaybe it is another Text on screen somewhere? But how to do that not\r\nintrusively?).\r\n",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 0,
        "changed_files": 15,
        "created_at": "2020-04-06T18:42:58Z",
        "closed_at": "2020-04-07T09:07:14Z",
        "merged_at": null,
        "body": "Currently, the implementation headers don't include the `imgui.h` header.\r\nWhich means that the compilation will fail if the implementation header\r\nwas included before the `imgui.h` header in the compilation unit. For\r\ninstance, a compilation unit with the following will work:\r\n\r\n```c\r\n#include \"imgui.h\"\r\n#include \"imgui_impl_glfw.h\"\r\n#include \"imgui_impl_opengl3.h\"\r\n```\r\n\r\nBut a compilation unit with the following will fail because `IMGUI_IMPL_API`\r\nand possibly other symbols will not be defined:\r\n\r\n```c\r\n#include \"imgui_impl_glfw.h\"\r\n#include \"imgui_impl_opengl3.h\"\r\n#include \"imgui.h\"\r\n```\r\n\r\nThis patch includes `imgui.h` in the implementation headers to make\r\ninclusions order-invariant, which is a recommended practice.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-03-30T19:44:09Z",
        "closed_at": "2020-04-12T07:56:16Z",
        "merged_at": null,
        "body": "fixed crash when resizing the window",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2020-03-26T21:23:19Z",
        "closed_at": "2020-03-26T22:51:02Z",
        "merged_at": null,
        "body": "Added a optional compiler flag  **IMGUI_IMPL_APPLE_LEGACY** in imgui_impl_opengl3.h\r\n- append the APPLE extension to VAO related functions\r\n- discard usage of Sample related function \r\n\r\nBoth was causing Invalid Operation in an OpenGL 2.1 context (MacOS Sierra on macbook mid-2010). I had no problem with displaying the UI with Menu, ImageButton, Text, CustomDrawing... but I had some glErrors causing me trouble later in my project, so i took some times tracking down the errors. There are probably other APPLE suffixed functions that we could fix as well. \r\nThanks a lot for the library, really awesome!",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-03-26T01:36:38Z",
        "closed_at": "2020-03-29T13:34:58Z",
        "merged_at": "2020-03-29T13:34:58Z",
        "body": "large changes. commit with care.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-03-22T12:19:59Z",
        "closed_at": "2020-04-28T14:15:00Z",
        "merged_at": "2020-04-28T14:15:00Z",
        "body": "devkitPro uses the newlib libc for some (all?) of its platforms, so by using `__NEWLIB__` instead of `__SWITCH__`, Dear ImGui theoretically gains support for the GameCube, Wii, and Wii U, along with any other platform that uses newlib.\r\n\r\nThis was tested on the Switch by @dos1 in #2595, and I verified that `__NEWLIB__` is defined on the Wii U.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2020-03-15T21:54:32Z",
        "closed_at": "2020-03-18T21:14:50Z",
        "merged_at": null,
        "body": "Copies the #define magic from imgui_draw.cpp to the imgui_freetype\r\nimplementation to allow the use of a custom stb rect_pack here as well.\r\n\r\nReferences: fe5347ef94d7dc648c237323cc9e257aff6ab917\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 16,
        "changed_files": 6,
        "created_at": "2020-03-15T21:50:40Z",
        "closed_at": "2020-03-24T17:46:23Z",
        "merged_at": null,
        "body": "For the moment I have only the older 2.x series available on my system\r\nwhich uses slightly different header filenames and initialisation, so\r\nas a slight variation of the 3.x series support recently implemented\r\nhere the glue needed to make 2.x series work.\r\n\r\nI would hope a potential 4.x will not change filenames and such, so the\r\nexisting flag isn't rebranded to 3 which also avoids breaking compat.\r\n\r\nReferences: #2870, 5e2329b98e6562c9e7883e92dcf878e969d81878\r\n\r\nNo worries if you conclude that you don't want to support/include this, I am pushing the PR mostly at the off chance of it helping someone. That might already be achieved with the references. :grin:",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-03-15T12:19:27Z",
        "closed_at": "2020-03-16T16:10:25Z",
        "merged_at": null,
        "body": "This is a little bit similar to #3027, just way simpler and with a slightly different scope. But let's start from zero:\r\n\r\nI'm currently looking into building a Debian package of a project that uses ImGui. Naturally on Unix, we don't want stuff statically linked or programs providing sources for their dependencies if possible.\r\nThe solution to this is to pack ImGui, but for this we need a build system. I _could_ just add a patch inside Debian, but I rather avoid it since the maintainers for Fedora etc have the same problem. \r\nSo let's add a build system (which one doesn't really matter, I just think meson is pretty clean compared to CMake or worse autotools), that builds a dynamic library and adds a pkg-config entry.\r\nProjects then can simply link against the library using pkg-config. However, some people might still want to link statically against it in release binaries, that's why we should also build a static library.\r\nFor developers, we also want to install the header, and add a simple dependency variable in meson since it's basically free.\r\n\r\nLooking at #3027, there are some things I didn't do, but that doesn't mean that they aren't possible. Meson supports a full test suite, with which the examples could be compiled and tested, however I don't think that converting the current system to meson is an advantage.\r\n\r\nI didn't write anything about this in the Readme, there should be a note somewhere, but I don't really know where I should put it. If you have any question about the code, just let me know.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2020-03-11T18:02:54Z",
        "closed_at": "2020-03-11T20:25:57Z",
        "merged_at": null,
        "body": "Make the dx11 example implementation resize the window in a sane way, i.e. not the stretching/scaling the initial render to fit the new window size (current behaviour).\r\n\r\nThis is what happens if I resize initial window currently: mouse doesn't hit detect on the controls properly (mouse not shown, but it's actually hovering in the blue), scaling makes it unreadable.\r\n![image](https://user-images.githubusercontent.com/54322500/76448172-d31db980-63c1-11ea-9d64-71910adab816.png)\r\n\r\nwith the new code:\r\n\r\n![image](https://user-images.githubusercontent.com/54322500/76448393-28f26180-63c2-11ea-87c7-3770ec6008b8.png).\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2020-02-26T23:10:48Z",
        "closed_at": "2020-03-11T11:38:34Z",
        "merged_at": null,
        "body": "The logic in `ImFormatString` was identical to the one in `ImFormatStringV` so I went ahead and copied the `va_list`. This kind of redundancy reduction is usual across dear imgui from what I've seen.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4116,
        "deletions": 19,
        "changed_files": 6,
        "created_at": "2020-02-13T22:50:59Z",
        "closed_at": "2020-02-17T15:14:25Z",
        "merged_at": null,
        "body": "I found a minor issue in the demo window in tables branch. The sorting order is reversed:\r\n![sorting](https://user-images.githubusercontent.com/45316015/74485415-f9cbfb80-4eba-11ea-82af-c5ce22cd24d4.jpg)\r\n\r\nIt was caused by subtracting rhs from lhs in the comparison function, instead of the opposite, as seen in diff.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 179,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2020-02-12T12:31:58Z",
        "closed_at": "2020-10-28T11:56:03Z",
        "merged_at": null,
        "body": "SSE4.2 accellerated CRC32C implementation (it's different and supposedly stronger than original CRC32 implementation)\r\n\r\nTested on visual studio 2019, gcc (more recent version) and clang. It should work on older compilers but I'd need help with testing.\r\n\r\nNotable changes:\r\n\r\n- Actual hashing is now detached from string '###' handling, this makes implementation easier and opens a simple way for trying out other hash functions.\r\n\r\n- added a macro to switch between hash implementations \r\nIMGUI_HASH_IMPLEMENTATION \r\n\r\n- added a macro to disable dynamic code dispatch\r\nIMGUI_NO_DYNAMIC_CODE_DISPATCHING\r\nthat is useful when you compile whole thing multiple times per platform. In this case dispatch happens on higher level and fine-grained one is not needed\r\n\r\n\r\nI've localized the change to one place, but I think it'd be better to spread out parts of it (like platform macros and has_sse42 function.) . \r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 271,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2020-02-07T21:04:32Z",
        "closed_at": "2020-02-10T15:54:17Z",
        "merged_at": null,
        "body": "Example implementation of SDL using the Metal backend. The example_glfw_metal source was used as a base and replaced with the proper SDL calls.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2020-01-25T20:50:54Z",
        "closed_at": "2020-01-30T15:26:28Z",
        "merged_at": null,
        "body": "Filesystem functions perfectly work for `Emscripten` platform.\r\n\r\nThis changes remove extra changes added by #2734.\r\n\r\nThe #2734 disallow filesystem support for Emscripten platform and we have no method to allow it again.\r\n\r\nYou can still disable filesystem functions by defining `IMGUI_DISABLE_FILE_FUNCTIONS`.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2020-01-25T19:57:00Z",
        "closed_at": "2020-01-27T11:11:29Z",
        "merged_at": "2020-01-27T11:11:29Z",
        "body": "Not in all cases, just adding `-lglut` to linking is enough. For example, the [MSYS2](https://www.msys2.org/) software distro has its own characteristics for the [freeglut](https://packages.msys2.org/package/mingw-w64-x86_64-freeglut?repo=mingw64) package. These can be taken into account using the `pkg-config` utility, if available.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 320,
        "deletions": 382,
        "changed_files": 2,
        "created_at": "2020-01-21T19:37:21Z",
        "closed_at": "2020-08-21T13:28:33Z",
        "merged_at": null,
        "body": "follow up on https://github.com/ocornut/imgui/issues/2993#issuecomment-576844438",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-01-16T13:40:21Z",
        "closed_at": "2020-01-17T13:22:36Z",
        "merged_at": null,
        "body": "warning C5054: operator '|': deprecated between enumerations of different types\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-01-10T22:53:31Z",
        "closed_at": "2020-01-11T15:11:44Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2020-01-03T21:02:39Z",
        "closed_at": "2020-01-04T16:29:51Z",
        "merged_at": "2020-01-04T16:29:51Z",
        "body": "\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2019-12-29T15:08:00Z",
        "closed_at": "2020-01-17T12:28:26Z",
        "merged_at": null,
        "body": "STB sprintf allows extra formats like %b or %$d. If ImGui is configured\r\nto use STB sprintf, it generates warnings with GCC and clang when using\r\nsuch formats because it keeps applying default printf-style warnings.\r\nThis commit disables printf-style warnings when using STB sprintf.\r\n\r\nSince the printf-style warnings are defined in imgui.h based on the\r\ncompiler, IMGUI_USE_STB_SPRINTF can't just be defined in the cpp file\r\nanymore and it's been moved as a proper config in imconfig.h.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2019-12-28T17:41:50Z",
        "closed_at": "2020-01-30T16:16:33Z",
        "merged_at": null,
        "body": "I updated imgui in [my project](https://github.com/Oipo/IdleBossHunter) today and found that the loading of fonts on emscripten was broken. This PR fixes it and updates the example to show how to get font loading to work.\r\n\r\nThe result can be seen at https://www.realmofaesir.com/example_emscripten.html\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2019-12-23T11:25:41Z",
        "closed_at": "2021-06-30T13:16:44Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\nI am creating this PR to allow the reinitialization of static variables from `imgui_impl_opengl3.cpp` and `imgui_impl_opengl2.cpp`.\r\n\r\n## Why?\r\n\r\nThis comes up because of a GLES project I am working on. As the `GLSurfaceView`'s original context has been destroyed and recreated, ImGui's OpenGL implementations kept the original, thus no longer valid programs & shaders, etc., and spilling out lots of GLES errors. Reinitializing the variables whenever `ImGui_ImplOpenGL3_Init` is called solves this issue, and thus making ImGui to go over these things again whenever there's a context creation.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 69,
        "changed_files": 1,
        "created_at": "2019-12-04T00:56:18Z",
        "closed_at": "2019-12-05T14:50:53Z",
        "merged_at": null,
        "body": "Wrap main event loop body in an @autoreleasepool block to ensure allocations get freed even if underlying system event loop gets paused due to app nap (#2910)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2019-12-02T14:23:42Z",
        "closed_at": "2019-12-04T22:48:46Z",
        "merged_at": null,
        "body": "(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\nPLEASE CAREFULLY READ:\r\nhttps://github.com/ocornut/imgui/issues/2261\r\n\r\n(Clear this template before submitting your PR)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-11-15T09:13:16Z",
        "closed_at": "2019-11-15T11:20:19Z",
        "merged_at": null,
        "body": "Fix #2892 \r\nMaybe more job to do to make clipboard and IME work on UWP platform.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2019-11-11T22:31:38Z",
        "closed_at": "2020-12-25T17:28:35Z",
        "merged_at": null,
        "body": "This feature allows users to make interactions that use the mouse wheel that won't cause the area to move out from underneath the mouse.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-10-30T21:57:52Z",
        "closed_at": "2019-11-05T11:53:37Z",
        "merged_at": null,
        "body": "For more info see: https://github.com/ocornut/imgui/issues/2877",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-10-29T19:10:37Z",
        "closed_at": "2019-10-29T20:19:03Z",
        "merged_at": null,
        "body": "1.74 wip, downloaded today\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 538,
        "deletions": 538,
        "changed_files": 6,
        "created_at": "2019-10-28T12:06:51Z",
        "closed_at": "2019-10-29T16:15:28Z",
        "merged_at": null,
        "body": "Automatically detected and fixed by ReSharper C++ and manually cleaned up to keep custom formatting.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-10-28T11:49:40Z",
        "closed_at": "2019-10-28T12:58:33Z",
        "merged_at": "2019-10-28T12:58:33Z",
        "body": "In `imgui.cpp`, `vsnprintf` is defined inside `#if defined(_MSC_VER) && !defined(vsnprintf)`, whereas in `imgui_demo.cpp` it is defined inside `#if _WIN32`, which is questionable because the compiler/crt have more to do with `_vsnprintf` being present than the platform.\r\n\r\nThis PR applies the `imgui.cpp` logic to `imgui_demo.cpp` for consistency (and fixes the Cygwin/MSYS2 build).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2019-10-25T08:57:27Z",
        "closed_at": "2020-01-07T20:11:41Z",
        "merged_at": null,
        "body": "Hello!\r\n\r\nI think it is a good time to add support for https://github.com/cginternals/glbinding to ImGui.\r\nSince there is already a compile-time check in place for a couple of popular GL bindings libraries such as Glad and Gl3w. \r\nI think this is a shame that we still don't have out of the box support for Glbinding. This is a modern fancy OpenGL biding library that many (myself included) enjoy using. \r\nI really like using example OpenGL3 IMGUI rendering implementation in my projects (and I'm pretty sure many others do as well) as a simple and cheap out of the box solution. However, I also don't really like to modify or do some custom things with my modules, such as adding my custom define statements, which is my main motivation for this PR.\r\n\r\nThanks!",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2019-10-23T18:30:09Z",
        "closed_at": "2019-10-25T09:57:49Z",
        "merged_at": null,
        "body": "- new optional define `IMGUI_IMPL_OPENGL_VERSION` used in `imgui_impl_opengl3.cpp`\r\n- if undefined attempt to automatically set based on GLAD defines\r\n- improved `IMGUI_IMPL_OPENGL_HAS_DRAW_WITH_BASE_VERTEX` define (fixing #2852)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 112,
        "deletions": 36,
        "changed_files": 4,
        "created_at": "2019-10-23T12:48:52Z",
        "closed_at": "2019-10-24T09:24:55Z",
        "merged_at": "2019-10-24T09:24:55Z",
        "body": "These are needed changes to switch CI testing to github actions. All pushes and pull requests are built for Windows/Linux/MacOS/iOS/Emscripten platforms. Subprojects workflow was created for testing possible breakage of projects that depend on Dear ImGui. For now only cimgui is tested and builds are performed once a day.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 15,
        "changed_files": 5,
        "created_at": "2019-10-22T07:42:48Z",
        "closed_at": "2019-10-29T16:06:21Z",
        "merged_at": null,
        "body": "Now it is more obvious what code is doing.\r\n\r\nAdd IM_ROUND() macro\r\nAdd ImRound(float) and ImRound(ImVec2)\r\nReplace IM_FLOOR(n + 0.5f) with IM_ROUND(n)\r\nReplace ImFloor(n + 0.5f) with ImRound(n)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 350,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-10-20T20:08:23Z",
        "closed_at": "2020-06-09T14:57:42Z",
        "merged_at": null,
        "body": "Taken from misc/fonts/README.txt and cleaned up to look nicer.\r\n\r\nFeel free to look over and make any changes.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 265,
        "deletions": 102,
        "changed_files": 3,
        "created_at": "2019-10-17T15:40:21Z",
        "closed_at": "2019-10-18T16:24:33Z",
        "merged_at": null,
        "body": "So, at this moment viewports don't work with DX12 and it is my approach to solve the problem.\r\nAfter this fix I had got the next result:\r\n![imgui_dx12_viewports](https://user-images.githubusercontent.com/15281093/67024635-67cf0480-f10d-11e9-8a25-22dee02bed5a.png)\r\n\r\nI hope it will be useful for someone apart from me :)\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 69,
        "deletions": 68,
        "changed_files": 5,
        "created_at": "2019-10-17T09:38:31Z",
        "closed_at": "2019-10-18T14:20:53Z",
        "merged_at": null,
        "body": "Macro is used to ensure that flooring operation is always inlined even in debug builds. __forceinline does not force inlining in /Od builds with MSVC.\r\n\r\n---\r\n\r\nI also noticed that in some places `IM_FLOOR()` and `ImFloor()` are mixed (like [here](https://github.com/ocornut/imgui/blob/0de66bcca4e8ef15bf1f29f858964db3687fb15f/imgui.cpp#L5587-L5597)). Maybe i should i review all usages of `ImFloor()` and `IM_FLOOR()` and use macro or function depending on whether function is called frequently or not?",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-10-11T15:42:04Z",
        "closed_at": "2019-10-12T15:57:03Z",
        "merged_at": null,
        "body": "Added link to Diligent Engine in readme",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2019-10-07T20:59:28Z",
        "closed_at": "2021-04-07T06:47:25Z",
        "merged_at": null,
        "body": "This PR adds support for compiling SDL + opengl3 example on Raspberry Pi (RPi).\r\nRPi uses EGL instead of full openGL. `Makefile` was adjusted to pull in RPi specific headers and libraries found in `/opt/vc` through `pkg-config`.\r\nSince it seems to be no way of automatically detecting compilation for RPi target, it is essentially ARM CPU, a new define called `RPI` was introduced in the `Makefile` and passed to the compiler.\r\nThe use of opengl ES 2.0 is also forced through `-DIMGUI_IMPL_OPENGL_ES2` specified in the `Makefile`.\r\n\r\nThe code was compiled natively and the result was successfully tested on the target.",
        "comments": 58
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-10-07T18:19:58Z",
        "closed_at": "2019-10-18T14:33:38Z",
        "merged_at": null,
        "body": "In my application, I'm recreating my whole ImGui setup whenever the window is resized (to avoid dynamic state in Vulkan). When `ImGui_ImplGlfw_InitForVulkan` gets called the second time, ImGui remembers its own callbacks as the \"last installed user callbacks\", resulting in infinite recursion. To avoid this, I would restore the user callbacks when ImGui shuts down.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-10-06T11:09:33Z",
        "closed_at": "2019-10-07T13:53:02Z",
        "merged_at": null,
        "body": "Hi,\r\n\r\nI've tried to compile Allegro variant under macOS Mojave 10.14.6 but was running into this error:\r\n\r\n```shell\r\nUndefined symbols for architecture x86_64:\r\n  \"_main\", referenced from:\r\n     implicit entry/start for main executable\r\n     (maybe you meant: __al_mangled_main)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nMy build commands were based on the Ubuntu build example from README.md.\r\n\r\nAfter some googling I found out that under macOS one has to link to *allegro_main* library as well. Not sure why Ubuntu doesn't need it, but macOS must have it. \r\n\r\nI've added a build example for macOS to README.md. Maybe it'll be of some use to other macOS newbies like me. \r\n\r\nCheers,",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 375,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2019-10-06T00:04:50Z",
        "closed_at": "2019-10-14T09:31:42Z",
        "merged_at": null,
        "body": "Looks like current osg example mentioned [here](https://github.com/ocornut/imgui/wiki/Bindings#frameworkengine-bindings) no longer works, so I reworked it and made this demo. Tested it on Win7 and Ubuntu 19.\r\n\r\n![imgui](https://user-images.githubusercontent.com/2850817/66262209-b531a480-e7e4-11e9-9362-76097ad447b2.png)\r\n\r\nThe only issue is that OSG handles OpenGL extensions in it's own way and I had to use GLEW (since it's the most popular loader anyway) to make it work with your imgui_impl_opengl3 implementation. I use OSG + ImGui this way in one of my projects and it works fine.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-10-04T07:20:57Z",
        "closed_at": "2019-10-04T09:57:21Z",
        "merged_at": "2019-10-04T09:57:21Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2019-10-01T18:25:57Z",
        "closed_at": "2019-10-01T19:49:45Z",
        "merged_at": "2019-10-01T19:49:45Z",
        "body": "Fixed some syntax errors in README.md\r\n![image](https://user-images.githubusercontent.com/27808442/65989274-09115600-e492-11e9-8f70-cc2bd30e2e4d.png)\r\n \r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2019-10-01T04:20:42Z",
        "closed_at": "2019-10-11T12:20:21Z",
        "merged_at": null,
        "body": "This fixes the issue with backspace handling (https://github.com/ocornut/imgui/issues/2817).\r\n\r\nIt also allows passing null view to `ImGui_ImplOSX_NewFrame()`. This adds flexibility as the method may be called from thread other than main as methods of NSView can only be accessed from the main thread.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 54,
        "changed_files": 7,
        "created_at": "2019-09-29T14:02:25Z",
        "closed_at": "2020-03-03T18:00:33Z",
        "merged_at": null,
        "body": "I reviewed, refreshed and slightly improved PR #2541 for issue #2538. It works really well for me and I can at last use emoji in my ImGui software!\r\n\r\nCould @cloudwu and I help some more with getting these changes integrated? Right now the most inelegant part is the `#include <windows.h>` before `ImFileOpen()`, but that could be fixed by moving that function to the bottom of `imgui.cpp`, near the other platform-specific implementations for *e.g.* clipboard handling.",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-09-29T10:30:12Z",
        "closed_at": "2023-03-10T18:13:39Z",
        "merged_at": null,
        "body": "- An item which is barely visible (1px) was not being visibly focused\r\n- Scrolling to an invisible item was improved to indicate scroll direction instead of simply centering it\r\n\r\nCloses #2812",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-09-26T18:37:16Z",
        "closed_at": "2019-09-28T10:21:29Z",
        "merged_at": null,
        "body": "Fixes the issue that an item which was barely visible (1px) was not being visibly focused. Also always focusing the default item in the center of the surrounding area makes it behave consistently independent of initial visibility. Both of which are being resolved with this change.\r\n\r\nAdditional suggestion: Introduce optional `center_y_ratio` parameter to forward to SetScrollHereY() for more control.\r\n\r\nDear ImGui 1.73\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2019-09-24T17:49:52Z",
        "closed_at": "2019-12-17T13:35:57Z",
        "merged_at": null,
        "body": "When the SDL Video backend is set to wayland the function\r\n`SDL_GetGlobalMouseState` does not work. Most probably a security measure\r\nfor programs to not grab everything the user does\r\nhttps://wiki.libsdl.org/SDL_GetGlobalMouseState\r\n\r\nusing `SDL_GetMouseState` https://wiki.libsdl.org/SDL_GetMouseState works\r\non wayland\r\n\r\nfixes https://github.com/ocornut/imgui/issues/2800\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2019-09-22T11:05:32Z",
        "closed_at": "2019-09-22T21:27:14Z",
        "merged_at": null,
        "body": "This change is additive and doesn't change the existing code.\r\n\r\nIt handles the case when we don't define any of these macros\r\n{ \r\n    `IMGUI_IMPL_OPENGL_LOADER_GL3W`,\r\n    `IMGUI_IMPL_OPENGL_LOADER_GLEW`,\r\n   ` IMGUI_IMPL_OPENGL_LOADER_GLAD`,\r\n   ` IMGUI_IMPL_OPENGL_LOADER_CUSTOM`\r\n]\r\n\r\nUsing the `__has_include` clang extension, we can automatically know which header is available,\r\nthen we use it directly without predefined macros or anything, this fits naturally in the code without having to use gl3w or supply any macros ... \r\n",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-09-18T04:05:50Z",
        "closed_at": "2019-09-18T11:21:47Z",
        "merged_at": null,
        "body": "In release mode, this function is not used, and since it is declared `static`, on strict builds it causes an error about being unused.\r\n\r\nThis PR wraps it in the same `#if` check to match its only callsite.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2019-09-17T04:53:31Z",
        "closed_at": "2020-05-09T05:22:26Z",
        "merged_at": null,
        "body": "Windows platform implementation for #2715. I'm pretty sure this needs to be done per platform since it's often the case that bundling and loading application icons is also platform specific.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-09-16T20:30:02Z",
        "closed_at": "2019-09-17T07:21:10Z",
        "merged_at": "2019-09-17T07:21:10Z",
        "body": "Fixes a signed type warning in Clang (I use `-Werror` because I'm a masochist). Occurs when `IMGUI_ENABLE_OSX_DEFAULT_CLIPBOARD_FUNCTIONS` is defined.\r\n\r\n```console\r\n$ clang --version\r\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\r\nTarget: x86_64-apple-darwin18.6.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n```\r\n\r\nTechnically `ItemCount` probably isn't the _best_ type for `i` but it solves the problem of signedness if/when the typedef changes. Right now, it's ultimately an unsigned type so changing it to `unsigned int i` also works (but would break, again, if `ItemCount` changes back to signed in the future).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3559,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2019-09-16T13:31:39Z",
        "closed_at": "2020-12-09T18:20:22Z",
        "merged_at": null,
        "body": "add glad files for examples to use\r\n\r\nprevious discussion in https://github.com/ocornut/imgui/pull/2774",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-09-16T02:41:46Z",
        "closed_at": "2019-09-16T17:02:11Z",
        "merged_at": null,
        "body": "decreasing the value was broken on arm64",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 647,
        "deletions": 75,
        "changed_files": 6,
        "created_at": "2019-09-06T16:23:58Z",
        "closed_at": "2022-05-03T16:15:12Z",
        "merged_at": null,
        "body": "The PR is part of multi-viewports on OSX.\r\nBut I don't implement multi-viewports in imgui_impl_opengl2.cpp, It seem to be difficult to implement it without Objective-C.\r\n\r\nI implement it in my repo https://github.com/metarutaiga/xxImGui first.\r\nSo I make a PR here.",
        "comments": 21
    },
    {
        "merged": false,
        "additions": 117,
        "deletions": 21,
        "changed_files": 4,
        "created_at": "2019-09-05T10:02:35Z",
        "closed_at": "2019-09-17T10:08:45Z",
        "merged_at": null,
        "body": "This changeset implements several pieces of the puzzle that add up to a narrow ellipsis rendering.\r\n\r\n## EllipsisCodePoint\r\n\r\n`ImFontConfig` and `ImFont` received `ImWchar EllipsisCodePoint = -1;` field. User may configure `ImFontConfig::EllipsisCodePoint` a unicode codepoint that will be used for rendering narrow ellipsis. Not setting this field will automatically detect a suitable character or fall back to rendering 3 dots with minimal spacing between them. Autodetection prefers codepoint 0x2026 (narrow ellipsis) and falls back to 0x0085 (NEXT LINE) when missing. Wikipedia indicates that codepoint 0x0085 was used as ellipsis in some older windows fonts. So does default Dear ImGui font. When user is merging fonts - first configured and present ellipsis codepoint will be used, ellipsis characters from subsequently merged fonts will be ignored.\r\n\r\n## Narrow ellipsis\r\n\r\nRendering a narrow ellipsis is surprisingly not straightforward task. There are cases when ellipsis is bigger than the last visible character therefore `RenderTextEllipsis()` has to hide last two characters. In a subset of those cases ellipsis is as big as last visible character + space before it. `RenderTextEllipsis()` tries to work around this case by taking free space between glyph edges into account. Code responsible for this functionality is within `if (text_end_ellipsis != text_end_full) { ... }`.\r\n\r\n## Fallback (manually rendered dots)\r\n\r\nThere are cases when font does not have ellipsis character defined. In this case RenderTextEllipsis() falls back to rendering ellipsis as 3 dots, but with reduced spacing between them. 1 pixel space is used in all cases. This results in a somewhat wider ellipsis, but avoids issues where spaces between dots are uneven (visible in larger/monospace fonts) or squish dots way too much (visible in default font where dot is essentially a pixel). This fallback method obsoleted `RenderPixelEllipsis()` and this function was removed. Note that fallback ellipsis will always be somewhat wider than it could be, however it will fit in visually into every font used unlike what `RenderPixelEllipsis()` produced.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2019-09-04T20:16:56Z",
        "closed_at": "2019-09-17T08:04:41Z",
        "merged_at": "2019-09-17T08:04:41Z",
        "body": "- append CXXFLAGS instead of overwriting them\r\n- add glad.c build rule\r\n\r\nalso in a separate commit generated glad files for OpenGL 3.3 core context",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 554,
        "deletions": 5,
        "changed_files": 6,
        "created_at": "2019-08-31T22:29:53Z",
        "closed_at": "2023-04-19T14:56:38Z",
        "merged_at": null,
        "body": "This pull request is for the example project show casing using Dear ImGui's docking branch working with Win32 window API and OpenGl3 using the Glad loader.\r\n\r\nTo use:\r\n  -Pull commit.\r\n  -Load ImGui solution.\r\n  -Set imgui_impl_opengl3.h to use #define IMGUI_IMPL_OPENGL_LOADER_GLAD\r\n  -Set included example project as startup.\r\n  -Build and run.\r\n\r\n![Screenshot](https://user-images.githubusercontent.com/10456469/64069715-e7b01680-cc14-11e9-8e73-e767b3991df8.jpg)\r\n\r\n",
        "comments": 21
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-08-30T09:53:52Z",
        "closed_at": "2019-09-20T13:32:28Z",
        "merged_at": null,
        "body": "There already was a fix for hue wrapping around. It depended on `g.ActiveId != 0 && !g.ActiveIdAllowOverlap` condition for detecting changes through `DragInt`/`DragFloat` and it no longer worked. Fix is simply a `bool ColorFixHueWrap` in `ImGuiContext` which is set whenever `DragInt`/`DragFloat` has modified color values, thus 100% reliable now.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2019-08-27T20:46:45Z",
        "closed_at": "2019-08-28T07:53:39Z",
        "merged_at": null,
        "body": "Fixes two issues as described in https://github.com/nothings/stb/pull/722.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-08-26T23:54:14Z",
        "closed_at": "2019-08-28T17:23:58Z",
        "merged_at": null,
        "body": "Display the average value instead of just a dummy \"avg 0.0\"\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2019-08-26T13:18:09Z",
        "closed_at": "2020-06-05T08:30:59Z",
        "merged_at": null,
        "body": "GLFW will incorrectly report mouse button as released when new window is created even if mouse button is kept pressed. Added a workaround that ignores mouse-release events for held-down buttons during window creation. This only happens on linux (tested windows and MacOS as well).\r\n\r\n![Video](https://user-images.githubusercontent.com/19151258/63693479-dafa7f80-c81c-11e9-8c90-4d0f7c5bf0f7.gif)\r\n\r\nNote that we can no longer use `glfwGetMouseButton(g_Window, i) != 0` because this call also reports mouse button as released even though it is being held down.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-08-26T13:11:00Z",
        "closed_at": "2019-08-29T13:55:16Z",
        "merged_at": null,
        "body": "Issue manifests on linux when window is in it's own viewport.\r\n\r\n![Video](https://user-images.githubusercontent.com/19151258/63692779-1bf19480-c81b-11e9-9886-b1448badc5f9.gif)\r\n\r\n## Why it happened\r\n\r\nEvent sets `PlatformRequestResize = true` which causes [this line](https://github.com/ocornut/imgui/blob/483534b525063a242d63f4481e55c88cf0c5eba9/imgui.cpp#L6123) to execute and save size of collapsed window as full size.\r\n\r\nSDL backend does not send window resize event when `SDL_SetWindowSize()` is called and everything works as expected.\r\n\r\nOn windows glfw still sends this event, but event is sent during `glfwSetWindowSize()` call which is invoked from [here](https://github.com/ocornut/imgui/blob/483534b525063a242d63f4481e55c88cf0c5eba9/imgui.cpp#L10895). Due to lucky accident `PlatformRequestSize` is [cleared](https://github.com/ocornut/imgui/blob/483534b525063a242d63f4481e55c88cf0c5eba9/imgui.cpp#L10942) soon after imgui requests setting window size. It works on windows by chance.\r\n\r\nOn linux event is queued and sent to application on next frame during `glfwPollEvents()`. Then imgui gets a chance to react on `PlatformRequestSize` flag and save wrong window size.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2019-08-23T05:12:42Z",
        "closed_at": "2023-09-07T10:14:33Z",
        "merged_at": null,
        "body": "Contained are three new ImDrawList functions that closely mimic the existing AddEllipse/PathArcTo functions:\r\n- ImDrawList::**PathEllipticalArcTo**(const ImVec2& center, float radius_x, float radius_y, float rotation, float a_min, float a_max, int num_segments = 10)\r\n- ImDrawList::**AddEllipse**(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 12, float thickness = 1.0f)\r\n- ImDrawList::**AddEllipseFilled**(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 12)\r\n\r\nParameters for drawing an ellipse, more or less, were taken from Javascript's Canvas2D [ellipse()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse) method. Willing to make any modifications that will improve performance and/or clarity.\r\n\r\nThough ellipses _can_ currently be drawn with the existing bezier curve feature set, it does not seem proper - ellipses, I would argue, are primitive shapes that should be included.\r\n\r\n![CosmicExplorer_2019-08-22_22-04-35](https://user-images.githubusercontent.com/1364451/63568310-996e8980-c529-11e9-8748-5fba219c2b60.png)\r\n[Example use: drawing 2D kepler orbits]",
        "comments": 17
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-08-17T14:02:13Z",
        "closed_at": "2019-10-23T14:55:27Z",
        "merged_at": "2019-10-23T14:55:27Z",
        "body": "Hi, when playing with ImGUI and the Emscripten example, I got the following error:\r\n`funto@pollux:~/projets_autres/imgui-master/examples/example_emscripten$ make\r\n(...)\r\nerror: undefined symbol: $FS\r\nwarning: To disable errors for undefined symbols use `-s ERROR_ON_UNDEFINED_SYMBOLS=0`\r\nError: Aborting compilation due to previous errors\r\nshared:ERROR: '/home/funto/install/emsdk/node/8.9.1_64bit/bin/node /home/funto/install/emsdk/emscripten/1.38.31/src/compiler.js /tmp/tmpa1os4_o1.txt /home/funto/install/emsdk/emscripten/1.38.31/src/library_pthread_stub.js' failed (1)\r\nMakefile:57: recipe for target 'example_emscripten.html' failed\r\nmake: *** [example_emscripten.html] Error 1`\r\n\r\nIt looks like this is due to the removal of the \"FILESYSTEM\" Emscripten module.\r\nAs a result I added it back to the Makefile and it compiled and ran on my second try:\r\n\r\n`funto@pollux:~/projets_autres/imgui-master/examples/example_emscripten$ make\r\nem++ -o example_emscripten.html main.o imgui_impl_sdl.o imgui_impl_opengl3.o imgui.o imgui_demo.o imgui_draw.o imgui_widgets.o -s USE_SDL=2 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s BINARYEN_TRAP_MODE=clamp -s DISABLE_EXCEPTION_CATCHING=1 -s NO_EXIT_RUNTIME=0 -s ASSERTIONS=1 --shell-file shell_minimal.html\r\nBuild complete for example_emscripten.html`\r\n\r\nUsing ImGUI master branch (2019/08/17) and latest Emscripten SDK ( emscripten-1.38.31 sdk-1.38.31-64bit ) on Ubuntu 18.04 LTS.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 739,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2019-08-15T14:12:12Z",
        "closed_at": "2020-10-20T08:30:20Z",
        "merged_at": null,
        "body": "In our robotics library, we were using a mixture of GLFW and SDL, but switched to SFML as it seemed to provide much of the functionality of both - the one thing missing was support in ImGui! I thought I'd contribute this P.R. in the hope that you think it would be of general use to ImGui users. However, if you don't want to further extend your support burden, I totally understand! If you're at all interested I'll fix up the windows projects!\r\n\r\nCheers\r\n\r\nJamie",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2019-08-12T18:21:31Z",
        "closed_at": "2019-08-12T20:31:50Z",
        "merged_at": "2019-08-12T20:31:50Z",
        "body": "Clang: `non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long long') to 'UINT' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]`",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2019-08-03T11:41:05Z",
        "closed_at": "2019-09-20T13:49:28Z",
        "merged_at": null,
        "body": "Fix for the issue https://github.com/ocornut/imgui/issues/2664\r\n\r\nChanges:\r\n- Added forwarding of mouse move and drag events from the main application to `imgui_impl_osx` event handlers\r\n- Changed coordinate flipping\r\n- Tested on MacOS 10.14.4 Mojave, Xcode 10.1\r\n\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2019-07-31T18:56:01Z",
        "closed_at": "2019-08-01T18:10:57Z",
        "merged_at": null,
        "body": "ImGui always sets the MSAA level to 1 sample, disabling it. This means you get errors if you try to render with ImGui's into a multisampled framebuffer in Vulkan, because  Vulkan requires you to specify the correct multisampling level at pipeline creation time.\r\n\r\nThis change adds a new member to the `ImGui_ImplVulkan_InitInfo` struct which users of ImGui can set to the correct multisample level for their target frame buffer. The zero value (which you'll get by default if the struct has been zero-initialised) is not a valid MSAA level in Vulkan, so we detect that case and use `VK_SAMPLE_COUNT_1_BIT` instead at setup time. Unless you've explicitly set the MSAASamples to something, the default behaviour should be exactly as it was previously, i.e. multisampling will be disabled.\r\n\r\nThis fixes issue #2705 \r\n\r\nFeedback very much appreciated!",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-07-28T08:50:20Z",
        "closed_at": "2019-07-29T22:52:31Z",
        "merged_at": "2019-07-29T22:52:31Z",
        "body": "I ran into two issues getting vulkan up and running:\r\n1. When running without viewport enabled the main viewport doesn't get cleaned up properly since the platform hooks haven't been set.\r\n2. Since the ImGui_ImplVulkan_DestroyDeviceObjects() was removed for some reason so some vulkan resources weren't getting cleaned up.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 22,
        "changed_files": 1,
        "created_at": "2019-07-28T08:15:22Z",
        "closed_at": "2021-08-02T14:40:57Z",
        "merged_at": null,
        "body": "Regarding issue #2445. This is what I've been running with without too much issues. I don't currently have viewports enabled, but that should be running the same logic as before.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-07-26T10:42:36Z",
        "closed_at": "2021-02-18T12:49:22Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\ni propose a fix about the transparancy of the ui when Glfw window is transparant\r\n\r\nsee this topic with example : https://discourse.dearimgui.org/t/imgui-with-transparent-window-glfw/299\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-07-23T09:49:34Z",
        "closed_at": "2019-07-23T16:41:27Z",
        "merged_at": "2019-07-23T16:41:27Z",
        "body": "* This fixes gcc warning: missing field 'alloc' initializer [-Wmissing-field-initializers]\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 340,
        "deletions": 340,
        "changed_files": 4,
        "created_at": "2019-07-23T07:59:18Z",
        "closed_at": "2019-07-25T18:13:01Z",
        "merged_at": null,
        "body": "First of all, thanks a lot Omar for maintaining this amazing library!\r\n\r\n**Context:** Dear ImGui public API is currently not suitable for applications that follow coding standards such as [High Integrity C++ Coding Standard](https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard) and use C++ linter tools such as clang-tidy. One of the issues that can be found is the use of signed integers as flags which are manipulated with bitwise operations. This violates one of the recommendations of coding standards as described [here](https://wiki.sei.cmu.edu/confluence/display/c/INT13-C.+Use+bitwise+operators+only+on+unsigned+operands) and [here](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html).\r\n\r\nDear ImGui does not have to internally comply with such standards, but its use cases would definitely increase by making at least the public API compliant.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 22,
        "changed_files": 8,
        "created_at": "2019-07-19T00:30:36Z",
        "closed_at": "2019-07-22T01:44:10Z",
        "merged_at": null,
        "body": "Adding an ImGuiKey 'ImGuiKey_EnterSecondary' to support platforms that differentiate the enter (return key) and the numpad enter key. This lets users on certain platforms use the numpad enter key to finish editing input text fields. Useful when the input field is for numeric values.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2019-07-04T02:58:09Z",
        "closed_at": "2019-07-04T04:16:29Z",
        "merged_at": null,
        "body": "\u66f4\u65b0\u4e00\u4e0b\r\n\r\n(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\nPLEASE CAREFULLY READ:\r\nhttps://github.com/ocornut/imgui/issues/2261\r\n\r\n(Clear this template before submitting your PR)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2019-06-24T21:19:11Z",
        "closed_at": "2019-09-17T14:39:29Z",
        "merged_at": null,
        "body": "PR adds a flag `ImGuiStyle::WindowHideCollapseButton` that allows to hide a collapse button from the title bar when a window is collapsable. \r\nSetting the flag to true doesn't disable collapsibility of the window. This still can be done by double-clicking on the titlebar.\r\n\r\nRelated to the issue #2634.\r\n\r\nScreenshots:\r\n- Hide collapse button and collapsable window:\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052629-10c4a000-96d6-11e9-8ebb-06b855ae3dbf.png)\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052642-16ba8100-96d6-11e9-80d8-178b5c11b616.png)\r\n- Show collapse button and collapsable window:\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052670-26d26080-96d6-11e9-89de-69d7db4b2ee6.png)\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052680-2d60d800-96d6-11e9-93bc-8cd5b31ea71c.png)\r\n\r\n- No collapsable window:\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052703-3ea9e480-96d6-11e9-93ce-edc110a9c9f0.png)\r\n![obraz](https://user-images.githubusercontent.com/3495693/60052708-436e9880-96d6-11e9-9fe0-166260e94984.png)\r\n\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2019-06-18T20:16:23Z",
        "closed_at": "2019-06-18T21:39:10Z",
        "merged_at": null,
        "body": "Docking/Viewport support for SDL+dx11",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 538,
        "deletions": 35,
        "changed_files": 14,
        "created_at": "2019-06-18T04:04:11Z",
        "closed_at": "2019-06-18T20:17:18Z",
        "merged_at": null,
        "body": "Docking/Viewport support for SDL+dx11",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 457,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2019-06-18T03:17:23Z",
        "closed_at": "2019-06-18T09:29:03Z",
        "merged_at": null,
        "body": "Split of #2630 with just the stuff for master",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-06-18T00:35:54Z",
        "closed_at": "2019-06-18T08:55:34Z",
        "merged_at": "2019-06-18T08:55:34Z",
        "body": "Add support for tvOS (appleTV)\r\nFix iOS/tvOS opengl ES 3.0 include path to OpenGLES/ES3/gl.h\r\n(as per https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/AdoptingOpenGLES3/AdoptingOpenGLES3.html)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 563,
        "deletions": 71,
        "changed_files": 8,
        "created_at": "2019-06-16T23:27:38Z",
        "closed_at": "2019-06-18T03:18:21Z",
        "merged_at": null,
        "body": "Implement SDL/dx11 sample\r\nAdd support for viewport when using SDL with dx11\r\n\r\nAddressing comments mentioned in #2482",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1417,
        "deletions": 430,
        "changed_files": 28,
        "created_at": "2019-06-14T11:19:15Z",
        "closed_at": "2022-01-10T14:27:53Z",
        "merged_at": null,
        "body": "This PR add definitions for keys A-Z, 0-9, F1-F12 and support for them in all platform backends.\r\n\r\nSince support for every key is optional and depends on content of `io.KeyMap` it should not introduce any incompatibilities.\r\n\r\nI found myself adding support for extra keys in every project that used keyboard shortcuts. So maybe it will be useful also for others.\r\n\r\nNote: Marmalade goes up to F10. I didn't found constants for F11 and F12.\r\n",
        "comments": 25
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-06-11T21:02:16Z",
        "closed_at": "2019-06-17T13:17:25Z",
        "merged_at": "2019-06-17T13:17:24Z",
        "body": "and support python\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2019-06-08T00:26:00Z",
        "closed_at": "2019-09-23T12:55:13Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2019-06-04T14:39:17Z",
        "closed_at": "2019-06-04T18:49:54Z",
        "merged_at": null,
        "body": "\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2019-06-02T09:23:57Z",
        "closed_at": "2023-04-07T15:00:29Z",
        "merged_at": null,
        "body": "I'm not certain if this is wanted or if this is the right place for this but I created a few flowcharts to help me better understand the lifecycle of Dear ImGui with Vulkan on Win32. I used these as evidence for my education and I got the feedback that it might be useful to create a pull request for it.\r\n\r\nThe diagrams show a high level overview of the calls needed to make ImGui work in a generic environment, they are split up into four parts:\r\n- Initialization: Show how to setup Dear ImGui for Vulkan on Win32.\r\n- Update: Shows which calls should be made during your update loop.\r\n- Render: Shows which calls should be made directly before and after your ImGui render code.\r\n- Finalization: Shows how to destroy your ImGui environment for Vulkan on Win32. ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 118,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2019-05-31T03:10:57Z",
        "closed_at": "2022-01-20T15:02:06Z",
        "merged_at": null,
        "body": "This patch adds IME support for macOS and also fixes some input bugs, such as #2578.\r\n\r\nSome TODO:\r\n\r\n1. The osx/opengl example has been unusable, I can't test it and add IME support.\r\n2. On macOS, ImGui needs to render `Editing Text` by itself. But this is not very important.\r\n3. Since there is no `Editing Text`, the IME cannot cover the cursor. That is to say, `g.FontSize` cannot be subtracted here.\r\nhttps://github.com/ocornut/imgui/blob/bff7202ff2ba78dbba59950c85b097c665729e9f/imgui_widgets.cpp#L4043\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2019-05-29T09:02:49Z",
        "closed_at": "2022-01-05T13:32:14Z",
        "merged_at": null,
        "body": "Now even if the focus is not on the input control, the IME will be activated, like this:\r\n\r\n![1](https://user-images.githubusercontent.com/1836844/58543755-a6355700-8232-11e9-8536-aca8696df08b.PNG)\r\n\r\n\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-05-27T03:56:28Z",
        "closed_at": "2019-05-28T09:16:00Z",
        "merged_at": "2019-05-28T09:16:00Z",
        "body": "#1873",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-05-26T17:07:19Z",
        "closed_at": "2019-05-27T08:47:18Z",
        "merged_at": "2019-05-27T08:47:18Z",
        "body": "Fixed minor bug in CheckShader and CheckProgram of OpenGL3 implementation.\r\n\r\nThe log_length reported by \r\nglGetProgramiv(handle, GL_INFO_LOG_LENGTH, &log_length)\r\nin these two functions will always return at least 1, since the string delimiter is also counted to the log length.\r\n\r\nThe old version therefore always prints (an empty string) to stderr. This is annoying in the emscripten port, since it prints a red error message to the Javascript console. The new version fixes this behavior.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-05-17T09:44:02Z",
        "closed_at": "2019-05-18T08:43:31Z",
        "merged_at": "2019-05-18T08:43:31Z",
        "body": "We're using imgui for a couple of tools in the Mesa3D project. Mesa\r\ngets free coverity (static analyzer tool) coverage and we got this\r\nwarning reported :\r\n\r\n   imgui_draw.cpp:1781: error[shiftTooManyBitsSigned]: Shifting signed 32-bit value by 31 bits is undefined behaviour\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2019-05-16T03:47:20Z",
        "closed_at": "2021-06-30T13:11:25Z",
        "merged_at": null,
        "body": "**Rational behind this PR**\r\nThe current GLFW platform binding gives us the possibility to use Dear ImGui in a new project really easily. However, in case you want to integrate it in a project already using GLFW or with a custom renderer this is not possible without copying the content of the file `examples/imgui_impl_glfw.cpp` and adapt it. This can create an issue in case you want to update Dear ImGui but forgot to update the code for the platform binding. This is especially true when the docking branch will be merged in the master branch. \r\n\r\nThe proposed PR attempts to resolve this issue by proposing macros to create custom callbacks as well as the possibility to remove the internal global variables by custom internals.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-05-11T23:34:51Z",
        "closed_at": "2019-05-12T15:53:09Z",
        "merged_at": "2019-05-12T15:53:09Z",
        "body": "Add IM_ASSERT_ONLY macro that can be used to compile out code that asserts depend on.\r\n\r\nI ran into some unreferenced arguments and local variables when trying to build with asserts compiled out. Other than that, everything still worked great.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2019-05-10T17:09:25Z",
        "closed_at": "2019-05-11T08:54:57Z",
        "merged_at": "2019-05-11T08:54:57Z",
        "body": "With the release of GLFW 3.3, it is now possible to detect correctly monitors working area (see GLFW_HAS_MONITOR_WORK_AREA). GLFW 3.3 also introduced the window hint GLFW_FOCUS_ON_SHOW. This fixed the case where a new created window (viewport) takes the focus even if not visible.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 32,
        "changed_files": 3,
        "created_at": "2019-05-10T15:54:27Z",
        "closed_at": "2019-05-18T15:34:59Z",
        "merged_at": "2019-05-18T15:34:58Z",
        "body": "This small addition adds a Mac version of the Win32 \"built in\" copy/paste support, in roughly the same number of lines of code. It is written using the old CF API to avoid the need for a second .mm file. The added dependencies are from AppKit.framework, which is the base framework necessary for any Mac app. (It is brought in by the umbrella framework \"Cocoa\" used by the imgui Mac examples, for instance.)\r\n\r\nI've removed the additional manual Set/GetClipboardText hooks from imgui_impl_osx.mm now they're no longer necessary, and also some stray file references from the example_apple_opengl2 xcode project.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2019-05-09T19:37:37Z",
        "closed_at": "2019-05-11T08:53:06Z",
        "merged_at": null,
        "body": "Adds support for monochrome (aka without antialiasing) font rendering with freetype.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 94,
        "deletions": 63,
        "changed_files": 7,
        "created_at": "2019-05-07T09:02:21Z",
        "closed_at": "2019-10-09T15:29:21Z",
        "merged_at": null,
        "body": "This PR add full unicode support, See https://github.com/ocornut/imgui/issues/2538\r\n\r\n1. I defined two types: `ImWchar16` and `ImWchar32`, and the macro `ImWchar` is `ImWchar16` by default. We can change it in `imconfig.h` .\r\n\r\n2. `ImTextCharFromUtf8` replace the code point above 0x10000 to replacement character U+FFFD when we use `ImWchar16`. So that we can remove some range checks outside.\r\n\r\n3. `ImTextCharToUtf8` and `ImTextCountUtf8BytesFromChar` can manage full unicode set now. btw, There is a bug (for surrogate) in `ImTextCountUtf8BytesFromChar` before. \r\n\r\n4. `GetClipboardTextFn_DefaultImpl` and `SetClipboardTextFn_DefaultImpl` have some issues with surrogate of UTF-16 before, I reimplement them by `::WideCharToMultiByte` and `::MultiByteToWideChar`.\r\n\r\n5.  I introduce a new API `ImGuiIO::AddInputCharacterUTF16`, it can handle UTF-16 correctly. `examples/imgui_impl_win32.cpp` assumed that one code point per `WM_CHAR` message before. It's not correct, because the `wParam`  can be surrogate, we should combine two `WM_CHAR` message when the `wParam` is surrogate.\r\n\r\n6. For the `ImFontGlyphRangesBuilder`, `UsedChars` may 17x larger then before if we use `ImWchar32`. \r\n\r\nI hope I haven't left something out.\r\n",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2019-05-02T07:28:57Z",
        "closed_at": "2019-07-28T08:28:51Z",
        "merged_at": null,
        "body": "**Context**:\r\nDX12 (and I think Vulkan) have a much more complicated resource management system. This change enabled better integration with existing render systems. For DX12 it can help prevent having multiple calls to SetDescriptorHeaps in a frame which can be a costly operation.\r\n\r\n**Changes**:\r\n* The only change to imgui core is just adding a function pointer to ImGuiIO. It's up to the user + render backend to support it.\r\n* Only implemented for DX12 since it's the only backend I can test. Updated to only try to set texture if it changed (and after a reset state request). Prevent creating font texture if it's already set.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 210,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-05-02T01:45:04Z",
        "closed_at": "2019-05-06T07:51:22Z",
        "merged_at": "2019-05-06T07:51:22Z",
        "body": "This example project aims to resolve the following issues with the existing apple example projects:\r\n- `example_apple_opengl2` depends on OpenGL which is now deprecated in macOS\r\n- `example_apple_metal` uses an xcodeproj file to build instead of a Makefile like the rest of the examples\r\n- `example_apple_metal` depends on `imgui_impl_osx.mm` which is not as feature complete as `imgui_impl_glfw.cpp`",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 108,
        "deletions": 68,
        "changed_files": 9,
        "created_at": "2019-04-30T17:24:39Z",
        "closed_at": "2022-01-17T17:28:40Z",
        "merged_at": null,
        "body": "Fixes Issue #1992 but also fixes the same issue in a general way for all platform impls.\r\n\r\nCurrently only tested for Win32.\r\n\r\nThere may be a better approach that involves a larger change to the way ImGui and its components handle mouse button input, but I'll leave that to those who are more familiar with the codebase as a whole and the consequences of such a change.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-04-30T09:28:46Z",
        "closed_at": "2019-05-06T08:18:31Z",
        "merged_at": null,
        "body": "Hi @ocornut . I'm come again. \r\nThis PR is fix the crash problem when you exit the program. But the interesting thing is that the crash will only appear in the x64 mode besides I use the debug tool of gflag in win32 mode.\r\n\r\nThe reason is that dx9 device is release twice.  One in ImGui_ImplDX9_Shutdown(). Other in CleanupDeviceD3D().\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2019-04-29T18:47:13Z",
        "closed_at": "2023-07-11T13:21:42Z",
        "merged_at": null,
        "body": "This PR fixes the borders of docked windows to match the borders of undocked windows.\r\n\r\n**Before**: The docked border does not respect the window-border size, and is displayed using the colors assigned to separators. (window borders are set to magenta to highlight the problem)\r\n\r\n![before_border](https://user-images.githubusercontent.com/8029835/56918863-fd99a900-6a73-11e9-9122-b884915c3354.png)\r\n\r\n**After**: Both borders are now consistent.\r\n\r\n![after_border](https://user-images.githubusercontent.com/8029835/56918866-fe323f80-6a73-11e9-84bd-fa6914ff4cbe.png)\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-04-29T12:56:41Z",
        "closed_at": "2019-05-06T10:14:55Z",
        "merged_at": null,
        "body": "Hi @ocornut. I deal with the problem which I found in [#2502](https://github.com/ocornut/imgui/issues/2502)\r\n\r\nThe reason is that DX9 device lost. When you create new window through CreateAdditionalSwapChain(). New  resource was created.  So you must release all video memory before device reset.  You can see more detail in Windows DirectX Graphics document and search \"lost devices\".\r\n\r\nI add two function to do this thing. One is clean swap chain. Other is recreate it. \r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2019-04-27T22:51:20Z",
        "closed_at": "2019-04-29T11:02:30Z",
        "merged_at": null,
        "body": "The current implementation for rendering thick lines suffers from issues when the lines meet at extreme angles. A 90-degree bend will cause the thickness of the line to contract by around 30%. In the case of a rectangle, this causes the entire rectangle to be the wrong thickness:\r\n\r\n![lines_before](https://user-images.githubusercontent.com/8029835/56855819-0d45b000-6903-11e9-8473-c01c68005229.png)\r\n\r\nI've modified the algorithm to counteract this effect by placing the mitre vertices at a distance that preserves the correct thickness. The new algorithm works for vertices up to 90-degrees; past that, it would be impossible to fix without actually inserting new vertices. Seeing as rectangles are by far the most common UI element, this seems an acceptable compromise.\r\n\r\n![lines_after](https://user-images.githubusercontent.com/8029835/56855821-0f0f7380-6903-11e9-991e-9a86758d88a7.png)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 49,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2019-04-22T12:43:11Z",
        "closed_at": "2019-04-23T10:40:27Z",
        "merged_at": null,
        "body": "After the conversation on https://github.com/ocornut/imgui/issues/2484 decided to update the existing SDL code to use SDL_GameController. Did some tests and seems to be working ok.\r\n\r\nI tried to keep the code as close as possible to glfw and XInput examples to facilitate any future changes.\r\nLet me know if any changes are required, I'll be glad to update it.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 122,
        "changed_files": 1,
        "created_at": "2019-04-15T19:14:13Z",
        "closed_at": "2019-04-17T10:02:55Z",
        "merged_at": null,
        "body": "This PR replaces the default shell_minimal.html in the new emscripten example with a more minimal version which stretches the WebGL canvas over the whole window client rectangle.\r\n\r\nprintf-output is routed to the Javascript console in the browser devtools.\r\n\r\nHere's the code as live sample:\r\n\r\nhttp://floooh.github.io/oryol-sticky-tests/emsc-imgui-test/example_emscripten.html\r\n\r\nNote however that the text rendering still appears filtered, despite the \"upscale-filtering\" in the WebGL canvas disabled via CSS. This is because the font texture is created with GL_LINEAR filtering. In my own ImGui samples (https://floooh.github.io/sokol-html5/) I'm using GL_NEAREST for the sample which renders \"LowDPI\" and with the default font, and GL_LINEAR for the other sample which uses HighDPI rendering and another TTF font.\r\n\r\nI think it's better to keep the texture creation as is, and live with the somewhat \"foggy\" text(?) (some elements look better when smoothed, for instance the top-left triangle and the checkmarks.\r\n\r\nOh, and the canvas resizing was already handled correctly in imgui_impl_sdl.cpp, SDL_GetWindowSize() returns the size of the WebGL canvas, and this is forwarded to ImGui's DisplaySize.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 384,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2019-04-13T20:37:30Z",
        "closed_at": "2019-04-14T23:29:21Z",
        "merged_at": "2019-04-14T23:29:21Z",
        "body": "Alternative version of #2492, as a fully standalone piece of code.\r\n\r\nCurrently available online at http://static.grumpycoder.net/pixel/example_emscripten.html",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 107,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2019-04-13T15:32:27Z",
        "closed_at": "2019-04-13T20:58:11Z",
        "merged_at": null,
        "body": "This PR adds Emscripten support for the SDL/OpenGL3 example. The changes are minimal, but require WebGL2/GLES3 to work, which you can't necessarily find everywhere.\r\n\r\nYou can see the page in action here: http://static.grumpycoder.net/pixel/example_sdl_opengl3.html\r\n\r\nI have successfully loaded this on Firefox, Chrome for Android, and some versions of Chrome. Microsoft Edge doesn't properly load this, and I have seen some versions of Chrome crashing with an \"Aw snap.\"\r\n\r\nI guess it may be a good idea to ultimately host this on http://www.dearimgui.org/ and point people at it when trying to explain imgui things, like in the fiasco from #2488.\r\n\r\n![image](https://user-images.githubusercontent.com/7281574/56081837-8226cf00-5dc6-11e9-9267-579d371c7271.png)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-04-09T18:01:26Z",
        "closed_at": "2019-06-18T09:29:22Z",
        "merged_at": null,
        "body": "This is a trivial change to add the function ImGui_ImplSDL2_InitForD3D() to the SDL platform. It can be useful to use SDL with D3D as a rendering backend, because SDL has a variety of other platform interfaces like input handling, etc.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2019-04-05T06:50:43Z",
        "closed_at": "2019-04-05T21:50:24Z",
        "merged_at": null,
        "body": "Add a way for the application to change the selected tab. I was adding functionality to restore window state . Unfortunately while this method works it does have the drawback of not working if the tab doesn't exist yet so I had to use as follows:\r\n\r\n```\r\nforeach (tab) {\r\n    if (ImGui::BeginTabItem(tab)) {\r\n        if (!firstFrame) draw_tab();\r\n        ImGui::EndTabItem();\r\n    }\r\n}\r\n\r\nif (firstFrame) ImGui::SetTabItemSelected(selectedTab);\r\n```",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 67,
        "deletions": 19,
        "changed_files": 4,
        "created_at": "2019-04-05T04:52:58Z",
        "closed_at": "2019-04-07T14:27:27Z",
        "merged_at": null,
        "body": "See comment chain\r\n\r\n_Originally posted by @nathanvoglsam in https://github.com/ocornut/imgui/pull/2071#issuecomment-480140536_",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 166,
        "deletions": 86,
        "changed_files": 10,
        "created_at": "2019-04-02T11:57:09Z",
        "closed_at": "2019-04-03T14:19:32Z",
        "merged_at": "2019-04-03T14:19:32Z",
        "body": "Note: Very low priority and minor update.\r\n\r\nThis simply adds a Makefile for Linux/OSX to the freeglut example, and ensures it compiles out-of-box on OSX.\r\n\r\nThe reason for this is that this is the one example that will run successfully in Windows Subsystem For Linux (because it doesn't have native driver support), and I find it useful to use WSFL for Linux compilation sanity checks.\r\n\r\n(The OSX changes are just because I was testing the Makefile there too, and they were simple enough.)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-03-30T06:52:30Z",
        "closed_at": "2019-03-31T08:35:04Z",
        "merged_at": "2019-03-31T08:35:04Z",
        "body": "Fixes #2456.\r\n\r\nI don't know if the same warning is relevant for clang, but I'm not keen on adding pragmas if not requested.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-03-27T18:14:40Z",
        "closed_at": "2019-04-01T09:30:41Z",
        "merged_at": null,
        "body": "In other backends it is possible for the UserCallback to read the current state, do whatever state changes it needs, and then restore the imgui state before returning. In Metal there doesn't seem to be a way for a UserCallback to save the existing state before changing it so we should restore our state after the UserCallback is complete.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2019-03-27T00:09:33Z",
        "closed_at": "2019-03-27T17:35:40Z",
        "merged_at": null,
        "body": "This PR adds a new flag to allow using the full width of the content area for the interaction area of a tree node, resolving [this 3 year old comment](https://github.com/ocornut/imgui/commit/d1b4159b51d944be5258d48ad8dce6fdfe4f4d80#diff-e5e00627776ba59572e7d1d86554aee6R5584).\r\n\r\nI opted to retain the behavior of `ImGuiTreeNodeFlags_Framed` similar to `ImGuiTreeNodeFlags_FramePadding`. As such, this does not change current behavior. I also modified the \"advanced tree node\" demo to use the feature so those learning from the demo will find it easier.\r\n\r\nI wasn't 100% sure on protocol for updating the changelog, so I went ahead an updated it.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2019-03-21T02:01:23Z",
        "closed_at": "2019-09-18T15:24:26Z",
        "merged_at": null,
        "body": "Fixes #1897",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 53,
        "deletions": 36,
        "changed_files": 11,
        "created_at": "2019-03-20T01:55:13Z",
        "closed_at": "2019-07-28T08:51:48Z",
        "merged_at": null,
        "body": "This change removes the need to ensure all input is handled after EndFrame and before the next NewFrame.\r\n\r\nContext:\r\nI integrated ImGui into a mature codebase that used background threads to collect input. I needed to integrated ImGui with very little wake, and without this change mouse scrolling and text input were very behaving erratically inconsistent.\r\n\r\nNotes:\r\n* Broke API on purpose so anyone that was setting MouseWheel manually needs to change where they write the update to\r\n* State based inputs are fairly resilient to multithreading so it didn't need a full rewrite\r\n* Updated all example code to use new location\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-03-16T19:01:55Z",
        "closed_at": "2019-03-25T18:42:54Z",
        "merged_at": null,
        "body": "This is standard scrolling behaviour in most applications.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2019-03-13T06:11:52Z",
        "closed_at": "2019-03-13T10:05:12Z",
        "merged_at": null,
        "body": "Currently the main viewport never has the `PlatformWindowCreated` set to true. This causes `Platform_SetImeInputPos` to never be called for it due to the logic on [imgui.cpp:4081](https://github.com/ocornut/imgui/blob/9afb849e16900d67e0cde7c8754c1f547a349a21/imgui.cpp#L4081).\r\n\r\nRight now many places which check `PlatformWindowCreated` use logic to assume the window is created for the main viewport. (Example: [imgui.cpp:10081](https://github.com/ocornut/imgui/blob/9afb849e16900d67e0cde7c8754c1f547a349a21/imgui.cpp#L10081))\r\n\r\nTo fix this, this PR changes `ImGui::Initialize` function to set `PlatformWindowCreated` to true on the main viewport. I think it's fairly safe to assume that the main viewport will be created by the platform since it wouldn't make much sense for it not to. As such, this PR also removed the `n == 0` checks which were scattered among other places `PlatformWindowCreated` was being used.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2019-03-09T01:12:13Z",
        "closed_at": "2019-03-09T09:10:20Z",
        "merged_at": "2019-03-09T09:10:20Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 27,
        "changed_files": 5,
        "created_at": "2019-03-07T07:39:52Z",
        "closed_at": "2020-10-20T08:33:40Z",
        "merged_at": null,
        "body": "Hey Omar :)\r\nAs discussed in #301 and #1641, I though it would be good idea to add this solution for now(possibly to change later), so the people that'll use the examples, will know how to compile it under x32 architecture without having to do extra research about it.\r\ntbh, I also find this solution quiet friendly and simple for consumers to use.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-03-05T23:47:16Z",
        "closed_at": "2019-03-06T08:39:17Z",
        "merged_at": "2019-03-06T08:39:17Z",
        "body": "This is a tiny change to remove the redundant declaration of SetNextWindowClass.\r\n\r\nI suspect it was introduced when the the viewport and docking branches were merged since it was seemingly historically present in both. It was causing slight issues with the cimgui and ImGui.NET code generators and I figured it might as well be fixed at the source.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 11,
        "changed_files": 6,
        "created_at": "2019-03-05T05:09:45Z",
        "closed_at": "2019-03-06T16:30:09Z",
        "merged_at": null,
        "body": "This PR\u00a0adds the InputTextHinted widget. It works as a regular InputText, but with a hint\r\n\r\n![](https://user-images.githubusercontent.com/12510559/53781498-1869fa00-3ed7-11e9-8351-4b6e4538a5a3.gif)\r\n\r\nIt's more of an eye candy than an actually useful widget, but while doing a text field to filter logs for a terminal, I thought this way of \"labeling\" was prettier.\r\n\r\nI'm not very familiar with ImGui internal code base, so my apologizes if I coded something the wrong way",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 220,
        "deletions": 44,
        "changed_files": 5,
        "created_at": "2019-03-02T08:19:54Z",
        "closed_at": "2019-03-06T20:37:54Z",
        "merged_at": null,
        "body": "This will allow dragging imgui views outside of the main view.\r\nI tried to make it also consistent with the other view ports of DX10 and DX11, so if I missed something, I'll gladly update the pull request :) \r\n\r\nThe only problem I had with this, is when all child views are outside of the main view and then you restart the application, they will remain black until you drag one of them back to the main view. I think it's because it can't find the target surface of the child views in order to draw to them.\r\nFun fact, that this won't happend if you have 1 child view inside the main view and all other child views are outside.\r\n\r\nAlso when trying to resize the main view while child views are outside the main view, causes synchronization problem with `WM_SIZE` message. because it calls `ImGui_ImplDX9_InvalidateDeviceObjects` which is trying to Release d3d objects while `ImGui_ImplDX9_RenderDrawData` sets some of them to NULL which causes access violations errors. \r\n**Suggestion**: Possible solution would be using mutex to guard these critical code sections that cannot be set to NULL while `ImGui_ImplDX9_InvalidateDeviceObjects` is being called.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-03-02T03:06:02Z",
        "closed_at": "2019-03-03T22:37:11Z",
        "merged_at": null,
        "body": "This PR extends the OpenGL backend to add support for OpenGL ES 2.0. The VAO feature the existing 3.0 backend uses is not strictly required, so can simply be #ifdef'd out in this case.\r\n\r\n(the previous code required ES 3.0, which some desktop implementations do not support)\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-03-02T03:02:34Z",
        "closed_at": "2019-03-03T22:01:56Z",
        "merged_at": null,
        "body": "In the docking branch, there is a bug when 3 or more floating windows are open. The GLFW backend was not correctly selecting the appropriate context for each window. This simple patch fixes the issue.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 118,
        "deletions": 28,
        "changed_files": 3,
        "created_at": "2019-02-26T01:27:53Z",
        "closed_at": "2019-03-08T17:17:51Z",
        "merged_at": null,
        "body": "This allows for lossless data round-trips through the color picker and color edit systems when an application stores colors as HSV. It lets you do things like track hue in applications even when saturation and/or value are zero:\r\n\r\n![ezgif-1-c9e21a21cb3a](https://user-images.githubusercontent.com/187501/53380253-9b141780-3921-11e9-8cec-0c3b4c8b4a74.gif)\r\n\r\nI chose to pass the `_Input` flags through the entire stack, letting each widget decide what to show based on the input data. This means that some paths are a little more expensive because HSV-to-RGB conversions are done more than once, but it also makes it much easier to make sure the whole Color family of functions is lossless.\r\n\r\nAll drag-and-dropped color data is still RGB; HSV colors are converted to RGB when you drag them, and RGB data is converted to HSV when you drop a color onto a widget with `_InputHSV` specified.\r\n\r\nI didn't add anything to the demo, because it wasn't super clear to me that this was worth surfacing in the demo; it's more about enabling different backend representations than a frontend change. The only thing I could think of is showing both the RGB and HSV interpretations of the same `ImVec4` with two different `ColorEdit`s; is that worth including, or just confusing?\r\n\r\n**Known backwards-incompatible changes**\r\n- `ImGuiColorEditFlags__InputMask` was renamed to `ImGuiColorEditFlags__ShowMask`, and `ImGuiColorEditFlags__InputMask` is now used for a different mask. Since this is internal this breakage should be fine.\r\n- `ColorEdit4` used to let you specify more than one of `ImGuiColorEditFlags_RGB`, `ImGuiColorEditFlags_HSV`, and `ImGuiColorEditFlags_HEX`, but the behavior of the function was a little odd. It now asserts that only one of those flags is provided.\r\n\r\nFixes #2383",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-02-24T18:44:13Z",
        "closed_at": "2019-02-24T22:19:37Z",
        "merged_at": "2019-02-24T22:19:37Z",
        "body": "imgui.cpp(8933): error C4062: enumerator 'ImGuiLogType_None' in switch of enum 'ImGuiLogType' is not handled\r\n\r\nI added an empty case statement for ImGuiLogType_None to match the empty statement for ImGuiLogType_Buffer.  This fixes the compiler warning and should not be a change in behavior.\r\n\r\nThis is to fix this issue https://github.com/ocornut/imgui/issues/2381\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-02-24T15:00:51Z",
        "closed_at": "2019-02-24T17:35:52Z",
        "merged_at": "2019-02-24T17:35:52Z",
        "body": "The warning was caused by implicit conversion from pointer type which NULL has to non-pointer type, e.g. if ImTextureID is long int. Example of a warning:\r\n\r\n```\r\nimgui_draw.cpp:416:26: warning: converting to non-pointer type \u2018long int\u2019 from NULL [-Wconversion-null]\r\n     draw_cmd.TextureId = GetCurrentTextureId();\r\n```\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 192,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-02-18T20:36:56Z",
        "closed_at": "2023-04-19T14:56:50Z",
        "merged_at": null,
        "body": "Standalone example application for Win32 + WGL + OpenGL2, using legacy fixed pipeline.\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 965,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2019-02-16T12:00:22Z",
        "closed_at": "2019-04-14T23:40:59Z",
        "merged_at": null,
        "body": "Hi, I don't know what is the current status of Emscripten backend (#336), but here is a PR with how I handled the issue.\r\n\r\nI created a specific backend renderer to target \"gles2\" (~= WebGL 1), and a specific example program \"example_sdl_gles2\". \r\nYou can see a live demo here: http://wasm.continuation-labs.com/imguidemo\r\nAs it is targeting WebGL 1, it should work on all browsers, including mobile.\r\n\r\nThe example program is also working on native Linux (not tested on Mac/Win32)\r\nFor convenience, I provided a CMakeFile to build on Emscripten and Linux\r\n\r\nTo build on emscripten:\r\n- setup emscripten environment (eg. source <emscripten_path>/emsdk_env.sh)\r\n- go to the \"example_sdl_gles2\" folder\r\n- mkdir build-wasm\r\n- emcmake cmake .. -DCMAKE_BUILD_TYPE=Release\r\n- emmake make\r\n- firefox imgui_example_sdl_gles2.html\r\n\r\nTo build on linux:\r\n- go to the \"example_sdl_gles2\" folder\r\n- mkdir build-linux\r\n- cmake .. -DCMAKE_BUILD_TYPE=Release\r\n- make\r\n- ./imgui_example_sdl_gles2\r\n\r\nEnjoy!",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 23,
        "changed_files": 4,
        "created_at": "2019-02-13T23:11:30Z",
        "closed_at": "2019-02-14T19:30:34Z",
        "merged_at": null,
        "body": "Adds an optional parameter to `Selectable` that allows clients to specify the text alignment within the `Selectable`, and adds a section in the demo to demonstrate text alignment support:\r\n\r\n![screenshot](https://user-images.githubusercontent.com/187501/52750535-6018f800-2fa1-11e9-81e8-f1e700b66eea.PNG)\r\n\r\nIn terms of implementation, this is extremely simple: `Selectable` was already calling an API that supports text alignment, but had hard-coded it to top-left. This adds a `text_align` parameter on the `Selectable` function and just passes that straight through to `RenderTextClipped` instead of the hard-coded (0, 0). Backwards-compatibility is preserved by defaulting the `text_align` parameter to (0, 0), i.e., top-left.\r\n\r\nA video of the demo in action:\r\n\r\n![screencap](https://user-images.githubusercontent.com/187501/52750584-8474d480-2fa1-11e9-9f01-9c32794d26e8.gif)\r\n\r\nWorks on https://github.com/ocornut/imgui/issues/1260",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-02-12T22:15:38Z",
        "closed_at": "2019-02-13T10:50:15Z",
        "merged_at": "2019-02-13T10:50:15Z",
        "body": "Changed link from https://github.com/EliasD/imgui-sfml to https://github.com/eliasdaler/imgui-sfml, as I've changed my username some time ago (no redirect + should stay permanent)\r\n\r\nSorry if PR is too trivial.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-02-08T04:14:37Z",
        "closed_at": "2019-02-08T13:36:46Z",
        "merged_at": null,
        "body": "Hi,\r\n\r\nThis PR addresses the re-introduction of the bug described in https://github.com/ocornut/imgui/issues/176 caused by https://github.com/ocornut/imgui/commit/d9a84de9d9c28751bb8ea0ed24e4f3f1cc0e711f.\r\n\r\n![capture](https://user-images.githubusercontent.com/1778143/52458539-d71f3e00-2b14-11e9-8366-1b049765384d.PNG)\r\n\r\n\r\nThe fix: Only use the `SizeContents` value if it's collapsed and the auto-resize flag is NOT set. Otherwise, it will not calculate the content size properly.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2019-01-31T18:39:15Z",
        "closed_at": "2019-02-01T14:25:02Z",
        "merged_at": null,
        "body": "Got an error building example_win32_directx11 from the repo, using Visual Studio 2017, compiler version `Microsoft (R) C/C++ Optimizing Compiler Version 19.16.27023.1 for x86`.\r\n\r\nRunning `build_win32.bat` I get this command line:\r\n\r\n    cl /nologo /Zi /MD /I .. /I ..\\.. /I \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\um\" /I \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\shared\" /I \"Include\" /D UNICODE /D _UNICODE *.cpp ..\\imgui_impl_dx11.cpp ..\\imgui_impl_win32.cpp ..\\..\\imgui*.cpp /FeDebug/example_win32_directx11.exe /FoDebug/ /link /LIBPATH:\"/Lib/x86\" d3d11.lib d3dcompiler.lib\r\n\r\nAnd this error:\r\n\r\n    imgui_impl_win32.obj : error LNK2019: unresolved external symbol __imp__GetDeviceCaps@8 referenced in function \"float __cdecl ImGui_ImplWin32_GetDpiScaleForMonitor(void *)\" (?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPAX@Z)\r\n    Debug/example_win32_directx11.exe : fatal error LNK1120: 1 unresolved externals\r\n\r\nThe fix for me was to add `gdi32.lib` to the command line explicitly.\r\n\r\nThanks,\r\n\r\n--Tom",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-01-29T20:40:33Z",
        "closed_at": "2019-01-30T09:19:41Z",
        "merged_at": "2019-01-30T09:19:41Z",
        "body": "This PR fixes the warning GCC8 gives about size given to strncpy being equal to the size of the destination buffer (and then assuming you may be lacking space for a '\\0'). \r\n\r\nWarning given by GCC8\r\n```\r\nIn the function \u2018void ImStrncpy(char*, const char*, size_t)\u2019,\r\n    included in line \u2018void ImStrncpy(char*, const char*, size_t)\u2019 en imgui/imgui.cpp:1295:6,\r\n    included in line \u2018ImGuiTextFilter::ImGuiTextFilter(const char*)\u2019 en imgui/imgui.cpp:2016:18:\r\nimgui/imgui.cpp:1299:14: warning: 'char* strncpy(char*, const char*, size_t)' specified bound 256 equals destination size [-Wstringop-truncation`]\r\n       strncpy(dst, src, count);\r\n       ~~~~~~~^~~~~~~~~~~~~~~~~\r\n```\r\n\r\nTested in\r\n```\r\nLinux 4.19.16-1-MANJARO #1 SMP PREEMPT Fri Jan 18 17:03:05 UTC 2019 x86_64 GNU/Linux\r\ngcc (GCC) 8.2.1 20181127\r\n```\r\nProposed fix does not change functionality at all. It works exactly the same, but removing the warning. There is no other way that I am aware to remove the warning when using `-Wall`. ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 314,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2019-01-27T04:45:27Z",
        "closed_at": "2021-02-22T13:57:34Z",
        "merged_at": null,
        "body": "This example demonstrates the use of imgui along with glfw and metal.\r\n\r\nThe code closely follows the example_glfw_opengl3 and example_apple_metal. It has dependency on glfw3. Build setup with Makefile and CMake are also provided. The Makefile build requires custom include/lib paths. The CMake build requires a glfw source checkout.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 305,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-01-24T06:42:58Z",
        "closed_at": "2019-01-25T09:48:48Z",
        "merged_at": null,
        "body": "\u2026for renamed examples structure.\r\n\r\n(Click \"Preview\" to turn any http URL into a clickable link)\r\n\r\nPLEASE CAREFULLY READ:\r\nhttps://github.com/ocornut/imgui/issues/2261\r\n\r\n(Clear this template before submitting your PR)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2019-01-23T05:16:50Z",
        "closed_at": "2019-02-12T21:22:07Z",
        "merged_at": null,
        "body": "(Dup of #2284, done over the `docking` branch now, as requested by @ocornut)\r\n\r\n`imgui_impl_opengl3.cpp` and `imgui_impl_opengl2.cpp` currently have a bug in the `docking` branch when used with a HighDPI configuration. I discovered this bug while testing ImGui in an application that turns on HighDPI (not to improve rendering of imgui itself, but rather the application itself over which ImGui is drawn).\r\n\r\nTo reproduce this bug, you can use any OpenGL-based example. I personally use SDL so it's possible to trigger this by modifying `example_sdl_opengl3/main.cpp` to add `SDL_WINDOW_ALLOWHIGHDPI` when calling `SDL_CreateWindow()`. After having added this flag, running the example immediately produces a broken output like this:\r\n\r\n<img width=\"1392\" alt=\"screenshot 2019-01-15 19 18 41\" src=\"https://user-images.githubusercontent.com/1014109/51200857-e4bd1b80-18fa-11e9-91d5-f4445acfa158.png\">\r\n\r\nThe bug is in `ImGui_ImplOpenGL3_RenderDrawData`: the `draw_data->DisplayPos` variable is not scaled by the current framebuffer scale.\r\n\r\nThis PR fixes this bug for both OpenGL2 and OpenGL3 implementation. Moreover, it activates HighDPI rendering on SDL examples. This is not strictly required to fix any bug, but I think it's a good idea to keep it active because it increases the amount of code being tested by running the examples, and is thus easier to uncover hidden bugs with highdpi scaling.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 146,
        "deletions": 26,
        "changed_files": 6,
        "created_at": "2019-01-22T08:57:57Z",
        "closed_at": "2020-11-18T21:51:14Z",
        "merged_at": null,
        "body": "First PR try with this feature.\r\n\r\nslider thickness : allows to modify the slider thickness, as shown in https://github.com/ocornut/imgui/issues/2263 , **following @ocornut  recommendations**: \r\n- value 0.0f means rectangle is not shrinked ;\r\n- value 1.0f means rectangle is completely shrinked ;\r\n- when 0.0f value is used (basic slider rectangle), do not calculate shrink _amount, to save cycles.\r\n\r\nWorks well with SDL2 + OpenGL3 (not tested other renderers)\r\nI don't see any warning, but I only tested on Linux with g++  ( 5.4.0 and 5.7.1)\r\n\r\nThanks in advance for your feedback, and for every change you suggest.\r\n\r\nI simply hope this feature will help (I'm using it since a while without any issue since a while).",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-01-20T10:07:07Z",
        "closed_at": "2019-02-14T13:19:06Z",
        "merged_at": null,
        "body": "The \"Follow\" checkbox will let users inspect the log buffer without getting dragged down to the end if the app's log is very active. Only ticking the box will make the scrolling move on its own.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 139,
        "deletions": 127,
        "changed_files": 6,
        "created_at": "2019-01-19T20:23:38Z",
        "closed_at": "2019-01-20T16:57:55Z",
        "merged_at": null,
        "body": "### Version/Branch of Dear ImGui:\r\nVersion: master\r\nBranch: master\r\n\r\n### Back-end/Renderer/Compiler/OS\r\nBack-ends: none\r\nCompiler: clang\r\nSystem: OSX\r\n\r\n### My Issue/Question:\r\ndidn't compile under old clang:\r\n```imgui.h:80:34: error: unknown warning group '-Wzero-as-null-pointer-constant', ignored [-Werror,-Wunknown-warning-option]```\r\nI also removed trailing spaces, IDE do, and was lazy to revert them before commit :+1: \r\n\r\n### Screenshots/Video\r\nnone\r\n\r\n### Standalone, minimal, complete and verifiable example:\r\nnone",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2019-01-17T05:09:32Z",
        "closed_at": "2019-01-17T10:40:08Z",
        "merged_at": null,
        "body": "Fixes #2288.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2019-01-16T19:01:44Z",
        "closed_at": "2019-01-17T05:03:15Z",
        "merged_at": null,
        "body": "Already explained in the issue #2288.\r\nFixes for Direct3D 9.\r\nNeed to have a look at Direct3D 10 and 11 now.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2019-01-15T18:25:20Z",
        "closed_at": "2019-01-22T12:01:42Z",
        "merged_at": null,
        "body": "`imgui_impl_opengl3.cpp` and `imgui_impl_opengl2.cpp` currently have a bug in the `viewport` branch when used with a HighDPI configuration. I discovered this bug while testing ImGui in an application that turns on HighDPI (not to improve rendering of imgui itself, but rather the application itself over which ImGui is drawn).\r\n\r\nTo reproduce this bug, you can use any OpenGL-based example. I personally use SDL so it's possible to trigger this by modifying `example_sdl_opengl3/main.cpp` to add `SDL_WINDOW_ALLOWHIGHDPI` when calling `SDL_CreateWindow()`. After having added this flag, running the example immediately produces a broken output like this:\r\n\r\n<img width=\"1392\" alt=\"screenshot 2019-01-15 19 18 41\" src=\"https://user-images.githubusercontent.com/1014109/51200857-e4bd1b80-18fa-11e9-91d5-f4445acfa158.png\">\r\n\r\nThe bug is in `ImGui_ImplOpenGL3_RenderDrawData`: the `draw_data->DisplayPos` variable is not scaled by the current framebuffer scale.\r\n\r\nThis PR fixes this bug for both OpenGL2 and OpenGL3 implementation. Moreover, it activates HighDPI rendering on SDL examples. This is not strictly required to fix any bug, but I think it's a good idea to keep it active because it increases the amount of code being tested by running the examples, and is thus easier to uncover hidden bugs with highdpi scaling.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2019-01-13T16:30:38Z",
        "closed_at": "2019-01-13T18:03:11Z",
        "merged_at": null,
        "body": "**macOS 10.13.6**\r\n**AppCode 2018.3.2**\r\n**Clang**\r\n\r\n- This will fix all compile errors related to comparing floats with floats\r\n- Added new FLOAT_EQUAL macro\r\n`#define FLOAT_EQUAL(a, b) ((a) >= ((b) - FLT_EPSILON) && (a) <= ((b) + FLT_EPSILON))`\r\n- Uses: `FLT_EPSILON` from C Library\r\n\r\n# Problem:\r\n## imstb_textedit.h\r\n```\r\nError:(888, 23) comparing floating point with == or != is unsafe\r\nError:(939, 23) comparing floating point with == or != is unsafe\r\n```\r\n## imgui_widgets.cpp\r\n```\r\nError:(4282, 33) comparing floating point with == or != is unsafe\r\nError:(5021, 34) comparing floating point with == or != is unsafe\r\nError:(5242, 19) comparing floating point with == or != is unsafe\r\nError:(5242, 43) comparing floating point with == or != is unsafe\r\nError:(5252, 23) comparing floating point with == or != is unsafe\r\nError:(5254, 23) comparing floating point with == or != is unsafe\r\nError:(5283, 44) comparing floating point with == or != is unsafe\r\nError:(6006, 92) comparing floating point with == or != is unsafe\r\nError:(6063, 32) comparing floating point with == or != is unsafe\r\nError:(1723, 37) comparing floating point with == or != is unsafe\r\nNote:(1840, 39) in instantiation of function template specialization 'ImGui::DragBehaviorT<float, float, float>' requested here\r\nError:(1802, 15) comparing floating point with == or != is unsafe\r\nError:(1806, 12) comparing floating point with == or != is unsafe\r\nError:(1815, 12) comparing floating point with == or != is unsafe\r\nError:(1723, 37) comparing floating point with == or != is unsafe\r\nNote:(1841, 39) in instantiation of function template specialization 'ImGui::DragBehaviorT<double, double, double>' requested here\r\nError:(1802, 15) comparing floating point with == or != is unsafe\r\nError:(1806, 12) comparing floating point with == or != is unsafe\r\nError:(1815, 12) comparing floating point with == or != is unsafe\r\n```\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2019-01-09T23:40:03Z",
        "closed_at": "2019-01-10T13:59:00Z",
        "merged_at": "2019-01-10T13:59:00Z",
        "body": "I noticed links to [Magnum](https://magnum.graphics) bindings in the README (thanks for adding them, btw!), these community projects now became an official part of the library, so I updated the links to point to an up-to-date place.\r\n\r\nThank you! :)\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2018-12-17T01:49:28Z",
        "closed_at": "2021-10-25T14:53:20Z",
        "merged_at": null,
        "body": "I can see the behavior of \"double click to select the whole text on non-osx\" was done on purpose, but I have tried various editors and text inputs on windows and they all select a word on double click.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2018-12-14T01:13:24Z",
        "closed_at": "2019-01-15T18:11:45Z",
        "merged_at": null,
        "body": "NOTE: this patch is meant to be used on top of #2239. When both are merged, the SDL backend correctly works in the viewport branch with highdpi screens.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2018-12-13T15:22:34Z",
        "closed_at": "2019-01-15T18:11:32Z",
        "merged_at": null,
        "body": "At least on OSX, sdl2 examples (both OpenGL2 and OpenGL3) are broken on High DPI screens because `SDL_WINDOW_ALLOW_HIGHDPI` was not passed to `SDL_CreateWindow`. Notice that the rest of the code is already highdpi-aware (eg: `ImGui_ImplSDL2_NewFrame()`), so passing this flag is enough to fix the examples on OSX.\r\n\r\nI'll also notice that this causes nasty side effects when backported to the viewport branch, but I think it does actually improve things by exposing other different underlying bugs in that code. I will submit further PRs to fix the viewport branch on OSX high-dpi screens later.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-12-02T18:45:01Z",
        "closed_at": "2018-12-03T11:09:00Z",
        "merged_at": null,
        "body": "\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2018-11-30T20:05:20Z",
        "closed_at": "2018-12-03T16:28:16Z",
        "merged_at": null,
        "body": "Notes:\r\n* ImGui creates an extra implicit window used only for debugging.\r\n\r\nChanges:\r\n* Added a flag (user configurable) to disable this debug window, would be nice to have.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-11-30T20:04:01Z",
        "closed_at": "2023-04-20T15:08:08Z",
        "merged_at": null,
        "body": "Issue:\r\n* If the value of the column is unclipped and long (such that the center of its rect is past the item on the right column).\r\nTrying to move left into this column from the column on its right, would ignore this column.\r\n(Do yell out if this ^ doesn't make any sense)\r\n\r\nChanges:\r\n* If the window has columns, clip the rect's horizontal bounds.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-11-30T20:01:09Z",
        "closed_at": "2019-02-27T15:53:45Z",
        "merged_at": null,
        "body": "Change:\r\n* If there is no window to calculate font size from, the font size should be the font size the user specified on load, instead of 0.0f.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2018-11-30T15:58:27Z",
        "closed_at": "2019-02-27T13:41:18Z",
        "merged_at": "2019-02-27T13:41:18Z",
        "body": "Pretty much what it says in the title.\r\n\r\nHad to move mouse position handling from `ImGui_ImplAllegro5_NewFrame` to `ImGui_ImplAllegro5_ProcessEvent`, but it's actually more Allegro-idiomatic this way.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2018-11-29T20:50:02Z",
        "closed_at": "2019-03-06T16:57:56Z",
        "merged_at": null,
        "body": "Usage Context:\r\n* Some Input*() widgets have values that require commit value behavior instead of on changed input behavior. So when editing multiple Input*() widgets, as an option it is desirable to press tab for committing and navigating.\r\n\r\nNotes:\r\n* Behavior desired and implementation is similar to ImGuiInputTextFlags_EnterReturnsTrue where enter commits the value.\r\n* Potential conflict of behavior with other tab behaviors.",
        "comments": 23
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-11-29T19:12:39Z",
        "closed_at": "2018-11-29T22:39:19Z",
        "merged_at": null,
        "body": "Hi @ocornut \r\n\r\nThis is the first pull request we are sending your way :)\r\n\r\nWe first noticed this issue when testing with the gamepad:\r\n1) have a couple of viewports (can focus), menu bar (can focus), and testing UI (with NoNavFocus)\r\n2) close everything except menu bar and testing UI\r\n3) by default the navigation tries to focus on the testing UI, which is undesirable since it should respect the flag.\r\n\r\nThe fix prevents any NoNavFocus ui from ever being the first active / root window for focusing.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2018-11-23T17:28:29Z",
        "closed_at": "2019-01-14T16:39:10Z",
        "merged_at": null,
        "body": "g.DrawCurrentAccum remains positive/negative once the drag direction changes.\r\n\r\n- Please read https://github.com/ocornut/imgui/blob/master/.github/CONTRIBUTING.md\r\n- When adding a feature, please describe the usage context (how you intend to use it, why you need it, etc.).\r\n- When adding a feature, try to attach screenshots/gifs to clarify the context and demonstrate the feature at a glance.\r\n- When fixing a warning or compilation problem, post the compiler log and specify the version and OS you are using.\r\n- Make sure your code follows the coding style already used in the codebase (4 spaces identation, no tabs, `type* name`, `local_variable`, `FunctionName()`, `MemberName`, `// Text Comment`, `//CodeComment()`, etc.). We don't use modern C++ idioms, we don't use C++ style cast, we don't use C++ headers, and we can compile without a C++11 compatible compiler.\r\n- Make sure you create a branch for the pull request. In Git, 1 PR is associated to 1 branch. If you keep pushing to the same branch after you submitted the PR, your new commits will appear in the PR.\r\n\r\n(Clear this form before submitting your PR)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-11-04T20:57:17Z",
        "closed_at": "2018-11-05T13:52:24Z",
        "merged_at": null,
        "body": "* This fixes an issue where scrollbar is being drawn for single\r\n  item list with height_in_items set to 1.\r\n\r\n* Example code:\r\n  const char* listbox_items[] = { \"AaAaAaAa\" };\r\n  static int listbox_item_current = 1;\r\n  ImGui::ListBox(\"\", &listbox_item_current, listbox_items, IM_ARRAYSIZE(listbox_items), 1);",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-10-30T15:08:44Z",
        "closed_at": "2019-09-24T10:50:37Z",
        "merged_at": null,
        "body": "The Bullet and Leaf ImGuiTreeNodeFlags are now taken into account for Framed/CollapsingHeader tree nodes as well. TreeNodeEx() can be used to specify these flags. A choice was made to left-adjust the Framed text when no Bullet/Arrow is rendered, since this was deemed to look better in the Framed context (especially when considering that CollapsingHeader is drawn using NoTreePushOnOpen, so child/sibling Text items etc will often be non-indented).",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-29T13:49:55Z",
        "closed_at": "2018-10-29T14:51:33Z",
        "merged_at": "2018-10-29T14:51:33Z",
        "body": "FYI\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-28T13:14:58Z",
        "closed_at": "2019-01-15T20:24:50Z",
        "merged_at": null,
        "body": "\u2026attached\r\n\r\n>The active window (the result of GetActiveWindow()) is the window attached to the calling thread that gets input. The foreground window (the result of of GetForegroundWindow()) is the window that's currently getting input regardless of its relationship to the calling thread. The active window is essentially localized to your application; the foreground window is global to the system.\r\n\r\nIn some games, the thread that handles input is not always the thread that has the window attached. For example, in some games, the thread might have the window attached while being in the menu of the game but not while playing the game. Using GetForegroundWindow instead of GetActiveWindow fixes this issue.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2018-10-26T23:16:39Z",
        "closed_at": "2018-11-05T13:17:52Z",
        "merged_at": "2018-11-05T13:17:52Z",
        "body": "The FAQ and imgui_demo.cpp have some references to a function named `LoadFromFileTTF` (in `io.Fonts`). This function don't seem to exists. I think the correct name is `AddFontFromFileTTF`.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2018-10-25T18:56:40Z",
        "closed_at": "2018-10-25T20:30:36Z",
        "merged_at": null,
        "body": "to allow users customize precision and make localization:\r\n![slider-angle-format](https://user-images.githubusercontent.com/8400779/47523425-acc8ae00-d8a0-11e8-9ba5-f173cfbb1093.png)\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-25T07:16:44Z",
        "closed_at": "2020-02-11T18:35:04Z",
        "merged_at": null,
        "body": "- Resolves #515",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-17T18:01:04Z",
        "closed_at": "2018-10-18T08:48:19Z",
        "merged_at": "2018-10-18T08:48:19Z",
        "body": "SDL_GetDisplayDPI returns 0 on success\r\n\r\nhttps://wiki.libsdl.org/SDL_GetDisplayDPI\r\nNew PR to replace the errant one made in docking\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5392,
        "deletions": 252,
        "changed_files": 23,
        "created_at": "2018-10-17T16:13:45Z",
        "closed_at": "2018-10-17T17:57:52Z",
        "merged_at": null,
        "body": "https://wiki.libsdl.org/SDL_GetDisplayDPI",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 21,
        "changed_files": 3,
        "created_at": "2018-10-17T13:36:08Z",
        "closed_at": "2019-01-03T13:01:15Z",
        "merged_at": "2019-01-03T13:01:14Z",
        "body": "Related to PR #2133. The modifications were done in Xcode 9.2 and tested under macOS 10.12.6. All the modifications in the project.pbxproj files were done by Xcode and not manually.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-16T18:38:10Z",
        "closed_at": "2018-10-17T08:46:49Z",
        "merged_at": "2018-10-17T08:46:49Z",
        "body": "This allows the project to be opened by the last version of Xcode (9.2) supported on macOS Sierra (10.12).",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-14T04:47:57Z",
        "closed_at": "2018-10-14T06:43:07Z",
        "merged_at": "2018-10-14T06:43:07Z",
        "body": "Fixed: misc/natnis -> misc/natvis",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2018-10-03T23:28:53Z",
        "closed_at": "2018-10-07T16:14:25Z",
        "merged_at": "2018-10-07T16:14:25Z",
        "body": "I'm using an OpenGL binding that is quite strict about type safety ([glbinding](https://github.com/cginternals/glbinding)) and does not allow comparisons between `GLint`s and `GLboolean`s. The OpenGL 3 example wouldn't compile before changing the status variable (in `CheckShader`/``CheckProgram`) to a `GLboolean`.\r\nSince this is a trivial fix I'm not including the error log for now, however if you have any doubts or would like more detailed information I can provide a full log.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-10-02T20:44:23Z",
        "closed_at": "2018-10-05T08:04:11Z",
        "merged_at": "2018-10-05T08:04:11Z",
        "body": "Fix spacing to adhere to coding style.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 107,
        "deletions": 92,
        "changed_files": 2,
        "created_at": "2018-09-18T00:58:50Z",
        "closed_at": "2018-11-03T10:19:01Z",
        "merged_at": null,
        "body": "achieved by hashing through matches in stb_compress\r\n\r\nfurther possible improvements: lazy matching, full hash match chain",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-09-17T18:59:19Z",
        "closed_at": "2018-10-05T09:56:41Z",
        "merged_at": null,
        "body": "#2086 ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2018-09-16T13:53:46Z",
        "closed_at": "2018-09-17T11:22:43Z",
        "merged_at": null,
        "body": "Hi, I just open sourced two of my handmade bitmap fonts converted to ttf (under BSL-1.0)\r\nand thought it might be nice to bundle them with ImGui to give the users more options out of the box.\r\nOne font is monospace, another is proportional (but without kerning), both support Latin, Latin supplemental and Latin Extended A (range 0x20..0x17F). Each is about 35kbytes in size.\r\n(If you think this is a shameless plug then please ignore this PR)\r\n\r\nHere's a screenshot of the monospace font:\r\n![sweet16mono_imgui](https://user-images.githubusercontent.com/7414589/45597142-e667e880-b9c7-11e8-8471-9c818fd10788.png)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2018-09-12T21:44:42Z",
        "closed_at": "2018-10-15T15:07:07Z",
        "merged_at": "2018-10-15T15:07:07Z",
        "body": "The warning is \"implicit conversion of NULL constant to 'unsigned int' [-Wnull-conversion]\". Happens when ImTextureID is not a void*, but unsigned int, as in my previous PR.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 16,
        "changed_files": 2,
        "created_at": "2018-09-11T16:07:40Z",
        "closed_at": "2018-09-11T20:01:30Z",
        "merged_at": null,
        "body": "You're sometimes using `unsigned short` directly with glyphs and char rendering, but it's somewhat confusing comparing to `ImWchar`.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 157,
        "deletions": 34,
        "changed_files": 6,
        "created_at": "2018-09-09T12:41:49Z",
        "closed_at": "2019-04-07T14:27:50Z",
        "merged_at": null,
        "body": "Follow on From #1677 \r\n\r\n> Previously it relied on a preprocessor macro to define the amount of backbuffers that imgui would use, causing problems when rendering is implemented without any device wait idles in the render loop. This is caused by it trying to free buffers that are still in use causing graphical glitches (and i'd imagine in worst case a crash although I didn't experience one).\r\n> \r\n> Requires some changes to the demo though so it's a compatibility breaking change to the vulkan example implementation.\r\n> \r\n> The new way to initialise the vulkan backend is pretty simple though, you just have to changed the init struct to set the vk_queued_frames value to the amount of backbuffers you are using. When you are rebuilding the swapchain and the amount of backbuffers has changed just call ImGui_ImplGlfwVulkan_QueuedFramesChanged();\r\n> \r\n> Has some performance deficits of course, but it's all in the initialisation and reinitialisation parts of ImGui so there should be minimal runtime overhead.\r\n\r\nWARNING: This is an API breaking change to the reference vulkan implementation.\r\n\r\nChanges include: \r\n- ImGui_ImplVulkan_InitInfo now has an additional QueuedFrames member that MUST BE SET at setup time. It sets the minimum number of queued frames (should be the same as the number of backbuffers. See example_sdl_vulkan/main.cpp:370 for reference.\r\n- When rebuilding the swapchain a call to ImGui_ImpleVulkan_SetQueuedFramesCount must occur to update various buffers and recreate resources internally. See example_sdl_vulkan/main.cpp:300 for reference\r\n- Both ImGui_ImplVulkanH_CreateWindowDataSwapChainAndFramebuffer and ImGui_ImplVulkanH_CreateWindowDataCommandBuffers need to be called to recreate the swapchain and some of it's associated resources when rebuilding the swapchain. See example_sdl_vulkan/main.cpp:300 for info.\r\n- In example_sdl_vulkan/main.cpp when recreating the swapchain we reset the frame index to be < the new number of backbuffers. Something similar must be done when integrating these changes in your own integration as if the number of backbuffers increases there is a chance to read outside of an array's bounds.\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2018-09-08T10:21:33Z",
        "closed_at": "2018-09-14T08:07:35Z",
        "merged_at": null,
        "body": "This **Separator** looks bad and it's useless in my opinion.\r\nIt would look much better without it, what do you think?\r\n\r\n**1.** With Separator\r\n\r\n![1](https://user-images.githubusercontent.com/9334579/45253081-c3a35780-b369-11e8-9024-9b325a311f54.png)\r\n\r\n**2.** Without Separator\r\n\r\n![2](https://user-images.githubusercontent.com/9334579/45253082-c3a35780-b369-11e8-9cfb-cc7842c0fd14.png)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2018-08-25T14:41:20Z",
        "closed_at": "2018-08-25T23:19:41Z",
        "merged_at": null,
        "body": "`AddFontFromMemoryTTF` is taking a `void*` as input, while we can (and should?) provide `const` data.\r\nSince ImGui will never modify it (only release it if ownership was transferred) we can safely make this member `const`.\r\n\r\nThe origin of this PR comes from a codebase where the font data is a static const.\r\n\r\nNote that `const_cast` is used when calling `ImGui::MemFree` and is valid since we're freeing the data. Not using a C-Style cast since it would trigger the `-Wcast-qual` warning.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2018-08-24T20:20:42Z",
        "closed_at": "2018-08-26T21:05:36Z",
        "merged_at": null,
        "body": "For certain rotating widgets, like [knobs](https://github.com/ocornut/imgui/issues/942#issuecomment-268369298), it might be preferable to reduce the line segments in the controlling circle and have the cube/hexagon/not-circle shape rotate along with the value, so in the case of the knob it looks more like a knob being turned than a line being rotated.\r\n\r\nFrom this:\r\n![image](https://user-images.githubusercontent.com/1352934/44604926-c9386380-a7e7-11e8-9ccf-9220046e4427.png)\r\n\r\nTo this:\r\n![image](https://user-images.githubusercontent.com/1352934/44604960-ea00b900-a7e7-11e8-8291-284ae29e74bc.png)\r\n\r\n( the effect is kinda hard to display without a gif but I currently have no good way to capture gifs. sorry)\r\n\r\nThe pull request adds a angle_offset in radians, defaulted to 0 as a new last argument in to AddCircle and AddCircleFilled.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-08-23T05:21:28Z",
        "closed_at": "2019-01-16T21:28:24Z",
        "merged_at": null,
        "body": "Allow automatic enforcement of spacing rule for supported editors. I use tabs in my code and this makes it so I don't have to think about it.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2018-08-23T05:16:42Z",
        "closed_at": "2019-04-30T20:29:02Z",
        "merged_at": null,
        "body": "This change allows for rendering my 3d scene interleaved with imgui rendering so I don't need to render to an offscreen buffer.",
        "comments": 21
    },
    {
        "merged": false,
        "additions": 515,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2018-08-19T21:04:26Z",
        "closed_at": "2023-04-07T15:31:17Z",
        "merged_at": null,
        "body": "I've been using different flavors of Gtk3 bindings on Desktop/Linux so that I can have some level of integration with the window manager (i.e client side decoration on Wayland, retina displays, etc...).\r\nI figured somebody might want to reuse that, so here is a PR that reuses the existing OpenGL3 rendering implementation and just sets up the window system through GTK+.\r\n\r\nThe makefile only supports Linux but I'm pretty sure someone could add support for MacOS/Windows in a few lines (unfortunately I don't have such systems).",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-08-09T05:52:56Z",
        "closed_at": "2018-08-09T15:44:30Z",
        "merged_at": "2018-08-09T15:44:29Z",
        "body": "imgui.h is set up to enable custom defines of ImTextureID, but imgui_impl_dx12.cpp casts directly to void* instead of whatever ImTextureID has been defined as.  Changing this enables building in 32-bit by defining ImTextureID as UINT64.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-08-09T05:38:36Z",
        "closed_at": "2018-08-09T15:32:32Z",
        "merged_at": "2018-08-09T15:32:32Z",
        "body": "It is difficult to consume imgui_impl_win32.cpp directly if WIN32_LEAN_AND_MEAN is already defined in the project.  This adds a simple check to see if it is already defined before defining it.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2018-08-08T17:13:57Z",
        "closed_at": "2018-08-09T16:10:42Z",
        "merged_at": null,
        "body": "* This change adds three new colors to ImGuiCol_ enum\r\n  allowing us to change colors of the software cursor:\r\n  - ImGuiCol_CursorBackground\r\n  - ImGuiCol_CursorBorder\r\n  - ImGuiCol_CursorShadow",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2018-08-05T02:46:25Z",
        "closed_at": "2019-07-22T01:40:57Z",
        "merged_at": null,
        "body": "Numeric keypad enter was disabled on glfw\r\n\r\nIt is enabled on Win32 + DirectX\r\nIt is disabled on glfw + OpenGL\r\nNumeric keypad numbers are enabled on both platforms.\r\n\r\nSo I make numeric keypad enter enabled.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 67,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2018-08-04T14:14:00Z",
        "closed_at": "2018-08-28T14:10:23Z",
        "merged_at": null,
        "body": "This is not ready to merge yet, but I'm opening this PR so we can discuss changes related to #2001.\r\n\r\nFor now I've only added the glad backend for glfw+opengl3. I believe sdl+opengl3 will be the only other example needing a custom OpenGL loader.\r\n\r\nI'll start with gl3w/glad/glew for now, as they are the more popular. Then we may add other loaders from [this list](https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library), but honestly I'm not sure which one are popular enough so they should be added outside of this 3.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2018-07-31T14:48:42Z",
        "closed_at": "2018-08-01T10:22:04Z",
        "merged_at": "2018-08-01T10:22:04Z",
        "body": "While integrating the current version of ImGui, I kept failing the following assert of `ImGui::NewFrame` in my application:\r\n\r\n`IM_ASSERT(g.IO.Fonts->Fonts.Size > 0 && \"Font Atlas not built. Did you call io.Fonts >GetTexDataAsRGBA32() / GetTexDataAsAlpha8() ?\");`\r\n\r\nHowever, the actual cause is not directly related to fonts and font atlases, but rather to ImGui's provided D3D11 bindings. In the code below, the first two `if` conditions are true and the third one is false, resulting in no device, device context and factory bindings. This is the case for my application, but not for the demo application provided with ImGui.\r\n\r\n```c++\r\nbool    ImGui_ImplDX11_Init(ID3D11Device* device, ID3D11DeviceContext* device_context)\r\n{\r\n    // Get factory from device\r\n    IDXGIDevice* pDXGIDevice = NULL;\r\n    IDXGIAdapter* pDXGIAdapter = NULL;\r\n    IDXGIFactory1* pFactory = NULL;\r\n\r\n    if (device->QueryInterface(IID_PPV_ARGS(&pDXGIDevice)) == S_OK) // true\r\n        if (pDXGIDevice->GetParent(IID_PPV_ARGS(&pDXGIAdapter)) == S_OK) // true\r\n            if (pDXGIAdapter->GetParent(IID_PPV_ARGS(&pFactory)) == S_OK) // false\r\n            {\r\n                g_pd3dDevice = device;\r\n                g_pd3dDeviceContext = device_context;\r\n                g_pFactory = pFactory;\r\n            }\r\n    if (pDXGIDevice) pDXGIDevice->Release();\r\n    if (pDXGIAdapter) pDXGIAdapter->Release();\r\n\r\n    return true;\r\n}\r\n```\r\n\r\nFor obtaining a device and device context in my application, I go the other way around and start with a `IDXGIFactory` (whereas ImGui does use the default `IDXGIAdapter`). \r\n\r\nWhen I replace both occurrences of `IDXGIFactory1` with `IDXGIFactory` in `imgui_impl_dx11.cpp`, both my application and the provided demo application work correctly. This change is handled by this pull request. (Apparently, ImGui's provided D3D11 bindings do not really use the global variable `g_pFactory` at all. So I am not sure why there is such a variable in the first place and why it needs to be of type `IDXGIFactory1`?)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2018-07-29T11:29:53Z",
        "closed_at": "2018-07-30T12:15:25Z",
        "merged_at": "2018-07-30T12:15:25Z",
        "body": "The clock() function isn't guaranteed to increment at a *physical* CLOCKS_PER_SEC. It depends on the active vs idle time of the process.\r\n\r\nThis resulted in too long double-click times for instance on Macos.\r\n\r\nI replaced it with CFAbsoluteTimeGetCurrent(), which does guarantee expected behavior.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-07-28T16:01:43Z",
        "closed_at": "2019-10-15T17:06:12Z",
        "merged_at": null,
        "body": "\r\n![Screenshot](https://i.gyazo.com/29bf26bfd42972977644ffbd96613f9b.png)\r\n\r\nThis is a fairly minimal version, it's worth noting that there's a few issues when `OptResizeWindowsFromEdges` is enabled:\r\n* You can't resize from the upper or lower edges since this version only recalculates `y` from `x`.\r\n* Resizing from the left or right edges causes the window to drift upwards! No idea what's causing that.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-07-26T09:37:36Z",
        "closed_at": "2018-07-26T20:26:50Z",
        "merged_at": "2018-07-26T20:26:50Z",
        "body": "vsnprintf(buf, buf_size, NULL, args) results in undefined behavior. In the case of Visual Studio 15.6 and Windows 10.0.17134, it appeared to corrupt the stack rather than provide a clear exception. Therefore, Dear ImGui should check beforehand whether fmt is NULL.\r\n\r\nSorry this is on my master branch.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-07-24T15:24:31Z",
        "closed_at": "2018-07-30T12:18:20Z",
        "merged_at": "2018-07-30T12:18:20Z",
        "body": "Allow overriding glyph ranges when adding default font.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-07-22T21:07:13Z",
        "closed_at": "2019-09-20T13:49:16Z",
        "merged_at": null,
        "body": "Use an un-flipped coordinate system in the window (Y increasing from top to bottom).\r\nTell OSX we want mouseMoved and mouseDragged events.\r\nPass mouseMoved and mouseDragged events to imgui handler.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-07-18T18:46:25Z",
        "closed_at": "2018-07-19T10:52:38Z",
        "merged_at": null,
        "body": "we pull the lib in as a dep, but our toolchains are configured to error on warning... \r\nyou don't have to accept this.  Just throwing it out there.  Maybe I'll just pragma suppress the warning in a wrapper header around this library or something instead (a wrapper in our own codebase that is)... its just kind of hard to do on my side, because its an explicit bazel rule right into the download library.  Even if I wrapped your lib, it would still error... lol, basically my problem; not yours.  If this lands though, I'll be good.  Otherwise, I'll think of something else.  Let me know if you have any tips.  \r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2018-07-18T16:52:38Z",
        "closed_at": "2019-09-15T07:33:41Z",
        "merged_at": null,
        "body": "1. Set io.ImeSetInputScreenPosFn use SDL_SetTextInputRect\r\n2. SDL try to support UI-less mode IME on Windows, but the implementation is incomplete, that make the default IME window not shown. I made a workaround to disable it.",
        "comments": 21
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2018-07-16T02:39:16Z",
        "closed_at": "2019-02-16T11:58:02Z",
        "merged_at": null,
        "body": "Hi, When I run the example `example_glfw_vulkan` on my MacBook Pro (13-inch, 2017) with macOS High Serria version 10.13.5 (glfw 3.3 and vulkan 1.1.77), It can only render on the top left  1/4 square. After this patch, it can render correctly to occupy the whole viewport.\r\n\r\nThe default code renders all windows to the top left 1/4 square.\r\n<img width=\"1392\" alt=\"screenshot 2018-07-15 22 16 09\" src=\"https://user-images.githubusercontent.com/2821680/42741317-17918b70-887f-11e8-8b73-4e7271a5d9ce.png\">\r\n\r\nWith the patch, it renders to the whole screen.\r\n<img width=\"1392\" alt=\"screenshot 2018-07-15 22 10 50\" src=\"https://user-images.githubusercontent.com/2821680/42741320-19cd6d32-887f-11e8-9808-ac62b2c4351e.png\">\r\n\r\nThe basic modification is to:\r\n1. Scale the viewport by DisplayFramebufferScale, which is 2.0 on my macbook pro, so that it renders to the whole screen.\r\n2. Scale the scissor by DisplayFramebufferScale so that the window on the region other than top left 1/4 will not be clipped.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2018-07-10T22:22:49Z",
        "closed_at": "2018-07-30T11:52:19Z",
        "merged_at": "2018-07-30T11:52:19Z",
        "body": "This commit will allow ImGui to be built using Emscripten and ported to WebGL2 OpenGLES3\r\n\r\nSo generally one can build the same source to a normal desktop app and be able to have the same source built to WebGL2 and have it working inside chrome.\r\n\r\nHere is a demo project https://github.com/o-micron/OpenWebGL\r\nSee the Makefile, I use -D __EMSCRIPTEN_BUILD__ when porting to WebGL2 using Emscripten\r\n\r\nI added vertex and fragment shaders version 300 es\r\nI added vertex and fragment shaders version 410 core\r\nI added __EMSCRIPTEN_BUILD__ ifdefs to allow/block some options because not everything is supported etc ...\r\n\r\n1 issue yet to be solved is the input callbacks in browser, I cannot for example expand the ImGui TrreeNode in the WebGL2 app. I have to investigate more on that, maybe it is a MacOs bug. I have no idea. According to emscripten docs glfw has a limited input support https://kripken.github.io/emscripten-site/docs/porting/emscripten-runtime-environment.html#input-output\r\n\r\nPlease review and correct me if there is a design issue or something I am not aware of",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 214,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2018-07-09T14:09:09Z",
        "closed_at": "2019-02-27T14:07:20Z",
        "merged_at": null,
        "body": "px_render.h implementation\r\n\r\npx_render: https://github.com/pplux/px/blob/master/px_render.h\r\n\r\nworking example: https://github.com/pplux/px/blob/master/examples/px_render_example_imgui.cpp\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-07-08T11:56:35Z",
        "closed_at": "2018-07-08T13:24:12Z",
        "merged_at": "2018-07-08T13:24:12Z",
        "body": "",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1678,
        "deletions": 2,
        "changed_files": 18,
        "created_at": "2018-07-05T13:04:18Z",
        "closed_at": "2018-07-08T09:04:03Z",
        "merged_at": null,
        "body": "Partially addresses #1873",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-07-04T20:28:32Z",
        "closed_at": "2018-08-06T12:35:49Z",
        "merged_at": null,
        "body": "fix mingw \"LLONG_MIN, ULLONG_MAX not declarated in scope\" when compiling with c++11",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2018-07-04T12:52:46Z",
        "closed_at": "2019-06-14T12:32:57Z",
        "merged_at": null,
        "body": "This is a small change added to allow users to implement a custom key list without having to replace or modify the list in imgui.h.\r\n\r\nInstead, they can use imconfig.h or use the preprocessor to do disable the default list and implement their own. ",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2018-06-03T21:11:27Z",
        "closed_at": "2018-06-11T23:18:49Z",
        "merged_at": null,
        "body": "Handles `VK_ERROR_OUT_OF_DATE_KHR` when resizing the window. \r\n\r\nFor more info: [\"Suboptimal or out-of-date swap chain\" in Vulkan Tutorial](https://vulkan-tutorial.com/Drawing_a_triangle/Swap_chain_recreation#page_Suboptimal_or_out_of_date_swap_chain)\r\n\r\nGot this error on latest Ubuntu 16.04 LTS. \r\n\r\n**Interesting:** \r\nWhen enabling `VK_LAYER_LUNARG_standard_validation` with `IMGUI_VULKAN_DEBUG_REPORT` we get another crash. \r\n\r\nBut this might be another problem, see chromium bug report: [vulkan: Don't enable VK_LAYER_LUNARG_standard_validation under X11 ](https://github.com/chromium/chromium/commit/8fcdbf04ac7ff9fe0d0d3dcf125e41810959964c) \r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-05-29T21:09:28Z",
        "closed_at": "2018-05-30T08:28:28Z",
        "merged_at": "2018-05-30T08:28:28Z",
        "body": "Adjustment to align with the delivered freetype API in `libs/imgui/misc/freetype`.\r\n\r\n- If you are adding a feature, please explain the context of the change: what do you need the feature for?\r\n- Try to attach screenshots to clarify the context and demonstrate the feature at a glance.\r\n- Make sure you create a branch for the pull request. In Git, 1 PR is associated to 1 branch. If you keep pushing to the same branch after you submitted the PR, your new commits will appear in the PR.\r\n- You can read [CONTRIBUTING.md](https://github.com/ocornut/imgui/blob/master/.github/CONTRIBUTING.md) for more details.\r\n\r\n(Clear this form before submitting your PR)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 900,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2018-05-27T13:13:59Z",
        "closed_at": "2019-02-27T13:58:12Z",
        "merged_at": null,
        "body": "This is an implementation that brings ImGui to Orx game engine [http://orx-project.org/](http://orx-project.org/).\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 26,
        "changed_files": 2,
        "created_at": "2018-05-26T11:47:56Z",
        "closed_at": "2018-06-07T17:09:19Z",
        "merged_at": null,
        "body": "This is a little optimization: the VAO is created only once alongside the OpenGL program and then bound every frame instead of being created and deleted every frame.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2018-05-21T22:16:50Z",
        "closed_at": "2018-05-28T13:28:13Z",
        "merged_at": null,
        "body": "Adds missing IMGUI_API  macros to members of ImVec2/4 structs, most notably the constructors.\r\n\r\nNeeded for cppsharp wrapper generation.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2018-05-20T23:50:28Z",
        "closed_at": "2018-05-21T08:41:11Z",
        "merged_at": null,
        "body": "## Context\r\n\r\nI'm the author of the [Java binding](https://github.com/ice1000/jimgui) of dear-imgui, and I want to do GUI tests (say, running some GUI windows on a non-headless machine and automatically stop after a few seconds).\r\nBut when I was running the second window, I saw:\r\n\r\n```\r\njava: /home/ice1000/git-repos/jimgui/core/jni/imgui/imgui.cpp:3484\uff1avoid ImGui::NewFrame():\r\n\u5047\u8bbe \u2018g.IO.DeltaTime >= 0.0f && \"Need a positive DeltaTime (zero is tolerated but will cause some timing issues)\"\u2019 \u5931\u8d25\u3002\r\n```\r\n\r\n(\u5047\u8bbe == assume, \u5931\u8d25 == failed)\r\n\r\nAfter some debugging I found that when I initialize glfw the second time, `glfwGetTime` is reset to 0 (or, very close to 0) but `g_Time` (a static global variable) isn't. And `DeltaTime` is set to `current_time - g_Time` which is negative under this circumstance.\r\n\r\n```cpp\r\nio.DeltaTime = g_Time > 0.0 ? (float)(current_time - g_Time) : (float)(1.0f/60.0f)\r\n```\r\n\r\n## Modifications\r\n\r\n+ Added `ifndef`/`define`/`endif` to gl2/gl3 example header files\r\n+ Re-initialize `g_Time` in `ImGui_ImplGlfwGLX_Init`\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 47,
        "changed_files": 2,
        "created_at": "2018-05-16T20:56:22Z",
        "closed_at": "2018-05-17T12:23:45Z",
        "merged_at": null,
        "body": "Hi! After updating to GCC 8.1.0 some errors popped up related to memcpy/memset. This is my try to fix them. I've tested the demo thoroughly and didn't notice anything broken, but I get the feeling that there was something subtle that I'm missing about those incantations :) so please doublecheck!\r\n\r\nThere's a commit for cleaning up whitespace, you can just cherrypick (and review) the second one.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-05-10T15:34:19Z",
        "closed_at": "2018-06-07T17:10:43Z",
        "merged_at": null,
        "body": "As per [the OpenGL 4 specification](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBindSampler.xhtml), `glBindSampler` is available only when the GL version is 3.3 or higher. This fixes a potential segmentation fault when trying to run the OpenGL 3 example with another extension wrangler than the one included in the examples package.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2018-05-09T12:12:55Z",
        "closed_at": "2018-05-09T13:49:03Z",
        "merged_at": null,
        "body": "[SDL_GetClipboardText's wiki page](https://wiki.libsdl.org/SDL_GetClipboardText) says that the clipboard text must be cleaned by the user manually with `SDL_free`. ImGui didn't do that in SDL examples, which caused a memory leak, which was confirmed with Valgrind and pasting lots of text into text widget.\r\n\r\nThis simple fix causes the problem, which was confirmed by Valgrind too. Let me know if you want some additional changes / style fixes. :)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2018-05-05T01:25:58Z",
        "closed_at": "2018-05-14T15:53:52Z",
        "merged_at": null,
        "body": "This is not necessary per standard but it gets rid of a needless extra operation since we are already checking for NULL. Also the same defensive technique is employed in ImVector::clear.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-05-03T09:12:37Z",
        "closed_at": "2018-05-07T09:54:02Z",
        "merged_at": null,
        "body": "Added backup for Dx9 transform. It need for integration in some projects.\r\nAlso set Dx9 state D3DRS_SHADEMODE to D3DSHADE_GOURAUD for correctly view gradient.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 195,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2018-04-27T01:46:40Z",
        "closed_at": "2018-07-03T07:38:14Z",
        "merged_at": null,
        "body": "Now implemented:\r\n- Build ImGui library (CMake's package);\r\n- Optionaly build implementation (ImGui_BUILD_IMPLEMENTATION option);\r\n- Optionaly build examples (ImGui_BUILD_EXAMPLES option);\r\n\r\nAdded examples:\r\n- opengl2_example;\r\n- sdl_opengl2_example.\r\n\r\nCMake's ImGui package contains targets:\r\n- ImGui::Library;\r\n- ImGui::Demo;\r\n- ImGui::ImplOpenGL2;\r\n- ImGui::ImplGlfw;\r\n- ImGui::ImplSDL2.\r\n\r\nUsers can easy link ImGui::Impl<Xxx> libraries and use example binding\r\nimplementation in custom projects.\r\n\r\nTested with MinGW-w64 and MSVC toolchains.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 77,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2018-04-26T18:47:16Z",
        "closed_at": "2018-11-15T17:13:19Z",
        "merged_at": null,
        "body": "Hi Omar,\r\n\r\nJust in case you are interested, I have created a simple light style, largely inspired from Traditionnal Green (some gtk+ theme on Linux). Feel free to add it to your Gui, or ... not :-). Below, a little screenshot.\r\n\r\n![capture du 2018-04-26 20-42-40](https://user-images.githubusercontent.com/23149049/39325520-b47da4b8-4992-11e8-9152-053353cac400.png)\r\n\r\nPlease note I'm using DroidSans , size 17, who seems to be very nice imho, but it\"s just a question of taste ...\r\n\r\nFYI, I did some little screenshots, using your nice Dark theme with miniDart, but I expect to make big steps forward during next summer and provide more serious features soon (waiting, you can have a look at https://github.com/ebachard/miniDart)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2018-04-25T15:49:32Z",
        "closed_at": "2018-04-26T07:51:46Z",
        "merged_at": "2018-04-26T07:51:46Z",
        "body": "A couple of additional static analyzer fixes.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 16,
        "changed_files": 12,
        "created_at": "2018-04-13T22:06:55Z",
        "closed_at": "2018-04-14T08:28:12Z",
        "merged_at": "2018-04-14T08:28:11Z",
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-04-13T19:31:07Z",
        "closed_at": "2018-04-19T14:17:58Z",
        "merged_at": "2018-04-19T14:17:58Z",
        "body": "Text edit input characters need to be ignored on OSX when cmd is being pressed, otherwise cut/copy/paste operations add extra characters to the text.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-04-10T17:01:58Z",
        "closed_at": "2018-04-10T21:49:58Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 51,
        "deletions": 85,
        "changed_files": 2,
        "created_at": "2018-03-29T13:22:18Z",
        "closed_at": "2018-04-02T15:44:43Z",
        "merged_at": null,
        "body": "This simplifies GetStyleColorName, but makes hard to comment on the color list.\r\n\r\nI know this is a controversial change that has a significant amount of preprocessor black magic... but I just found about this technique and thought it would be cool to apply it here :)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 20,
        "changed_files": 4,
        "created_at": "2018-03-29T12:29:31Z",
        "closed_at": "2018-04-02T15:36:01Z",
        "merged_at": null,
        "body": "I believe this is more correct way how to solve the compilation using MingW. It should be also noted, that one should define `_WIN32_WINNT` on MingW to support the horizontal mouse wheel.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-03-23T10:35:29Z",
        "closed_at": "2018-10-15T15:22:20Z",
        "merged_at": null,
        "body": "Fix line draw (Perhaps it should be so?)",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-03-19T18:52:45Z",
        "closed_at": "2018-05-07T09:53:15Z",
        "merged_at": null,
        "body": "SetTransform save(?)\r\n\r\nUsing imgui in dll (direct 3d hook, game) without it something that did not work properly. By typing I found out what the problem was and offer my \"elegant\" solution. I'm almost completely sure what can be done better, but not me",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-03-19T14:17:28Z",
        "closed_at": "2018-03-19T15:48:04Z",
        "merged_at": "2018-03-19T15:48:04Z",
        "body": "Without an appropriate dependency between ``VkSubmitInfo.pWaitDstStageMask`` (here ``COLOR_ATTACHMENT_OUTPUT``) and the render-pass, the ``UNDEFINED`` -> ``COLOR_ATTACHMENT_OPTIMAL`` transition in the render-pass could happen before the swapchain-image is finished being presented (i.e. before ``g_PresentCompleteSemaphore`` is signaled).\r\n\r\nThis commits adds a ``VK_SUBPASS_EXTERNAL`` subpass-dependency in ``VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT`` to avoid this.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 26,
        "changed_files": 3,
        "created_at": "2018-03-12T13:13:36Z",
        "closed_at": "2018-09-09T12:42:32Z",
        "merged_at": null,
        "body": "Previously it relied on a preprocessor macro to define the amount of backbuffers that imgui would use, causing problems when rendering is implemented without any device wait idles in the render loop. This is caused by it trying to free buffers that are still in use causing graphical glitches (and i'd imagine in worst case a crash although I didn't experience one).\r\n\r\nRequires some changes to the demo though so it's a compatibility breaking change to the vulkan example implementation.\r\n\r\nThe new way to initialise the vulkan backend is pretty simple though, you just have to changed the init struct to set the vk_queued_frames value to the amount of backbuffers you are using. When you are rebuilding the swapchain and the amount of backbuffers has changed just call ImGui_ImplGlfwVulkan_QueuedFramesChanged(<new backbuffer count>);\r\n\r\nHas some performance deficits of course, but it's all in the initialisation and reinitialisation parts of ImGui so there should be minimal runtime overhead.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2018-03-04T22:27:55Z",
        "closed_at": "2019-01-17T13:54:45Z",
        "merged_at": null,
        "body": "The flags are `ImGuiWindowFlags_NoBackground/NoWindow`. They make it easier to create an invisible window for drawing texts outside of imgui via raw access to the draw lists as suggested in #628. The window drawing is skipped when ImGuiWindowFlags_NoWindow is set, so this saves us from setting alpha on the window for this purpose.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-03-01T16:09:20Z",
        "closed_at": "2018-03-05T15:16:57Z",
        "merged_at": null,
        "body": "Remove Redundant Semicolons For imgui_draw.cpp+",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 178,
        "deletions": 36,
        "changed_files": 2,
        "created_at": "2018-02-27T04:02:10Z",
        "closed_at": "2020-12-14T13:39:55Z",
        "merged_at": null,
        "body": "I Updated GetGlyphRangesJapanese to Kanji Version 2010.\r\n\r\nThen I Added GetGlyphRangesJoyoKanji, It mixed regular Chineses of GB2312 / Big5 / Shift-JIS,\r\nabout 8000+ ideograms only.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-02-26T15:31:52Z",
        "closed_at": "2018-02-26T16:43:43Z",
        "merged_at": "2018-02-26T16:43:43Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2018-02-22T13:25:39Z",
        "closed_at": "2018-05-26T11:12:46Z",
        "merged_at": null,
        "body": "Compare #984.\r\n\r\nWhat this pull request changes: for the OpenGL3-examples, (sdl_opengl3_example, opengl3_example) glVertexAttribPointer is now called every time the draw lists are drawn and not only when the draw list shaders are compiled. This allows the user to use custom glVertexAttribPointer in a draw_callback callback specified in \r\n\r\n`ImGui::GetWindowDrawList()->AddCallback(draw_callback, NULL);`\r\n\r\nThis e.g. allows to execute a user defined OpenGL-program per window _and_ have draw lists be executed on top: in the figure below, the black triangle is drawn by a different program than the yellow line, which is drawn by the draw list program.\r\n\r\n![image](https://user-images.githubusercontent.com/3997849/36540963-9e561e64-17dc-11e8-8c13-8c6d844a1774.png)\r\n",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2018-02-22T04:34:18Z",
        "closed_at": "2018-02-22T22:25:12Z",
        "merged_at": "2018-02-22T22:25:12Z",
        "body": "This might be useful if some widget makes a lot of calls to *ImLineClosestPoint*. The call to *sqrtf* was eliminated while keeping the behavior of the functions precisely the same. \r\n\r\nAccording to the google benchmark, it is roughly x2.4 faster now.\r\n\r\n    Benchmark                             Time           CPU Iterations\r\n    -------------------------------------------------------------------\r\n    ImLineClosestPoint_original        4867 ns       5000 ns     100000\r\n    ImLineClosestPoint_optimized       1981 ns       1950 ns     344615\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-02-18T19:21:06Z",
        "closed_at": "2018-02-20T14:50:10Z",
        "merged_at": null,
        "body": "According to the Khronos reference \r\nhttps://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPolygonMode.xhtml.\r\n\r\n`glPolygonMode` must have this signature:\r\n```cpp\r\nvoid\u00a0glPolygonMode( GLenum,\u00a0 GLenum);\r\n```\r\n\r\nWhich means that if I were to use something like https://github.com/cginternals/glbinding that has enum classes with the current example, I would not be able to build it.\r\n\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2018-02-16T17:49:35Z",
        "closed_at": "2018-02-16T18:56:13Z",
        "merged_at": null,
        "body": "Uses `ImGui::GetMouseCursor()` to select the correct SDL system cursor in `ImGui_ImplSdlGL3_NewFrame`.\r\n\r\nCreates the `SDL_Cursor`s in `ImGui_ImplSdlGL3_CreateDeviceObjects`, not sure if this is the best/intended structure.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-02-16T05:28:27Z",
        "closed_at": "2018-02-16T10:59:48Z",
        "merged_at": null,
        "body": "`memory.h` is included in Arduino by default, including it will prevent `stb_truetype.h` from being compiled",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2018-02-12T08:51:55Z",
        "closed_at": "2018-02-12T14:39:18Z",
        "merged_at": "2018-02-12T14:39:18Z",
        "body": "See: https://github.com/ocornut/imgui/issues/1230",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2018-02-11T10:02:33Z",
        "closed_at": "2018-03-20T10:42:19Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2018-02-05T02:51:26Z",
        "closed_at": "2018-02-05T08:12:52Z",
        "merged_at": "2018-02-05T08:12:52Z",
        "body": "This fixes a couple minor issues with the iOS related code within the Apple example. One is just a typo, the other is an unresolved symbol. I did my best to match the code style of this specific example.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2018-01-28T20:28:38Z",
        "closed_at": "2019-07-01T10:19:31Z",
        "merged_at": null,
        "body": "I had to scroll horizontally to a precise item of a list.\r\n\r\nWhile there is some function to do that in a vertical scrolling (y), there two function were missing to do it horizontally.\r\n\r\nI created them in my repo, but I think it may help some other people as well, so here is a pull request.\r\n\r\nI'm aware that the changing of \"SetScrollHere\" to \"SetScrollYHere\" is a break, but I think it is reasonable and the name is more clear. Anyway fill free to accept it, reject it, rename these functions etc.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1385,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2018-01-14T12:39:02Z",
        "closed_at": "2023-04-19T14:57:02Z",
        "merged_at": null,
        "body": "This version uses just Win32 to process all input and output, and binds only the necessary OpenGL functions using the function types defined in glext.h (included), so it has no dependencies whatsoever.\r\nTake a look at how the code is distributed because it is taken quite directly from my own engine, so you may prefer things arranged in a different way.",
        "comments": 22
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-01-14T03:42:57Z",
        "closed_at": "2018-01-14T10:26:03Z",
        "merged_at": "2018-01-14T10:26:03Z",
        "body": "Using a setup where a Linux slave builds for Windows, the header file `Windows.h` is unable to be found due to the default MinGW package providing lowercase `windows.h`.\r\n\r\n```\r\nimgui/imgui.cpp:11527:21: fatal error: Windows.h: No such file or directory\r\n #include <Windows.h>\r\n                     ^\r\ncompilation terminated.\r\n```\r\n\r\nThis was working before the recent commit 1f26652 which changed the include. This is a simple fix to check if the current compiler is MinGW, and if so, use the correct name.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2018-01-11T20:20:05Z",
        "closed_at": "2018-01-11T21:28:05Z",
        "merged_at": null,
        "body": "If we don't check for null the code will try to access protected memory.\r\nFor example, widgets with null labels might cause a runtime error.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2017-12-19T19:12:10Z",
        "closed_at": "2020-11-28T12:54:08Z",
        "merged_at": null,
        "body": "### Brief\r\nAdd ability to customize hit test for widgets and windows. Former allows to create arbitrary shapes inside of a button rectangle, later to create pass-through areas (holes) in windows. This will make #1503 possible.\r\n\r\nI'm opening this PR to open a discussion if such functionality is needed in main branch of ImGui. I would like to hear your opinion on that.\r\n\r\n### Usage\r\nTo use this ability user must implement custom hit function with signature:\r\n```cpp\r\ntypedef bool (*ImGuiHitTestCallback)(const ImVec2& point, const ImVec2& min, const ImVec2& max, void* user_data);\r\n```\r\n\r\nCall `PushHitTest`/`PopHitTest` exactly like `PushStyleVar` before drawing widget.\r\n```cpp\r\nIMGUI_API void PushHitTest(ImGuiHitTestCallback callback, void* user_data = NULL);\r\nIMGUI_API void PopHitTest();\r\n```\r\nExample:\r\n```cpp\r\nImGui::PushHitTest(circleHitTest);\r\nImGui::Button(\"I'm ImGui::Button()!\", ImVec2(150, 150));\r\nImGui::PopHitTest();\r\n```\r\n\r\nHit function can be set for windows using these:\r\n```cpp\r\nIMGUI_API void SetNextWindowHitTest(ImGuiHitTestCallback callback, void* user_data = NULL);\r\nIMGUI_API void SetWindowHitTest(const char* name, ImGuiHitTestCallback callback, void* user_data = NULL);\r\n```\r\n\r\n![hit_tests](https://user-images.githubusercontent.com/1197433/34173648-74457a66-e4f6-11e7-8ba9-cee9d8273bca.gif)\r\n\r\nCircle button example:\r\n```cpp\r\nauto circleHitTest = [](const ImVec2& point, const ImVec2& min, const ImVec2& max, void*)\r\n{\r\n    const auto min_size = ImMin(max.x - min.x, max.y - min.y);\r\n    const auto radius = min_size * 0.5f;\r\n    const auto radius_squared = radius * radius;\r\n    const auto center = (max + min) * 0.5f;\r\n    const auto offset = point - center;\r\n    const auto distance_squared = offset.x * offset.x + offset.y * offset.y;\r\n\r\n    return distance_squared < radius_squared;\r\n};\r\n\r\nImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 75.0f);\r\nImGui::PushHitTest(circleHitTest);\r\nbool down = ImGui::Button(\"I'm ImGui::Button()\\n   with rounding\\n   and hit test!\", ImVec2(150, 150));\r\nImGui::PopHitTest();\r\nImGui::PopStyleVar();\r\nstatic int counter = 0;\r\nif (down)\r\n    ++counter;\r\nImGui::Text(\"Clicks: %d\", counter);\r\n```\r\n\r\nHole in a window example:\r\n```cpp\r\nstatic ImVec2 emptyRect;\r\nemptyRect = ImGui::GetCursorScreenPos();\r\nImGui::SetWindowHitTest(\"Debug##Default\", [](const ImVec2& point, const ImVec2& min, const ImVec2& max, void*)\r\n{\r\n    if (point.x >= emptyRect.x && point.y >= emptyRect.y && point.x <= (emptyRect.x + 150.0f) && point.y <= (emptyRect.y + 150.0f))\r\n        return false;\r\n\r\n    return true;\r\n});\r\n\r\nImGui::GetWindowDrawList()->AddRect(\r\n    ImGui::GetCursorScreenPos(), ImGui::GetCursorScreenPos() + ImVec2(150, 150), IM_COL32(255, 0, 0, 255));\r\n\r\nImGui::GetWindowDrawList()->AddText(\r\n    ImGui::GetCursorScreenPos() + ImVec2(0, 150 + ImGui::GetStyle().ItemSpacing.y),\r\n    IM_COL32_WHITE, \"This is a hole in window.\");\r\n```",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2017-12-17T13:29:45Z",
        "closed_at": "2017-12-20T15:25:28Z",
        "merged_at": "2017-12-20T15:25:28Z",
        "body": "Added a flag which allows to disable the built in undo / redo in text input",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2017-12-15T16:00:48Z",
        "closed_at": "2018-01-07T18:11:37Z",
        "merged_at": null,
        "body": "This should fix #1466.\r\n\r\nThe `SDL_GL_CONTEXT_PROFILE_CORE` flag is added because to my knowledge, macOS will refuse to create a modern OpenGL context without it.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 60,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2017-12-13T09:21:09Z",
        "closed_at": "2017-12-13T20:52:39Z",
        "merged_at": null,
        "body": "Fixed an issue where dragging the columns to the edge of the window would collapse the columns (since they are now forced within the window) and their width data would be lost. With this change, the old column widths are remembered until the columns are no longer being dragged. This means columns can be collapsed by dragging them all the way to the right side of the window, and then expanded again by dragging them back to the left, without losing their width data until the columns are actually deselected and no longer being dragged.\r\n\r\nI'm not super happy with how the column state is being stored in the StateStorage object, but this was the quickest fix I could put in using the existing tech.\r\n\r\nWith this change, this is how the column state storage looks:\r\n- StateStorage(ColumnsSetId - 1) The boolean state for whether the columns were dragging last update\r\n- StateStorage(ColumnsSetId + 2 * ColumnIndex) The float for the original column offset norm\r\n- StateStorage(ColumnsSetId + 2 * ColumnIndex + 1) The float for the dragged column offset norm",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 274,
        "deletions": 13,
        "changed_files": 6,
        "created_at": "2017-12-11T22:26:57Z",
        "closed_at": "2018-07-06T13:34:26Z",
        "merged_at": null,
        "body": "Several of the platform examples have been updated with cursor support. Some have not been updated because I do not have the build dependencies or proper computer to test on.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2017-11-27T20:04:46Z",
        "closed_at": "2018-01-20T11:45:49Z",
        "merged_at": "2018-01-20T11:45:49Z",
        "body": "This patch adds support for the horizontal mouse wheel in ImGui. It affects windows that can be scrolled, as long as the Ctrl key is not being pressed.\r\n\r\nThe scrolling speed has been set empirically so that it matches the scrolling speed on the Firefox browser when the horizontal wheel is used.\r\n\r\nInternally, it adds a MouseHorizWheel to ImGuiIO, which is then used in NewFrame to scroll the current window. This field should be set by the backend.\r\n\r\nThe SDL/GL2, SDL/GL3, GLFW/GL2 and GLFW/GL3 examples have been modified to use it.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-11-23T11:37:32Z",
        "closed_at": "2018-03-03T18:50:28Z",
        "merged_at": "2018-03-03T18:50:28Z",
        "body": "I feel like there should be hover color options for each different control instead of the grouped frame color to make it usable for everyone. This also would not reduce performance as all controls already check for hover state as required by the ImGUI::IsHoveredItem() API.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-11-17T00:46:18Z",
        "closed_at": "2017-11-18T23:53:36Z",
        "merged_at": "2017-11-18T23:53:36Z",
        "body": "This PR fixes a `maybe-uninitialized` error when building with `-Werror -O3` :)\r\n\r\n```\r\n../../imgui_draw.cpp: In function \u2018bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas*)\u2019:\r\n../../imgui_draw.cpp:93:54: error: \u2018spc.stbtt_pack_context::nodes\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\r\n #define STBTT_free(x,u)    ((void)(u), ImGui::MemFree(x))\r\n                                                      ^\r\n../../imgui_draw.cpp:1569:24: note: \u2018spc.stbtt_pack_context::nodes\u2019 was declared here\r\n     stbtt_pack_context spc;\r\n                        ^\r\nIn file included from ../../imgui_draw.cpp:101:0:\r\n../../stb_truetype.h:3629:50: error: \u2018spc.stbtt_pack_context::padding\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\r\n             stbrp_coord pad = (stbrp_coord) spc->padding;\r\n                                                  ^\r\n../../imgui_draw.cpp:1569:24: note: \u2018spc.stbtt_pack_context::padding\u2019 was declared here\r\n     stbtt_pack_context spc;\r\n                        ^\r\n../../imgui_draw.cpp:1533:42: error: \u2018spc.stbtt_pack_context::stride_in_bytes\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\r\n     unsigned char* data = pixels + x + y * stride;\r\n                                          ^\r\n../../imgui_draw.cpp:1569:24: note: \u2018spc.stbtt_pack_context::stride_in_bytes\u2019 was declared here\r\n     stbtt_pack_context spc;\r\n                        ^\r\n../../imgui_draw.cpp:93:54: error: \u2018spc.stbtt_pack_context::pack_info\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\r\n #define STBTT_free(x,u)    ((void)(u), ImGui::MemFree(x))\r\n                                                      ^\r\n../../imgui_draw.cpp:1569:24: note: \u2018spc.stbtt_pack_context::pack_info\u2019 was declared here\r\n     stbtt_pack_context spc;\r\n                        ^\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2017-11-13T03:47:26Z",
        "closed_at": "2017-11-19T11:29:22Z",
        "merged_at": null,
        "body": "I just changed return 0 for each case with break as the function always returns 0",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2017-11-03T13:41:59Z",
        "closed_at": "2017-12-10T16:53:26Z",
        "merged_at": null,
        "body": "Using empty label can cause problems, e.g. in combo does not work in following example:\r\n```cpp\r\n\tif (!ImGui::CollapsingHeader(label)) return;\r\n\tImGui::PushID(label);\r\n\tImGui::Combo(\"\", &current, getter, this, editor.getEventTypesCount());\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2017-11-02T10:53:10Z",
        "closed_at": "2017-11-13T09:48:39Z",
        "merged_at": null,
        "body": "The plural of axis is axes",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-11-01T15:51:06Z",
        "closed_at": "2017-11-02T09:41:48Z",
        "merged_at": "2017-11-02T09:41:48Z",
        "body": "I had a bug in my port because of this :p\r\n\r\nSince \r\n```\r\nTitleBg = 10\r\nTitleBgActive = 11\r\nTitleBgCollapsed = 12\r\n```\r\nFor coherency it'd be good to have the according colors ordered the same\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-10-30T14:32:36Z",
        "closed_at": "2017-11-02T15:47:19Z",
        "merged_at": null,
        "body": "I noticed while testing the Console sample in imgui-demo.cpp that the right-click context menu inside the child scroll-frame wouldn't show up sometimes (or most of the time, even).  As best as I can determine, it would only work when *no* imgui window is active.  Once any window is active -- even the parent/root of the child -- the right-click popup would no longer function.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2017-10-28T10:02:40Z",
        "closed_at": "2017-10-29T10:29:48Z",
        "merged_at": "2017-10-29T10:29:48Z",
        "body": "GetGlyphRangesThai() are missing punctuations for thai character.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2017-10-17T10:37:27Z",
        "closed_at": "2017-10-23T07:48:09Z",
        "merged_at": "2017-10-23T07:48:09Z",
        "body": "This helps a lot when the user drags a slider but carries the cursor offscreen before releasing the button - without the capturing, the slider will \"stick\" to the mouse cursor even after the button has been released. (This should generally be added to all Windows implementations - I won't mind doing it if you think it's a good idea.)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-10-15T17:35:18Z",
        "closed_at": "2017-10-15T19:07:06Z",
        "merged_at": "2017-10-15T19:07:06Z",
        "body": "Fixes ocornut/imgui#1172",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1721,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2017-10-15T10:32:43Z",
        "closed_at": "2018-03-01T22:36:59Z",
        "merged_at": null,
        "body": "I took the recently released Vulkan support in SDL 2.0.6 and ported the ImGUI Vulkan example over to use SDL instead of glfw. Keep in mind that I only performed some cursory testing on Linux.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-10-04T09:17:53Z",
        "closed_at": "2017-10-04T18:39:15Z",
        "merged_at": "2017-10-04T18:39:15Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2017-10-02T03:55:36Z",
        "closed_at": "2017-10-22T08:29:38Z",
        "merged_at": "2017-10-22T08:29:38Z",
        "body": "Previously, IndexLookup was not cleared on each font, causing FindGlyph to possibly return old glyphs when using MergeMode.\r\n\r\nThis crept up if a new font was added and built after a config using MergeMode had previously been built. On the second build, IndexLookup would not be cleared, causing FindGlyph to return old glyphs and ultimately not merge the glyphs into the atlas.\r\n\r\nI called `ImFont::Clear` and preserved DisplayOffset vs tacking on an explicit clear to IndexLookup, but I'm not sure what's preferred. As an aside, it felt weird that DisplayOffset is reset by Clear, while the other field explicitly set by the user (`Scale`) is not.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 226,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2017-10-01T03:16:59Z",
        "closed_at": "2017-12-12T23:27:19Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\nConsider my improvements that allow to store config (imgui.ini) on arbitrary filesystem.\r\n\r\nThis useful for embedded or mobile devices. For example, tvOS doesn't support direct access to filesystem but allow to store and sync memory blob.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-09-14T03:41:04Z",
        "closed_at": "2017-09-19T16:18:54Z",
        "merged_at": "2017-09-19T16:18:54Z",
        "body": "Clang 4.0 introduced -Wdouble-promotion, so check for and disable\r\nthat on clang as we do on gcc.\r\n\r\nThe old style casts warning is already disabled globally in this file\r\nfor clang, so it doesn't need to be re-disabled within this scope.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2017-09-14T03:39:34Z",
        "closed_at": "2017-09-15T09:52:15Z",
        "merged_at": "2017-09-15T09:52:15Z",
        "body": "This brings these enums to match the rest of the code and fixes\r\n2 warnings under clang about using C++11 extensions.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2017-09-12T16:47:03Z",
        "closed_at": "2022-01-17T17:29:13Z",
        "merged_at": null,
        "body": "\u2026 same time, within one frame\r\n\r\nUsually happens with touch screens, when user taps on a window",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2017-09-11T07:22:22Z",
        "closed_at": "2017-09-11T09:00:24Z",
        "merged_at": "2017-09-11T09:00:23Z",
        "body": "And make it _way_ more portable. While `alloca` isn't standardized, glibc is the only place that uses `alloca.h`. This is the only thing keeping imgui from building on NetBSD.\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2017-09-06T10:57:52Z",
        "closed_at": "2020-08-17T20:14:00Z",
        "merged_at": null,
        "body": "The slider behavior previously called \"logarithmic\" is actually polynomial. This is true logarithmic and can be triggered by passing a `power` argument of `0.0f` in `SliderFloat`.\r\n\r\nI left the previous behavior for backwards compatibility, but in my opinion it should be removed and the `float power` argument should be changed to `bool logarithmic`.\r\n\r\nAlso updated demo for \"slider log float\".\r\n\r\nSolves #642 ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2017-09-05T14:47:43Z",
        "closed_at": "2017-09-05T16:35:09Z",
        "merged_at": "2017-09-05T16:35:09Z",
        "body": "Just a very subtle improvement to the hue wheel -> more accurate color interpolation; attached before&after screenshots (hue on the wheel better matches the actual selected hue)\r\n\r\n![huewheel_before2](https://user-images.githubusercontent.com/7255954/30066610-b2944eb4-9258-11e7-8d81-2b82667eeb97.png)\r\n![huewheel_after2](https://user-images.githubusercontent.com/7255954/30066614-b58d58cc-9258-11e7-89f3-bd4edd430a3c.png)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2017-09-01T08:48:35Z",
        "closed_at": "2017-09-01T14:30:14Z",
        "merged_at": "2017-09-01T14:30:14Z",
        "body": "Update provides code for backing up the polygon draw mode for front and back faces, then setting to FILL for rendering the draw lists, then restoring the polygon draw mode to it's previous state.\r\n\r\nFor OpenGL 3+ you can not set the FRONT and BACK draw modes separately, so we set it using the only the FRONT mode from back up we made.\r\n\r\nChanges made to all 4 OpenGL client examples.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2017-08-15T13:51:43Z",
        "closed_at": "2017-08-16T02:45:08Z",
        "merged_at": "2017-08-16T02:45:08Z",
        "body": "Adds a `TexGlyphPadding` member to `ImFontAtlas`, which allows the user to configure the size of the padding between pixels when the font atlas texture is built (similar to how `TexDesiredWidth` allows a desired width of this texture to be specified).\r\n\r\nWe've found ImGui really useful in our project, but had a need to make some tweaks to the generated font atlas texture in our code after ImGui builds it. Writing a custom font rasterizer for this (like #618) seems like it would be a bit overkill, since we otherwise closely mirror what ImGui does. The texture change we make needs the glyphs in the texture to be spaced out a bit more than the hard-coded default of 1 pixel, which isn't something that the user is currently able to configure. Admittedly it's a bit of a weird and niche use case, but being able to configure this would be quite handy.\r\n\r\nThanks for taking a look!",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-08-11T20:55:15Z",
        "closed_at": "2017-08-12T04:53:14Z",
        "merged_at": "2017-08-12T04:53:14Z",
        "body": "* Fixes warning:\r\n  imgui.cpp:9295:98: warning: enum constant in boolean context [-Wint-in-bool-context]",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2017-07-12T19:06:52Z",
        "closed_at": "2017-07-15T09:47:23Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-07-07T11:55:39Z",
        "closed_at": "2017-07-09T15:27:37Z",
        "merged_at": null,
        "body": "Didn't include imgui properly.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2017-07-02T16:22:38Z",
        "closed_at": "2017-07-09T15:29:57Z",
        "merged_at": "2017-07-09T15:29:57Z",
        "body": "",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2017-06-26T19:22:09Z",
        "closed_at": "2018-03-20T21:45:15Z",
        "merged_at": null,
        "body": "Might not be in the scope for the examples.\r\n\r\nHowever if you capture the mouse `imgui_impl_glfw.cpp` will release it. Just added a check to  stop that, brings it into line with the SDL example which doesn't suffer from this.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-06-18T19:49:41Z",
        "closed_at": "2017-07-16T18:21:34Z",
        "merged_at": null,
        "body": "Certain fonts, such as Source Sans Pro, have an ascent value so high that glyphs don't appear vertically centered. I tried setting ImFontConfig.GlyphExtraSpacing.y to a negative value to compensate, only to discover that it's an unused value. This patch provides the behavior I expected.\r\n\r\nBefore:\r\n<img width=\"886\" alt=\"screenshot 2017-06-18 15 37 42\" src=\"https://user-images.githubusercontent.com/603802/27263729-4331c05a-543d-11e7-9a02-fa95191b54bd.png\">\r\n\r\nAfter: (with extra y spacing of -2)\r\n<img width=\"878\" alt=\"screenshot 2017-06-18 15 37 14\" src=\"https://user-images.githubusercontent.com/603802/27263730-4c33d2b0-543d-11e7-93d3-e0b2a94d14e3.png\">\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2017-05-17T19:35:32Z",
        "closed_at": "2017-08-11T16:43:34Z",
        "merged_at": "2017-08-11T16:43:34Z",
        "body": "Fixes the types for several backup variables in the gl3 glfw implementation example.\r\nThis will fix compile errors, if you use a gl binding with type checking like [glbinding](https://github.com/cginternals/glbinding),\r\n\r\nFunctions use GLenum instead of GLint:\r\n[glActiveTexture](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glActiveTexture.xhtml)\r\n[glBlendFuncSeparate](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFuncSeparate.xhtml)\r\n[glBlendEquationSeparate](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendEquationSeparate.xhtmll)\r\n\r\nedit:fixed link",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2017-05-16T23:55:08Z",
        "closed_at": "2017-09-01T14:55:55Z",
        "merged_at": "2017-09-01T14:55:55Z",
        "body": "OpenGL 3.2 added the ability to create a separate sampler object that overrides a bound texture's sampler state.\r\n\r\nImgui's GL3 bindings rely on the sampler state stored within the texture object itself, so if the user binds a sampler before `ImGui::Render` is called, it can \"accidentally\" override the sampler state of ImGui, which can have horrible consequences (in my case, my imgui just turned black.)\r\n\r\nTo fix this, the sampler binding for texture image unit 0 is saved and restored before and after ImGui's OpenGL rendering function, and the call to `glBindTexture` during rendering is followed by `glBindSampler(0, 0)`, which explicitly asks to use the texture's built-in sampler state rather than using the currently bound sampler object.\r\n\r\nSince sampler objects were introduced in OpenGL 3.2, this might cause an incompatibility for people on OpenGL 3.0 or 3.1, which is a bit strange since the example program is titled \"opengl3_example\". However, OpenGL 3.2 was a major milestone release that introduced the \"core\" profile, and is widely supported for that reason, so it might not be so bad. If somebody is restricted to GL 3.0 or 3.1 for some reason, they can just delete the 3 related lines of code.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2017-05-01T07:07:26Z",
        "closed_at": "2017-05-01T10:21:20Z",
        "merged_at": "2017-05-01T10:21:20Z",
        "body": "AFAIK there's no such enum as `GL_BLEND_SRC` or `GL_BLEND_DST` in OpenGL3 and OpenGL4.\r\n\r\nMaybe they're left over from previous versions? They don't even seem to exist in OpenGL 2.1. In fact checking they were deprecated in OpenGL 1.5 (they exist in 1.3)\r\n\r\nProbably need similar changes in your opengl2 example?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-04-25T13:28:14Z",
        "closed_at": "2017-09-25T20:13:39Z",
        "merged_at": "2017-09-25T20:13:39Z",
        "body": "I think the menu item should only be selected when the mouse button is released.\r\n\r\nBTW, very nice UI library \ud83d\udc4d ",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2017-04-09T10:46:51Z",
        "closed_at": "2017-08-11T17:06:59Z",
        "merged_at": null,
        "body": "Original pull request attempt had the following message:\r\n\r\n> I have clarified inside `README.md` more about Omar's commercial support and custom development with a newly created section named `Commercial Support`.\r\n> \r\n> I believe it looks better this way and clarifies things a lot more for candidate companies that seek commercial support.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-04-03T12:38:18Z",
        "closed_at": "2017-04-26T16:17:45Z",
        "merged_at": null,
        "body": "ImGui_ImplSdlGL3_RenderDrawLists keeps a pointer to last active texture unit and last active texture, then works on texture unit 0, assuming the last active texture was texture unit 0, which might not be the case. This change makes sure Texture Unit 0 is active before remembering the state.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-04-03T12:33:17Z",
        "closed_at": "2017-04-26T16:17:28Z",
        "merged_at": null,
        "body": "ImGui_ImplGlfwGL3_RenderDrawLists keeps pointers to the currently active Texture and currently active Texture unit, then works on Texture Unit 0. It assumes the last active texture unit was unit 0. This change makes sure Texture Unit 0 is active before making pointers.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2017-03-26T17:41:42Z",
        "closed_at": "2017-05-01T12:50:35Z",
        "merged_at": "2017-05-01T12:50:35Z",
        "body": "1. Sets depth member of the copy region used to copy over the font data from host to GPU to 1, as required per spec.\r\n\r\nA depth of zero for the image extent of the copy region triggers a validation layer error and from my experience this may cause some Vulkan implementations in just skipping the copy (because depth = 0), resulting in empty images on some devices.\r\n\r\n2. Clip scissor extents to zero. These are not allowed to be negative and would result in validation layer errors when moving windows out of bounds.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2017-03-24T09:11:22Z",
        "closed_at": "2017-03-29T12:51:27Z",
        "merged_at": "2017-03-29T12:51:26Z",
        "body": "",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 29,
        "changed_files": 1,
        "created_at": "2017-03-23T22:04:57Z",
        "closed_at": "2017-04-25T18:55:09Z",
        "merged_at": null,
        "body": "ImHash uses FNV1a instead of CRC. \r\n\r\nWith a very contrived perf test (calling ImHash a few hundred thousand times in a loop)  there's a 40-50% speedup with FNV1a over CRC. In practice, though, I couldn't measure a difference - ImHash just doesn't dominate the performance. So don't break out the champagne...\r\n\r\nThere was a strange property of the old ImHash function: because the buffer was being hashed backwards in the 'known size' case you get a different result on the same data depending on whether you pass the size or not. It doesn't cause any issues, it's just odd behavior for a hash function so I changed it here.\r\n\r\nOne final consideration: this might be a breaking change if anyone is relying on the ID values, although I'm not sure why anyone would do that.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 1752,
        "deletions": 0,
        "changed_files": 10,
        "created_at": "2017-03-18T19:46:44Z",
        "closed_at": "2017-09-27T08:33:23Z",
        "merged_at": null,
        "body": "SDL+Vulkan example for imgui using MIT licensed [SDL_Vulkan](https://github.com/corngood/SDL_vulkan) library.\r\n\r\nBased on the existing GLFW version.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-03-15T20:25:54Z",
        "closed_at": "2017-03-16T08:51:05Z",
        "merged_at": "2017-03-16T08:51:05Z",
        "body": "It was showing the wrong value in the tooltip.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2017-03-08T08:08:48Z",
        "closed_at": "2017-11-19T11:45:32Z",
        "merged_at": null,
        "body": "\u2026l TreePush(const void*)",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2017-02-27T13:45:00Z",
        "closed_at": "2018-08-28T16:54:13Z",
        "merged_at": null,
        "body": "I also added the example to the Travis config file, to help prevent regressions.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 213,
        "deletions": 57,
        "changed_files": 2,
        "created_at": "2017-02-26T17:01:13Z",
        "closed_at": "2017-05-01T15:09:31Z",
        "merged_at": null,
        "body": "See details in the commits",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 158,
        "deletions": 22,
        "changed_files": 1,
        "created_at": "2017-02-26T12:40:47Z",
        "closed_at": "2018-03-12T14:32:24Z",
        "merged_at": null,
        "body": "Additional layer, extension and the callback itself are used/created when IMGUI_VULKAN_DEBUG_REPORT is defined. The callback reports seven (potential!) errors which will be fixed with another pull request.",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2017-02-26T12:31:27Z",
        "closed_at": "2017-05-01T14:23:41Z",
        "merged_at": "2017-05-01T14:23:41Z",
        "body": "Added a macro to switch between unlimited frame rate (VK_PRESENT_MODE_IMMEDIATE_KHR) and limited to 60 fps (VK_PRESENT_MODE_FIFO_KHR). Only the latter mode is guaranteed to be available, but the former one most likely is.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2017-02-26T09:32:50Z",
        "closed_at": "2017-02-26T11:41:09Z",
        "merged_at": null,
        "body": "Added a macro (IMGUI_UNLIMITED_FRAME_RATE) to switch between unlimited frame rate (VK_PRESENT_MODE_IMMEDIATE_KHR) and limited to 60 fps (VK_PRESENT_MODE_FIFO_KHR). Only the latter mode is guaranteed to be available, but the former one most likely is. With the macro enabled the perf gain is visible in the frame rate of the debug window.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2017-02-11T11:23:11Z",
        "closed_at": "2017-05-01T13:27:40Z",
        "merged_at": "2017-05-01T13:27:40Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2017-02-06T09:32:53Z",
        "closed_at": "2017-05-01T10:34:53Z",
        "merged_at": "2017-05-01T10:34:53Z",
        "body": "Adds a function\r\n  AddImageQuad(user_texture_id, a, b, c, d, uva, uvb, uvc, uvd, col)\r\nthat shows a texture on a full quad. This allows showing arbitrary\r\nrotations of a texture. It only uses existing functionality, just adds a new\r\npublic function to ImDrawList.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2017-01-29T12:15:28Z",
        "closed_at": "2017-08-11T17:23:42Z",
        "merged_at": null,
        "body": "It's rare, but sometimes I got a segmentation fault here because settings pointer is NULL. Just added that to avoid the error.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2017-01-26T02:10:37Z",
        "closed_at": "2017-05-01T13:14:47Z",
        "merged_at": null,
        "body": "Small change to preserve and restore the texture bound to unit 0. \r\n\r\nThe current code will not restore the unit 0 bound texture if the active texture unit is non-zero when entering `ImGui_ImplGlfwGL3_RenderDrawLists`.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 23,
        "changed_files": 2,
        "created_at": "2017-01-22T21:11:08Z",
        "closed_at": "2018-05-07T20:26:40Z",
        "merged_at": null,
        "body": "This PR add callbacks for saving and loading INI settings file content.\r\n```cpp\r\nstruct ImGuiIO\r\n{\r\n    ...\r\n\r\n    // Optional: save or load configuration.\r\n    void        (*SaveIniCb)(const char* buffer, size_t size);\r\n    size_t      (*LoadIniCb)(char* buffer, size_t size);\r\n```\r\n\r\nExample usage:\r\n```cpp\r\n    static std::string mySettings;\r\n\r\n    ImGuiIO& io = ImGui::GetIO();\r\n    io.SaveIniCb = [](const char* buffer, size_t size)\r\n    {\r\n        mySettings.assign(buffer, size);\r\n    };\r\n\r\n    io.LoadIniCb = [](char* buffer, size_t size) -> size_t\r\n    {\r\n        if (buffer)\r\n            memcpy(buffer, mySettings.data(), size);\r\n        return mySettings.size();\r\n    };\r\n```\r\n\r\nSave callback is straightforward, it receive a text buffer and size to save.\r\nLoad callback is called twice, first time with buffer set to `NULL` to determine size, second time with a buffer to read content.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2016-12-04T20:57:20Z",
        "closed_at": "2016-12-21T19:06:05Z",
        "merged_at": "2016-12-21T19:06:05Z",
        "body": "Since Combo and ListBox only read and display the list of items, they\r\nshould not modify the pointers inside the array of pointers passed in.\r\nAdding \"const\" here makes it possible to call these functions with such\r\nan array of const pointers. Previously, a cast to \"const char**\" was\r\nrequired as a workaround, otherwise there was a compile error.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 35,
        "changed_files": 2,
        "created_at": "2016-11-15T07:18:18Z",
        "closed_at": "2022-11-15T14:01:54Z",
        "merged_at": null,
        "body": "As described previously, I implemented ImTextureID with a VkDescriptorSet. \r\n\r\n- I added a utility function for allocating the ImTextureIDs. This allows the user to set both sampler and image(view). Can be removed if not needed. (Note: freeing is not necessary, since the DescriptorSet comes from a pool)\r\n- Not 100% sure if the cast to void* is legal, someone please correct me if it is not.\r\n- Let me know if I messed up the formatting!",
        "comments": 54
    },
    {
        "merged": true,
        "additions": 200,
        "deletions": 90,
        "changed_files": 5,
        "created_at": "2016-11-14T08:28:21Z",
        "closed_at": "2017-08-20T13:20:06Z",
        "merged_at": "2017-08-20T13:20:06Z",
        "body": "There are a couple of column behaviors I was seeking to add to my ImGui overlays which were not readily available, so I took it upon myself to prototype some changes to the Columns API that would expose these behaviors in flags. In particular, (1) I wanted a way to preserve column widths similar to how Microsoft Excel does. For example, when moving a column divider to the right, all the following columns should maintain their widths and shift to the right with it when this flag is set. (2) Another behavior I was looking for was to essentially force the column dividers to stay within the confines of the window. This eliminates the possibility of the user shifting a column beyond the width of the window and forgetting it ever existed.\r\n\r\nThe only other change I made was adding a function call for setting the width of a column.\r\n\r\nFeel free to take these changes with a grain of salt, but I'm hoping they can either inspire or be a part of the inevitable Columns API refactor. The reason I named the new columns functions BeginColumns() and EndColumns() is because it follows the structure of other ImGui API calls, and if one day ImGui supports columns nested within other columns, the naming convention is forward compatible for pushing and popping to a stack. Right now if BeginColumns is called twice before EndColumns, there will be an assertion because nesting columns is currently not supported.\r\n\r\nI should also note that these changes are entirely backwards compatible. To play around with the new flags, there is also a new \"Advanced settings\" section in the \"Columns\" section of the demo window.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 98,
        "deletions": 53,
        "changed_files": 3,
        "created_at": "2016-11-13T11:49:30Z",
        "closed_at": "2016-11-13T16:58:04Z",
        "merged_at": "2016-11-13T16:58:04Z",
        "body": "- Initialize Vulkan in a better way.\r\n- Redeclare gl_PerVertex in the vertex shader.\r\n- Some other tweaks.\r\n\r\nThis should make the Vulkan example more robust for running on different drivers.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-11-09T06:56:41Z",
        "closed_at": "2016-11-12T10:08:51Z",
        "merged_at": "2016-11-12T10:08:51Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2016-10-29T19:34:19Z",
        "closed_at": "2017-08-16T05:42:40Z",
        "merged_at": "2017-08-16T05:42:40Z",
        "body": "This function lets us check if a popup is open without opening it with `BeginPopup`.\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2016-10-22T11:39:59Z",
        "closed_at": "2018-03-01T14:58:11Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2016-10-22T09:43:40Z",
        "closed_at": "2016-10-22T11:01:12Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 57,
        "changed_files": 7,
        "created_at": "2016-10-22T09:43:23Z",
        "closed_at": "2016-11-12T20:07:34Z",
        "merged_at": null,
        "body": "",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 100,
        "deletions": 170,
        "changed_files": 4,
        "created_at": "2016-10-18T20:59:29Z",
        "closed_at": "2016-11-12T16:50:38Z",
        "merged_at": "2016-11-12T16:50:38Z",
        "body": "Previously, the used GLSL shaders were not Vulkan compatible (Vulkan mandates Location decorators on in/out blocks/structs). I updated the shaders and the embedded SPIR-V (now using the 32-bit values from glslangValidator).\n\nAs a minor fix, I added the nulling of the released resources, so it is possible to recreate the structures.\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2016-10-06T10:30:50Z",
        "closed_at": "2017-07-20T18:24:51Z",
        "merged_at": null,
        "body": "Steps to reproduce the bug:\n1.  With following code:\n   \n   ``` cpp\n   ImGui::PushFont(somefont);\n   ImGui::SetTooltip(\"%s\", \"abc\");\n   ImGui::PopFont();\n   ```\n2. Observe that the tooltip does not use `somefont`\n\nNote: I assume the same problem is with style/colors\nNote: I'm not sure it's safe to store font like that\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-09-26T20:56:04Z",
        "closed_at": "2017-05-01T13:37:26Z",
        "merged_at": null,
        "body": "Changing GetClientRect to GetWindowsRect in directx11 to fix issue where the GUI would cut off at the wrong place. This is due to GetWindowsRect returning a rect of the screen coords but GetClientRect returns would only return the client coords which will be not the same size of the window as expected. \n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2016-09-26T10:35:42Z",
        "closed_at": "2017-11-20T12:32:10Z",
        "merged_at": "2017-11-20T12:32:10Z",
        "body": "**PR was recreated due to lost references after changing fork origin. That was not my intention, sorry.\nFor comments please look at [previous PR](https://github.com/ocornut/imgui/pull/808).**\n\nThis PR add `rounding` and `rounding_corners` to `ImDrawList::AddImage`.\n\nWith rounding it is easier to draw over already rounded rectangles. This is for ImDrawList only. Widgets does not take advantage of this feature.\n\n``` cpp\n-     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);\n+     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), ImU32 col = 0xFFFFFFFF, float rounding = 0.0f, int rounding_corners = 0x0F);\n```\n\n![image](https://cloud.githubusercontent.com/assets/1197433/18051086/be937112-6df2-11e6-90d0-5696af6a9dce.png)\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 26,
        "changed_files": 5,
        "created_at": "2016-09-26T10:30:51Z",
        "closed_at": "2016-10-01T12:29:39Z",
        "merged_at": "2016-10-01T12:29:39Z",
        "body": "**PR was recreated due to lost references after changing fork origin. That was not my intention, sorry.\nFor comments please look at [previous PR](https://github.com/ocornut/imgui/pull/767).**\n\nPR adds ability to tell ImGui to generate packed color in BGRA format instead of RGBA.\nThis change simplify backend implementation by removing need to convert colors in vertex buffer before uploading to engine. For ImGui packing colors differently make no difference and backend can use memcpy().\n\nTo change color packing uncomment `#define IMGUI_USE_BGRA_PACKED_COLOR` in imconfig.h\n\nWhat changes. Hardcoded bit shifts were replaced by constants like `IM_COL32_R_SHIFT`. Depending of `IMGUI_USE_BGRA_PACKED_COLOR` being defined constants have different values.\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 17,
        "changed_files": 10,
        "created_at": "2016-09-11T18:44:15Z",
        "closed_at": "2016-09-11T20:02:52Z",
        "merged_at": null,
        "body": "Hi,\n\nthis merge request fixes some minor issues.\nIt was created with help of [Feram](https://github.com/feramhq/feram).\n\nIf it helped to improve this repository,\nplease consider to [star Feram's repo](https://github.com/feramhq/feram) to show some love! \ud83d\ude0a\n\nPS:\nThe [Feram team](https://github.com/feramhq) is currently working on making this technology\navailable for everyone. If you want to be one of the first to use it,\nplease sign up up for the newsletter on [feram.co](http://feram.co).\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2016-09-11T01:27:02Z",
        "closed_at": "2017-08-14T08:50:20Z",
        "merged_at": "2017-08-14T08:50:20Z",
        "body": "I'm loading a symbol font and using it to draw icons on a trace visualizer, possibly many thousands.  It seemed useful to have a path to draw glyphs without text processing, lookup, scaling, etc.  This way I can ImFont::FindGlyph() on my icons once and draw them all over the place with minimal extra overhead.\n\nSubmitted for your consideration.\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2016-09-09T04:29:10Z",
        "closed_at": "2017-12-11T18:48:07Z",
        "merged_at": null,
        "body": "The lower left grip is disabled by default and can be added to the window with one of the following two window flags\n- `ImGuiWindowFlags_ResizeLowerLeft`\n- `ImGuiWindowFlags_ResizeLowerLeftAndRight`\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2016-09-03T23:35:44Z",
        "closed_at": "2016-10-16T12:03:08Z",
        "merged_at": null,
        "body": "I believe this solves #588 . The extra check may seem a bit cumbersome, but seems inevitable as `STB_TEXTEDIT_LAYOUTROW` consumes one newline at the end of the row without any indication that would allow you to recognise when it didn't.\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2016-08-29T12:17:39Z",
        "closed_at": "2016-09-26T10:37:08Z",
        "merged_at": null,
        "body": "This PR add `rounding` and `rounding_corners` to `ImDrawList::AddImage`.\n\nWith rounding it is easier to draw over already rounded rectangles. This is for ImDrawList only. Widgets does not take advantage of this feature.\n\n``` cpp\n-     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);\n+     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), ImU32 col = 0xFFFFFFFF, float rounding = 0.0f, int rounding_corners = 0x0F);\n```\n\n![image](https://cloud.githubusercontent.com/assets/1197433/18051086/be937112-6df2-11e6-90d0-5696af6a9dce.png)\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2016-08-27T17:15:32Z",
        "closed_at": "2016-09-01T07:23:46Z",
        "merged_at": "2016-09-01T07:23:46Z",
        "body": "Also lineWidth should be 1.0f by default.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 454,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2016-08-27T12:28:16Z",
        "closed_at": "2018-06-11T18:03:45Z",
        "merged_at": null,
        "body": "A simple example on integrating imgui with Freeglut.\n\n![screenshot](https://cloud.githubusercontent.com/assets/8717601/18027438/fba9aaac-6c95-11e6-90ba-ae3c83c2dc6b.jpg)\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2016-08-26T22:41:41Z",
        "closed_at": "2016-10-01T13:00:14Z",
        "merged_at": "2016-10-01T13:00:14Z",
        "body": "Shutdown calls glDetachShader/glDeleteShader/glDeleteProgram with NULL if NewFrame hasn't been called. This commit fixes that.\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2016-08-25T22:13:49Z",
        "closed_at": "2017-09-01T14:30:05Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-08-18T18:00:49Z",
        "closed_at": "2016-08-19T16:00:27Z",
        "merged_at": "2016-08-19T16:00:27Z",
        "body": "Without a null terminator the Combo() function indexes outside of the \"items_separated_by_zeros\" string.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2016-08-05T17:07:40Z",
        "closed_at": "2018-06-13T12:10:40Z",
        "merged_at": null,
        "body": "you want to have centered, ie; ImGui::SetNextWindowPos(ImVec2(-FLT_MAX, 100);\n\nUnsure if you want to have a specific flag to replace -FLT_MAX (ie, windowCenterAxis).\n\nSetNextWindowPos(ImVec2(-FLT_MAX,100)); \n![imgui-x-center](https://cloud.githubusercontent.com/assets/5660591/17444297/8d151398-5b82-11e6-9e6a-ec1a442b4c4d.png)\n\nSetNextWindowPos(ImVec2(10,-FLT_MAX)); \n![imgui-y-center](https://cloud.githubusercontent.com/assets/5660591/17444298/8d201fa4-5b82-11e6-864e-453ae9cc5e47.png)\n\nSetNextWindowPos(ImVec2(-FLT_MAX,-FLT_MAX));\n![imgui-xy-center](https://cloud.githubusercontent.com/assets/5660591/17444363/e7853e7a-5b82-11e6-85d3-250fbcbcf1e7.png)\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2016-08-05T10:05:16Z",
        "closed_at": "2016-08-06T07:41:01Z",
        "merged_at": "2016-08-06T07:41:01Z",
        "body": "New public function is added which allow to test arbitrary rectangle visibility without need of moving cursor.\n\n``` cpp\n    IMGUI_API bool          IsRectVisible(const ImVec2& a, const ImVec2& b);\n```\n\nI found this function useful to discard elements drawn using ImDrawList. I'm drawing background under widgets by my own using channel splitting/merging and this function simplify visibility testing.\n\n![image](https://cloud.githubusercontent.com/assets/1197433/17433403/b893d924-5b04-11e6-9325-b6ab99eaab31.png)\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 26,
        "changed_files": 5,
        "created_at": "2016-08-05T09:43:48Z",
        "closed_at": "2016-09-26T10:31:48Z",
        "merged_at": null,
        "body": "PR adds ability to tell ImGui to generate packed color in BGRA format instead of RGBA.\nThis change simplify backend implementation by removing need to convert colors in vertex buffer before uploading to engine. For ImGui packing colors differently make no difference and backend can use memcpy().\n\nTo change color packing uncomment `#define IMGUI_USE_BGRA_PACKED_COLOR` in imconfig.h\n\nWhat changes. Hardcoded bit shifts were replaced by constants like `IM_COL32_R_SHIFT`. Depending of `IMGUI_USE_BGRA_PACKED_COLOR` being defined constants have different values.\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2016-07-30T22:29:09Z",
        "closed_at": "2016-07-31T07:28:21Z",
        "merged_at": "2016-07-31T07:28:21Z",
        "body": "`ImGuiIO& io = ImGui::GetIO();` is done at the top of the function.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2016-07-26T02:51:28Z",
        "closed_at": "2016-07-29T08:14:23Z",
        "merged_at": null,
        "body": "Hi,\n\nThe SDL_CreateTexture\\* functions modify \"GL_UNPACK_ROW_LENGTH\" internally.  So, if you use SDL2 to create OpenGL textures before fully loading ImGui, ImGui's text texture will not load correctly.\n\nThis is a small fix to address this issue.\n\nThe other three function calls were added for completion and extra safety.  The \"GL_UNPACK_ROW_LENGTH\" is the only call technically required.\n\nIn addition, I would imagine the SDL2 OpenGL 3 implementation also has this issue.  Since I personally do not use that implementation, I did not want to mess with it and break something.\n\nThanks.\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2016-07-23T14:48:40Z",
        "closed_at": "2016-07-29T09:21:20Z",
        "merged_at": null,
        "body": "`SameLine()` is useful to tie two groups together without changing style and drawing dummy control (also taking into account previous padding). I added `SameColumn()` function to mimic `SameLine()`.\n\n``` cpp\n// call between widgets or groups to layout them vertically\nIMGUI_API void SameColumn(float pos_y = 0.0f, float spacing_h = -1.0f);\n```\n\n``` cpp\n// drawRect() and fillItemBounds() are at very end of this comment\ndrawRect(40, 400, ImColor(255, 0, 0, 128), 2);\nImGui::BeginGroup();\nImGui::Dummy(ImVec2(40, 100));\nImGui::SameColumn(50, 0);\nfillItemBounds(ImColor(255, 128, 128));\nImGui::Dummy(ImVec2(40, 250));\nfillItemBounds(ImColor(128, 255, 128));\nImGui::EndGroup();\n```\n\n![image](https://cloud.githubusercontent.com/assets/1197433/17078158/8580c506-50eb-11e6-8c67-4a738984a0a9.png)\n\nUsed utility functions. Make sure you include `imgui_internal.h` with `IMGUI_DEFINE_MATH_OPERATORS` defined.\n\n``` cpp\nauto fillItemBounds = [](ImColor color, float expand = 0.0f)\n{\n    ImGui::GetWindowDrawList()->AddRectFilled(\n        ImGui::GetItemRectMin() - ImVec2(expand, expand),\n        ImGui::GetItemRectMax() + ImVec2(expand, expand),\n        color);\n};\n\nauto drawRect = [](float w, float h, ImColor color, float expand = 0.0f)\n{\n    ImGui::GetWindowDrawList()->AddRect(\n        ImGui::GetCursorScreenPos() - ImVec2(expand, expand),\n        ImGui::GetCursorScreenPos() + ImVec2(w + expand, h + expand),\n        color);\n};\n```\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 912,
        "deletions": 61,
        "changed_files": 4,
        "created_at": "2016-07-21T23:06:40Z",
        "closed_at": "2016-09-26T10:39:04Z",
        "merged_at": null,
        "body": "After searching for some layout related solution I decided to pull my own after everything I found was only issues listed on this repository (#97).\n\nI think BeginHorizontal/EndHorizontal API was promissing, so I gave it a shot. There is how code look like and what results it produce.\n\n``` cpp\n            ImGui::BeginHorizontal(\"example_h1\", spanToWindow ? bounds : ImVec2(0, 0));\n                ImGui::TextUnformatted(\"Left\");\n                ImGui::Spring(middleWeight);\n                ImGui::TextUnformatted(\"Middle\");\n                ImGui::Spring(1.0f - middleWeight);\n                ImGui::TextUnformatted(\"Right\");\n            ImGui::EndHorizontal();\n```\n\n![stack_layout](https://cloud.githubusercontent.com/assets/1197433/17041261/2d94a62e-4fa5-11e6-8a0e-4e5e20dfbbab.gif)\n\nI tried to bend ImGui to help me layout widgets easly. This is what API I came up with:\n\n``` cpp\n    IMGUI_API void BeginHorizontal(const char* str_id, const ImVec2& size = ImVec2(0, 0));\n    IMGUI_API void BeginHorizontal(const void* ptr_id, const ImVec2& size = ImVec2(0, 0));\n    IMGUI_API void EndHorizontal();\n    IMGUI_API void BeginVertical(const char* str_id, const ImVec2& size = ImVec2(0, 0));\n    IMGUI_API void BeginVertical(const void* ptr_id, const ImVec2& size = ImVec2(0, 0));\n    IMGUI_API void EndVertical();\n    IMGUI_API void Spring(float weight = 1.0f, float spacing = -1.0f);\n```\n\nThis code works by caching sizes of widgets in first frame and positioning them in next. Layout is evaluated only if something related to size changes.\n\nCode was crafted in a few hours so it may be cruel in some places. I tried to be as consistent with ImGui code style. Please grab this code and try to use it. Let me know what you think about this solution. : )\n\nExample code show one use case. There are however many more. Widgets can be interleaved by Springs which may have zero (sticking widgets together) weight or greater than zero. Free space will be divide according to them. There is an option to provide spacing which acts like in SameLine() function but works for both horizontal and vertical layouts. Layouts can be mixed together, you may put one in another as you can see on example gif.\n",
        "comments": 26
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2016-07-19T16:02:03Z",
        "closed_at": "2016-07-20T09:41:01Z",
        "merged_at": null,
        "body": "Add Thai language support via GetGlyphRangesThai()\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 748,
        "deletions": 497,
        "changed_files": 5,
        "created_at": "2016-06-05T03:15:52Z",
        "closed_at": "2020-11-30T09:16:02Z",
        "merged_at": null,
        "body": "Tracking PR for issue #494.\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2016-05-16T00:07:56Z",
        "closed_at": "2016-05-16T08:55:12Z",
        "merged_at": "2016-05-16T08:55:12Z",
        "body": "Clean and simple, not much more to say..!\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2016-05-12T05:09:11Z",
        "closed_at": "2016-07-29T09:08:40Z",
        "merged_at": "2016-07-29T09:08:40Z",
        "body": "Was really happy to see the OSX shortcuts implemented for text fields.\n\nLast major thing missing for OSX text field conventions was to use `Cmd+Left/Right` for `Home/End` and `Cmd+Up/Down` for `Ctrl+Home/End`.\n\nAdded another bool, `ImGuiIO::HomeEndUsesArrowSuperKeys`. I don't know how many of these is too many, but trying to use the other var, `ShortcutsUseSuperKey`, wasn't coming out as clear since it's not just a modifier swap.\n\nAlso tested on Linux, didn't notice any regressions in the non-OSX behavior.\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2016-05-08T22:22:13Z",
        "closed_at": "2016-05-12T11:41:05Z",
        "merged_at": "2016-05-12T11:41:05Z",
        "body": "",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2016-05-07T17:44:50Z",
        "closed_at": "2016-05-07T18:59:02Z",
        "merged_at": null,
        "body": "Made suggested changes. Not adding DX10.\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2016-05-07T16:56:03Z",
        "closed_at": "2016-05-07T19:08:43Z",
        "merged_at": "2016-05-07T19:08:43Z",
        "body": "This disables some strict implicit conversion warnings for GCC (and clang, since it alsso defines **GNUC**).\nI was a bit hesitant about proposing this, but since we ignore all kinds of other warnings already it should be fine.\nWithout this I get hundreds of warnings, and it's a hassle to add every time I update to a new version.\n\n-Wconversion is actually useful for catching float -> int conversion but it also requires to add a bunch of casts which you probably don't want to do :)\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2016-05-07T09:25:07Z",
        "closed_at": "2016-05-08T09:50:32Z",
        "merged_at": null,
        "body": "#### **MOD: If you come here from the links in imgui_impl_dx10.cpp and imgui_impl_dx11.cpp to remove dependency on d3dcompiler_XX.dll, you can use A) https://github.com/ocornut/imgui/pull/638#issuecomment-217665189 to find a DLL available in the system or preferably B) https://github.com/ocornut/imgui/pull/638#issuecomment-217671027 to use a precompiled shader.**\n\nThe idea is to remove the d3dcompiler.lib dependency by dynamically loading D3DCompiler_XX.dll and finding the address of D3DCompile with GetProcAddress.\n\nThis is the solution that I came up with after seeing some users complaining about \"D3DCompiler_47.dll missing\" errors when running my application built on Release configuration.\n\nFrom what I read, there are 3 common solutions to this problem:\n- Include the DLL with the application\n- Dynamically try to find a D3DCompiler_XX.dll in the system\n- Pre-compile the shaders and load them at runtime\n\nIs there another better way to remove this dependency?\n\nI'm currently using VS 2015 and I only have VS 2015 Platform Toolset installed (v140) on my Win10, but I thought it would be a nice idea to install an old Platform Toolset (e.g. 2010) to \"force\" load an older D3DCompiler_XX.dll. Not sure if it will work though.\n",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-05-06T18:58:09Z",
        "closed_at": "2016-05-07T18:01:16Z",
        "merged_at": null,
        "body": "",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-05-01T23:19:04Z",
        "closed_at": "2016-05-02T07:48:55Z",
        "merged_at": "2016-05-02T07:48:54Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 42,
        "changed_files": 1,
        "created_at": "2016-04-26T14:05:54Z",
        "closed_at": "2016-05-03T08:48:24Z",
        "merged_at": null,
        "body": "",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 17425,
        "deletions": 0,
        "changed_files": 76,
        "created_at": "2016-04-24T19:51:32Z",
        "closed_at": "2016-07-29T08:23:55Z",
        "merged_at": null,
        "body": "Website for Imgui - Thought it could be useful for users as there isn\u2019t one atm.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 555,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2016-04-24T08:14:07Z",
        "closed_at": "2016-04-28T20:49:52Z",
        "merged_at": null,
        "body": "Dear Omar,\n\nI'm using the ImGui in some projects where I created a 3D World and I realized, there aren't a simple example of how to do that. So I made this pull request with an adaptation of opengl_example with this, to do that I used Glew and added some libs on Makefile, I only was able to test the Makefile with Ubuntu 14.04.\n\nExample:\n![3d](https://cloud.githubusercontent.com/assets/4752636/14766318/23842098-09db-11e6-987e-721476bf7338.png)\n\nSincerely,\nJohnathan Fercher\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 3531,
        "deletions": 0,
        "changed_files": 32,
        "created_at": "2016-04-15T19:49:07Z",
        "closed_at": "2016-04-17T23:53:26Z",
        "merged_at": null,
        "body": "This is a port of the Windows desktop D3D11 example. It's pretty straightforward. I just used one of the wizard generated projects from Visual Studio 2015 as the starting point. The most annoying thing was probably supporting monitor rotations...\n\nThe core imgui files are largely unchanged - all I did there was disable support for the Windows clipboard for now. I'm not sure how much platform specific code like that should be in the core files.\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-04-13T00:18:05Z",
        "closed_at": "2016-04-13T07:52:34Z",
        "merged_at": "2016-04-13T07:52:34Z",
        "body": "This seems like an oversight.\nIt's not a problem the way it's used right now, but since the default value for font_cfg_template is NULL...\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 351,
        "deletions": 15,
        "changed_files": 30,
        "created_at": "2016-04-05T08:09:09Z",
        "closed_at": "2016-04-05T20:43:41Z",
        "merged_at": "2016-04-05T20:43:41Z",
        "body": "ios & osx example share the same project but different targets.\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-04-05T01:42:44Z",
        "closed_at": "2016-04-05T07:23:00Z",
        "merged_at": "2016-04-05T07:23:00Z",
        "body": "Main motivation is to silence the only \"clang -Wall\" message:  \n\n``` cpp\nimgui_demo.cpp:1499:125: error: data argument not used by format string [-Werror,-Wformat-extra-args]\n```\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2016-04-03T02:09:51Z",
        "closed_at": "2016-04-03T10:48:09Z",
        "merged_at": "2016-04-03T10:48:09Z",
        "body": "caught myself accidentally using leftover state from imgui, decided to fix it thoroughly\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-03-24T18:38:14Z",
        "closed_at": "2016-03-26T15:40:00Z",
        "merged_at": "2016-03-26T15:40:00Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2016-03-18T13:06:31Z",
        "closed_at": "2016-03-21T20:09:55Z",
        "merged_at": "2016-03-21T20:09:55Z",
        "body": "The change enables the CheckboxFlags to be cleared and filled by a full mask (for clearing/setting all options at once).\n\n![flags](https://cloud.githubusercontent.com/assets/8817287/13878528/5c47f5d4-ed12-11e5-9d64-2e8a49fbcb33.jpg)\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1643,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2016-03-09T19:05:24Z",
        "closed_at": "2016-04-03T15:43:23Z",
        "merged_at": "2016-04-03T15:43:23Z",
        "body": "- This example needs an update version of GLFW.\n- It currently uses the Vulkan headers from the GLFW repo. We can maybe put that in the libs folder?\n- To keep the code compact i decided to not properly setup Vulkan in main. I don't know if this will be an issue.\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2016-02-24T04:14:31Z",
        "closed_at": "2016-02-24T10:51:23Z",
        "merged_at": null,
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2016-02-12T11:41:40Z",
        "closed_at": "2016-02-15T09:58:44Z",
        "merged_at": null,
        "body": "When `glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)` is called with a non-0 VAO bound, it attaches `ebo` to that VAO's state. This code used to restore the state by calling `glBindBuffer(GL_ELEMENT_ARRAY_BUFFER)` followed by `glBindVertexArray`, and since `g_VaoHandle` is the currently bound VAO it attaches `last_element_array_buffer` to `g_VaoHandle`. \n\nLuckily this wasn't a problem because this code always calls `glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, g_ElementsHandle)` before drawing, which undoes the mistake.\n\nStill, it seems wrong to hold on to a buffer that doesn't actually belong to you.\n\nI think the new call to `glBindBuffer(GL_ELEMENT_ARRAY_BUFFER)` is actually a no-op, since that state is automatically restored when the old VAO is re-bound. Oh well.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 12,
        "created_at": "2016-02-08T13:35:44Z",
        "closed_at": "2016-03-25T21:13:31Z",
        "merged_at": null,
        "body": "keypad-enter will be enabled by this change.\n\nIn `GLFW3`, keypad-enter is `GLFW_KEY_KP_ENTER`.\nBut in the others environments, whether they are correct did not know.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2016-01-31T21:14:27Z",
        "closed_at": "2016-03-02T23:30:42Z",
        "merged_at": "2016-03-02T23:30:42Z",
        "body": "I am implementing a file tree with ImGui (like project viewer) and I needed a way to open file on double click.  So I have added a flag for Selectables to handle double clicks.\n\nI am not sure that this is the right way to do things. But it would be great if ImGui offered such a functionality. So I am sharing my solution.\n\nBTW, thanks for the great library!\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2016-01-20T14:15:02Z",
        "closed_at": "2016-03-25T21:28:21Z",
        "merged_at": null,
        "body": "I noticed when going from my external monitor to my laptop screen (non-retina to retina) that dear imgui wasn't automatically setting the DispalyFrameBufferScale. In SDL at least that's pretty easy by using [SDL_GL_GetDrawableSize](https://wiki.libsdl.org/SDL_GL_GetDrawableSize) and comparing against the window size.\n\nNot sure how to implement for the other examples, but this should make it easier for devs to drop in the SDL impl code and get more logical behavior. \n\nOf course it assumes that one wants to always be in window space, but given that the mouse input only works in window space, it seems like everyone would either need this fix or need to modify the mouse input to scale inversely to handle high DPI.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2016-01-15T01:10:07Z",
        "closed_at": "2016-02-16T08:15:21Z",
        "merged_at": null,
        "body": "Add more information.\n\nIn GLFW implementation, `glfwGetWindowSize(g_Window, &w, &h)` and `glfwGetFramebufferSize(g_Window, &display_w, &display_h)` return zero width and height when render window is minimized. Then `glViewport(0, 0, (GLsizei)fb_width, (GLsizei)fb_height)` reports GL_ERROR when zero parameters.\n\nThanks for this tiny, handful and great open source project!\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 154,
        "deletions": 80,
        "changed_files": 9,
        "created_at": "2016-01-06T06:17:41Z",
        "closed_at": "2016-04-02T20:08:14Z",
        "merged_at": null,
        "body": "Addresses issue raised by me in issue #456, near the bottom.\nChanges these things:\n1. `KeySuper` is now a field in `ImGuiIO`, and is now set by the various backends where it makes sense: GLFW (OpenGL and OpenGL3), SDL (OpenGL and OpenGL3), Allegro and Marmalade. I couldn't figure out if Windows passes Win key events to applications, so I left out the DirectX backends.\n2. Four new fields have been added to `ImGuiIO`; `bool WordMovementUsesAltKey`, `bool ShortcutsUseSuperKey`, `bool DoubleClickSelectsWord`, and `bool MultiSelectUsesSuperKey`. These fields control the new, modified behaviour that I set up.\n3. Made a small patch to stb_textedit such that moving between words follows Linux and OS X behaviour, where the position of the cursor (before or after the space) is dependent on the direction of movement, unlike Windows where it always puts it after the space. A new `#define` has been added.\n\nBased on these fields, on OS X (or when `__APPLE__` is defined), the following changes to text editing take place:\n1. Keyboard shortcuts that traditionally use Ctrl (eg. Copy/Paste, Cut) now use Cmd, when `ShortcutsUseSuperKey == true`.\n2. Double clicking in a text field now selects the word that the cursor is on, instead of the entire field, if `DoubleClickSelectsWord == true`.\n3. Making the cursor jump between words, previously done with Ctrl+Arrow, is now done with Alt, if `WordMovementUsesAltKey == true`.\n\n@ocornut: I didn't put LSuper/RSuper in the enum field for `ImGuiKey_`, since there aren't entries for Ctrl/Alt etc. Given that there's `ImGuiIO::KeySuper`, I don't think they'll be necessary either.\n\nEDIT: looks like I touched a couple more files than I was supposed to, deleted a bunch of trailing spaces which probably doesn't hurt anyone.\n",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 973,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2015-12-03T12:21:11Z",
        "closed_at": "2015-12-03T18:33:08Z",
        "merged_at": "2015-12-03T18:33:08Z",
        "body": "Ported your D3D11 renderer to D3D10 and added sample to solution\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2015-11-30T18:13:39Z",
        "closed_at": "2015-11-30T19:36:06Z",
        "merged_at": "2015-11-30T19:36:06Z",
        "body": "I am currently trying to use ImGui in an injected overlay (think similar to Steam, Overwolf, etc.), so I don't control the device creation parameters. One game I was testing on was failing during vertex and pixel shader creation, and this change fixed it for me. I'm no DirectX expert (well, not yet anyway, that's part of the point of this project), but it appears to me that there should be no adverse side-effects of lowering the targeted shader model given how simple the shaders are? If you think there are please do explain as I'd love to learn (and also know what my options are, as I love your library and wish to be able to continue using it).\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2130,
        "deletions": 0,
        "changed_files": 28,
        "created_at": "2015-11-29T01:21:22Z",
        "closed_at": "2015-12-01T05:43:55Z",
        "merged_at": null,
        "body": "Following the SDL and OpenGL examples here I wanted to see if an example for Android could be made and this is what I was able to come up with. The example is similar to the SDL and OpenGL examples in that it shows 2 windows with the option to make another window. I'm not sure how SDL was able to get the finger inputs because I didn't add that in (but you can move the windows with your finger!). I have a low quality [screenshot](http://i.imgur.com/t6nTbyX.jpg) of my phone running the example.\n\nIt looks like a lot of code but it's mostly due to some of the Android Studio / Gradle fluff and also the entire SDL2 library is added (otherwise the user would have to symbolically link to their SDL source library). The actual example code is only 3 files (plus the ImGui files). The only modified directories are the imgui/examples directory.\n\nI added a README in the android_example/ directory. The main dependencies to run the application are the Android SDK and Android NDK. I used Android Studio but I think Eclipse with the right plugins would work as well. Lastly, a real device that supports OpenGL ES 2 is required as well.\n\nI also modified the .gitignore to reflect the additional Gradle and Android Studio related files.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2015-11-28T06:07:19Z",
        "closed_at": "2015-11-28T09:36:06Z",
        "merged_at": "2015-11-28T09:36:06Z",
        "body": "I think I found these typos in the SDL examples (which I assume were based on the GLFW examples since they shared similar flow).\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2015-11-25T03:41:08Z",
        "closed_at": "2016-01-02T11:22:02Z",
        "merged_at": null,
        "body": "v is updated with the value of the input box on every edit, but it should never be set to a value outside the [v_min, v_max] range.\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2015-11-05T00:01:13Z",
        "closed_at": "2015-11-22T21:24:54Z",
        "merged_at": null,
        "body": "Since the code already implies Unicode through its use of wide strings, we can get rid of the #define on the build command line by explicitly calling the W functions.\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2015-10-25T16:07:23Z",
        "closed_at": "2015-10-30T09:39:59Z",
        "merged_at": "2015-10-30T09:39:59Z",
        "body": "Clarifies the lifetime requirements for the ranges parameter for AddFont\\* functions.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 510,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2015-10-14T21:15:01Z",
        "closed_at": "2015-10-15T10:32:13Z",
        "merged_at": "2015-10-15T10:32:13Z",
        "body": "Modified as requested\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2015-10-14T16:31:13Z",
        "closed_at": "2015-11-19T22:11:18Z",
        "merged_at": null,
        "body": "Simple addition to add ImGuiTextFlags_Password flag for InputText.\nCons: Won't display anything after than 255 characters, doesn't work with multiline.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2015-10-11T23:43:25Z",
        "closed_at": "2015-10-12T08:26:49Z",
        "merged_at": "2015-10-12T08:26:49Z",
        "body": "the inputlayout incorrectly described the POSITION attribute as being\n4D, while ImDrawVert::pos is 2D. This went unnoticed because the buffer\nbinding has a stride of sizeof(ImDrawVert) and the POSITION is treated\nas a float2 in the vertex shader. If you switch POSITION to float4 in\nthe vertex shader (and actually use the z/w in the matrix\nmultiplication) then everything become wacky-looking since it's\ninterpreting the texture coordinates as z/w. On a similar note: It's\nweird that the projection matrix takes z and w into consideration when\nthose don't exist in the shader due to positions being float2s.\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 498,
        "deletions": 4,
        "changed_files": 9,
        "created_at": "2015-10-08T20:44:27Z",
        "closed_at": "2015-10-14T20:55:33Z",
        "merged_at": null,
        "body": "Hi, I've ported your amazing library to the Marmalade platform, please consider to get it into your master.\n\nThank you\nGiovanni Zito\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-10-05T11:46:57Z",
        "closed_at": "2015-10-08T19:00:08Z",
        "merged_at": null,
        "body": "- The idea is that you can't have two MouseReleased (for the same button) on two consecutive frames\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-10-04T20:15:34Z",
        "closed_at": "2015-10-08T18:47:22Z",
        "merged_at": "2015-10-08T18:47:22Z",
        "body": "this allows the GL3 example to build with msys2/mingw\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2015-10-01T19:07:12Z",
        "closed_at": "2015-10-08T18:44:34Z",
        "merged_at": "2015-10-08T18:44:33Z",
        "body": "Discovered this issue while attempting to use the library on a big-endian console system.\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-09-30T17:17:11Z",
        "closed_at": "2015-10-03T17:13:04Z",
        "merged_at": "2015-10-03T17:13:04Z",
        "body": "ocornut, I've corrected a typographical error in the documentation of the [imgui](https://github.com/ocornut/imgui) project. You should be able to merge this pull request automatically. However, if this was intentional or you enjoy living in linguistic squalor please let me know and [create an issue](https://github.com/thoppe/orthographic-pedant/issues/new) on my home repository.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 509,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2015-09-30T14:14:31Z",
        "closed_at": "2015-11-16T21:14:05Z",
        "merged_at": "2015-11-16T21:14:05Z",
        "body": "Previous SDL implementation didn't work for me once I started using modern SDL code (it worked if I ripped out all my rendering code).\nSpliced the GLFW OpenGL examples on top of the SDL example to create an option that works for me, could be useful for others.\n\n![screenshot](https://cloud.githubusercontent.com/assets/1389729/10195516/eab08ba0-6785-11e5-8534-083fe700190b.png)\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2015-09-29T11:06:13Z",
        "closed_at": "2016-04-14T21:00:48Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-09-19T19:13:26Z",
        "closed_at": "2015-09-20T09:26:14Z",
        "merged_at": "2015-09-20T09:26:14Z",
        "body": "When I draw a histogram with many elements (40+ on my computer), some values are rendered twice and some are skipped. It is caused by this code in ImGui::PlotEx:\n\n``` cpp\n    ...\n    for (int n = 0; n < res_w; n++)\n    {\n        const float t1 = t0 + t_step;\n        const int v_idx = (int)(t0 * values_count);\n    ...\n```\n\nProblem is the int cast. \n\nn == 23 -> t0 \\* values_count == 23.0000019 -> v_idx == 23\nn == 24 -> t0 \\* values_count == 23.9999987 -> v_idx == 23\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 525,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2015-09-16T23:32:20Z",
        "closed_at": "2019-04-14T23:36:26Z",
        "merged_at": null,
        "body": "This is a hybrid of examples/sdl_opengl and examples/opengl3. Emscripten/WebGL is based on OpenGL ES 2, which doesn't support the fixed pipeline, but also doesn't support the modern OpenGL shader syntax.\n- SDL2 code adapted from examples/sdl_opengl, modified for Emscripten\n- OpenGL ES code adapted from examples/opengl3, modified for GL ES 2\n- Readme updated with compiler command for emscripten\n",
        "comments": 30
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-09-08T08:24:48Z",
        "closed_at": "2015-09-08T13:44:02Z",
        "merged_at": null,
        "body": "As its last parameter, `glDrawElements` takes a pointer into an array of indices. In the example, `idx_buffer_offset` is initialized to zero, however, and never points to anything. It probably should point to `IdxBuffer.front()`.\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 298,
        "deletions": 258,
        "changed_files": 9,
        "created_at": "2015-08-23T20:24:17Z",
        "closed_at": "2015-08-24T11:51:38Z",
        "merged_at": null,
        "body": "Apart from the removal of trailing whitespace, the main thing about this pull request is the addition of the IO flag `WantInputCharacters`. \n\nIts purpose is to help users of devices with onscreen keyboard (or libraries like SDL2 with their functions `SDL_StartTextInput/SDL_StopTextInput`) make better use of edit boxes, by having an explicit flag showing whether the focus is on a widget which would require text input .\n\nThis doesn't help with having a full IME support though (that would require dealing with the temporary characters), but it's an incremental step forward\n\nThe only relevant commit for the aforementioned change is this one: https://github.com/iboB/imgui/commit/d0ea6b2b921bda70b4289247ed8c169703455e90\n\nThe others are just things I have in my branch: a useless for you CMakeLists, which can be deleted, and the removing of trailing spaces.\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2015-08-23T00:04:41Z",
        "closed_at": "2015-08-23T09:05:39Z",
        "merged_at": "2015-08-23T09:05:39Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-08-18T07:18:57Z",
        "closed_at": "2015-08-20T21:21:01Z",
        "merged_at": "2015-08-20T21:21:01Z",
        "body": "Mac OS X uses `-framework OpenGl` instead of typical `-lGL`.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1207,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2015-08-16T18:12:16Z",
        "closed_at": "2020-09-08T18:10:01Z",
        "merged_at": null,
        "body": "I have some flickering errors for the first frames or so but it's working.\n",
        "comments": 41
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 11,
        "changed_files": 6,
        "created_at": "2015-08-08T18:46:12Z",
        "closed_at": "2015-08-09T16:49:06Z",
        "merged_at": "2015-08-09T16:49:06Z",
        "body": "- Use `_WIN32` instead of `_MSC_VER` for portability\n- Avoid compiler warning in case `WIN32_LEAN_AND_MEAN` is already defined\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 30,
        "changed_files": 6,
        "created_at": "2015-08-08T16:15:38Z",
        "closed_at": "2015-08-08T18:27:12Z",
        "merged_at": "2015-08-08T18:27:12Z",
        "body": "Code like\n\n```\nconst char *text = \"<some non hardcoded text that may contain printf specifiers>\";\nImGui::Text(text);\n```\n\ncan be really dangerous, let the compiler warn about it.\n\nI also fixed these warnings:\n\n```\n../../imgui.cpp:2073:57: warning: field precision should have type 'int', but argument has type 'long' [-Wformat]\n            ImFormatString(name, IM_ARRAYSIZE(name), \"%.*s\", line_end-line_start-2, line_start+1);\n                                                      ~~^~   ~~~~~~~~~~~~~~~~~~~~~\n\n../../imgui.cpp:8884:56: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]\n                ImGui::BulletText(\"Storage: %d bytes\", window->StateStorage.Data.Size * sizeof(ImGuiStorage::Pair));\n                                            ~~         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                            %lu\n\n../../imgui_demo.cpp:59:27: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n        ImGui::SetTooltip(desc);\n                          ^~~~\n../../imgui_demo.cpp:964:25: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n            ImGui::Text(selected_fish == -1 ? \"<None>\" : names[selected_fish]);\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../imgui_demo.cpp:1123:25: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n            ImGui::Text(names[i]); ImGui::NextColumn();\n                        ^~~~~~~~\n../../imgui_demo.cpp:1124:25: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n            ImGui::Text(paths[i]); ImGui::NextColumn(); \n                        ^~~~~~~~\n../../imgui_demo.cpp:1427:64: warning: field width should have type 'int', but argument has type 'unsigned long' [-Wformat]\n                    ImGui::LogText(\"style.Colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);\" IM_NEWLINE, name, 22 - strlen(name), \"\", col.x, col.y, col.z, col.w);\n\n../../imgui_demo.cpp:1865:46: warning: field precision should have type 'int', but argument has type 'long' [-Wformat]\n                    AddLog(\"No match for \\\"%.*s\\\"!\\n\", word_end-word_start, word_start);\n                                          ~~^~        ~~~~~~~~~~~~~~~~~~~\n```\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2015-08-07T09:29:40Z",
        "closed_at": "2015-08-09T10:35:48Z",
        "merged_at": null,
        "body": "rel: https://github.com/ocornut/imgui/issues/293\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2015-08-06T06:42:46Z",
        "closed_at": "2015-08-06T13:33:12Z",
        "merged_at": "2015-08-06T13:33:12Z",
        "body": "Use of inline on externally-visible functions in imgui.cpp causes link errors when compiling imgui_demo.cpp with gcc.\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-07-27T02:21:38Z",
        "closed_at": "2015-07-30T18:14:01Z",
        "merged_at": "2015-07-30T18:14:01Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1791,
        "deletions": 0,
        "changed_files": 9,
        "created_at": "2015-07-21T08:25:05Z",
        "closed_at": "2018-06-11T09:28:19Z",
        "merged_at": null,
        "body": "This is a continuation of #135 updated to latest imgui master\n- Standalone samples that require no GLFW / GL3W\n- Works on Windows and OSX\n- Support for High DPI Displays\n  <img width=\"1032\" alt=\"imguistandalonewindows\" src=\"https://cloud.githubusercontent.com/assets/5406873/8796208/3b9f12c8-2f93-11e5-8536-176d64b7c257.png\">\n  <img width=\"1300\" alt=\"imguistandaloneosx\" src=\"https://cloud.githubusercontent.com/assets/5406873/8796209/3bc3138a-2f93-11e5-9869-079e18dfc009.png\">\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2015-07-08T22:00:47Z",
        "closed_at": "2015-07-08T23:02:28Z",
        "merged_at": "2015-07-08T23:02:28Z",
        "body": "",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 46,
        "changed_files": 1,
        "created_at": "2015-07-08T06:54:02Z",
        "closed_at": "2015-07-08T16:29:39Z",
        "merged_at": "2015-07-08T16:29:39Z",
        "body": "Here's fixes to the ios example for the anti-alias branch. Unfortunately opengl ES doesn't support glDrawElementsBaseVertex, so I can't draw things quite as nicely as the opengl3 example, instead I'm modifying the index buffer from imgui before I draw it. Which seems to work, and is ok with me, but not sure if you'll want this since this is an example.  We might want to get rid of the bit (which I copied from the opengl3 example) that combines all the vertex data into one buffer, and instead do a separate BindVertexArray for each draw call. If you know a cleaner way to do this, let me know. \n\nIt works though, and the antialiasing looks really nice on my retina ipad. \n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2015-07-03T06:50:14Z",
        "closed_at": "2015-07-03T14:17:33Z",
        "merged_at": null,
        "body": "Bunch of warning fixes for clang. Not sure if you want to take these as is or just try to fix the code but I will leave this here so you can take a look at it least.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 676,
        "deletions": 2,
        "changed_files": 16,
        "created_at": "2015-07-01T14:01:50Z",
        "closed_at": "2022-09-28T10:09:33Z",
        "merged_at": null,
        "body": "You can test the build simply by running `./cmake-testbuild.sh`. It builds imgui + opengl examples. \n\nI tested it on Windows (msysgit prompt) and Linux. Requires CMake >= 2.8.12.\n\nRest of the commit msg:\n- cmakelist for imgui, installs config module\n- cmakelist for opengl and opengl3 examples\n- cmake-testbuild.sh to test cmake build\n- tested on windows, linux\n",
        "comments": 25
    },
    {
        "merged": false,
        "additions": 3184,
        "deletions": 0,
        "changed_files": 25,
        "created_at": "2015-06-20T17:05:02Z",
        "closed_at": "2015-07-15T19:09:41Z",
        "merged_at": null,
        "body": "This is the iOS default Xcode \"OpenGL\" template (which draws two spinning cubes), modified to support iOS and uSynergy. More details in the README.md in the ios_example directory. It's based mainly on the glfw and opengl3 examples.  Tested on iOS8 on iPad and iPhone (iPhone works but the screen gets reaallly crowded).\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2015-05-27T23:13:00Z",
        "closed_at": "2015-05-28T07:19:14Z",
        "merged_at": "2015-05-28T07:19:14Z",
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 407,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2015-05-25T07:42:56Z",
        "closed_at": "2015-07-08T15:50:29Z",
        "merged_at": "2015-07-08T15:50:29Z",
        "body": "Impl & main sample only\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2015-05-22T07:31:17Z",
        "closed_at": "2015-06-02T08:34:47Z",
        "merged_at": null,
        "body": "Otherwise, the ActiveId may be reset to 0 before we have a chance to get pressed returned as true.\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-05-18T22:33:14Z",
        "closed_at": "2015-05-19T09:36:23Z",
        "merged_at": "2015-05-19T09:36:23Z",
        "body": "Later versions of OSX require forward compatible gl contexts. \nRunning example on OSX 10.10 currently results in:\nError 65543: NSGL: The targeted version of OS X only supports forward-compatible contexts for OpenGL 3.2 and above\nSegmentation fault: 11\n\nThis conditionally adds appropriate window hint for apple platforms.\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 518,
        "deletions": 2,
        "changed_files": 7,
        "created_at": "2015-05-15T10:35:06Z",
        "closed_at": "2015-05-25T07:41:32Z",
        "merged_at": null,
        "body": "SDL2 lib + inc\nAnd opengl2 example.\nWarning level4\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2015-05-11T14:17:58Z",
        "closed_at": "2015-05-11T15:54:12Z",
        "merged_at": "2015-05-11T15:54:12Z",
        "body": "This small commit adds the possibility to specify input flags to all InputFloatN and InputIntN widgets, simply by propagating the option to the children InputFloat and InputInt widgets.\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2015-05-10T20:43:52Z",
        "closed_at": "2015-05-11T08:26:00Z",
        "merged_at": "2015-05-11T08:26:00Z",
        "body": "Fixes bug for AltGr->Ctrl+Alt on windows. Obviously the whitespace would need to be changed.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-05-07T02:08:46Z",
        "closed_at": "2015-06-10T16:58:53Z",
        "merged_at": null,
        "body": "You can reproduce this by removing anything that goes to Debug window from one of the example projects and then try to open a popup in the ImGui Test window.\n\nThis seems to be introduced by commit a906738. Empty Debug window gets deactivated by ImGui::Render(), which causes WasActive getting incorrectly set to false on next NewFrame, which then causes Debug window to get focused as if it just got newly opened, therefore closing the popup.\n\n(this is a fixed pull request, the previous one did didn't fix the problem properly)\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2015-04-24T06:50:49Z",
        "closed_at": "2015-05-01T08:44:46Z",
        "merged_at": null,
        "body": "",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2015-04-16T22:55:17Z",
        "closed_at": "2015-04-17T07:09:07Z",
        "merged_at": "2015-04-17T07:09:07Z",
        "body": "",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-04-08T20:56:42Z",
        "closed_at": "2015-04-08T21:58:34Z",
        "merged_at": "2015-04-08T21:58:34Z",
        "body": "",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2015-04-03T14:12:50Z",
        "closed_at": "2015-04-14T08:45:57Z",
        "merged_at": "2015-04-14T08:45:57Z",
        "body": "On my Linux system, GLFW 3.1.1, the key callback handles modifier keys incorrectly.  Pressing the modifier will set the flag true, but releasing it does not.  The only way to unset the modifiers is to hit a non-modifier key.\n\nThis issue does not seem to be present on my MacBook Pro.\n",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2015-03-22T16:54:17Z",
        "closed_at": "2015-03-26T16:08:08Z",
        "merged_at": null,
        "body": "At first I assert()d ImDrawList::AddDrawCmd() to detect these at their source, but it seems that ImGui generates these pretty often, so I just made the GL example implementations clamp their sizes down to 0 in these cases.\n",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2015-03-21T08:12:17Z",
        "closed_at": "2015-03-21T10:15:35Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2015-03-20T19:12:46Z",
        "closed_at": "2015-03-20T22:53:23Z",
        "merged_at": "2015-03-20T22:53:23Z",
        "body": "Pull request for #169 issue.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2015-03-20T02:38:09Z",
        "closed_at": "2015-03-20T08:37:13Z",
        "merged_at": "2015-03-20T08:37:13Z",
        "body": "If you are using your own assert by defining IM_ASSERT in imconfig.h then assert.h file is not included and assert macro could be not available.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-03-19T06:05:57Z",
        "closed_at": "2015-03-19T09:07:02Z",
        "merged_at": null,
        "body": "Compiling with clang results in this warning:\n\n```\ndalekim1@lispy:/home/dalekim1/imgui/examples/opengl_example [master]> time make -j8\nclang++ -I../../ `pkg-config --cflags glfw3` -Wall -c -o ../../imgui.o ../../imgui.cpp\n../../imgui.cpp:4829:32: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n    const bool is_non_linear = abs(power - 1.0f) > 0.0001f;\n                               ^\n../../imgui.cpp:4829:32: note: use function 'std::abs' instead\n    const bool is_non_linear = abs(power - 1.0f) > 0.0001f;\n                               ^~~\n                               std::abs\n../../imgui.cpp:4829:32: note: include the header <cmath> or explicitly provide a declaration for 'std::abs'\n1 warning generated.\nclang++ -o imgui_example main.o imgui_impl_glfw.o ../../imgui.o -I../../ `pkg-config --cflags glfw3` -Wall `pkg-config --static --libs glfw3`\nBuild complete for Linux\n```\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 247,
        "deletions": 149,
        "changed_files": 2,
        "created_at": "2015-03-06T23:09:28Z",
        "closed_at": "2015-03-09T12:04:31Z",
        "merged_at": null,
        "body": "Won't merge as is but submitting for reference.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2015-02-28T20:53:16Z",
        "closed_at": "2015-03-01T20:05:20Z",
        "merged_at": "2015-03-01T20:05:20Z",
        "body": "The function was declared in the header, but when I tried to call it in my own code, I hit a linker error since it wasn't defined!\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2015-02-28T08:42:41Z",
        "closed_at": "2015-02-28T10:30:29Z",
        "merged_at": null,
        "body": "Hey Omar!\n\nFound another issue which I might have a fix for.\n\n```\nImGui::Begin(\"Bottom window\");\n\nImGui::Text(\"Buttons in this region do not take focus\");\nImGui::BeginChild(\"child\", ImVec2(0.0f, 100.0f), true);\nImGui::Button(\"Won't focus 1\");\nImGui::Button(\"Won't focus 2\");\nImGui::Button(\"Won't focus 3\");\nImGui::Button(\"Won't focus 4\");\nImGui::EndChild();\n\nImGui::Text(\"But these do\");\nImGui::Button(\"Focus 1\");\nImGui::Button(\"Focus 2\");\nImGui::Button(\"Focus 3\");\nImGui::Button(\"Focus 4\");\nImGui::End();\n\nImGui::Begin(\"Top window\");\nImGui::End();\n```\n\nWhen \"Top window\" has focus and you click on buttons inside the child region of \"Bottom window\", the bottom window does not take focus.\n\nSleuthing around the code, I noticed that ImGui::Begin() has some logic to find the root of the window and FocusWindow() doesn't do this.  I copied the code from https://github.com/ocornut/imgui/blob/17685dae87a94c6501d09e968fe53505181fcc87/imgui.cpp#L2722-L2730, which seems to fix the issue.\n\n-Dale Kim\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2015-02-23T19:42:57Z",
        "closed_at": "2015-02-23T20:46:19Z",
        "merged_at": "2015-02-23T20:46:19Z",
        "body": "Saw the new commits and version you pushed out.  I noticed a regression when I updated my programs with it, where clicking on column borders to resize would cause them to quickly move to the left, even if I didn't move the mouse.\n\nLooked at the code real quick and noticed something a little fishy when x values were subtracted with something referencing y, and then noticed it was also a bool.  Switched it back to g.Style.ScrollBarWidth and things seemed to get back to normal!\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1926,
        "deletions": 0,
        "changed_files": 11,
        "created_at": "2015-02-20T21:02:11Z",
        "closed_at": "2015-07-20T09:55:53Z",
        "merged_at": null,
        "body": "![imgui shot](https://cloud.githubusercontent.com/assets/5406873/6309306/4957558c-b94c-11e4-8fad-86fdf71f21ca.png)\nThis sample compiles on OSX without any dependency. \nJust open the Xcode project and hit run. \nIt can even be compiled on command line, as doesn\u2019t use Interface Builder but straight Cocoa API.\nHandles Retina Display resolution.\n\nTested on XCode 6.1.1 with OSX 10.10\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2015-02-04T19:33:55Z",
        "closed_at": "2015-02-04T22:18:57Z",
        "merged_at": "2015-02-04T22:18:57Z",
        "body": "I find this quite handy for styling very simple toolbars (ImageButton + SameLine), here is an example:\n![toolbar](https://cloud.githubusercontent.com/assets/7255954/6047858/851f89ce-acac-11e4-8cd7-c84fdd5063af.png)\n\n(I hope I created the pull request correctly, first time doing this..)\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 145,
        "deletions": 122,
        "changed_files": 3,
        "created_at": "2015-02-01T17:14:57Z",
        "closed_at": "2015-02-04T08:43:22Z",
        "merged_at": "2015-02-04T08:43:22Z",
        "body": "In order to support the library living in several different executables, but sharing state (e.g. DLL)\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 151,
        "deletions": 131,
        "changed_files": 2,
        "created_at": "2015-02-01T00:19:23Z",
        "closed_at": "2015-02-01T14:46:22Z",
        "merged_at": null,
        "body": "",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2015-01-28T20:34:09Z",
        "closed_at": "2015-01-29T09:10:48Z",
        "merged_at": "2015-01-29T09:10:48Z",
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2014-11-30T10:27:45Z",
        "closed_at": "2014-11-30T12:25:21Z",
        "merged_at": "2014-11-30T12:25:21Z",
        "body": "Changed mouse wheel to float. The previous scrolling logic was way too fast on OSX, especially when using the inertia scrolling.\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2014-11-20T18:25:21Z",
        "closed_at": "2015-07-02T16:03:57Z",
        "merged_at": null,
        "body": "",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 32,
        "changed_files": 2,
        "created_at": "2014-11-17T19:38:34Z",
        "closed_at": "2014-11-18T07:40:51Z",
        "merged_at": "2014-11-18T07:40:51Z",
        "body": "",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2014-11-14T06:55:12Z",
        "closed_at": "2014-11-15T11:42:35Z",
        "merged_at": null,
        "body": "Emscripten is 4 bytes aligned in memory and fails unaligned reads silently unless you specify \"-s SAFE_HEAP=1\" on the linker command line. This was resulting on the block_size to be read incorrectly and the default embedded font not to be loaded. \nmemcpy bypasses the alignment and sets a correct block_size.\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8087,
        "deletions": 0,
        "changed_files": 14,
        "created_at": "2014-11-12T11:17:15Z",
        "closed_at": "2014-12-05T12:01:45Z",
        "merged_at": null,
        "body": "...or glfw3 glut/freeglut SDL2 and WIndowsAPI\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 26400,
        "deletions": 2,
        "changed_files": 31,
        "created_at": "2014-10-06T00:27:06Z",
        "closed_at": "2015-07-08T19:17:15Z",
        "merged_at": null,
        "body": "I have added a basic SDL2 example directory. Thus, opengl_example now includes both a glfw_example and sdl2_example directory. I have tested both glfw and sdl2 directories building on OSX 10.9.4. I have not tested SDL2 on Windows, and in fact windows-specific `#defines` and `functions` were removed.\n\nThe SDL2 example is the ultimate bare-minimum to have the widgets showing. There is no keyboard-mapping, for example. As well, SDL2 must already be installed (not included within the example directory itself).\n\nThe example could be changed to include the TestWindow, but I know when I first looked at the repository I wanted an example that was the ultimate bare-minimum to get going, so I thought I would implement that. If people want extra functionality, they can look at the other example files to see what else can be added.\n\nJust my thoughts, let me know!\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2014-10-05T05:07:51Z",
        "closed_at": "2014-10-05T08:12:26Z",
        "merged_at": null,
        "body": "Just in case a project has adverse reactions to adding globals or statics in their own code.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 36,
        "changed_files": 3,
        "created_at": "2014-09-30T04:29:50Z",
        "closed_at": "2014-09-30T07:58:03Z",
        "merged_at": "2014-09-30T07:58:03Z",
        "body": "Combined 2 Makefiles to 1. \n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2014-09-19T21:30:24Z",
        "closed_at": "2014-09-24T12:40:47Z",
        "merged_at": "2014-09-24T12:40:47Z",
        "body": "",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2014-09-08T13:53:23Z",
        "closed_at": "2014-09-08T15:37:16Z",
        "merged_at": "2014-09-08T15:37:16Z",
        "body": "See Issue #42 and the discussion in PR #43\n\nI'm sorry, but I managed to break my last PR, it now points to an unknown repository.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2014-09-05T13:08:32Z",
        "closed_at": "2014-09-08T13:35:13Z",
        "merged_at": null,
        "body": "My current solution for Issue #42\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2014-09-03T05:28:47Z",
        "closed_at": "2014-09-04T23:04:01Z",
        "merged_at": null,
        "body": "I think that [imconfig.h](https://github.com/ocornut/imgui/blob/master/imconfig.h) should _not_ be included globaly, but included on the project level.\n\nWhen it's global it's difficult to create shared libraries because now you have **two** header files to deal with. And, no one wants an extra header files that they don't need hanging around in `/usr/lib/`.\n\nIt would be better for the user to include this at the top of their main file before including [imgui.h](https://github.com/ocornut/imgui/blob/master/imgui.h) on as-needed basis.\n\nI created an [AUR package](https://aur.archlinux.org/packages/imgui/) and it's kinda hack-ish to remove this line with sed. I'd rather it not be the default.\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 28983,
        "deletions": 0,
        "changed_files": 16,
        "created_at": "2014-08-26T22:17:41Z",
        "closed_at": "2014-12-03T18:40:06Z",
        "merged_at": null,
        "body": "I'm unsure if this is wanted as it would be another thing to support but I created a OpenGL 3.3 port of the example project.\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2014-08-26T11:57:49Z",
        "closed_at": "2014-08-26T13:28:40Z",
        "merged_at": "2014-08-26T13:28:40Z",
        "body": "The variable `v0` is not used inside the for loop (and also not later). Therefore, there is no need to update its value at each iteration. \n\nBest regards and many thanks for consider merging\n\nMartin Ettl\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2014-08-26T11:46:08Z",
        "closed_at": "2014-09-10T11:23:03Z",
        "merged_at": null,
        "body": "This commit fixes further resource leaks.\n\nBest regards and many thanks for consider merging\n\nMartin Ettl\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2014-08-24T22:48:36Z",
        "closed_at": "2014-08-25T15:56:45Z",
        "merged_at": "2014-08-25T15:56:45Z",
        "body": "Please review my changes. They fix several resource leaks (forgot to close a previous open file pointer).\n\nMany thanks for considering merging\n\nMartin Ettl\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2014-08-22T21:04:44Z",
        "closed_at": "2014-08-25T15:58:54Z",
        "merged_at": "2014-08-25T15:58:54Z",
        "body": "Using the example code in another application that has other rendering\ncode can cause rendering bugs or memory access errors if client state\nis not disabled.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 45,
        "changed_files": 3,
        "created_at": "2014-08-19T13:26:30Z",
        "closed_at": "2014-08-20T09:43:31Z",
        "merged_at": null,
        "body": "This changes address type conversion compilation warnings when such warnings are enabled in the compiler.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2014-08-16T20:34:53Z",
        "closed_at": "2014-08-17T09:44:55Z",
        "merged_at": null,
        "body": "Text in windows previously ran closer to the edges of windows than, for example, CollapsingHeaders.  Now they both end at the same place.  This makes it look better, in my opinion.\n\nBefore: \n![before](https://cloud.githubusercontent.com/assets/4635095/3943032/991c94e4-2584-11e4-82ac-4829e68e95e3.PNG)\n\nAfter: \n![after](https://cloud.githubusercontent.com/assets/4635095/3943033/9d19e34e-2584-11e4-8ead-235639ab86f5.PNG)\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 117,
        "deletions": 52,
        "changed_files": 3,
        "created_at": "2014-08-16T09:13:58Z",
        "closed_at": "2014-08-31T10:31:45Z",
        "merged_at": null,
        "body": "My first attempt at overriding memory allocations for _ImGui_: \n- Malloc/Free callbacks added to `ImGuiIO` (`MallocFn` and `FreeFn`)\n",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2014-08-15T20:45:32Z",
        "closed_at": "2015-07-02T16:03:10Z",
        "merged_at": null,
        "body": "If the flag is set, the example tries to behave as if the ImGui\nwindows were first-class citizens in OS windowing.\nThis does not, in anyway, modifies the ImGui functionality but only shows how it can be used to set up \"independent\" windows.\n\nThe current approach has a few limitations:\n- framerate is significantly lower than in the original example\n- mouse movements that start inside the window cannot extend to the outside\n  it, that is, resizing, moving and scrolling does not work too good\n- the process is not closed when all of the windows are closed\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2014-08-13T03:27:51Z",
        "closed_at": "2014-08-13T12:50:09Z",
        "merged_at": null,
        "body": "> Unfortunately that's not the scope or purpose of this library.\n\nThat actually clarifies things quite a bit for me. Wandering along from Hacker News, the README didn't really get that point across, that this is really intended as an embedded GUI kit for OpenGL/D3D sorts of applications. The screenshots and sample C++ code in the README don't show that context, either. When I went back and read it earlier today I caught both the \"renderer agnostic\" and the mentions in the Credits section. So I think we're getting on the same page here.\n\n(I still have uses in mind, but they're very slightly different from what I was originally thinking.)\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2014-08-12T00:58:10Z",
        "closed_at": "2014-08-15T20:25:33Z",
        "merged_at": null,
        "body": "I added a Makefile to help build the OpenGL example for MacOS Mavericks. I wouldn't expect you to include these changes directly, but having some kind of build instructions would be helpful for people that want to play around with the examples.\n\nTwo small things that came up were setting up an OpenGL 3.2 context (not an OpenGL developer, just following hints from Google) and defining nullptr.\n\nThis is working for me, though it is linking against homebrew's `glew` and `glfw3`, not the ones included in the repo.\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2014-08-11T19:45:40Z",
        "closed_at": "2014-08-11T22:37:53Z",
        "merged_at": "2014-08-11T22:37:53Z",
        "body": "Added on hover colors for checkboxes and radio buttons and allowed clicks on the label as well as the icon.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2014-08-11T03:57:14Z",
        "closed_at": "2014-08-11T14:08:10Z",
        "merged_at": null,
        "body": "This was causing the text have the right side of each char cut off in opengl.  Sorry for the messy commit structure ( new to github ), but the idea is simple, add a setting to imgui::imguistyle that has the offset.  default to 0.0f, and change it to 0.5f in <= d3d9, leave 0.0f for ogl & d3d10+.\n",
        "comments": 2
    }
]