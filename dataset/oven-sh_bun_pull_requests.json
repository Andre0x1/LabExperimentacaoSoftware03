[
    {
        "merged": true,
        "additions": 221,
        "deletions": 54,
        "changed_files": 2,
        "created_at": "2023-10-21T04:14:51Z",
        "closed_at": "2023-10-21T05:38:46Z",
        "merged_at": "2023-10-21T05:38:46Z",
        "body": "### What does this PR do?\r\nfixes #2990 \r\nfixes #6254 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-20T15:40:14Z",
        "closed_at": "2023-10-20T18:26:19Z",
        "merged_at": "2023-10-20T18:26:19Z",
        "body": "\u2026 in `tsconfig.json`\r\n\r\nThe line is already added to `compilerOptions` in `tsconfig.json` so there is no need to edit the file.\r\n\r\n    \"types\": [\r\n      \"bun-types\" // add Bun global\r\n    ]\r\n\r\nThis was already added when the project initialized it seems.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 187,
        "deletions": 18,
        "changed_files": 3,
        "created_at": "2023-10-20T09:31:20Z",
        "closed_at": "2023-10-20T10:55:41Z",
        "merged_at": "2023-10-20T10:55:40Z",
        "body": "### What does this PR do?\r\n\r\nContinuation from #6611\r\n\r\n- Sorts list of dependencies from npm before serializing the manifest\r\n- Handles pre/post tags\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nAdded more tests",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 42,
        "changed_files": 9,
        "created_at": "2023-10-20T09:25:50Z",
        "closed_at": "2023-10-20T10:27:11Z",
        "merged_at": "2023-10-20T10:27:11Z",
        "body": "### What does this PR do?\r\nalso fixes an bug where optional peer dependencies were not marked as optional\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 94,
        "deletions": 21,
        "changed_files": 6,
        "created_at": "2023-10-20T04:08:11Z",
        "closed_at": "2023-10-20T05:38:05Z",
        "merged_at": "2023-10-20T05:38:05Z",
        "body": "### What does this PR do?\r\n\r\nUses `JSC::getCalculatedDisplayName` for getting function names instead of  \r\n\r\n```zig\r\n\u276f bun /tmp/a.js\r\n[Function]\r\n\r\n\u276f bun-debug /tmp/a.js\r\n[Function: f]\r\n\r\n\u276f cat /tmp/a.js\r\n       \u2502 File: /tmp/a.js\r\n   1   \u2502 var f = (x) => x;\r\n   2   \u2502 f.length;\r\n   3   \u2502 console.log(f);\r\n```\r\n\r\nNote that we do need to address a transpiler issue where inlining causes names of functions to be lost. This impacts `const` and `let`. We should assign these to their declared names instead. This is not possible to do for arrow functions, but is possible to do for regular functions.\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-20T02:50:50Z",
        "closed_at": "2023-10-20T09:18:37Z",
        "merged_at": "2023-10-20T09:18:37Z",
        "body": "### What does this PR do?\r\n\r\nFixes `findBestMatch`.\r\n\r\n### Bug Explained\r\n\r\n`findBestMatch` was picking the *first* version that satisfies semver range, but registries don't return versions in any particular order. \r\n\r\nThis was easily repeatable with `lines-and-columns@^1.1.6`, it would always pick the first version `1.2.0`, which happens to be deprecated and broken, instead of the _best_ match, which is `1.2.4`.\r\n\r\nThis PR should help with a bunch of install-related bugs:\r\n* fixes #5914\r\n* fixes #5506\r\n* fixes #5504\r\n* fixes #3873\r\n* fixes #6489\r\n* And probably others...\r\n\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- This includes a test that was failing before this PR was added: #6489\r\n\r\n### This modifies zig code\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n\r\n### First time Zig user\r\n\r\nI've contributed to Bun before, but this is my first time contributing to the zig code. I installed Zig and its dependencies this morning. I'm happy to accept input to improve this PR!",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 63,
        "changed_files": 2,
        "created_at": "2023-10-20T00:29:17Z",
        "closed_at": "2023-10-20T02:17:38Z",
        "merged_at": "2023-10-20T02:17:38Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-19T20:17:27Z",
        "closed_at": "2023-10-20T04:28:59Z",
        "merged_at": "2023-10-20T04:28:59Z",
        "body": "### What does this PR do?\r\nWhen adding a git url as package which was already added, it would replace the existing with a faulty entry using a key with the url, this is because there was a step where both the entries would be present before resolving so the new entry did not have the actual name yet leading to preemtively adding it.\r\nWhen the name then got resolved the logic matched but the key wasnt updated so it replaced the correct one.\r\n\r\nThis prevents the addititon to begin with by checking if the version matches any values.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-19T14:30:21Z",
        "closed_at": "2023-10-20T20:02:35Z",
        "merged_at": "2023-10-20T20:02:35Z",
        "body": "## TLDR\r\nupdates `napi_wrap()` so that it it's refCount starts with 0 instead of 1 to match the behavior of node.js\r\n\r\n## Details\r\nwhile trying to get [`node-usb`](https://github.com/node-usb/node-usb) running with bun, it always failed because close() is only allowed when there are no open references.\r\n\r\nhttps://github.com/node-usb/node-usb/blob/7e0182df8cfc684f6ec0cc59691c79731bdb459f/src/node_usb.h#L39-L41\r\n```c++\r\n    inline void ref(){ refs_ = Ref();}\r\n    inline void unref(){ refs_ = Unref();}\r\n    inline bool canClose(){return refs_ == 0;}\r\n```\r\n\r\n`Ref()` and `Unref()` are both called once, with node.js resulting in `refs_ == 0` (which is expected), but with bun `refs_ == 1`.\r\n\r\nI've made this small script to reproduce the bug:\r\nhttps://github.com/alangecker/bun-ref-bug/blob/main/binding.cc\r\n```\r\nrun with bun 1.0.6:\r\n - refcount: 2 (expected: 1)\r\nrun with node 20.8.1:\r\n - refcount: 1 (expected: 1)\r\n```\r\n\r\nduring a long debugging journey I found out, that buns `NapiRef::ref()` is also just called once (as expected), but within `napi_wrap()` the `NapiRef` gets initialized already with the refCount set to 1\r\n\r\nhttps://github.com/oven-sh/bun/blob/378385ba60900be7bd797923c219ec489101f2f5/src/bun.js/bindings/napi.cpp#L669\r\nAfter changing it to `new NapiRef(globalObject, 0)` it got the expected behavior / same as with node.js and node-usb works. as far as I understand it, a `NapiRef` with refCount=0 should then be weak instead of strong, which is why I have changed this too.\r\n\r\n### What does this PR do?\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n- I've ran the `make test-all` which fails with the same set of tests as without the change^^\r\n- I've manually tested some modules using the napi API\r\n\r\n## unclear to me\r\n1. should the Reference really be changed to be weak?\r\n2. does this change have any other implications / breaking something?\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-19T09:15:08Z",
        "closed_at": "2023-10-20T21:43:03Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdd IPA pronunciation to project name in documentation.\r\n\r\nReference: https://www.dictionary.com/browse/bun\r\n\r\n- [x] Documentation or TypeScript types\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 202,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-19T01:25:28Z",
        "closed_at": "2023-10-20T21:01:58Z",
        "merged_at": "2023-10-20T21:01:58Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Code changes\r\n\r\nThis PR fixes an issue with the IV calculation that was caused by an incorrect writeUIntBE function call. It includes basic unit tests for Cipher & Decipher that cover most of the encryption modes available in Bun at the moment.\r\n\r\n1. IV fix comes from [this PR](https://github.com/browserify/browserify-aes/pull/57) to [browserify/browserify-aes](https://github.com/browserify/browserify-aes).\r\n2. Some of the unit tests are adapted from the [nodejs/node](https://github.com/nodejs/node).\r\n\r\n### How did you verify your code works?\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-18T17:13:51Z",
        "closed_at": "2023-10-20T00:29:31Z",
        "merged_at": "2023-10-20T00:29:31Z",
        "body": "### What does this PR do?\r\nAdd **Append content to a file** guide in [Writing files](https://bun.sh/guides/write-file) chapter.\r\nThis PR resolves #6559.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-18T13:45:43Z",
        "closed_at": "2023-10-18T19:57:46Z",
        "merged_at": "2023-10-18T19:57:46Z",
        "body": "### What does this PR do?\r\n\r\nFixes a broken link.\r\n\r\nhttps://bun.sh/docs/install/utilities was going to a 404 (a default Vercel styled 404), I've changed this to https://bun.sh/docs/cli/pm (note that the Help Docs are not complete - there's actually more commands like `bun pm migrate` which are in the Docs).\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\nNo, but it's a very simple change (see commit diff).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-18T07:36:49Z",
        "closed_at": "2023-10-18T21:30:54Z",
        "merged_at": "2023-10-18T21:30:54Z",
        "body": "### What does this PR do?\r\n\r\nClose: #6570\r\nClose: #3639\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 21,
        "changed_files": 4,
        "created_at": "2023-10-18T00:13:21Z",
        "closed_at": "2023-10-20T05:24:46Z",
        "merged_at": "2023-10-20T05:24:46Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes an issue where the `port` in the `Host` header was not defined on WebSocket upgrade. This also removes 2 cache headers that are not needed.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T10:58:05Z",
        "closed_at": "2023-10-17T15:59:06Z",
        "merged_at": "2023-10-17T15:59:06Z",
        "body": "### What does this PR do?\r\n\r\nI just simplified the filter for `index.d.ts` a little.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 29,
        "changed_files": 7,
        "created_at": "2023-10-17T03:35:41Z",
        "closed_at": "2023-10-17T23:34:03Z",
        "merged_at": "2023-10-17T23:34:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T23:32:02Z",
        "closed_at": "2023-10-18T17:04:46Z",
        "merged_at": "2023-10-18T17:04:46Z",
        "body": "This stub implements `performance.getEntriesByName` to return a empty array. I'm not famiilar enough yet with the codebase to entirely implement the api but this might be a short term solution.\r\n\r\nShould fix(i didn't verify this): https://github.com/oven-sh/bun/issues/6537\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI tested that the function does return a empty array.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 33,
        "changed_files": 15,
        "created_at": "2023-10-16T20:51:12Z",
        "closed_at": "2023-10-16T22:14:16Z",
        "merged_at": "2023-10-16T22:14:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2575,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-10-16T16:24:58Z",
        "closed_at": "2023-10-18T21:31:31Z",
        "merged_at": "2023-10-18T21:31:31Z",
        "body": "### What does this PR do?\r\n\r\nthis pr ports postgres.js tests for bun's postgresql client\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 42,
        "changed_files": 1,
        "created_at": "2023-10-16T14:18:02Z",
        "closed_at": "2023-10-19T00:40:26Z",
        "merged_at": "2023-10-19T00:40:26Z",
        "body": "### What does this PR do?\r\n\r\nClose: #5315. \r\n\r\nPlease take a look at this https://github.com/oven-sh/bun/issues/5315#issuecomment-1719291283 first. About the IPv6 hosts, see the discussion in https://github.com/moby/moby/issues/35954. \r\n\r\nPreviously, uWebSockets would iterate the results of `getaddrinfo` in order of IPv6 and IPv4 priorities, and if it failed, it would return an error immediately. This PR will attempt to bind to the IPv4 address under the same hostname when IPv6 fails (if the hostname is bound to both IPv6 and IPv4).\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nmanual testing.\r\n\r\n#### Test step \r\n\r\nThis issue can also be reproduced on the host machine.\r\n\r\n- index.js\r\n\r\n```JavaScript\r\nconst net = require(\"net\");\r\n\r\nconst server = new net.Server();\r\n\r\nserver.on(\"listening\", () => {\r\n  console.log(\"listen success\");\r\n  server.close();\r\n});\r\n\r\nserver.on(\"error\", err => {\r\n  console.log(err);\r\n  server.close();\r\n});\r\n\r\nserver.listen(3000, \"localhost\");\r\n```\r\n\r\nAdd following lines to your `/etc/hosts`.\r\n\r\n```\r\n127.0.0.1 localhost\r\n::1     localhost ip6-localhost ip6-loopback\r\n```\r\n\r\nThen disable ipv6 on loopback interface.\r\n\r\n```Bash\r\nsudo sysctl net.ipv6.conf.lo.disable_ipv6=1\r\n```\r\n\r\nRun `index.js`, Bun 1.0.6 will print \r\n\r\n```\r\nerror: Failed to listen at localhost\r\n code: \"EADDRNOTAVAIL\"\r\n```\r\n\r\nUse this pr's patch will print \"listen success\".\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-15T23:59:03Z",
        "closed_at": "2023-10-16T20:37:14Z",
        "merged_at": "2023-10-16T20:37:14Z",
        "body": "### What does this PR do?\r\n\r\nThis fix toStrictEqual on compare two same URLs.\r\n\r\nThis line on **Bun__deepEquals**, always return false if the URLs are equal on strict.\r\n`return url1->wrapped().href() != url2->wrapped().href();`\r\n\r\nOn toStrictEqual should continue checking additional properties like toEqual.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\nFixes: #6492 \r\nCorrelated issue: https://github.com/oven-sh/bun/issues/4089\r\nCorrelated fix: https://github.com/oven-sh/bun/pull/4105\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 18,
        "changed_files": 6,
        "created_at": "2023-10-15T20:14:25Z",
        "closed_at": "2023-10-16T22:19:38Z",
        "merged_at": "2023-10-16T22:19:38Z",
        "body": "### What does this PR do?\r\n\r\nAdd threadId property missing on `Worker` instance from `node:worker_threads` module.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T17:44:48Z",
        "closed_at": "2023-10-16T23:41:41Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nMore accurate description of import.meta.dir\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-15T02:49:22Z",
        "closed_at": "2023-10-20T05:26:28Z",
        "merged_at": "2023-10-20T05:26:28Z",
        "body": "In the docs it seamed to suggest this is something supported, it seamed to be only supported in JSDOMFiles or blob. \r\n\r\nThis Adds the 2 properties `type` and `lastModified` to be supported on `Bun.file`\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6507\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-14T00:53:39Z",
        "closed_at": "2023-10-14T03:37:49Z",
        "merged_at": "2023-10-14T03:37:49Z",
        "body": "### What does this PR do?\r\nfixes #6449 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested issue manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T19:21:03Z",
        "closed_at": "2023-10-20T09:18:40Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nTest showing lines-and-columns@^1.1.6 always installs the wrong version.\r\n\r\n* It always installs `1.2.0` which is deprecated and not  he latest semver matching version.\r\n* The latest semver-matching version is `1.2.4`.\r\n\r\nThis PR does not include a fix. I can probably pick up Zig, but I don't know where the bug is occurring.\r\n\r\nThis issue is discussed further in #5914.\r\n\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThis test verifies that an existing bug.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n- [X] I included a test for existing code",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-13T18:22:46Z",
        "closed_at": "2023-10-14T23:16:50Z",
        "merged_at": "2023-10-14T23:16:50Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFix: #6071\r\nFix: #6121\r\nFix: #4982\r\nFix: #5902 \r\nFix: #1623 \r\n\r\npg should execute big queries and exit with this code:\r\n```js\r\nconst client = new pg.Client({\r\n     connectionString: DATABASE_URL,\r\n     ssl: { rejectUnauthorized: false },\r\n});\r\nawait client.connect();\r\nconst res = await client.query(`SELECT * FROM users LIMIT 1000`);\r\nconsole.log(res.rows);\r\nawait client.end()\r\n```\r\nsequelize should work and exit with this code:\r\n```js\r\nconst sequelize = new Sequelize(DATABASE_URL, {dialect: 'postgres'});\r\nconsole.log(await sequelize.query('SELECT * FROM users LIMIT 1000;', {type: QueryTypes.SELECT}))\r\nawait sequelize.close()\r\n```\r\n\r\nknex should work and exit now with this code:\r\n```js\r\n\r\nimport Knex from \"knex\";\r\n\r\nconst knex = Knex({\r\n  client: \"pg\",\r\n  connection: DATABASE_URL,\r\n});\r\n\r\nconst { rows } = await knex.raw(\"`SELECT * FROM users LIMIT 1000\");\r\nconsole.log(rows);\r\nawait knex.destroy();\r\n```\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated test + existing tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T08:47:06Z",
        "closed_at": "2023-10-13T16:33:45Z",
        "merged_at": "2023-10-13T16:33:45Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes an obvious typo in CONTRIBUTING.md\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T08:16:18Z",
        "closed_at": "2023-10-14T01:03:32Z",
        "merged_at": "2023-10-14T01:03:32Z",
        "body": "### What does this PR do?\r\n\r\nAdds basic documentation on how to containerize  a bun application using docker\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 267,
        "deletions": 99,
        "changed_files": 15,
        "created_at": "2023-10-13T02:52:14Z",
        "closed_at": "2023-10-17T03:01:24Z",
        "merged_at": "2023-10-17T03:01:24Z",
        "body": "### What does this PR do?\r\n\r\nFixes #6394, this also does a pass over the code I wrote and improves it a bit.\r\n\r\nResults of the organizing this means we have this new binding:\r\n\r\n```zig\r\nconst serialized = value.serialize(globalThis) orelse return false;\r\ndefer serialized.deinit();\r\n\r\nwriter.write(serialized.data); // .data is a []const u8\r\n```\r\n\r\nHave to test more but this may finally fix Next.js/Nuxt IPC issues.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 43,
        "changed_files": 2,
        "created_at": "2023-10-13T00:20:37Z",
        "closed_at": "2023-10-14T00:47:05Z",
        "merged_at": "2023-10-14T00:47:05Z",
        "body": "### What does this PR do?\r\n\r\nFixes `Bun.dns` and `node:dns` from returning incorrect addresses when a `family` is specified. This was because we were not setting the proper hints.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\nCloses #6452\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 42,
        "changed_files": 12,
        "created_at": "2023-10-12T22:11:09Z",
        "closed_at": "2023-10-13T02:38:33Z",
        "merged_at": "2023-10-13T02:38:33Z",
        "body": "### What does this PR do?\r\n\r\n- bump version\r\n- Workaround https://github.com/ziglang/zig/issues/16197 by using explicit `@as`\r\n- Changes to std library and `@fabs` -> `@abs`\r\n- typo toJSReponse -> toJSRe**s**ponse\r\n\r\nzig builds on M2 go from ~55 second --> ~50 second \ud83c\udf89",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T19:40:11Z",
        "closed_at": "2023-10-16T20:43:44Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\nIt is a failing test I believe should pass. This test passes if the value written is in the range `[0x00, 0x7F]` but fails if the value written is in the range `[0x80, 0xFF]`. I filed [this bug report](https://github.com/oven-sh/bun/issues/6467) that links to this PR.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-12T14:36:56Z",
        "closed_at": "2023-10-12T20:51:24Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n1. Fix typo in the zsh code tab\r\n2. arrange the order to align with the code tabs\r\n3. add a direct troubleshooting to add the installation path based on the shell name.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n\r\ncc: @colinhacks \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T13:26:45Z",
        "closed_at": "2023-10-13T18:14:58Z",
        "merged_at": "2023-10-13T18:14:58Z",
        "body": "### What does this PR do?\r\n\r\nAdds a guide for using `systemd` to run a bun application as a daemon\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-12T11:56:43Z",
        "closed_at": "2023-10-16T22:17:13Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n\r\n\r\nadds an instant dev enviroment configuration for gitpod\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 453,
        "deletions": 12,
        "changed_files": 12,
        "created_at": "2023-10-12T10:01:30Z",
        "closed_at": "2023-10-17T20:18:14Z",
        "merged_at": "2023-10-17T20:18:14Z",
        "body": "### What does this PR do?\r\n\r\n- Close: https://github.com/oven-sh/bun/issues/6413\r\n- Close: https://github.com/oven-sh/bun/issues/5850\r\n\r\n\r\nPreviously, when obtaining the address, we used the `hostname` field, which could result in getting the string `localhost`. This PR implemented the `address()` function in zig side.\r\n\r\nhttps://github.com/oven-sh/bun/blob/1bf28e0d77a8b2261befbdb708cefd03e0126960/src/js/node/http.ts#L448-L457\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T09:04:59Z",
        "closed_at": "2023-10-12T22:11:36Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 146,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2023-10-12T04:39:09Z",
        "closed_at": "2023-10-12T22:02:05Z",
        "merged_at": "2023-10-12T22:02:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T17:02:45Z",
        "closed_at": "2023-10-16T22:18:27Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThe command bun install -g @oven/zig doesn't register ZIG path in my ZSH environment, adding the simple instructions above whe fix them adding all bun/bin in my zig environment\r\n\r\nexport PATH=\"$PATH:$HOME/.bun/bin\"\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-11T05:55:01Z",
        "closed_at": "2023-10-16T22:31:14Z",
        "merged_at": "2023-10-16T22:31:14Z",
        "body": "### What does this PR do?\r\n\r\nFixes the missing subprocess argument in the ipc handler\r\n\r\n- Documentation or TypeScript types (it's okay to leave the rest blank in this case) (Added in a separate PR)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests for IPC and tested using the built version\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-10T12:39:33Z",
        "closed_at": "2023-10-10T22:35:06Z",
        "merged_at": "2023-10-10T22:35:06Z",
        "body": "### What does this PR do?\r\n\r\nAdding the missing documentation for the IPC feature on Bun.spawn\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T11:51:58Z",
        "closed_at": "2023-10-10T22:36:28Z",
        "merged_at": "2023-10-10T22:36:28Z",
        "body": "### What does this PR do?\r\n\r\nremoval of incorrect information about **bunx** `--bun` flag : \"After Bun 1.0 this flag will no longer be necessary.\"\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 344,
        "deletions": 17,
        "changed_files": 8,
        "created_at": "2023-10-10T07:20:23Z",
        "closed_at": "2023-10-11T03:05:58Z",
        "merged_at": "2023-10-11T03:05:58Z",
        "body": "### What does this PR do?\r\nmakes `install.peer` default to true in `bunfig.toml`. also makes installing peer dependencies work\r\n\r\nfixes #5567\r\ncloses #5565 \r\nfixes #5209 \r\nfixes #5128 \r\nfixes #4472 \r\nfixes #3410 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-10T01:19:54Z",
        "closed_at": "2023-10-14T00:52:57Z",
        "merged_at": "2023-10-14T00:52:57Z",
        "body": "### What does this PR do?\r\n\r\nThis implement deprecated node DNS lookup behavior.\r\nReference: [https://nodejs.org/api/deprecations.html#DEP0118](https://nodejs.org/api/deprecations.html#DEP0118)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\nFixes #5547",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 303,
        "deletions": 61,
        "changed_files": 29,
        "created_at": "2023-10-10T00:50:00Z",
        "closed_at": "2023-10-10T02:56:48Z",
        "merged_at": "2023-10-10T02:56:48Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis fix fetch behavior on error cases, fix HTTP destroying too early causing missing parts/events not to be emitted, fix AbortSignal.timeout, fix proper closing/ending off fetch when aborted, and also fix the state of readable streams to be used not only empty.\r\n\r\nFix #6366\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-09T06:03:52Z",
        "closed_at": "2023-10-11T03:08:32Z",
        "merged_at": "2023-10-11T03:08:32Z",
        "body": "fix for #6012 \r\n\r\n```\r\nstd.fs.path.extension(filename_str); \r\n// return extension name with a dot(.) the ex: somefile.pdf -> .pdf\r\n```\r\n\r\n```\r\nbun.HTTP.MimeType.byExtensionNoDefault()\r\n// expects extension name without any dot(.)  \r\n```\r\n\r\n\r\nverified the code runs on my local build\r\n\r\n![image](https://github.com/oven-sh/bun/assets/20675891/d21b856d-8055-4ae8-9315-d86841e9ff88)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T04:49:47Z",
        "closed_at": "2023-10-09T18:47:00Z",
        "merged_at": "2023-10-09T18:47:00Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nBefore\r\n<img width=\"270\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/5362563/8111a133-1103-4112-869d-1972fa7e98e3\">\r\n\r\nAfter\r\n<img width=\"255\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/5362563/6e893333-3226-4ad6-b254-5ef50db1f5b3\">\r\n\r\n\r\nThe preview of array variables in the debugger view is sorted and misleading\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nBuild the local version of extension and verify it in the vscode\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-10-09T02:34:41Z",
        "closed_at": "2023-10-11T04:13:42Z",
        "merged_at": "2023-10-11T04:13:42Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds serialization and deserialization of the trustedDependencies field from the package.json field in the lockfile. I added an 8 byte flag to the lockfile to indicate if the field is present or not.\r\n\r\nPlease let me know if you'd like this change implemented differently and I'd be happy to make changes.\r\n\r\nThis PR closes #5472 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-08T12:35:57Z",
        "closed_at": "2023-10-14T00:51:37Z",
        "merged_at": "2023-10-14T00:51:37Z",
        "body": "### What does this PR do?\r\n\r\nThis PR fixes the `path` field in error messages within `Bun.write`. Close: #6336\r\n\r\n#### 1\r\n```JavaScript\r\n// 1. `./baz.txt` exists.\r\n// 2. `foo/` doesn't exist.\r\nawait Bun.write('./foo/bar.txt', Bun.file('./baz.txt'));\r\n\r\n// Output:\r\n// ENOENT: No such file or directory\r\n//    path: \"./baz.txt\"\r\n//  syscall: \"open\"\r\n//    errno: -2\r\n\r\n```\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L2292\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L2197-L2200\r\n\r\nThe `path` field in the error message will use the value from the second parameter. This happens because in the `doOpenFile` function, we do not assign the `path` field to the error, the error context is incomplete. And when rejecting, it defaults to the source's path.\r\n\r\n----\r\n\r\n#### 2\r\n```JavaScript\r\nawait Bun.write(\"./foo/bar.txt\", \"\");\r\n\r\n// Output\r\n// 1 | await Bun.write(\"./foo/bar.txt\", \"\");\r\n//          ^\r\n// ENOENT: No such file or directory\r\n//  syscall: \"open\"\r\n//    errno: -2\r\n\r\n```\r\n\r\nIn the `writeStringToFileFast` function, the `path` field is not assigned.\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L1043C1-L1043C1\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 504,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-08T09:19:57Z",
        "closed_at": "2023-10-19T09:27:14Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nSupport CMake as meta build system, and hopefully deprecating GNU Make soon.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-07T20:44:33Z",
        "closed_at": "2023-10-09T18:52:16Z",
        "merged_at": "2023-10-09T18:52:16Z",
        "body": "### What does this PR do?\r\n\r\nAdds build commands for Fedora to the codetabs in development.md\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 32,
        "changed_files": 1,
        "created_at": "2023-10-07T16:31:48Z",
        "closed_at": "2023-10-10T22:38:28Z",
        "merged_at": null,
        "body": "The Vite guide references running Vite commands using `bunx --bun vite`. This should no longer be required since Bun 1.0 (according to documentation on the same page), so we can fall back to `bun run` instead.\r\n\r\n### What does this PR do?\r\n\r\nThis replaces the instructions for running Vite with `bunx  --bun` with 'regular' `bun run` commands.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 41621,
        "deletions": 251,
        "changed_files": 53,
        "created_at": "2023-10-07T07:41:11Z",
        "closed_at": "2023-10-11T09:27:07Z",
        "merged_at": "2023-10-11T09:27:07Z",
        "body": "### What does this PR do?\r\n\r\nIf you do not have a `bun.lockb`, but a `package-lock.json` exists, this PR reads that data and generates a bun lockfile in memory, and uses that for the install.\r\n\r\nI think the migration can be made faster, but people will ideally only run this once per project, so it is fine.\r\n\r\n<img width=\"562\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/7b970e30-6cb6-405d-bb53-c0e48e4e7a69\">\r\n\r\nIf a `yarn.lock` or `pnpm-lock.yaml` exists, a warning is printed\r\n\r\n<img width=\"752\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/b17dbd33-e60f-4bdd-a38c-3257826341db\">\r\n\r\nAll of the above only happens if no `bun.lockb` is present. so this has no perf impact on existing projects.\r\n\r\nYou can also run `bun pm migrate` to run just the migrator code path, useful for testing.\r\n\r\nThere are some situations where this migration is not 100% accurate to what npm installs, which is due to bugs and limitations/optimizations of Bun's package hoisting logic.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T19:47:15Z",
        "closed_at": "2023-10-07T02:22:38Z",
        "merged_at": "2023-10-07T02:22:38Z",
        "body": "Returning `undefined` simply falls through to the next plugin, or to the default loader.\r\nThis behaviour is defined by esbuild, and supported by Bun, but the types don't reflect it properly. This PR fixes that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-06T00:58:09Z",
        "closed_at": "2023-10-09T18:48:07Z",
        "merged_at": "2023-10-09T18:48:07Z",
        "body": "### What does this PR do?\r\n\r\nFixing a couple typos I found looking at the docs.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T14:11:02Z",
        "closed_at": "2023-10-09T18:52:40Z",
        "merged_at": null,
        "body": "Make `Install` section on par with https://bun.sh/docs/installation\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T13:37:34Z",
        "closed_at": "2023-10-09T18:49:50Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis change is for Developers documentation, so it informs the developers that they need to install unzip before installing bun.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- ### How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-10-05T09:28:18Z",
        "closed_at": "2023-10-05T23:43:59Z",
        "merged_at": "2023-10-05T23:43:59Z",
        "body": "### What does this PR do?\r\n\r\n- Fix `close_connection` behaviour. When `should_connection` is `true`, set `state |= HTTP_CONNECTION_CLOSE`.\r\n- Fix incomplete HTTP response, adding the `\\r\\n` between the header and body (even empty).\r\n\r\nClose: #6031\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T08:11:54Z",
        "closed_at": "2023-10-09T18:51:41Z",
        "merged_at": "2023-10-09T18:51:41Z",
        "body": "added commands to install unzip package and to check Linux kernel version\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 18,
        "changed_files": 4,
        "created_at": "2023-10-05T03:42:58Z",
        "closed_at": "2023-10-05T05:46:21Z",
        "merged_at": "2023-10-05T05:46:21Z",
        "body": "### What does this PR do?\r\nfixes #5027\r\nfixes #5691 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-05T01:03:51Z",
        "closed_at": "2023-10-05T04:28:23Z",
        "merged_at": "2023-10-05T04:28:23Z",
        "body": "#6309\r\n\r\nPerhaps the root of the problem is that `this[kInternalSocketData]` should be set at this point..? This just uses optional chaining through the whole expression make this more crash-resistant anyway.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T22:27:08Z",
        "closed_at": "2023-10-10T22:39:20Z",
        "merged_at": "2023-10-10T22:39:20Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-04T18:35:29Z",
        "closed_at": "2023-10-09T18:47:38Z",
        "merged_at": "2023-10-09T18:47:38Z",
        "body": "The exit code support is between 0-255 and not only in the signed positive range (0-127).\r\nNode.js does not seam to throw on a bigger integer and just wraps around, but throwing a error is a good approach and makes the behaviour more defined.\r\n\r\nThis allows the range to be 0-255.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6284\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-04T15:46:50Z",
        "closed_at": "2023-10-05T04:29:55Z",
        "merged_at": "2023-10-05T04:29:55Z",
        "body": "### What does this PR do?\r\n\r\nThis updates the bunfig documentation to make it obvious that this is where plugins should be passed. It might seem obvious with the current documentation. I promise you, it's not.\r\n\r\n- [X] Documentation or TypeScript types\r\n- [ ] Code changes\r\n\r\nFixes https://github.com/oven-sh/bun/issues/6297",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T14:01:57Z",
        "closed_at": "2023-10-05T23:43:43Z",
        "merged_at": "2023-10-05T23:43:43Z",
        "body": "### What does this PR do?\r\n\r\nThis removes the check in SubtleCrypto importKey() for JWK Ed25519 \"alg\" member values. These have been removed in https://github.com/WICG/webcrypto-secure-curves/pull/24\r\n\r\nThe other portion (JWK Ed25519 \"alg\" member export) was not even implemented as far as i can see.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 165,
        "deletions": 1,
        "changed_files": 7,
        "created_at": "2023-10-04T12:39:15Z",
        "closed_at": "2023-10-11T03:27:20Z",
        "merged_at": "2023-10-11T03:27:20Z",
        "body": "### What does this PR do?\r\n\r\n\r\n- [x] adds `toEqualIgnoringWhitespace` to bun test utils\r\n- [x] adds `strings.removeWhitespace` to zig strings utils\r\n\r\n### How did you verify your code works?\r\n- [x] I ran bun test on `expect.test.js` & `jest-extended.test.js`\r\n- [x] I included a test for the new code\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\nrelated to https://github.com/oven-sh/bun/issues/1825\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T11:29:17Z",
        "closed_at": "2023-10-09T18:50:08Z",
        "merged_at": "2023-10-09T18:50:08Z",
        "body": "fixed some minor documentation.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-04T11:03:49Z",
        "closed_at": "2023-10-10T19:59:09Z",
        "merged_at": null,
        "body": "### What does this PR do?\n\nCloses #6287\n\n<!-- **Please explain what your changes do**, example: -->\n\n<!--\n\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\n\n-->\n\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\n- [ ] Code changes\n\n### How did you verify your code works?\n\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\n\n<!-- I wrote automated tests -->\n\n<!-- If JavaScript/TypeScript modules or builtins changed:\n\n- [ ] I ran `make js` and committed the transpiled changes\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\n- [ ] I included a test for the new code, or an existing test covers it\n\n-->\n\n<!-- If Zig files changed:\n\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\n- [ ] I or my editor ran `zig fmt` on the changed files\n- [ ] I included a test for the new code, or an existing test covers it\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\n-->\n\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\n\n- [ ] I added TypeScript types for the new methods, getters, or setters\n-->\n\n<!-- If dependencies in tests changed:\n\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\n-->\n\n<!-- If functions were added to exports.zig or bindings.zig\n\n- [ ] I ran `make headers` to regenerate the C header file\n\n-->\n\n<!-- If \\*.classes.ts files were added or changed:\n\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\n-->\n\n<!-- If a new builtin ESM/CJS module was added:\n\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\n- [ ] I added a test that imports the module\n- [ ] I added a test that require() the module\n-->\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-10-04T06:17:22Z",
        "closed_at": "2023-10-05T23:03:22Z",
        "merged_at": "2023-10-05T23:03:22Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2023-10-04T04:55:22Z",
        "closed_at": "2023-10-05T04:29:35Z",
        "merged_at": "2023-10-05T04:29:35Z",
        "body": "### What does this PR do?\r\n\r\nMicro-optimize AbortSignal a little\r\n\r\n- Slightly reduce memory usage of `AbortSignal` by setting the inline capacity of the `Vector`  used within to 2 instead of the default of 6\r\n- Instead of creating a JS object for AbortSignal, we can create the C++ one and lazily create the GC'd version\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 305,
        "changed_files": 8,
        "created_at": "2023-10-03T23:35:30Z",
        "closed_at": "2023-10-10T23:34:35Z",
        "merged_at": "2023-10-10T23:34:35Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n### Reason and Changes\r\n\r\n#### Added **Scaffolding** section (`docs/scaffolding/`)\r\n* The project creation (folder scaffolding) should not put inside intro, it should be a new section before cli `bun run`\r\n* Intro shall focus on the overall first time usage, like how to install and Quickstart.\r\n* `bun init` and `bun create` shall be separated into two different sub pages, as users shall use either `bun init` or `bun create` to scaffold a new project.  (`docs/scaffolding/bun-create.md` and `docs/scaffolding/bun-init.md`)\r\n* typescript settings shall be part of the scaffolding, not intro. (`docs/scaffolding/typescript.md`)\r\n\r\n#### Extracted `bun add --global` into separate sub page. (`docs/install/global-install.md`)\r\n* `bun add --global` is not to adding package to the local project folder.\r\n* As it does not modify any file (e.g. `package.json`) inside the local project folder, it should be extracted as a new sub page.\r\n\r\n#### Relocated or Removed obsoleted files `docs/typescript.md`, `docs/cli/bun-init.md`, and `docs/templates.md`\r\n\r\n#### Added Information in `installation.md` for the manual global installation setup in macOS / Linux (bash).\r\n\r\n#### Updated `nav.ts` accordingly\r\n\r\n#### Updated `README.md` for the revised docs path.\r\n\r\n#### Added `bun --version` and `bun --revision` in `installation.md` for users to check the installation.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-03T21:27:35Z",
        "closed_at": "2023-10-05T04:31:29Z",
        "merged_at": "2023-10-05T04:31:29Z",
        "body": "### What does this PR do?\r\n\r\n`parseUrl(url).query` is supposed to be an object and not a `URLSearchParams`\r\n\r\n### How did you verify your code works?\r\n\r\nI didn't, this needs a test",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T13:15:18Z",
        "closed_at": "2023-10-07T14:48:33Z",
        "merged_at": null,
        "body": "Example of requestIP usage\r\n\r\n### What does this PR do?\r\n\r\nThis add a new example in the Bun.serve doc to explain how to get a request IP.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-03T08:45:33Z",
        "closed_at": "2023-10-03T19:03:57Z",
        "merged_at": "2023-10-03T19:03:57Z",
        "body": "### What does this PR do?\r\n\r\nClose: #6252\r\n\r\n```JavaScript\r\nconst blob = new Blob([\"0123456789\"]);\r\nconsole.log(await blob.slice(2, 8).slice(0, 3).text());\r\n// Output:\r\n// node: 234\r\n// bun: 012\r\n```\r\n\r\n`offset` is overwritten by `relativeStart`, causing `blob.slice().slice()` to always use the parameters from the last `slice` call. This Add the current `offset` to the new blob slice.\r\n\r\nhttps://github.com/oven-sh/bun/blob/47651f321ae5eb82686da5d759e9b1b5b12340ad/src/bun.js/webcore/blob.zig#L3010-L3012\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 346,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2023-10-03T07:40:57Z",
        "closed_at": "2023-10-03T09:17:25Z",
        "merged_at": "2023-10-03T09:17:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T05:42:10Z",
        "closed_at": "2023-10-03T16:11:53Z",
        "merged_at": "2023-10-03T16:11:53Z",
        "body": "### What does this PR do?\r\n\r\nUse token from cookies, not from ws.data\r\n\r\n- [x ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/a\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T04:06:22Z",
        "closed_at": "2023-10-03T16:11:03Z",
        "merged_at": "2023-10-03T16:11:03Z",
        "body": "### What does this PR do?\r\n\r\nAdd MIT as license information in the package.json of `bun-types`\r\n\r\n### How did you verify your code works?\r\n\r\nNo code changed\r\n\r\n### Assumtions\r\n\r\n`bun-types` is distributed under MIT just like the rest of the Bun project as indicated here: https://bun.sh/docs/project/licensing\r\n\r\n\r\n### Background\r\n\r\nI use bun for bundling and testing, so I depend on bun-types. But without the license information in the package.json I get this FOSSA warning\r\n\r\n![image](https://github.com/oven-sh/bun/assets/1063454/e5ee6382-65bd-45c5-8240-3dcaa8c9e5c9)\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-03T00:20:50Z",
        "closed_at": "2023-10-04T00:39:45Z",
        "merged_at": "2023-10-04T00:39:45Z",
        "body": "### What does this PR do?\r\n\r\n```sh\r\nbun run doesnotexist # => exits with 1\r\nbun run --if-present doesnotexist # => exits with 0\r\n```\r\n\r\nCloses #5670\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-02T23:51:16Z",
        "closed_at": "2023-10-03T01:00:17Z",
        "merged_at": "2023-10-03T01:00:17Z",
        "body": "### What does this PR do?\r\n\r\n`bun install` would previously read `GITHUB_API_DOMAIN` to check for Github's API. This environment variable does not exist in Github Actions, it is instead `GITHUB_API_URL`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-10-02T20:45:20Z",
        "closed_at": "2023-10-03T00:59:39Z",
        "merged_at": "2023-10-03T00:59:39Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds a warning on start when the SIMD-enabled build of Bun is used on a CPU that lacks SIMD support\r\n\r\n\r\nWhen using a SIMD-enabled build of Bun when the CPU doesn't support SIMD, Bun may crash with an \"Illegal Instruction\" error and no other explanation\r\n\r\nWe detect this in the install scripts, but it doesn't always seem to work and Zig doesn't support multi function versioning (https://github.com/ziglang/zig/issues/1018). \r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManual",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T00:44:18Z",
        "closed_at": "2023-10-03T16:12:38Z",
        "merged_at": "2023-10-03T16:12:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nUpdate the `tsconfig.json` file generated from the `bun init` command shown in the documentation to the `tsconfig.json` generated from the actual `bun init`.\r\n\r\nThe screenshot below is the code of the `tsconfig.json` file created with `bun init` in `bun@1.0.3`.\r\n\r\n<img width=\"400\" alt=\"bun\" src=\"https://github.com/oven-sh/bun/assets/39112954/f393fa1f-3725-4f8e-b76e-0210f7515812\">\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-01T22:52:07Z",
        "closed_at": "2023-10-02T22:18:55Z",
        "merged_at": "2023-10-02T22:18:55Z",
        "body": "### What does this PR do?\r\n\r\nUpdate development.md.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-01T20:39:51Z",
        "closed_at": "2023-10-01T23:55:05Z",
        "merged_at": "2023-10-01T23:55:05Z",
        "body": "### What does this PR do?\r\n\r\nWhen trying to find the relevant package.json file\r\n\r\nInstead of openat(cwd, dir) -> openat(dir, \"package.json\"), just do openat(dir + \"/package.json\") essentially\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 19,
        "changed_files": 3,
        "created_at": "2023-10-01T20:16:20Z",
        "closed_at": "2023-10-03T01:01:59Z",
        "merged_at": "2023-10-03T01:01:59Z",
        "body": "### What does this PR do?\r\n\r\n- Set the default timeout for `fetch` to 5 minutes instead of 60 seconds\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-01T06:32:53Z",
        "closed_at": "2023-10-20T05:27:36Z",
        "merged_at": "2023-10-20T05:27:36Z",
        "body": "### What does this PR do?\r\n\r\nLambda string response doesn't need to be stringified. This is especially important when we want to respond to services such as Congito, which require JSON output.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdded type check for string:\r\n\r\n```javascript\r\nbody: response === null ? null : (typeof response === 'string' ? response : JSON.stringify(response)),\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-01T03:37:50Z",
        "closed_at": "2023-10-01T19:55:38Z",
        "merged_at": "2023-10-01T19:55:38Z",
        "body": "### What does this PR do?\r\n\r\n`process.kill` should return `true` on success, not `undefined`. It affected some code used to test for the existence of a process. e.g.\r\n \r\n```JavaScript\r\nfunction processExist(pid) {\r\n  try {\r\n    return kill(pid, 0);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nconsole.log(processExist(process.pid));\r\nconsole.log(processExist(234234));\r\n```\r\n\r\nRef: https://github.com/nodejs/node/blob/092fb9f541ce8cc07289b5a69eb93892445739f5/lib/internal/process/per_thread.js#L211-L237\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-10-01T01:59:32Z",
        "closed_at": "2023-10-01T05:59:43Z",
        "merged_at": "2023-10-01T05:59:43Z",
        "body": "### What does this PR do?\r\n\r\n\"Connection refused\" and connection timeouts can be caused by the first initial socket address returned in `getaddrinfo` being unable to connect. So we must loop through the linked list of socket addresses returned to find one which does successfully connect. This PR does that. Previously, we were not doing that.\r\n\r\nThis is likely to fix the following, but these are all difficult to reproduce so it's pretty hard to know for sure.\r\n\r\nFixes #4066\r\nFixes #6204\r\nFixes #5548\r\nFixes #6101\r\nFixes #4832\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 172,
        "deletions": 22,
        "changed_files": 5,
        "created_at": "2023-09-30T07:02:20Z",
        "closed_at": "2023-09-30T09:50:38Z",
        "merged_at": "2023-09-30T09:50:38Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 204,
        "deletions": 22,
        "changed_files": 6,
        "created_at": "2023-09-30T02:39:00Z",
        "closed_at": "2023-09-30T03:45:52Z",
        "merged_at": "2023-09-30T03:45:52Z",
        "body": "### What does this PR do?\r\n\r\n- Fixes a hang in the HTTP client that could occur in `bun install` on installs with manifest cached\r\n- Fixes an infinite loop that could occur when\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5831\r\nFixes https://github.com/oven-sh/bun/issues/4066\r\nFixes https://github.com/oven-sh/bun/issues/4561 (msot likely)\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T01:01:43Z",
        "closed_at": "2023-10-05T23:12:07Z",
        "merged_at": "2023-10-05T23:12:07Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nAdds a test that was missing in https://github.com/oven-sh/bun/pull/6122\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Just a test case\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nRan locally\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 29,
        "changed_files": 10,
        "created_at": "2023-09-29T20:44:38Z",
        "closed_at": "2023-09-29T23:17:54Z",
        "merged_at": "2023-09-29T23:17:54Z",
        "body": "### What does this PR do?\r\n\r\nMainly handles Unix Socket cases. In node:http, `socket()` should return {} on unix socket. In `server.requestIp` this returns null.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdds a test for unix sockets.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 622,
        "deletions": 111,
        "changed_files": 17,
        "created_at": "2023-09-29T10:15:13Z",
        "closed_at": "2023-09-29T23:34:21Z",
        "merged_at": "2023-09-29T23:34:21Z",
        "body": "### What does this PR do?\r\n\r\nDefine a virtual module that can be imported or required \r\n\r\nDefine a plugin:\r\n```js\r\nimport { plugin } from \"bun\";\r\nplugin({\r\n  name: \"i am virtual!\",\r\n  setup(builder) {\r\n    builder.module(\"my-virtual-module-async\", async () => {\r\n      // check\r\n      await Bun.sleep(1);\r\n      return {\r\n        exports: {\r\n          hello: \"world\",\r\n        },\r\n        loader: \"object\",\r\n      };\r\n    });\r\n\r\n    builder.module(\"my-virtual-module-sync\", () => {\r\n      return {\r\n        exports: {\r\n          hello: \"world\",\r\n        },\r\n        loader: \"object\",\r\n      };\r\n    });\r\n  },\r\n});\r\n```\r\n\r\nExample usage:\r\n```ts\r\n  it(\"modules are overridable\", async () => {\r\n    // @ts-expect-error\r\n    let { hello, there } = await import(\"my-virtual-module-sync\");\r\n    expect(there).toBeUndefined();\r\n    expect(hello).toBe(\"world\");\r\n\r\n    Bun.plugin({\r\n      setup(builder) {\r\n        builder.module(\"my-virtual-module-sync\", () => ({\r\n          exports: {\r\n            there: true,\r\n          },\r\n          loader: \"object\",\r\n        }));\r\n      },\r\n    });\r\n\r\n    {\r\n      const { there, hello } = require(\"my-virtual-module-sync\");\r\n      expect(there).toBe(true);\r\n      expect(hello).toBeUndefined();\r\n    }\r\n\r\n    Bun.plugin({\r\n      setup(builder) {\r\n        builder.module(\"my-virtual-module-sync\", () => ({\r\n          exports: {\r\n            yo: true,\r\n          },\r\n          loader: \"object\",\r\n        }));\r\n      },\r\n    });\r\n\r\n    {\r\n      // @ts-expect-error\r\n      const { there, hello, yo } = await import(\"my-virtual-module-sync\");\r\n      expect(yo).toBe(true);\r\n      expect(hello).toBeUndefined();\r\n      expect(there).toBeUndefined();\r\n    }\r\n  });\r\n```\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 553,
        "deletions": 47,
        "changed_files": 20,
        "created_at": "2023-09-29T09:24:03Z",
        "closed_at": "2023-09-29T10:39:26Z",
        "merged_at": "2023-09-29T10:39:26Z",
        "body": "### What does this PR do?\r\n\r\nImplements `server.requestIp`; Fixes #3540\r\n\r\nSupersedes #4559, thank you Parzival for getting the initial work, mainly around actually getting to the IP address. I added port support, trying to optimize the # of calls, as well as implement a lightweight object for JS.\r\n\r\nThis also makes `node:http` socket.address/remoteAddress/remotePort/remoteFamily work\r\n\r\nDoes not fix #4660 but this probably lays out most of the work for it to work.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-29T05:42:00Z",
        "closed_at": "2023-10-02T22:18:29Z",
        "merged_at": "2023-10-02T22:18:29Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-29T02:53:10Z",
        "closed_at": "2023-09-29T06:20:26Z",
        "merged_at": "2023-09-29T06:20:26Z",
        "body": "### What does this PR do?\r\n\r\nWe are reporting an older version of Node v18 that some packages are specifically checking and throwing errors on as being outdated. This upgrades the reported version to latest.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-09-28T23:37:24Z",
        "closed_at": "2023-09-29T23:13:50Z",
        "merged_at": "2023-09-29T23:13:50Z",
        "body": "In the case of creating a Request with the parameters `(Request, object)`, there was a bug that method and headers are set from the default created by the init rather then the already present value from the request param. This is because for a to me unknown reason the order in which the parameters are processed is reversed.\r\n\r\nThis fixes that by adding a check which stops the defaults from being set, unless they are explicitly passed, but only in this specific case.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6144\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T23:05:52Z",
        "closed_at": "2023-10-18T18:49:10Z",
        "merged_at": "2023-10-18T18:49:10Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 272,
        "deletions": 241,
        "changed_files": 11,
        "created_at": "2023-09-28T20:56:10Z",
        "closed_at": "2023-10-16T22:57:17Z",
        "merged_at": "2023-10-16T22:57:17Z",
        "body": "### What does this PR do?\r\n\r\nRestructures `Response`/`Body` a little, moving `Body.Init` under `Response`.  Also adds `statusText` handling to `Response.Init` (which fixes the linked bug).  This had a few other knock-on effects, like moving `@\"200\"`/`@\"404\"` out of `Body` (again to `Response`.)\r\n\r\nfixes #5753\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote a some tests to handle various cases.\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 25,
        "changed_files": 5,
        "created_at": "2023-09-28T10:33:27Z",
        "closed_at": "2023-09-29T02:06:04Z",
        "merged_at": "2023-09-29T02:06:04Z",
        "body": "### What does this PR do?\r\n\r\nWe were not reporting the `RequestContext`'s memory allocation to the GC, which led small incoming HTTP requests to use more memory than necessary.\r\n\r\nElysia:\r\n|After|Before|\r\n|----|--------|\r\n|<img width=\"221\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/3de5f94b-8ca1-47ef-8d51-fe71843e6c48\">|<img width=\"239\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/8ee3d0af-a68b-4d56-9855-e1a69fd1b41d\">|\r\n\r\n\r\nFastify:\r\n\r\n|After|Before|\r\n|-----|-----|\r\n|<img width=\"282\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/b74ea14f-bbdb-46f0-8645-5b61e17a590d\"> |  <img width=\"337\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/4e21a212-029b-4e34-b04d-fb09c6179b82\"> |\r\n\r\n\r\nExpress:\r\n\r\n|After|Before|\r\n|-----|-------|\r\n|<img width=\"326\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/7aa30bad-c2fa-4521-9eef-2f225aa1ea19\">|<img width=\"335\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/b84581ae-86af-4866-81c6-c6a6e5f4aeae\">|\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-28T05:11:22Z",
        "closed_at": "2023-09-28T06:37:53Z",
        "merged_at": "2023-09-28T06:37:53Z",
        "body": "### What does this PR do?\r\nfixes #6088\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-28T05:04:19Z",
        "closed_at": "2023-09-28T16:40:15Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds support for OpenBSD, as of OpenBSD-current, both LLVM and zig got updated which meets bun requirements, not sure about zig tho. It's work in progress and list of tasks will be updated as progress goes on\r\n\r\nTodo:\r\n- [ ] Compile bun dependencies\r\n\r\nOfftopic todo:\r\n- [ ] Revert branding to the original\r\n---\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nOnce bun compiles, I'll run `bun test` and check if results and behaviour is identical for both OpenBSD and Linux\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-28T02:14:18Z",
        "closed_at": "2023-10-16T22:24:56Z",
        "merged_at": "2023-10-16T22:24:56Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis adds type parameter to expect, so Expect structure could infer input type parameter and warn user if he tries for example compare string and number.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T00:58:38Z",
        "closed_at": "2023-09-28T06:26:00Z",
        "merged_at": null,
        "body": "\r\n\r\n### What does this PR do?\r\nUpdates the NextJS app creation example to use \"bunx create-next-app\" as the existing \"bun create next-app\" does not work.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T23:58:03Z",
        "closed_at": "2023-09-28T02:23:29Z",
        "merged_at": "2023-09-28T02:23:29Z",
        "body": "### What does this PR do?\r\nthis reverts part of #4630. #5679 is the correct fix\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-27T23:49:38Z",
        "closed_at": "2023-09-28T02:22:50Z",
        "merged_at": "2023-09-28T02:22:50Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n- fix(bun install): Handle vercel and github tarball path dependencies\r\n\r\nFollows a similar approach (in this context) of [checking if a dependency is a tarball before checking github](https://github.com/pnpm/pnpm/blob/main/resolving/default-resolver/src/index.ts#L30-L35), and [filtering out repositories based on number of parts](https://github.com/pnpm/pnpm/blob/main/resolving/tarball-resolver/src/index.ts#L10)\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T23:35:36Z",
        "closed_at": "2023-09-28T00:41:06Z",
        "merged_at": "2023-09-28T00:41:06Z",
        "body": "`llvm` and `clang` are both at v16\r\n\r\n`llvm16` and `clang16` are AUR packages https://aur.archlinux.org/packages/llvm16 https://aur.archlinux.org/packages/clang16 and need extra steps to setup\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-27T22:03:25Z",
        "closed_at": "2023-09-29T02:07:52Z",
        "merged_at": "2023-09-29T02:07:52Z",
        "body": "\u2026all it, test for local tarball\r\n\r\n### What does this PR do?\r\n- Check if dependency is a tarball before check if it is an npm package\r\n- Alloc `url` to avoid losing tiny string when task is read.\r\n\r\nRelated to: https://github.com/oven-sh/bun/issues/5812\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T20:53:10Z",
        "closed_at": "2023-09-27T23:43:41Z",
        "merged_at": null,
        "body": "package.json dependency entries like:\r\n\r\n```\r\n\"when\": \"https://github.com/cujojs/when/tarball/1.0.2\"\r\n```\r\n\r\nand\r\n\r\n```\r\n\"@vercel/turbopack-ecmascript-runtime\": \"https://gitpkg-fork.vercel.sh/vercel/turbo/crates/turbopack-ecmascript-runtime/js?turbopack-230922.2\"\r\n```\r\n\r\nare both links to tarballs. In the github case, this is a URL pattern, and in the vercel case, this seems to be everything served from their server.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-27T10:10:03Z",
        "closed_at": "2023-09-27T16:49:34Z",
        "merged_at": "2023-09-27T16:49:34Z",
        "body": "### What does this PR do?\r\n\r\nIn the [previous attempt to resolve this](https://github.com/oven-sh/bun/pull/6090), I mistakenly missed a `/` for the destination and did not properly test `bunx` actually ran.\r\n\r\nThis was resolved, but [doubled the size again](https://github.com/oven-sh/bun/issues/5269#issuecomment-1736887598) as Docker is resolving the symlink when copying \ud83d\ude1e \r\n\r\nI [remembered a technique I proposed for `testssl.sh`](https://github.com/drwetter/testssl.sh/pull/2344/commits/1392987f01b748021cda4e98cbaf8e151c2f9a32#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557R69-R84) when revising their `Dockerfile`. Even though it was only required for building the images, the [maintainer decision was the features used were too new](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1479094496):\r\n- `RUN --mount` requires a [Docker Engine release from 2022H2 (with BuildKit)](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1479136828).\r\n- HereDoc (_[introduced support in 2021H2](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1478863039)_).\r\n\r\n---\r\n\r\nUsing [`RUN --mount`](https://docs.docker.com/engine/reference/builder/#run---mounttypebind), we can run the command with the build stage files overlayed for the `ln` and `which` commands.\r\n\r\n**NOTE:** The mounted `/bin` is a symlink to `/usr/bin`, both seem required to work correctly.\r\n\r\n### How did you verify your code works?\r\n\r\nRuns with the [same output now as the `bun x` command](https://github.com/oven-sh/bun/issues/5269#issuecomment-1736916694):\r\n\r\n```console\r\n$ docker buildx build -t bun-small .\r\n\r\n$ docker run --rm -it --entrypoint /usr/local/bin/bunx bun-small eslint --version\r\nerror: Failed to run \"eslint\" due to error FileNotFound\r\n```\r\n\r\nBut is still smaller:\r\n```console\r\n$ docker images\r\nREPOSITORY   TAG          IMAGE ID       CREATED         SIZE\r\nbun-small    latest       387d3d1f0c9f   3 minutes ago   110MB\r\noven/bun     distroless   f649763a2ca5   5 hours ago     205MB\r\n\r\n$ docker save bun-small | gzip -c | wc -c | numfmt --to iec\r\n40M\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-27T09:52:48Z",
        "closed_at": "2023-09-28T00:44:39Z",
        "merged_at": "2023-09-28T00:44:39Z",
        "body": "Changed the verb form from ignores to ignored.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-09-27T08:05:03Z",
        "closed_at": "2023-09-27T10:40:46Z",
        "merged_at": "2023-09-27T10:40:46Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nRemove the first `err` parameter in `fs.exists` callback. Close: #6073\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1284,
        "deletions": 394,
        "changed_files": 61,
        "created_at": "2023-09-27T04:59:53Z",
        "closed_at": "2023-09-28T10:53:25Z",
        "merged_at": "2023-09-28T10:53:25Z",
        "body": "### What does this PR do?\r\n\r\nalso does asyncLocalStorage.bind also does tty fixes for inquirer also adds an assert that will fail when using next.js but its only a dev one\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nbecause i said so",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 411,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-27T02:08:10Z",
        "closed_at": "2023-09-27T04:53:14Z",
        "merged_at": "2023-09-27T04:53:14Z",
        "body": "### What does this PR do?\r\nfixes #5926 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded a test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 32,
        "changed_files": 6,
        "created_at": "2023-09-26T20:59:34Z",
        "closed_at": "2023-09-27T02:31:20Z",
        "merged_at": "2023-09-27T02:31:20Z",
        "body": "\u2026gth or chunked encoding, fix case when stream do not return a promise on pull\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests + Existing Tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-26T15:53:17Z",
        "closed_at": "2023-09-26T23:13:27Z",
        "merged_at": "2023-09-26T23:13:27Z",
        "body": "I just fixed a small typo error",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 71,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-26T14:54:33Z",
        "closed_at": "2023-10-03T17:28:59Z",
        "merged_at": "2023-10-03T17:28:59Z",
        "body": "### What does this PR do?\r\n\r\nSorry for the delay, after support ignoreBOM in TextDecoder, decoder default behavior is remove BOM, so in the test, we should set to true, to pass the test with BOM.\r\n\r\nI have rerun all test releated to TextDecoder, but for the stability, I think we should wait the CI to finish all test before merge.\r\n\r\nSupport BOM detection and `TextDecoder.ignoreBOM`.\r\n\r\nReleated PR/Commit:\r\n- https://github.com/oven-sh/bun/pull/5550\r\n- [Revert \"feat(encoding): support BOM detection (https://github.com/oven-sh/bun/pull/5550)\"](https://github.com/oven-sh/bun/commit/abfc10afeb73f9447e47929359d37f2b488c3c81)\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-26T12:20:17Z",
        "closed_at": "2023-09-26T23:14:00Z",
        "merged_at": "2023-09-26T23:14:00Z",
        "body": "### What does this PR do?\r\n\r\nUpdate Astro documentation to showcase the new version results.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nPS: I love trying Bun so far \ud83d\udc83\ud83c\udffb",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-26T00:20:25Z",
        "closed_at": "2023-09-27T02:47:37Z",
        "merged_at": "2023-09-27T02:47:37Z",
        "body": "`console.dir` can be passed a second argument which is a object of options. This implements that logic with the currently supported properties: `depth` and `colors`.\r\nI used node as a reference for implementation details.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6039\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-25T17:46:55Z",
        "closed_at": "2023-09-26T08:23:12Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR sets up the basic structure for the `Elysia` application and configures logging using the `winston` library. Specifically:\r\n\r\n- Initializes the `Elysia` application and sets up a basic route.\r\n- Listens on a port specified by an environment variable or defaults to `3000`.\r\n- Configures two loggers: a general `logger` and an `errorLogger` for handling errors.\r\n- Logs the application start message and any potential errors during the server startup.\r\n\r\n- [ ] Documentation or TypeScript types\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThe application was started locally to ensure that the `Elysia` server initializes correctly and responds to the root route. Additionally, the log messages were verified in the console to ensure that the `winston` loggers are functioning as expected.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed: -->\r\n\r\n- [x] I ran `make js` and committed the transpiled changes (assuming this step is relevant to the project setup).\r\n- [x] I, or my editor, ran Prettier on the changed files to ensure code consistency.\r\n- [ ] I included tests for the new code, or an existing test covers it (assuming tests are part of the project setup).\r\n\r\n<!-- The other sections can be left as they are if they're not relevant to the changes made in this PR. -->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 18,
        "changed_files": 3,
        "created_at": "2023-09-25T15:11:47Z",
        "closed_at": "2023-10-03T18:49:25Z",
        "merged_at": "2023-10-03T18:49:25Z",
        "body": "### What does this PR do?\r\nFix the `bunx` command when a github repo is passed as an argument. There is a bug where the package name is parsed as an `UpdateRequest` that leaves the name of the package empty and fails when trying to concatenate `name + @ + version`\r\nIn bunx_command name and version are checked and if they are equal set the name as the package name, and format it without `@`. Also this fmt package is used to build the path where is installed.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/5974\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-25T11:53:19Z",
        "closed_at": "2023-09-25T23:09:37Z",
        "merged_at": "2023-09-25T23:09:37Z",
        "body": "### What does this PR do?\r\n\r\nWe were not always draining microtasks when an HTTP request was aborted\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-25T10:38:41Z",
        "closed_at": "2023-09-25T23:07:34Z",
        "merged_at": "2023-09-25T23:07:34Z",
        "body": "Thanks to @karlcow https://github.com/WebKit/WebKit/pull/13802\r\n\r\n### What does this PR do?\r\n\r\nImprove error message for `new URL(invalid)`\r\n\r\n### How did you verify your code works?\r\n\r\nTest",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-25T09:10:51Z",
        "closed_at": "2023-09-25T17:55:55Z",
        "merged_at": "2023-09-25T17:55:55Z",
        "body": "### What does this PR do?\r\nIn title\r\n\r\nTested via script\r\n```js\r\nimport * as fs from 'fs'\r\n\r\n// Object.keys(fs) in node\r\nconst targetProperties = [\r\n  \"appendFile\",\r\n  \"appendFileSync\",\r\n  \"access\",\r\n  \"accessSync\",\r\n  \"chown\",\r\n  \"chownSync\",\r\n  \"chmod\",\r\n  \"chmodSync\",\r\n  \"close\",\r\n  \"closeSync\",\r\n  \"copyFile\",\r\n  \"copyFileSync\",\r\n  \"cp\",\r\n  \"cpSync\",\r\n  \"createReadStream\",\r\n  \"createWriteStream\",\r\n  \"exists\",\r\n  \"existsSync\",\r\n  \"fchown\",\r\n  \"fchownSync\",\r\n  \"fchmod\",\r\n  \"fchmodSync\",\r\n  \"fdatasync\",\r\n  \"fdatasyncSync\",\r\n  \"fstat\",\r\n  \"fstatSync\",\r\n  \"fsync\",\r\n  \"fsyncSync\",\r\n  \"ftruncate\",\r\n  \"ftruncateSync\",\r\n  \"futimes\",\r\n  \"futimesSync\",\r\n  \"lchown\",\r\n  \"lchownSync\",\r\n  \"lchmod\",\r\n  \"lchmodSync\",\r\n  \"link\",\r\n  \"linkSync\",\r\n  \"lstat\",\r\n  \"lstatSync\",\r\n  \"lutimes\",\r\n  \"lutimesSync\",\r\n  \"mkdir\",\r\n  \"mkdirSync\",\r\n  \"mkdtemp\",\r\n  \"mkdtempSync\",\r\n  \"open\",\r\n  \"openSync\",\r\n  \"openAsBlob\",\r\n  \"readdir\",\r\n  \"readdirSync\",\r\n  \"read\",\r\n  \"readSync\",\r\n  \"readv\",\r\n  \"readvSync\",\r\n  \"readFile\",\r\n  \"readFileSync\",\r\n  \"readlink\",\r\n  \"readlinkSync\",\r\n  \"realpath\",\r\n  \"realpathSync\",\r\n  \"rename\",\r\n  \"renameSync\",\r\n  \"rm\",\r\n  \"rmSync\",\r\n  \"rmdir\",\r\n  \"rmdirSync\",\r\n  \"stat\",\r\n  \"statfs\",\r\n  \"statSync\",\r\n  \"statfsSync\",\r\n  \"symlink\",\r\n  \"symlinkSync\",\r\n  \"truncate\",\r\n  \"truncateSync\",\r\n  \"unwatchFile\",\r\n  \"unlink\",\r\n  \"unlinkSync\",\r\n  \"utimes\",\r\n  \"utimesSync\",\r\n  \"watch\",\r\n  \"watchFile\",\r\n  \"writeFile\",\r\n  \"writeFileSync\",\r\n  \"write\",\r\n  \"writeSync\",\r\n  \"writev\",\r\n  \"writevSync\",\r\n  \"Dirent\",\r\n  \"Stats\",\r\n  \"ReadStream\",\r\n  \"WriteStream\",\r\n  \"FileReadStream\",\r\n  \"FileWriteStream\",\r\n  \"_toUnixTimestamp\",\r\n  \"Dir\",\r\n  \"opendir\",\r\n  \"opendirSync\",\r\n  \"F_OK\",\r\n  \"R_OK\",\r\n  \"W_OK\",\r\n  \"X_OK\",\r\n  \"constants\",\r\n  \"promises\",\r\n  \"default\"\r\n]\r\n\r\n\r\nfor (const property of targetProperties) {\r\n  if (!Object.hasOwn(fs, property)) {\r\n    console.log(`Property not found in bun:fs`, property)\r\n  }\r\n}\r\n```\r\n```\r\nProperty not found in bun:fs fdatasync\r\nProperty not found in bun:fs fdatasyncSync\r\nProperty not found in bun:fs openAsBlob\r\nProperty not found in bun:fs statfs\r\nProperty not found in bun:fs statfsSync\r\nProperty not found in bun:fs FileReadStream\r\nProperty not found in bun:fs FileWriteStream\r\nProperty not found in bun:fs Dir\r\nProperty not found in bun:fs opendir\r\nProperty not found in bun:fs opendirSync\r\nProperty not found in bun:fs F_OK\r\nProperty not found in bun:fs R_OK\r\nProperty not found in bun:fs W_OK\r\nProperty not found in bun:fs X_OK\r\n```\r\n\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-25T08:44:57Z",
        "closed_at": "2023-10-01T06:26:22Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds extra command line argument for Lambda bun executable. Allows your to flexibly tune bun when needed. In particular we use it with \"`--smol`\" argument.\r\n\r\n### How did you verify your code works?\r\n\r\nDeployed and tested on AWS Lambda. When Env variable is empty it has no effect on the bootstrap.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-25T07:33:29Z",
        "closed_at": "2023-09-25T12:19:34Z",
        "merged_at": "2023-09-25T12:19:34Z",
        "body": "### What does this PR do?\r\n\r\n\r\n#### repro\r\n\r\nuse the latest dev build to run following code.\r\n\r\n```JavaScript\r\nconst http = require(\"node:http\");\r\n\r\nconst server = http.createServer((req, res) => {});\r\n\r\nserver.listen(3000);\r\n\r\n```\r\n\r\ncoredump stack\r\n\r\n![2023-09-25_16-21](https://github.com/oven-sh/bun/assets/9482395/a7e473fa-be1d-4873-bb2c-7e4ddff66b7c)\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nexisting tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-25T06:58:46Z",
        "closed_at": "2023-10-10T23:47:36Z",
        "merged_at": "2023-10-10T23:47:36Z",
        "body": "### What does this PR do?\r\n\r\n\r\nAdds file to the TOC at https://bun.sh/docs/api/binary-data.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-24T21:48:20Z",
        "closed_at": "2023-10-12T14:29:07Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds the functionality to print Object's class name if it exists matching Node's functionality. \r\n\r\nAs well as adding adding tests for printing Maps, Sets and ArrayBuffers.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [X] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-24T18:20:38Z",
        "closed_at": "2023-09-25T12:22:48Z",
        "merged_at": "2023-09-25T12:22:48Z",
        "body": "### What does this PR do?\r\n\r\nfix error when command `bun create <@some-template/template>` is executed, the command is appending a `create-` prefix wrongly.\r\nFor example:\r\n`bun create @quick-start/electron`\r\ntries to create with this template: `@quick-startcreate-/electron`\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6007\r\n<!-- This adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\nTypescript test of `create` command that check the error case with the correct template.\r\nI couldn't add a test in `bunx_command.zig` because it fails when tries to find \"root\".bun file ([zig issue here](https://github.com/ziglang/zig/issues/17109)). \r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n![image](https://github.com/oven-sh/bun/assets/87334103/abec8aeb-d192-47bb-9763-1c787a2bda9a)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 114,
        "changed_files": 2,
        "created_at": "2023-09-24T10:23:30Z",
        "closed_at": "2023-09-25T01:27:56Z",
        "merged_at": "2023-09-25T01:27:56Z",
        "body": "### What does this PR do?\r\n\r\n`removefileat` errors on write-protected files. We do not want that.\r\n\r\nFixes #5954 \r\n\r\nAlso fixes some test failures in bun-install caused\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 430,
        "deletions": 140,
        "changed_files": 12,
        "created_at": "2023-09-24T09:55:52Z",
        "closed_at": "2023-09-25T00:43:59Z",
        "merged_at": "2023-09-25T00:43:59Z",
        "body": "### What does this PR do?\r\n\r\nThis adds a helper for ensuring that the bytes of an `extern union` are completely zeroed. The previous code panicked in debug builds and the test did not verify that `bun update` made requests to the registry, causing the test to be ineffective.\r\n\r\nThere were two fields that needed to correctly be zero-initialized:\r\n- `Bin.Value`\r\n- `Resolution.Value`\r\n\r\nThis also:\r\n- Makes `bun update` ignore the npm registry manifest cache\r\n- Updates our copy-pasta of `MultiArrayList` to the latest version\r\n- Ensures we zero-initialize `Bin` for the npm registry manifest cache\r\n- Ensures we zero-initialize `Bin.Value` and `Resolution.Value` in other cases\r\n\r\n### How did you verify your code works?\r\n\r\n`bun install --force`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-24T06:45:50Z",
        "closed_at": "2023-09-25T23:09:09Z",
        "merged_at": "2023-09-25T23:09:09Z",
        "body": "### What does this PR do?\r\n\r\nFixes https://github.com/ljharb/define-data-property/actions/runs/6165229997/job/17073357298, probably\r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T04:24:46Z",
        "closed_at": "2023-09-24T15:49:22Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThe original URL for Vite was pointing at the incorrect website. This PR fixes the link.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI opened the new link from the corrected markdown document, and it opens the correct website.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T01:42:02Z",
        "closed_at": "2023-09-24T15:49:57Z",
        "merged_at": "2023-09-24T15:49:57Z",
        "body": "### What does this PR do?\r\n\r\n\r\nAdded linking to `bun init` page in README.md\r\n\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-24T00:36:14Z",
        "closed_at": "2023-09-29T16:56:45Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n## This fixes a grammar error (changes ignores to ignored)\r\n\r\n### How did you verify your code works?\r\n\r\n## Not applicable\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-09-24T00:26:04Z",
        "closed_at": "2023-09-24T10:16:51Z",
        "merged_at": "2023-09-24T10:16:51Z",
        "body": "### What does this PR do?\r\n\r\n- `JSValue.true` was not actually true. Fortunately, we weren't using it anywhere.\r\n- We forgot to return .true in `confirm`\r\n\r\nFixes #5985\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-23T13:40:07Z",
        "closed_at": "2023-09-23T16:56:03Z",
        "merged_at": "2023-09-23T16:56:03Z",
        "body": "Adding notes for users that currently use canary version and want to  switch back to stable version.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-23T13:17:09Z",
        "closed_at": "2023-09-24T15:50:18Z",
        "merged_at": "2023-09-24T15:50:18Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T12:36:42Z",
        "closed_at": "2023-09-23T16:56:37Z",
        "merged_at": "2023-09-23T16:56:37Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T11:21:18Z",
        "closed_at": "2023-09-24T15:49:15Z",
        "merged_at": "2023-09-24T15:49:15Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-09-23T10:54:25Z",
        "closed_at": "2023-09-24T03:09:45Z",
        "merged_at": "2023-09-24T03:09:45Z",
        "body": "### What does this PR do?\r\n\r\n\r\nClose: #5888\r\n\r\nWhen serializing to `bun.lockb`, we directly use `std.mem.sliceAsBytes` to write the memory of the struct.\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/lockfile.zig#L3757-L3762\r\n\r\nIn the `Bin` struct, the `value` field is `union` type, and its size depends on the largest member. If we initialize it with `.{.none = {}}`, there will be some uninitialized memory. This can lead to the `bun.lockb` file being different with each `bun update`(no packages updated).\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/bin.zig#L19-L23\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/bin.zig#L102-L135\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-09-23T04:23:12Z",
        "closed_at": "2023-09-24T10:17:20Z",
        "merged_at": "2023-09-24T10:17:20Z",
        "body": "### What does this PR do?\r\n\r\nc-ares is more well-tested in production so we should opt for using it for these sorts of things\r\n\r\n### How did you verify your code works?\r\n\r\nexisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-23T02:26:52Z",
        "closed_at": "2023-10-16T23:08:58Z",
        "merged_at": "2023-10-16T23:08:58Z",
        "body": "### What does this PR do?\r\n\r\nI Fixed the bugs in the issue #5872\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 27,
        "changed_files": 4,
        "created_at": "2023-09-23T02:20:40Z",
        "closed_at": "2023-09-29T22:42:06Z",
        "merged_at": "2023-09-29T22:42:06Z",
        "body": "i did not run tests locally because of the jsc debug branch. should be fine if ci tests pass",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-23T00:24:44Z",
        "closed_at": "2023-09-23T01:41:56Z",
        "merged_at": "2023-09-23T01:41:56Z",
        "body": "### What does this PR do?\r\nfixes #4686 \r\nfixes #5915 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9342,
        "deletions": 67,
        "changed_files": 106,
        "created_at": "2023-09-23T00:04:58Z",
        "closed_at": "2023-10-07T22:22:46Z",
        "merged_at": "2023-10-07T22:22:46Z",
        "body": "### What does this PR do?\r\nAdd KeyObject and related methods\r\n\r\nFix https://github.com/oven-sh/bun/issues/2036 \r\nFix https://github.com/oven-sh/bun/issues/1454 \r\nFix https://github.com/oven-sh/bun/issues/5036 \r\nFix https://github.com/oven-sh/bun/issues/4983 \r\nFix https://github.com/oven-sh/bun/issues/4692 \r\nFix https://github.com/oven-sh/bun/issues/2730\r\n\r\nMaybe Related with #3950 #4596 #5122\r\n\r\n- [x] [KeyObject.from(key)](https://nodejs.org/api/crypto.html#static-method-keyobjectfromkey)\r\n- [x] [keyObject.asymmetricKeyDetails](https://nodejs.org/api/crypto.html#keyobjectasymmetrickeydetails)\r\n- [x] [keyObject.asymmetricKeyType](https://nodejs.org/api/crypto.html#keyobjectasymmetrickeytype)\r\n- [x] [keyObject.equals(otherKeyObject)](https://nodejs.org/api/crypto.html#keyobjectequalsotherkeyobject)\r\n- [x] [keyObject.symmetricKeySize](https://nodejs.org/api/crypto.html#keyobjectsymmetrickeysize)\r\n- [x] [keyObject.type](https://nodejs.org/api/crypto.html#keyobjecttype)\r\n- [x] [keyObject.export([options])](https://nodejs.org/api/crypto.html#keyobjectexportoptions)\r\n- [x] [crypto.createSecretKey()](https://nodejs.org/api/crypto.html#cryptocreatesecretkeykey-encoding)\r\n- [x] [crypto.createPublicKey()](https://nodejs.org/api/crypto.html#cryptocreatepublickeykey)\r\n- [x] [crypto.createPrivateKey()](https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey)\r\n- [x] [crypto.generateKeyPairSync(type, options)](https://nodejs.org/api/crypto.html#cryptogeneratekeypairsynctype-options)\r\n- [x] [crypto.generateKeySync(type, options)](https://nodejs.org/api/crypto.html#cryptogeneratekeysynctype-options)\r\n- [x] [crypto.generateKeyPair(type, options, callback)](https://nodejs.org/api/crypto.html#cryptogeneratekeypairtype-options)\r\n- [x] [crypto.generateKey(type, options, callback)](https://nodejs.org/api/crypto.html#cryptogeneratekeytype-options)\r\n- [x] [crypto.sign(algorithm, data, key[, callback])](https://nodejs.org/api/crypto.html#cryptosignalgorithm-data-key-callback)\r\n- [x] [crypto.verify(algorithm, data, key, signature[, callback])](https://nodejs.org/api/crypto.html#cryptoverifyalgorithm-data-key-signature-callback)\r\n- [x] Tests\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 330,
        "deletions": 329,
        "changed_files": 1,
        "created_at": "2023-09-23T00:02:33Z",
        "closed_at": "2023-09-23T01:41:05Z",
        "merged_at": "2023-09-23T01:41:05Z",
        "body": "Built & tested locally\r\n\r\n```\r\nbun-debug create xixixao/convex-nextjs-template\r\n```\r\n\r\nI left things commented in case there are elements of this we need for other reasons",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T00:01:59Z",
        "closed_at": "2023-09-23T01:42:57Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nRemoves versions from arch dependencies as they are not needed. Below are the two packages in Arch x86_64 repository which are named without the versions:\r\n\r\nClang: https://archlinux.org/packages/?name=clang\r\nLLVM: https://archlinux.org/packages/?name=llvm\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nVerified the install command on my arch machine.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 46,
        "changed_files": 7,
        "created_at": "2023-09-22T22:03:11Z",
        "closed_at": "2023-09-28T02:26:04Z",
        "merged_at": "2023-09-28T02:26:04Z",
        "body": "### What does this PR do?\r\n\r\nAdds a new option for `Bun.Transpiler`, called `deadCodeElimination`, which allows disabling of dead code elimination, which in turn enables proper use of Bun.Transpiler for transpilation of code meant to be top-level evaluated which would otherwise be voided by false-positive DCE due to lack of context to the transpiler. (examples: code passed to `eval()` or in a REPL)\r\n\r\nThe option is a boolean and is enabled by default for backwards compatibility given the transpiler has been doing DCE by default so far.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T20:35:58Z",
        "closed_at": "2023-10-11T21:22:43Z",
        "merged_at": "2023-10-11T21:22:43Z",
        "body": "\u2026issue #4734\r\n\r\nAdded instructions to set bun as pm2 interpreter to extend same functionality as node.js apps.\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-22T16:50:49Z",
        "closed_at": "2023-09-29T05:13:52Z",
        "merged_at": "2023-09-29T05:13:52Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChanging the order of bare import. It should be `hello.tsx` > `hello.jsx` > `hello.ts` > `hello.mjs` > `hello.js` > `hello.cjs` > `hello.json` > `hello/index.tsx` > `hello/index.jsx` > `hello/index.ts` > `hello/index.mjs` > `hello/index.js` > `hello/index.cjs` > `hello/index.json`\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI have tested this on Replit. People can feeling the order by moving files into temp folder. Here's the link\ud83d\udc47\r\nhttps://replit.com/join/udtmgcymlc-devinjohw\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-22T09:46:20Z",
        "closed_at": "2023-09-23T01:40:06Z",
        "merged_at": "2023-09-23T01:40:06Z",
        "body": "### What does this PR do?\r\n\r\nClose: #5898\r\n\r\n#5233 does not filter them in `has`, which causes that `\"bufferutil\" in require.cache` returns `true`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests \r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-22T08:53:37Z",
        "closed_at": "2023-09-23T01:40:38Z",
        "merged_at": "2023-09-23T01:40:38Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nChecked the link and the channel name\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7020,
        "deletions": 6952,
        "changed_files": 16,
        "created_at": "2023-09-22T03:30:47Z",
        "closed_at": "2023-09-22T05:09:56Z",
        "merged_at": "2023-09-22T05:09:55Z",
        "body": "### What does this PR do?\r\n\r\nImplements `module.parent`.\r\n\r\nCloses #5808\r\nCloses #4955\r\nCloses #4818\r\nCloses #3852\r\nCloses #3154\r\n\r\nyippee",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-22T02:19:43Z",
        "closed_at": "2023-09-22T14:37:00Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThe changes fix a bug where `dlopen` is not working in `bun:ffi`. Without these changes, attempts to use the function will result in an undefined error, and no real errors can propagate.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x]  I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-22T01:34:15Z",
        "closed_at": "2023-09-22T03:02:51Z",
        "merged_at": "2023-09-22T03:02:51Z",
        "body": "### What does this PR do?\r\nfixes #5811 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-09-22T01:32:11Z",
        "closed_at": "2023-09-22T03:07:26Z",
        "merged_at": "2023-09-22T03:07:25Z",
        "body": "Disables `[0.05ms] \".env\"` messages when logLevel is info",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1830,
        "deletions": 1446,
        "changed_files": 116,
        "created_at": "2023-09-22T01:13:01Z",
        "closed_at": "2023-10-17T04:22:43Z",
        "merged_at": "2023-10-17T04:22:43Z",
        "body": "This PR has been working to getting bun-debug working with JSC debug assertions. instead of fully shipping that, this simply is just some of the important fixes i've found in this project. The final version of this project will involve a handful of changes to CI, Build, and CI+Publishing for oven-sh/webkit in order to make it so JSC debug is the default for the dev environment.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6626,
        "deletions": 6524,
        "changed_files": 8,
        "created_at": "2023-09-21T22:58:49Z",
        "closed_at": "2023-09-22T01:44:06Z",
        "merged_at": "2023-09-22T01:44:06Z",
        "body": "### What does this PR do?\r\n\r\nExpress relies on this for setting the requests protocol.\r\nSince this is on a dummy object, a property is simply set with the actual value.\r\nWhich seams okay as a workaround.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/5867\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-21T21:00:36Z",
        "closed_at": "2023-09-22T01:42:49Z",
        "merged_at": "2023-09-22T01:42:49Z",
        "body": "### What does this PR do?\r\n\r\nfixes passing the options to copyFile\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-21T20:58:48Z",
        "closed_at": "2023-09-22T01:44:59Z",
        "merged_at": "2023-09-22T01:44:59Z",
        "body": "### What does this PR do?\r\n\r\nUsing `.envrc` files allows [automatically loading](https://direnv.net/) custom env vars during development.\r\nThis file might contain tokens, keys or any other developer-workflow-specific config that we don't want to push to the repo.\r\n\r\nThis PR adds .envrc to .gitignore",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2023-09-21T14:47:57Z",
        "closed_at": "2023-09-22T01:59:01Z",
        "merged_at": "2023-09-22T01:59:01Z",
        "body": "### What does this PR do?\r\n\r\nFix crash in rmdir in certain cases\r\n\r\n### How did you verify your code works?\r\n\r\nAdded a stress test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 59,
        "changed_files": 8,
        "created_at": "2023-09-21T07:47:41Z",
        "closed_at": "2023-09-21T14:25:19Z",
        "merged_at": "2023-09-21T14:25:19Z",
        "body": "### What does this PR do?\r\n\r\nThis implements `process.constrainedMemory` and sets `Options::forceRAMSize` on Linux to read from the cgroups-imposed memory limit instead of the system memory limit. I'm expecting this to improve runtime memory usage in containers. \r\n\r\n### How did you verify your code works?\r\n\r\nThe code for getting the constrained memory is copied from libuv (including the license in the top of the file) \r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 17,
        "changed_files": 4,
        "created_at": "2023-09-21T01:48:18Z",
        "closed_at": "2023-09-22T03:37:32Z",
        "merged_at": "2023-09-22T03:37:32Z",
        "body": "### What does this PR do?\r\n\r\nthese are bad workarounds that should be temporary\r\n\r\nexecArgv is disabled because we dont support any flags. casuses nuxt to run the command\r\n\r\n`$ bun --enable-source-map their_script.mjs ...`\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-21T00:19:51Z",
        "closed_at": "2023-09-21T01:28:08Z",
        "merged_at": "2023-09-21T01:28:08Z",
        "body": "### What does this PR do?\r\n\r\nnonenumerable secret api that older verisons of consola depends on; which breaks some libraries. does not close but related to #3771 and nuxt 2.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-20T23:56:56Z",
        "closed_at": "2023-09-21T01:31:57Z",
        "merged_at": "2023-09-21T01:31:57Z",
        "body": "### What does this PR do?\r\n\r\nImplements `new (require('module').Module)(string)._compile(string, string)`. This allows running synthetic CommonJS modules.\r\n\r\nCloses #4590\r\n\r\n### How did you verify your code works?\r\n\r\nadded a test case and run jsonpath successfully now\r\n\r\n<img width=\"1030\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/a2c9ed0c-c2db-489f-94e0-1c815c1726b3\">\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-20T23:38:44Z",
        "closed_at": "2023-09-21T06:42:45Z",
        "merged_at": "2023-09-21T06:42:45Z",
        "body": "\r\n### What does this PR do?\r\n\r\nChanges the default depth to match Node. [Source in Node](https://github.com/nodejs/node/blob/480ab8c3a40451d5ea459dd35b4039679b26e195/doc/api/console.md?plain=1#L285)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-20T23:33:38Z",
        "closed_at": "2023-09-21T00:43:08Z",
        "merged_at": "2023-09-21T00:43:08Z",
        "body": "Per https://discord.com/channels/876711213126520882/1153238257853800468/1153238257853800468",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-20T20:19:35Z",
        "closed_at": "2023-09-27T23:15:46Z",
        "merged_at": "2023-09-27T23:15:46Z",
        "body": "### What does this PR do?\r\nUrls using the blob scheme can have special behaviour if their origin itself is a url when parsing.\r\nThis fixes that by parsing the path as a own domain and if valid and the schemes(protocols) are valid returns its origin.\r\nIve used node.js here a lot to make sure its behaviour is copied 1:1 and enabled the automated tests for it.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5805\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 277,
        "deletions": 155,
        "changed_files": 6,
        "created_at": "2023-09-20T11:34:17Z",
        "closed_at": "2023-09-20T12:52:59Z",
        "merged_at": "2023-09-20T12:52:59Z",
        "body": "### What does this PR do?\r\n\r\nPreviously, Bun was only calling `Error.prepareStackTrace` when `Error.captureStackTrace` was called. This broke a lot of packages. \r\n\r\nThis makes Bun call `Error.prepareStackTrace` whenever it's defined, and also makes it very slightly faster to check for the existence of `Error.prepareStackTrace.\r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T11:01:39Z",
        "closed_at": "2023-09-20T15:08:11Z",
        "merged_at": "2023-09-20T15:08:11Z",
        "body": "### What does this PR do?\r\n\r\n`server.update` to `server.reload`\r\n\r\n```\r\nTypeError: server.update is not a function. (In 'server.update({\r\n  async fetch(request) {\r\n    return new Response(\"Hello World v2\");\r\n  }\r\n})', 'server.update' is undefined)\r\n\r\n```\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-20T08:23:16Z",
        "closed_at": "2023-09-20T17:11:42Z",
        "merged_at": "2023-09-20T17:11:42Z",
        "body": "Fix: https://github.com/napi-rs/napi-rs/blob/main/examples/napi/__tests__/test.framework.js#L16-L19\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 26,
        "changed_files": 2,
        "created_at": "2023-09-20T07:00:26Z",
        "closed_at": "2023-09-20T08:00:29Z",
        "merged_at": "2023-09-20T08:00:29Z",
        "body": "### What does this PR do?\r\n\r\nbunx shouldn't load an executable from path when a tag is specified\r\n\r\nBefore:\r\n```js\r\n\u276f bunx bun@1.0.0 --version\r\n  bunx bun@1.0.1 --version\r\n  bunx bun@1.0.2 --version # Before\r\n1.0.0 # Or whichever version happened to be in $PATH\r\n1.0.0\r\n1.0.0\r\n```\r\n\r\nAfter:\r\n\r\n```js\r\n\u276f bunx bun@1.0.0 --version\r\n  bunx bun@1.0.1 --version\r\n  bunx bun@1.0.2 --version # After\r\n1.0.0\r\n1.0.1\r\n1.0.2\r\n```\r\n\r\nThis also silences the \"exited with signal 1\" message. That message is kind of annoying.\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTests!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2023-09-20T05:06:55Z",
        "closed_at": "2023-09-21T06:34:00Z",
        "merged_at": "2023-09-21T06:34:00Z",
        "body": "### What does this PR do?\r\n\r\nClose: #5635 \r\n\r\nrelative path location does not work in bun.\r\n\r\n```JavaScript\r\nimport * as http from \"node:http\";\r\nimport * as assert from \"node:assert\";\r\n\r\nconst testCases = [\r\n  [\"/a/b\", \"/c\", \"/c\"],\r\n  [\"/a/b\", \"c\", \"/a/c\"],\r\n  [\"/a/b\", \"/c/d\", \"/c/d\"],\r\n  [\"/a/b\", \"c/d\", \"/a/c/d\"],\r\n  [\"/a/b\", \"../c\", \"/c\"],\r\n  [\"/a/b\", \"../c/d\", \"/c/d\"],\r\n  [\"/a/b\", \"../../../c\", \"/c\"],\r\n  // slash\r\n  [\"/a/b/\", \"/c\", \"/c\"],\r\n  [\"/a/b/\", \"c\", \"/a/b/c\"],\r\n  [\"/a/b/\", \"/c/d\", \"/c/d\"],\r\n  [\"/a/b/\", \"c/d\", \"/a/b/c/d\"],\r\n  [\"/a/b/\", \"../c\", \"/a/c\"],\r\n  [\"/a/b/\", \"../c/d\", \"/a/c/d\"],\r\n  [\"/a/b/\", \"../../../c\", \"/c\"],\r\n];\r\n\r\nfor (const [pathname, location, expected] of testCases) {\r\n  const server = http.createServer((req, res) => {\r\n    if (req.url === pathname) {\r\n      res.writeHead(302, { Location: location });\r\n      return res.end();\r\n    } else if (req.url === expected) {\r\n      res.writeHead(200, { \"Content-Type\": \"text/plain\" });\r\n      return res.end(\"OK\");\r\n    }\r\n    res.writeHead(404);\r\n    res.end(\"Not Found\");\r\n  });\r\n\r\n  server.listen(0, () => {\r\n    const port = server.address().port;\r\n    fetch(`http://127.0.0.1:${port}${pathname}`)\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        console.log(\"request\", pathname, \"=>\", expected, data);\r\n        assert.strictEqual(data, \"OK\");\r\n        server.close();\r\n      })\r\n      .catch((error) => {\r\n        assert.strictEqual(error, null);\r\n        server.close();\r\n      });\r\n  });\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-20T03:29:57Z",
        "closed_at": "2023-09-20T06:03:11Z",
        "merged_at": "2023-09-20T06:03:11Z",
        "body": "### What does this PR do?\r\n\r\nAdds `(v${version} available)` text to the install summary:\r\n\r\n<img width=\"445\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/d4551404-091b-4588-a3eb-24708fe09d16\">\r\n\r\nThis does mean reading and opening the manifest cache for each newly-installed package. To minimize perf impact, this feature is disabled in CI environments. It will only show when newer versions are available when that package was newly installed (not every time). \r\n\r\n### How did you verify your code works?\r\n\r\nManual",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1884,
        "deletions": 110,
        "changed_files": 19,
        "created_at": "2023-09-20T00:55:43Z",
        "closed_at": "2023-09-20T15:10:03Z",
        "merged_at": "2023-09-20T15:10:03Z",
        "body": "### What does this PR do?\r\nImplements the `emitDecoratorMetadata` option in tsconfig for experimental decorators.\r\nhttps://www.typescriptlang.org/tsconfig#Language_and_Environment_6254\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-19T23:49:02Z",
        "closed_at": "2023-09-21T06:43:21Z",
        "merged_at": "2023-09-21T06:43:21Z",
        "body": "### What does this PR do?\r\nThe sqlite3 logic to dynamically load extensions can be disabled to save space, which macos does by default.\r\nsqlite3 provides a api to check for these compile time settings at runtime, we can use that to throw a js error rather then crashing. It is worth noting though that the api to check for these settings at runtime itself can be disabled through SQLITE_OMIT_COMPILEOPTION_DIAGS but this seams to be a edge case.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5756\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nIts not completely straight forward to add automated testing for this as it requires a custom build of sqlite3, assuming macOS version of sqlite3 will always disable extension loading is a bad approach.\r\n\r\nFurthermore i work on arch even though i have a mac(i might test this later this week), i used this to test for the presence of flags outside of `SQLITE_OMIT_LOAD_EXTENSION` which worked as expected. So testing was done.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-19T22:51:53Z",
        "closed_at": "2023-09-20T17:09:52Z",
        "merged_at": "2023-09-20T17:09:52Z",
        "body": "### What does this PR do?\r\n\r\nIt fixes bugs that were introduced with 0.0.9 of the VSCode extension\r\n\r\n- [x] The task detection would not properly match in edge-cases\r\n- [x] The css for the bunlock highlighter was not included in the extension\r\n- [x] Use \"bun run\" instead of \"bun\" for running tasks\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 175,
        "deletions": 196,
        "changed_files": 9,
        "created_at": "2023-09-19T22:32:07Z",
        "closed_at": "2023-09-26T23:35:13Z",
        "merged_at": "2023-09-26T23:35:13Z",
        "body": "Closes #5269 \r\nCloses #4611 \r\nCloses #5454 \r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 230,
        "deletions": 73,
        "changed_files": 10,
        "created_at": "2023-09-19T21:09:32Z",
        "closed_at": "2023-09-29T21:58:39Z",
        "merged_at": "2023-09-29T21:58:39Z",
        "body": "### What does this PR do?\r\n\r\nfixes vite config loading if your directory had a special character\r\n\r\nFixes #5100\r\n\r\n### How did you verify your code works?\r\n\r\nnew tests hell yeah",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T20:34:52Z",
        "closed_at": "2023-09-20T00:20:51Z",
        "merged_at": "2023-09-20T00:20:50Z",
        "body": "### What does this PR do?\r\nAvoid TinyCC errors on macOS\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Makefile update\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nManual tested\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-09-19T19:10:53Z",
        "closed_at": "2023-09-19T23:31:39Z",
        "merged_at": "2023-09-19T23:31:39Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-19T15:55:59Z",
        "closed_at": "2023-10-19T12:58:48Z",
        "merged_at": null,
        "body": "With a simple bat file, you can configure the command bun use directly wsl to run your env\r\n\r\n### What does this PR do?\r\n\r\nIn docummentation, I put  an example of how you can set your bun to run on Windows with wsl, creating a bat file, adding the current folder to path and installing bun inside wsl.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nInstalled on my personal computer\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 163,
        "deletions": 69,
        "changed_files": 6,
        "created_at": "2023-09-19T13:48:07Z",
        "closed_at": "2023-09-19T15:01:48Z",
        "merged_at": "2023-09-19T15:01:48Z",
        "body": "### What does this PR do?\r\n\r\nFixes URL normalization for joining registries to happen later on, after we know the authToken and other metdata is stripped\r\nAdds a guide on using artifactory\r\n\r\n### How did you verify your code works?\r\n\r\nUpdated tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-19T13:21:41Z",
        "closed_at": "2023-10-16T23:11:44Z",
        "merged_at": "2023-10-16T23:11:44Z",
        "body": "### What does this PR do?\r\nIt seams the 'content-encoding' header was being removed(if present), to run code conditionally, that had the unwanted side effect of the header not being present in the list returned to the caller. This instead uses a bool to keep track of the state regarding the state whether the header was prcoessed or not.\r\nMaybe this has some other side effects but tests(fetch.test.ts) seams to not have any failures.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5668\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-19T11:17:44Z",
        "closed_at": "2023-09-19T12:50:23Z",
        "merged_at": "2023-09-19T12:50:23Z",
        "body": "### What does this PR do?\r\n\r\nDatabase.deserialize was returning the SQLite DB handle instead of the `Database` class\r\n\r\nFixes #3712 \r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 162,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-09-19T11:03:34Z",
        "closed_at": "2023-09-19T12:51:05Z",
        "merged_at": "2023-09-19T12:51:05Z",
        "body": "### What does this PR do?\r\n\r\nThis aligns the redirect behavior of `fetch()` to be closer to the WHATWG fetch spec. \r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-19T07:49:34Z",
        "closed_at": "2023-09-19T10:58:56Z",
        "merged_at": "2023-09-19T10:58:56Z",
        "body": "### What does this PR do?\r\n\r\nThis dumps the HTTP request/response metadata when `bun install --verbose` is passed\r\n\r\nAlso prevents double-printing the request metadata\r\n\r\n### How did you verify your code works?\r\n\r\nmanual",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 100,
        "deletions": 15,
        "changed_files": 8,
        "created_at": "2023-09-19T04:27:08Z",
        "closed_at": "2023-09-19T06:27:02Z",
        "merged_at": "2023-09-19T06:27:02Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5076 \r\n\r\nSupersedes https://github.com/oven-sh/bun/pull/5484\r\n\r\n### How did you verify your code works?\r\n\r\nUpdated a test. We also need to add integration tests for Artifactory, Azure Artifacts, and more of those, but this PR doesn't do that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 19,
        "changed_files": 13,
        "created_at": "2023-09-19T01:48:24Z",
        "closed_at": "2023-09-21T02:48:47Z",
        "merged_at": "2023-09-21T02:48:47Z",
        "body": "### What does this PR do?\r\n\r\nalso fixes `require('yargs/yargs')`. im surprised we did not have an open issue about this.\r\n\r\nFixes #5173\r\nFurthers #4207 \r\n\r\ni wrote automated tests",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 55,
        "deletions": 40,
        "changed_files": 8,
        "created_at": "2023-09-18T23:23:04Z",
        "closed_at": "2023-09-19T03:49:27Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n1. It takes into account that existing files can be empty.\r\n2. Closes #5704 \r\n3. Extra: Fixes format.\r\n\r\nBefore this PR, with an empty file:\r\n`bun run --watch empty-file.ts` throws a \"missing file\" error. But the file exists.\r\n\r\nAfter this PR, with an empty file:\r\n`bun run --watch empty-file.ts` works and watches if something is being written in the file.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-18T22:04:55Z",
        "closed_at": "2023-09-19T19:39:24Z",
        "merged_at": "2023-09-19T19:39:24Z",
        "body": "### What does this PR do?\r\n\r\nI was looking at the Remix guide/giving it a quick run. I wanted to try to offer a couple of little updates to make it a little more clear what specifically is run in Node vs Bun\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\nLet me know if you have any further suggestions\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 453,
        "deletions": 197,
        "changed_files": 17,
        "created_at": "2023-09-18T21:43:12Z",
        "closed_at": "2023-09-19T00:33:58Z",
        "merged_at": "2023-09-19T00:33:58Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5601\r\nFixes #3638\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew Tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-18T21:01:18Z",
        "closed_at": "2023-09-19T00:34:57Z",
        "merged_at": "2023-09-19T00:34:57Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR fixes local development setup issue when running `make setup` command in ubuntu systems.\r\n\r\nfixes [#5695 ](https://github.com/oven-sh/bun/issues/5695)\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\nRan `make setup` and it executed properly without llvm version issue.\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-18T19:14:16Z",
        "closed_at": "2023-09-20T17:13:32Z",
        "merged_at": "2023-09-20T17:13:32Z",
        "body": "### What does this PR do?\r\nCloses: https://github.com/oven-sh/bun/issues/5683\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR switch ```disableTelemetry```to bunfig instead of .env.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nManual tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 20,
        "changed_files": 4,
        "created_at": "2023-09-18T19:09:56Z",
        "closed_at": "2023-09-18T21:57:48Z",
        "merged_at": "2023-09-18T21:57:48Z",
        "body": "Work from SuperAuguste on #4658, I messed up rebasing that branch and couldn't push a fix.\r\n\r\n### What does this PR do?\r\n\r\nCloses #4651\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-18T15:47:54Z",
        "closed_at": "2023-09-18T17:26:25Z",
        "merged_at": "2023-09-18T17:26:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-18T15:44:14Z",
        "closed_at": "2023-09-19T00:34:39Z",
        "merged_at": "2023-09-19T00:34:39Z",
        "body": "### What does this PR do?\r\nThis branch resulted in the same statement independent of the conditions value so having the branch is not needed\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-09-18T13:33:46Z",
        "closed_at": "2023-09-19T01:14:30Z",
        "merged_at": "2023-09-19T01:14:30Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFor process loaded env vars, its a bug to give them the literal value '\"\"' if the provided length is 0.\r\nI am not entirely sure if this is expected behaviour for DotEnv Files, which is why i left the constant unmodified and opted to only modify the process based value, to which is should apply.\r\n\r\nIf the current behaviour is also faulty for dotenv, changing the `empty_string_value` might be a better approach\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nCompiled/ran a test example to verify the behaviour, can add tests if needed.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-09-18T11:26:13Z",
        "closed_at": "2023-09-19T00:31:26Z",
        "merged_at": "2023-09-19T00:31:26Z",
        "body": "### What does this PR do?\r\n\r\nImplements:\r\n- [`node_api_create_external_string_latin1`](https://nodejs.org/api/n-api.html#node_api_create_external_string_latin1)\r\n- [`node_api_create_external_string_utf16`](https://nodejs.org/api/n-api.html#node_api_create_external_string_utf16)\r\n\r\n### How did you verify your code works?\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-18T04:31:54Z",
        "closed_at": "2023-09-18T11:32:02Z",
        "merged_at": "2023-09-18T11:32:02Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\n\r\nClose: #4589, #5368\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/57e38e831222add628b25e72cbcaff84c71c4a4c/src/install/install.zig#L254-L259\r\n\r\nIf the registry url does not end with a `/`, it will result in the wrong url when joining. For example, joining `http://example.com/aaa` and `package` results in `http://example.com/package` instead of `http://example.com/aaa/package`\r\n\r\nThis PR fixes this by adding a trailing slash during the config parsing to ensure consistency.\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-18T03:41:40Z",
        "closed_at": "2023-09-18T07:32:20Z",
        "merged_at": "2023-09-18T07:32:20Z",
        "body": "### What does this PR do?\r\nInstead of zig being hardcoded in some places in the Makefile, i made them use the ZIG variable. \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI observed `make run-all-unit-tests` works with ZIG= set but zig not in path.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-18T02:45:47Z",
        "closed_at": "2023-09-18T07:11:19Z",
        "merged_at": "2023-09-18T07:11:19Z",
        "body": "### What does this PR do?\r\n\r\nThis adds an environment variable `BUN_GC_TIMER_DISABLE` which disables scheduling the GC between async tasks\r\n\r\n### How did you verify your code works?\r\n\r\nDid not test it",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-18T02:40:49Z",
        "closed_at": "2023-09-18T10:01:20Z",
        "merged_at": "2023-09-18T10:01:20Z",
        "body": "### What does this PR do?\r\n\r\nI have not observed this PR to produce any different output. Just out of an abundance of caution, we should use jsDoubleNumber instead of jsNumber when the number potentially exceeds the maximum/minimum signed 32-bit integer\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests + an added DOMJIT test",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T21:37:09Z",
        "closed_at": "2023-09-18T11:11:25Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds example tsconfig.json/jsconfig.json to ```packages/bun-types``` readme\r\n\r\n### What is the purpose?\r\n\r\nIt allowed me to use code such as ```import fs from 'fs'``` without getting TS errors in VSCode\r\n\r\n[\u2714] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n[----] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T20:48:22Z",
        "closed_at": "2023-09-18T17:28:58Z",
        "merged_at": "2023-09-18T17:28:58Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T20:13:50Z",
        "closed_at": "2023-09-17T21:35:49Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T16:53:53Z",
        "closed_at": "2023-09-18T00:34:35Z",
        "merged_at": "2023-09-18T00:34:35Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds .DS_Store files, which are automatically generated by macOS's Finder application, to the default .gitignore generated by the bun init command to prevent them from being inadvertently committed.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThis is a simple update to the gitignore-for-init file to comply with OSS best-practices.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T15:58:57Z",
        "closed_at": "2023-09-18T01:18:19Z",
        "merged_at": "2023-09-18T01:18:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nFixes a `'app.server' is possibly 'null'.` error in the elysia example.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-09-17T13:09:15Z",
        "closed_at": "2023-09-19T20:25:14Z",
        "merged_at": "2023-09-19T20:25:14Z",
        "body": "Added installation line to react guide\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nI just paste the commands from the manual after a clean install of bun\r\n\r\nwithout installing react i got an error\r\n```\r\nerror: Cannot find module \"react/jsx-dev-runtime\" from \"/Users/jt3k/tmp/bun/react.tsx\"\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-09-17T11:02:52Z",
        "closed_at": "2023-10-16T23:33:03Z",
        "merged_at": "2023-10-16T23:33:03Z",
        "body": "### What does this PR do?\r\n\r\nToday adding the `.only` specifier to a nested `describe` block will not run it, even if launched with the `--only` switch.\r\nThis PR fixes this behavior (the following code now works):\r\n\r\n```ts\r\nimport { test, describe } from \"bun:test\";\r\ndescribe(\"outer\", () => {\r\n  describe.only(\"inner (nested)\", () => {\r\n    test(\"test\", () => {\r\n      console.error(\"reachable\");\r\n    })\r\n  })\r\n})\r\n```\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\nIf Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-17T10:56:56Z",
        "closed_at": "2023-09-18T00:38:04Z",
        "merged_at": "2023-09-18T00:38:04Z",
        "body": "### What does this PR do?\r\n\r\nThis works around #5604.\r\n\r\nDisable DOMJIT for performance.now(). Makes performance.now() a little slower\r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 492,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-17T10:27:55Z",
        "closed_at": "2023-09-21T01:43:08Z",
        "merged_at": "2023-09-21T01:43:08Z",
        "body": "### What does this PR do?\r\n\r\nClose: #4347 \r\n\r\nImplement `dns.lookupService`\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T09:11:53Z",
        "closed_at": "2023-09-17T16:09:57Z",
        "merged_at": "2023-09-17T16:09:57Z",
        "body": "### What does this PR do?\r\n\r\nWhen crossing the file system, the errno of `clonefile()` function is `.XDEV`.\r\n\r\nThis PR fixes it by returning `.XDEV` as `.NotSupported`.\r\n\r\nFixed #362\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI test it manually. Looking for a way to test it automatically:\r\n\r\n```\r\n  ~/dev/Tmp/tt 5m 48s\r\nbase \u276f /Users/pan93412/dev-local/bun/packages/debug-bun-darwin-aarch64/bun-debug install\r\n[SYS] read(3, 4096) = 4096 (0.354ms)\r\n[SYS] close(3)\r\nbun install v1.0.3_debug (0404d09c)\r\n + bun-types@1.0.2\r\n\r\n 1 packages installed [27.00ms]\r\n````\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] ~~I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be~~\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [x] ~~JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed~~\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-17T02:16:18Z",
        "closed_at": "2023-09-17T04:32:52Z",
        "merged_at": "2023-09-17T04:32:52Z",
        "body": "### What does this PR do?\r\n\r\nPeople are confused why importing a Node.js builtin module fails in `bun build`. They need to add `--target=bun` or `--target=node`. The error message isn't clear enough\r\n\r\n### How did you verify your code works?\r\n\r\nI didn't, lets see what tests expect the previous error message and tweak accordingly.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T00:30:21Z",
        "closed_at": "2023-09-17T04:42:58Z",
        "merged_at": null,
        "body": "here is just hint for older cpu to fix dump Illegal instruction (core dumped) issue\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-16T22:36:08Z",
        "closed_at": "2023-09-19T20:26:23Z",
        "merged_at": "2023-09-19T20:26:23Z",
        "body": "### What does this PR do?\r\n\r\nImprove the Bug report template. Reduce Bug reports for fixed issues.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nCreated an Issue on my repo.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-16T21:14:07Z",
        "closed_at": "2023-09-18T07:33:07Z",
        "merged_at": "2023-09-18T07:33:07Z",
        "body": "\r\n### What does this PR do?\r\n\r\nThis matches the functionality in Node. when printing a class that doesn't have a name.\r\n\r\nPreviously this code:\r\n```js\r\n\r\nconsole.log(class { });\r\n\r\n``` \r\n\r\nWould print:\r\n```\r\n[class]\r\n```\r\n\r\nUpdated to print matching with Node:\r\n```\r\n[class (anonymous)]\r\n```\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [X] I included a test for the new code, or an existing test covers it",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 50,
        "changed_files": 1,
        "created_at": "2023-09-16T21:06:35Z",
        "closed_at": "2023-09-18T17:31:53Z",
        "merged_at": "2023-09-18T17:31:53Z",
        "body": "### What does this PR do?\r\n\r\nIt's just a tiny replacement of red and green circles with a checkmark and times icon to be more recognizable for colorblinds like me.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T20:58:27Z",
        "closed_at": "2023-09-17T04:44:03Z",
        "merged_at": "2023-09-17T04:44:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChange string:string mapping in the bun docs to match the expected string:array[string] mapping.\r\n\r\nSee: https://www.typescriptlang.org/tsconfig#paths\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T17:46:50Z",
        "closed_at": "2023-09-17T04:43:43Z",
        "merged_at": "2023-09-17T04:43:43Z",
        "body": "Looks like someone shifted their hand a bit to the right.\r\n\r\nChanges `ytrr` to `tree`\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 432,
        "deletions": 3,
        "changed_files": 12,
        "created_at": "2023-09-16T16:39:46Z",
        "closed_at": "2023-09-18T09:59:10Z",
        "merged_at": "2023-09-18T09:59:10Z",
        "body": "### What does this PR do?\r\n\r\nImplement `arrayContaining`, releated to https://github.com/oven-sh/bun/issues/1825\r\nFurthermore, the algorithm to caclute array containing is `O(m * n)`,  there should have optimisation for it.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T15:01:26Z",
        "closed_at": "2023-09-19T20:26:50Z",
        "merged_at": "2023-09-19T20:26:50Z",
        "body": "### What does this PR do?\r\n\r\nUpdate the Node APIs documentation which incorrectly indicates that `node:net` is fully implemented by while parts are missing.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNone, it's a documentation change",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T13:11:14Z",
        "closed_at": "2023-09-16T17:21:42Z",
        "merged_at": "2023-09-16T17:21:42Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds to the doc fixes in #5379 and #5229 by updating another workspace example to use `\"workspace:*\"` instead of `\"*\"`.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-16T12:10:25Z",
        "closed_at": "2023-09-21T01:44:06Z",
        "merged_at": "2023-09-21T01:44:06Z",
        "body": "### What does this PR do?\r\n\r\nSupport BOM detection and `TextEncoder.ignoreBOM`.\r\n\r\nCloses https://github.com/oven-sh/bun/issues/5471\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 70,
        "changed_files": 19,
        "created_at": "2023-09-16T03:53:25Z",
        "closed_at": "2023-09-16T07:44:07Z",
        "merged_at": "2023-09-16T07:44:07Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 372,
        "deletions": 81,
        "changed_files": 9,
        "created_at": "2023-09-16T01:51:37Z",
        "closed_at": "2023-09-17T15:59:01Z",
        "merged_at": "2023-09-17T15:59:01Z",
        "body": "### What does this PR do?\r\n\r\nImplement VSCode tasks for Bun. \r\n\r\n- [x] VSCode tasks as described in #5205\r\n- [x] Package.json scripts as described in #5204\r\n\r\n### How did you verify your code works?\r\n\r\nStill manual testing. We should set up automated testing soon for the VSCode extension.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 452,
        "deletions": 422,
        "changed_files": 4,
        "created_at": "2023-09-16T01:02:16Z",
        "closed_at": "2023-09-16T04:18:57Z",
        "merged_at": "2023-09-16T04:18:57Z",
        "body": "### What does this PR do?\r\nFix: [4851](https://github.com/oven-sh/bun/issues/4851)\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-16T00:32:06Z",
        "closed_at": "2023-09-16T04:19:49Z",
        "merged_at": "2023-09-16T04:19:49Z",
        "body": "Fixes #5501\r\n\r\nEnsures `require` and `resolve` statements are treated as an identifier with a space before them, so you don't end up with `returnrequire` in the minified output.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6808,
        "deletions": 6518,
        "changed_files": 8,
        "created_at": "2023-09-15T23:40:24Z",
        "closed_at": "2023-09-21T01:50:11Z",
        "merged_at": "2023-09-21T01:50:11Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/5258\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T22:00:41Z",
        "closed_at": "2023-09-19T20:35:37Z",
        "merged_at": "2023-09-19T20:35:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nInstalled the correct version by changing the number.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-09-15T21:45:43Z",
        "closed_at": "2023-09-17T16:13:30Z",
        "merged_at": "2023-09-17T16:13:30Z",
        "body": "### What does this PR do?\r\n\r\nUpdate the commit hash of `zls` in the document. This fixes https://github.com/oven-sh/bun/issues/5508.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-09-15T21:18:09Z",
        "closed_at": "2023-09-16T04:21:15Z",
        "merged_at": "2023-09-16T04:21:15Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5442 \r\n\r\nAdds a conditional to only trim the first character if it's a leading slash, because there might already be a trailing slash on the watch path, that we already strip from the start of the string.\r\n\r\nAlso removed some unreachable code while I was here.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-15T20:59:16Z",
        "closed_at": "2023-09-16T04:19:27Z",
        "merged_at": "2023-09-16T04:19:26Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nMy fix or improve on: https://github.com/oven-sh/bun/issues/5363 and fix https://github.com/oven-sh/bun/issues/5494\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-15T19:37:47Z",
        "closed_at": "2023-09-17T04:55:41Z",
        "merged_at": "2023-09-17T04:55:41Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/3766\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-09-15T17:46:44Z",
        "closed_at": "2023-10-16T23:18:40Z",
        "merged_at": "2023-10-16T23:18:40Z",
        "body": "### What does this PR do?\r\n\r\nOptimizes how `EventEmitterPrototype.emit(...)` triggers the callback functions, especially noticable with the 'line' event of readline.Interface.\r\n\r\n- Brings performance for emits with only one argument for `...args` to Node.js level\r\n- Emits with multiple args should have improved performance as well\r\n\r\nFixes #5136 \r\n_(Please also see my comments there, I think there is a different underlying issue regarding array cloning/spreading which is just worked around with this pull request)_\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI did manual tests and also ran the tests in test/js/node/events\r\n\r\n- [X] I ran `make js` and committed the transpiled changes\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [X] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T17:12:57Z",
        "closed_at": "2023-09-19T04:27:53Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nResolves #5076. \r\n\r\nThe NPM registry at https://registry.npmjs.org supports url encoded and non encoded scoped package names. This means that packages such as `@storybook/addons` can be requested from either:\r\n- https://registry.npmjs.org/@storybook%2Faddons\r\n- https://registry.npmjs.org/@storybook/addons\r\n\r\nOther registries such as AWS CodeArtifact don't support this however. This is not a problem for clients such as `npm` as it requests from https://registry.npmjs.org/@storybook%2Faddons.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nRan it on projects making use of AWS CodeArtifact for scoped packages and the packages were installed.\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n\r\nThis is my first time writing zig so I am not sure if this solution is particular idiomatic. Let me know if it can be improved at all.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-15T16:49:40Z",
        "closed_at": "2023-09-17T05:44:13Z",
        "merged_at": "2023-09-17T05:44:13Z",
        "body": "### What does this PR do?\r\nFix: https://github.com/oven-sh/bun/issues/3083\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 85,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-09-15T15:16:03Z",
        "closed_at": "2023-10-20T19:37:08Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR addresses my issue outlined in #5314.\r\n\r\nThe problem with #5314 is that the Bun runtime does not allow plugins to handle asynchronous imports.\r\nI personally need this feature, so I decided to create this PR to implement it for all the Bun users.\r\nI also planed after this PR to create a Bun plugin capable of importing image and do some image operation before building and live.\r\n\r\nAlthough I'm not really familiar with Zig, I have knowledge in C/C++ and Rust and I know how computer memory can been slow some time. So I try the best to not create any useless variable.\r\nPlease Verify I didn't anything is not idiomatic to Zig and will hurt de performance of Bun.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I have written some tests for the bundler for verify if it's still works.\r\n- [x] I have written some tests for the runtime plugin to verify if I didn't broke the none async `builder.onResolve` and if the async `build.onResolve` work as expected\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be ***(But since I'm not a zig expert so please verify)***\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 26,
        "changed_files": 3,
        "created_at": "2023-09-15T14:38:16Z",
        "closed_at": "2023-09-15T21:06:20Z",
        "merged_at": null,
        "body": "- minor build diffs\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T14:27:04Z",
        "closed_at": "2023-09-15T15:32:32Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-15T12:21:12Z",
        "closed_at": "2023-09-15T13:53:40Z",
        "merged_at": "2023-09-15T13:53:40Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nFixes #5465\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-15T11:01:27Z",
        "closed_at": "2023-09-15T12:36:08Z",
        "merged_at": "2023-09-15T12:36:08Z",
        "body": "### What does this PR do?\r\n\r\nThis implements [`URL.canParse`](https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse_static)\r\n\r\nBased on https://github.com/WebKit/WebKit/pull/11919\r\n\r\n### How did you verify your code works?\r\n\r\nI copied the tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T09:35:58Z",
        "closed_at": "2023-09-20T04:39:22Z",
        "merged_at": "2023-09-20T04:39:22Z",
        "body": "Updated docs to address `The ES modules aren't always asynchronous. #5420` Issue. \r\n- Included an elaborate explanation citing the difference between CommonJS and ES Modules, \r\n- Added a summary\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-15T09:05:33Z",
        "closed_at": "2023-09-26T23:35:15Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nbased on the original alpine image, which cannot run bun successfully , \r\n\r\nif we add `gcompat` into it , bun can run smoothly in most cases, we can happily use bun to boost vite dev performance, such as : `bun --bun x vite --host`\r\n\r\nbut in some edge cases, especially lightningcss related scenarioes, we still need further add `glic-bin` into this container. \r\nFYI, lightningcss will be used heavily in next version of tailwindcss -- tailwindcss 3.4. And since vite 4.4, there's a experimental feature using lightningcss as its css moudule.  \r\n\r\n\r\n### How did you verify your code works?\r\n```\r\nRUN /usr/glibc-compat/bin/ldd /usr/local/bin/bun\r\n```\r\nBTW, this line can be omitted , just to make sure there are no errors in loading bun related libraries\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-09-15T08:44:49Z",
        "closed_at": "2023-09-15T11:23:38Z",
        "merged_at": "2023-09-15T11:23:38Z",
        "body": "### What does this PR do?\r\n\r\nDoes not fix #4622, but gets closer \r\n\r\nserialport no longer crashes\r\n\r\nDon't know if `serialport` actually works though\r\n\r\nEdit: serialport relies on libuv symbols which bun does not currently implement. This PR is still some good bugfixes for napi. But it does not fix the issue serialport is running into.\r\n\r\nThese are missing:\r\n\r\n- uv_mutex_*\r\n- uv_poll_init\r\n- uv_poll_stop\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-15T08:36:34Z",
        "closed_at": "2023-09-15T21:10:06Z",
        "merged_at": "2023-09-15T21:10:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nfix some typo.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 907,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-09-15T08:16:24Z",
        "closed_at": "2023-09-18T23:29:57Z",
        "merged_at": "2023-09-18T23:29:56Z",
        "body": "### What does this PR do?\r\n\r\nCopies node's implementation for `console.Console`, which gives the console interface but piped to any node stream. This enables:\r\n\r\n- Closes #3625\r\n- MightFix #4145\r\n- Closes #4610\r\n- Closes #4898\r\n- Closes #4737\r\n- Helps #2034\r\n\r\n```ts\r\nimport { Console } from \"console\";\r\nimport { createWriteStream } from \"fs\";\r\n\r\nconst writer = new Console({ stdout: createWriteStream(\"log.txt\") });\r\n\r\nwriter.log(\"hello\");\r\nwriter.log(\"world\", { x: 2 });\r\n```\r\n\r\nand this will write to the file\r\n\r\n```\r\nhello\r\nworld { x: 2 }\r\n```\r\n\r\nTODO:\r\n- [ ] Tests.\r\n- [ ] Bug with printing will reveal the options object somehow.\r\n- [ ] Self-Review.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T06:53:26Z",
        "closed_at": "2023-09-20T04:34:26Z",
        "merged_at": "2023-09-20T04:34:26Z",
        "body": "### What does this PR do?\r\n\r\n \r\nupdate docs with a warning to Ensure correct placement of the '--watch' flag in the running command.\r\n \r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T06:35:55Z",
        "closed_at": "2023-09-19T03:23:19Z",
        "merged_at": "2023-09-19T03:23:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nThis adds TypeScript type for `navigator`.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 139,
        "deletions": 27,
        "changed_files": 6,
        "created_at": "2023-09-15T01:45:28Z",
        "closed_at": "2023-09-15T06:03:20Z",
        "merged_at": "2023-09-15T06:03:20Z",
        "body": "### What does this PR do?\r\nfixes #5183 \r\nfixes #4285 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually and added tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T01:10:23Z",
        "closed_at": "2023-09-15T07:01:05Z",
        "merged_at": "2023-09-15T07:01:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T00:49:49Z",
        "closed_at": "2023-09-16T13:52:01Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChange the confusing sentence on ES modules.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5696,
        "deletions": 33,
        "changed_files": 6,
        "created_at": "2023-09-15T00:39:50Z",
        "closed_at": "2023-09-15T06:25:01Z",
        "merged_at": "2023-09-15T06:25:01Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFix: https://github.com/oven-sh/bun/issues/5321 and https://github.com/oven-sh/bun/issues/5107\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T16:20:05Z",
        "closed_at": "2023-09-14T18:43:58Z",
        "merged_at": null,
        "body": "\r\nResolves #5211\r\n\r\n### What does this PR do?\r\n\r\nThis matches behavior in Node where undefined as first argument is considered utf-8\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests\r\n\r\nIf Zig files changed:\r\n\r\n- [X] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [X] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T15:56:55Z",
        "closed_at": "2023-09-17T05:41:52Z",
        "merged_at": "2023-09-17T05:41:52Z",
        "body": "### What does this PR do?\r\n\r\nCloses #5211\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-14T14:33:20Z",
        "closed_at": "2023-09-14T22:04:26Z",
        "merged_at": "2023-09-14T22:04:26Z",
        "body": "### What does this PR do?\r\n\r\nExplain that the version of packages within a workspace need to be `\"workspace:*\"`.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-14T13:35:24Z",
        "closed_at": "2023-09-14T16:09:22Z",
        "merged_at": "2023-09-14T16:09:22Z",
        "body": "### What does this PR do?\r\n\r\nThis PR fixes a typo in an export.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nRelied on existing tests\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1404,
        "deletions": 1555,
        "changed_files": 21,
        "created_at": "2023-09-14T10:00:15Z",
        "closed_at": "2023-09-15T04:26:37Z",
        "merged_at": "2023-09-15T04:26:37Z",
        "body": "### What does this PR do?\r\n\r\nThis makes all node:fs functions which have an async or promise version and makes them actually async in the threadpool\r\n\r\nthis is not super optimized on linux. it really should use io_uring when supported. It does not. It does the slow thing.\r\n\r\nI suspect this will fix #4743 but needs testing\r\n\r\n### How did you verify your code works?\r\n\r\nNeeds tests for everything",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1687,
        "deletions": 1193,
        "changed_files": 35,
        "created_at": "2023-09-14T09:02:37Z",
        "closed_at": "2023-09-15T15:22:07Z",
        "merged_at": "2023-09-15T15:22:07Z",
        "body": "### What does this PR do?\r\n\r\nchangelog notes:\r\n- feat(runtime): add `process.binding` `uv`/`natives`/`config`\r\n- perf(runtime): make Bun's GlobalObject a static hash table\r\n\r\nThis refactors how `process.binding` works, mainly bringing it into native code. This implements the UV binding (which is simply an error map) which lays out the groundwork to implement the rest of the bindings easily.\r\n\r\n\r\n- Closes #2891, Closes #2685 by implementing `process.binding(\"uv\")`\r\n- Closes #4960, Closes #2254 by implementing `process.binding(\"natives\")`\r\n- Might fix #4207, needs testing\r\n- Closer but does not fix #3794\r\n\r\nPerhaps before this is merged i will implement some more of these bindings because some are very easy for us to do.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 35,
        "changed_files": 6,
        "created_at": "2023-09-14T05:18:19Z",
        "closed_at": "2023-09-15T08:39:42Z",
        "merged_at": "2023-09-15T08:39:42Z",
        "body": "### What does this PR do?\r\n\r\nfixes #5435\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-14T05:05:30Z",
        "closed_at": "2023-09-14T16:11:44Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 63,
        "changed_files": 5,
        "created_at": "2023-09-14T03:10:34Z",
        "closed_at": "2023-09-15T00:30:31Z",
        "merged_at": "2023-09-15T00:30:31Z",
        "body": "### What does this PR do?\r\n\r\ndoes not fully fix pm2 but it doesnt error on startup anymore\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 83,
        "changed_files": 8,
        "created_at": "2023-09-14T02:51:00Z",
        "closed_at": "2023-09-14T05:32:03Z",
        "merged_at": "2023-09-14T05:32:03Z",
        "body": "1. Enabling configuration of lockfile location at the global config level means that the lockfile isn't guaranteed consistent across a team. Currently, the only \"safe\" (read: assured consistent) way to use `bun` with multiple contributor teams requires setting that value in the local `bunfig.toml`.\r\n\r\n2. Splitting the two values from each other enables a configuration where you can\u2019t read after writing.\r\n\r\n3. `env` priority is \"correct\" for `BUN_CONFIG_LOCKFILE_SAVE_PATH` but I don't feel like it should exist. It isn't used in the test suite, makes shared configuration impossible, and appears [semi-arbitrarily added](https://github.com/oven-sh/bun/commit/a765b13f526f5d379c7d2535f496fecd9a202add) two years ago in December 2021.\r\n\r\n4. `--lockfile` introduces the same problem, and since it is per-execution, is _extremely_ difficult to ensure consistency. It also gets removed.\r\n\r\n***\r\n\r\nApproach notes:\r\n- This does not change the peechy schema because I'm ~certain that isn't possible.\r\n- I don't know what I don't know in Zig.\r\n- I _think_ there are some other places that can be cleaned up because `lockfile_path` is now a static string.\r\n\r\n***\r\n\r\nCloses #5259",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 463,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T02:15:01Z",
        "closed_at": "2023-09-15T02:43:12Z",
        "merged_at": "2023-09-15T02:43:12Z",
        "body": "merge when https://github.com/oven-sh/WebKit/pull/19 is in our webkit build",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-14T01:10:41Z",
        "closed_at": "2023-09-14T02:27:50Z",
        "merged_at": "2023-09-14T02:27:50Z",
        "body": "### What does this PR do?\r\n\r\nThis updates the documentation for how to add bun-types.\r\nReading the documentation on bun-types it was not clear to me that the tsconfig.ts needs to look like this:\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"types\": [\"bun-types\"]\r\n  }\r\n}\r\n```\r\n\r\nSo i added the \"compilerOptions\" information.\r\n\r\n- [ x ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\n- [  x ] Checked the readme on my pr \r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-13T22:45:29Z",
        "closed_at": "2023-09-14T04:05:02Z",
        "merged_at": "2023-09-14T04:05:02Z",
        "body": "### What does this PR do?\r\n\r\ncorrectly handles escaped CRLF line endings in multiline strings\r\n\r\nfixes https://github.com/oven-sh/bun/issues/4893\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI manually tested against three files\r\n- terminated with CRLF\r\n- terminated with CR\r\n- terminated with LF\r\n\r\nPre change it errored on CRLF and passed on the other 2\r\nPost change it passes on all 3\r\n\r\nI also added an automated test for the failing CRLF scenario.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T18:03:25Z",
        "closed_at": "2023-09-13T21:08:10Z",
        "merged_at": "2023-09-13T21:08:10Z",
        "body": "### What does this PR do?\r\n\r\nFixes example with `spyOn` and assertions. The example failed because the spied function would be called once but the expectation asserted 0 calls.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n1. Create test file with example.\r\n2. Run `bun test`.\r\n\r\nExample test should now pass.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 297,
        "changed_files": 1,
        "created_at": "2023-09-13T17:43:36Z",
        "closed_at": "2023-09-18T12:24:37Z",
        "merged_at": null,
        "body": "I've optimized  development.md for clarity and ease of understanding for beginner developers\r\n\r\n### What does this PR do?\r\n\r\nSimplified Language: The language used in the README was simplified to make it more accessible for beginner developers. Complex technical terms were explained or replaced with simpler terms where appropriate.\r\n\r\nImproved Structure: The README was restructured to follow a logical order, making it easier for readers to follow the steps required to set up their development environment for Bun.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T16:01:54Z",
        "closed_at": "2023-09-14T03:45:37Z",
        "merged_at": "2023-09-14T03:45:37Z",
        "body": "### What does this PR do?\r\n\r\nUse `bun create svelte` instead of `bunx create-svelte`. \r\n\r\nThis is to bring the documentation at par with the SvelteKit official doc to [create a project](https://kit.svelte.dev/docs/creating-a-project).\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T15:41:04Z",
        "closed_at": "2023-09-13T21:08:28Z",
        "merged_at": "2023-09-13T21:08:28Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds some missing links to make it easy to jump to another section.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-13T14:15:11Z",
        "closed_at": "2023-09-13T17:27:33Z",
        "merged_at": "2023-09-13T17:27:33Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nThe docs were missing instructions on the additions needed to `.gitattributes` in order to make the suggested git config settings work.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T13:44:56Z",
        "closed_at": "2023-09-21T03:11:14Z",
        "merged_at": "2023-09-21T03:11:14Z",
        "body": "sudo is required to run pacman if not root user\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-13T11:37:03Z",
        "closed_at": "2023-09-13T23:36:12Z",
        "merged_at": "2023-09-13T23:36:12Z",
        "body": "### What does this PR do?\r\n\r\nFixed typo on the API & CLI Docs.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-13T08:36:38Z",
        "closed_at": "2023-09-14T03:54:47Z",
        "merged_at": "2023-09-14T03:54:47Z",
        "body": "### What does this PR do?\r\n\r\nIt is put in a separate file and Bun.spawn()ed because using this setter is a de-optimization to the module resolver and cannot be undone.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 190,
        "deletions": 56,
        "changed_files": 7,
        "created_at": "2023-09-13T08:07:14Z",
        "closed_at": "2023-09-14T00:31:59Z",
        "merged_at": "2023-09-14T00:31:59Z",
        "body": "### What does this PR do?\r\n\r\nThis makes `--watch` not wait on the event loop. So if you have slow code that is running, the script restarts immediately instead of waits. While we do use CLOEXEC, we also go ahead and manually track open listening sockets for the HTTP server and close them all before reloading the process. I think that was the original reason why we didn't do this - because you could end up in situations where the OS would route it to a stale HTTP server listening.\r\n\r\n![Screen Recording 2023-09-13 at 12 59 23 AM](https://github.com/oven-sh/bun/assets/709451/badc01dd-f08b-4752-9b5a-b69a76c25d72)\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManual + existing tests",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2023-09-13T07:58:31Z",
        "closed_at": "2023-09-13T23:57:59Z",
        "merged_at": "2023-09-13T23:57:59Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4593\r\nFixes #4880\r\n\r\nFastify does this thing where they iterate over `require.cache` during plugin registration\r\n\r\n```ts\r\n  // let's see if this is a file, and in that case use that\r\n  // this is common for plugins\r\n  const cache = require.cache\r\n  // cache is undefined inside SEA\r\n  if (cache) {\r\n    const keys = Object.keys(cache)\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i]\r\n      if (cache[key].exports === func) { // ERROR HERE: undefined is not an object\r\n        return key\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nNot sure how it gets inserted into the ESM registry, but `msgpack-extract` somehow does this; it's an unevaluated module.\r\n\r\nI don't think unevaluated modules should appear in the require cache at all, period. This PR filters those out.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 133,
        "deletions": 18,
        "changed_files": 10,
        "created_at": "2023-09-13T07:40:26Z",
        "closed_at": "2023-09-14T03:43:40Z",
        "merged_at": "2023-09-14T03:43:40Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T07:06:48Z",
        "closed_at": "2023-09-13T08:38:17Z",
        "merged_at": "2023-09-13T08:38:17Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nUpdates discord.js documentation to correct a named link that previously could mislead people into thinking it's a link to a Discord website when it's a link to discord.js' documentation in reality.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-13T06:54:19Z",
        "closed_at": "2023-09-14T03:50:22Z",
        "merged_at": "2023-09-14T03:50:22Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nI noticed that the [modules documentation](https://bun.sh/docs/runtime/modules) doesn't include import example code in the imports section. \r\n\r\n![image](https://github.com/oven-sh/bun/assets/30512204/0913a02f-bc3e-4182-8816-8dec09b11776)\r\n\r\nThis PR replaces the screenshotted code block with:\r\n```ts\r\nimport { foo } from \"./foo\"; // extensions are optional\r\nimport bar from \"./bar.ts\";\r\nimport { stuff } from \"./my-commonjs.cjs\";\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-13T06:15:13Z",
        "closed_at": "2023-09-13T17:24:58Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nSimple edit to my First contribution\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1227,
        "deletions": 1244,
        "changed_files": 20,
        "created_at": "2023-09-13T06:15:10Z",
        "closed_at": "2023-09-14T04:39:37Z",
        "merged_at": "2023-09-14T04:39:36Z",
        "body": "### What does this PR do?\r\n\r\nfixes #4806\r\nfixes #2269\r\nfixes #399\r\n\r\nthings tagged on here as well\r\n- chore: remove zig-generated unused fs `constants` string \r\n- fix(runtime): allow calling the console `asyncIterator` Closes #5175\r\n\r\n.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T04:01:50Z",
        "closed_at": "2023-09-13T07:59:47Z",
        "merged_at": null,
        "body": "Fix #5189\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-09-13T03:45:55Z",
        "closed_at": "2023-09-14T00:43:10Z",
        "merged_at": "2023-09-14T00:43:10Z",
        "body": "### What does this PR do?\r\n\r\n#### 1. long string could lead to a segfault.\r\n\r\nSegmentfault code: \r\n\r\n```JavaScript\r\nconst dns = require(\"node:dns\");\r\n\r\ndns.resolveCname(\"a\".repeat(3000), (err, results) => {});\r\n```\r\n\r\n`null` should not be used here as it can lead to a crash. (Line 530)\r\n\r\nhttps://github.com/oven-sh/bun/blob/3b2c0941e4b418dcf2bfbc5117da76338f45a90e/src/deps/c_ares.zig#L526-L541\r\n\r\n\r\n#### 2. Fix a compatibility issue (`resolveNs` and `resolveSoa`)\r\n\r\n```JavaScript\r\nconst dns = require(\"node:dns\");\r\nfor (const f of [dns.resolveNs, dns.resolveSoa]) {\r\n  f(\"\", (err, results) => {\r\n    console.log(f, results);\r\n  });\r\n}\r\n\r\n// nodejs output\r\n// [Function: bound queryNs] [\r\n//   'h.root-servers.net',\r\n//   'j.root-servers.net',\r\n//   'k.root-servers.net',\r\n//   'd.root-servers.net',\r\n//   'b.root-servers.net',\r\n//   'f.root-servers.net',\r\n//   'l.root-servers.net',\r\n//   'e.root-servers.net',\r\n//   'i.root-servers.net',\r\n//   'a.root-servers.net',\r\n//   'm.root-servers.net',\r\n//   'g.root-servers.net',\r\n//   'c.root-servers.net'\r\n// ]\r\n// [Function: bound querySoa] {\r\n//   nsname: 'a.root-servers.net',\r\n//   hostmaster: 'nstld.verisign-grs.com',\r\n//   serial: 2023091202,\r\n//   refresh: 1800,\r\n//   retry: 900,\r\n//   expire: 604800,\r\n//   minttl: 86400\r\n// }\r\n```\r\n\r\nbun doesn't allow empty strings to be passed into these two functions.\r\n\r\n---\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-13T01:33:44Z",
        "closed_at": "2023-09-14T02:49:43Z",
        "merged_at": "2023-09-14T02:49:43Z",
        "body": "### What does this PR do?\r\nFix: https://github.com/oven-sh/bun/issues/5080\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 126,
        "changed_files": 5,
        "created_at": "2023-09-12T23:10:02Z",
        "closed_at": "2023-09-13T08:26:18Z",
        "merged_at": "2023-09-13T08:26:18Z",
        "body": "### What does this PR do?\r\nfixes #5132 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-12T22:22:35Z",
        "closed_at": "2023-09-14T00:41:47Z",
        "merged_at": "2023-09-14T00:41:47Z",
        "body": "### What does this PR do?\r\n\r\nThis fix printing `.find()` result from `mongodb` package.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nManually testing\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-12T21:21:47Z",
        "closed_at": "2023-09-13T01:49:19Z",
        "merged_at": "2023-09-13T01:49:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nfix code example in documentation about lifecycle hooks\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\ndidn't tested it but seems logic",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T21:03:01Z",
        "closed_at": "2023-09-13T00:09:49Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR closes #5153 and suggests appending to a config file like .bashrc or .zshrc when `bun completions` fails (fails on WSL Ubuntu bash since none of these folders in [install_completions_command.zig](https://github.com/oven-sh/bun/blob/main/src/cli/install_completions_command.zig#L282) exist).\r\n\r\nNow, when it fails, it will output\r\n\r\n```bash\r\nPlease either append it to your respective config file (.bashrc, .zshrc, etc):\r\n   bun completions >> ~/.bashrc\r\n   bun completions >> ~/.zshrc \r\n\r\n Pipe it:\r\n   bun completions > /to/a/file\r\n\r\n Or pass a directory:\r\n\r\n   bun completions /my/completions/dir\r\n```\r\n(the first line is a little long but it's just under the recommended 80 char limit)\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nPrinted the updated string and ran `bun completions >> ~/.bashrc` on WSL\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-09-12T20:55:00Z",
        "closed_at": "2023-09-14T04:48:31Z",
        "merged_at": "2023-09-14T04:48:31Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/4966\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 18,
        "changed_files": 17,
        "created_at": "2023-09-12T20:50:25Z",
        "closed_at": "2023-09-13T01:50:06Z",
        "merged_at": "2023-09-13T01:50:06Z",
        "body": "I tried to fix multiple typos among various files in the documentation \ud83d\ude80 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T20:18:38Z",
        "closed_at": "2023-09-13T02:14:27Z",
        "merged_at": "2023-09-13T02:14:27Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes a small punctuation typo in the docs for `import.meta.resolve`. It adds a missing quotation.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] The missing quotation is now present.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-09-12T19:41:56Z",
        "closed_at": "2023-09-13T04:51:07Z",
        "merged_at": "2023-09-13T04:51:07Z",
        "body": "### What does this PR do?\r\n\r\nThis PR changes the method for enabling Bun lockfile diffs in git. Instead of manually modifying config files, the new method uses the git CLI's `--global` flag to change the global `.gitattributes` file. This should be easier, safer, and more cross-platform than manually modifying the config files. I also clarified that the \"local\" git-attributes file refers to a per-repository setting, while the global `.gitattributes` file refers to a system-wide setting.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T19:09:53Z",
        "closed_at": "2023-09-13T08:56:20Z",
        "merged_at": "2023-09-13T08:56:19Z",
        "body": "I have no idea how to zig but noticed this while exploring the source code and figured I'd do a PR \ud83d\ude05 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T16:42:30Z",
        "closed_at": "2023-09-13T01:50:50Z",
        "merged_at": "2023-09-13T01:50:50Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-12T16:35:48Z",
        "closed_at": "2023-09-13T12:35:39Z",
        "merged_at": "2023-09-13T12:35:39Z",
        "body": "### What does this PR do?\r\nFixes #5073 \r\n\r\nImplements a non-strict mode of the percent encoding decoder that instead of immediately throwing an error and using the original data when there is non-URL safe character in a data URL, it passes the non-URL safe characters through and only replaces the percent encoded elements.\r\n\r\n`test.mjs`:\r\n```\r\nconsole.log(await fetch(\"data:application/json,{%7B%7D}\").then((r) => r.text()));\r\nconsole.log(await fetch(\"data:application/json,{%%7B%7D%%}%%\").then((r) => r.text()));\r\nconsole.log(await fetch(\"data:,%20%\ud83d\ude00\").then((r) => r.text()));\r\n```\r\n\r\nNode output:\r\n```\r\n{{}}\r\n{%{}%%}%%\r\n %\ud83d\ude00\r\n```\r\n\r\nBun before this commit:\r\n```\r\n{%7B%7D}\r\n{%%7B%7D%%}%%\r\n%20%\ud83d\ude00\r\n```\r\n\r\nAfter this commit, the output from Bun matches Node.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T15:56:57Z",
        "closed_at": "2023-09-13T05:04:40Z",
        "merged_at": "2023-09-13T05:04:40Z",
        "body": "### Made bun-types install as dev dependency in example\r\n\r\nAs bun-types only adds types and it is suggested in other places to be only installed as dev dependency the readme installation example should also do so\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T15:24:22Z",
        "closed_at": "2023-09-14T03:50:59Z",
        "merged_at": "2023-09-14T03:50:59Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis fixes a link in the Templates doc.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-12T14:44:08Z",
        "closed_at": "2023-09-14T00:41:10Z",
        "merged_at": "2023-09-14T00:41:10Z",
        "body": "### What does this PR do?\r\n\r\nResolves #4986\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test in [os.test.js](https://github.com/WingLim/bun/commit/2b92bcb7e743bb2b501ce85c7802254552ba2d3a#diff-d6b42a80df08c1f8ca95728d1b2166de3388a2c8a0d3085a53177a1c9e7f6154)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-12T13:40:26Z",
        "closed_at": "2023-09-20T18:14:55Z",
        "merged_at": "2023-09-20T18:14:55Z",
        "body": "### What does this PR do?\r\n\r\n`bun install` and `bun add` both support the `--exact` flag for pinning a dependency's version.\r\nThis adds a shorter `-E` flag as an alias, something that [npm](https://docs.npmjs.com/cli/v10/commands/npm-install#save-exact:~:text=additional%2C%20optional%20flags%3A-,%2DE%2C%20%2D%2Dsave%2Dexact,-%3A%20Saved%20dependencies%20will), [Yarn](https://yarnpkg.com/cli/add#options-E%2C-exact), and [pnpm](https://pnpm.io/cli/add#--save-exact--e) also support.\r\n\r\n- [ ] Documentation or TypeScript types\r\n  - There are a few examples of how to use `--exact` where it may be helpful to have examples for `-E` as well\r\n  - I think it's fine to leave them as-is though\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI've tested locally and confirmed that the flag works as expected:\r\n\r\n![screenshot of `bun install zod -E` working locally](https://github.com/oven-sh/bun/assets/7608555/4c9e5ad0-752d-4737-9b8b-4bf5f3ade6ce)\r\n\r\nThere are existing tests for `--exact`. If it'd be useful, those could be duplicated to do the same assertions but with `-E` instead of `--exact. The only thing that'd test would be the CLI arg parsing though, not sure if that's useful.\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T12:04:17Z",
        "closed_at": "2023-09-12T15:30:06Z",
        "merged_at": "2023-09-12T15:30:06Z",
        "body": "### What does this PR do?\r\n\r\nRemove the extra \"+\" at the end of a line in the example which causes a syntax error in the example. \r\n\r\n\r\n- [x] Documentation or TypeScript types",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T11:55:51Z",
        "closed_at": "2023-09-12T15:30:24Z",
        "merged_at": "2023-09-12T15:30:24Z",
        "body": "### What does this PR do?\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nFixed the example for WebSocket Compression to avoid lint error:   \r\n`'message' is declared but its value is never read.`\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-09-12T10:43:57Z",
        "closed_at": "2023-09-12T13:34:20Z",
        "merged_at": "2023-09-12T13:34:20Z",
        "body": "### What does this PR do?\r\n\r\n- When the linux kernel doesn't support `pidfd_open`, report a more informative error message \r\n- Handle EINTR when pidfd_open is called\r\n\r\n- Check the pid returned by waitpid, per:\r\n> waitpid(): on success, returns the process ID of the child whose\r\n> state has changed; if WNOHANG was specified and one or more\r\n> child(ren) specified by pid exist, but have not yet changed\r\n> state, then 0 is returned.  On failure, -1 is returned.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests are hopefully less flaky",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-12T09:39:20Z",
        "closed_at": "2023-09-13T01:51:16Z",
        "merged_at": "2023-09-13T01:51:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-12T09:34:14Z",
        "closed_at": "2023-09-12T10:35:30Z",
        "merged_at": "2023-09-12T10:35:30Z",
        "body": "### What does this PR do?\r\n\r\n- This skips loading tsconfig.json for `bun run <package.json script>` which was completely unnecessary work\r\n- This fixes a confusing crash when the tsconfig.json `\"extends\"` points to an invalid file path (we do not yet support node_modules resolution in `\"extends\"`)\r\n- This makes an error when loading the current working directory clearer\r\n- This fixes a bug that could cause build errors to be logged twice\r\n\r\n### How did you verify your code works?\r\n\r\nThere are a couple tests\r\n\r\nBut mostly manually tested via the repo in `create-turbo@latest workspace-run npm --skip-install` ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T09:29:42Z",
        "closed_at": "2023-09-20T04:42:56Z",
        "merged_at": null,
        "body": "Because the `file` has already been imported, there is no need to use `Bun.file`\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T09:23:50Z",
        "closed_at": "2023-09-13T01:52:30Z",
        "merged_at": "2023-09-13T01:52:30Z",
        "body": "### What does this PR do?\n\nclang and llvm on arch install v16, update to use v15 and update env.\n\n- [x] Documentation for building bun\n- [ ] Code changes\n\n### How did you verify your code works?\n\nmake setup was failing, now it produces working packages/debug-bun-linux-x64/bun-debug\n\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T07:55:28Z",
        "closed_at": "2023-09-13T08:41:18Z",
        "merged_at": "2023-09-13T08:41:18Z",
        "body": "### Updated code for file exists() function\r\n\r\n<!-- file.exists() is an async function and needs to be awaited to get the value -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-12T07:43:20Z",
        "closed_at": "2023-09-13T09:02:25Z",
        "merged_at": "2023-09-13T09:02:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n1. add test to confirm no \"accept-encoding\" header has been added\r\n2. add check to avoid writing the header\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-12T06:27:28Z",
        "closed_at": "2023-09-13T01:53:23Z",
        "merged_at": "2023-09-13T01:53:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThe explanation in the root bunfig.toml contained a typo and some grammar issues. This fixes them.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 19,
        "changed_files": 7,
        "created_at": "2023-09-12T03:38:35Z",
        "closed_at": "2023-09-15T03:24:49Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nfixes #4878 \r\nfixes #4800 \r\nfixes #4664 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually different create scripts and templates on linux and macos\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-12T00:55:30Z",
        "closed_at": "2023-09-19T03:14:32Z",
        "merged_at": "2023-09-19T03:14:32Z",
        "body": "### What does this PR do?\r\nCloses https://github.com/oven-sh/bun/issues/4238\r\nBased off @JeremyFunk's [PR](https://github.com/oven-sh/bun/pull/4907).\r\n\r\nRemoves a check that would prevent an empty `js/ts` file from being run by the JS runtime, causing a confusing error.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T20:14:13Z",
        "closed_at": "2023-09-26T12:08:16Z",
        "merged_at": null,
        "body": "### What does this PR do?\n\n`-DUSE_BUN_JSC_ADDITIONS=ON` was added one time more than necessary... sadly\n\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\n- [X] Code changes\n\n### How did you verify your code works?\n\ntest `make jsc`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T20:06:16Z",
        "closed_at": "2023-09-13T01:53:55Z",
        "merged_at": "2023-09-13T01:53:55Z",
        "body": "Remove errant slash preventing the correct console log\r\n\r\nOld:\r\n<img width=\"390\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/4225378/6edebe89-3b0d-466d-b6e5-3df8b8a1234f\">\r\n\r\nFixed:\r\n<img width=\"440\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/4225378/0a2fc645-7854-4153-af06-a5aeb3a9a7c2\">\r\n\r\n### What does this PR do?\r\n\r\nFixes the websocket quick start guide output from `Listening on localhost:${server.port}` to `Listening on localhost:3000`\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-11T19:19:19Z",
        "closed_at": "2023-09-12T00:19:44Z",
        "merged_at": "2023-09-12T00:19:44Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T18:57:16Z",
        "closed_at": "2023-09-13T01:54:24Z",
        "merged_at": "2023-09-13T01:54:23Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T18:53:26Z",
        "closed_at": "2023-09-14T04:58:54Z",
        "merged_at": null,
        "body": "Remove req to avoid warning interpreter for: `req is declared but its value never read.` message\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-11T17:03:45Z",
        "closed_at": "2023-10-17T00:16:11Z",
        "merged_at": "2023-10-17T00:16:11Z",
        "body": "### What does this PR do?\r\nI removed needless array wrapper. `new Set` already has array as argument. No need to create additional wrapper.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nYes\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-11T14:04:30Z",
        "closed_at": "2023-09-11T15:48:26Z",
        "merged_at": "2023-09-11T15:48:26Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis PR adds .idea directory to bun init's .gitignore\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- ### How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T13:44:33Z",
        "closed_at": "2023-09-11T15:51:36Z",
        "merged_at": "2023-09-11T15:51:36Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis fixes the misspelling of METHODS from `node http`.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n- [x] I made the change directly in Github\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T13:11:43Z",
        "closed_at": "2023-09-11T15:53:55Z",
        "merged_at": "2023-09-11T15:53:55Z",
        "body": "Looks like it is just a typo and needs to be fixed.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T12:35:25Z",
        "closed_at": "2023-09-11T18:03:45Z",
        "merged_at": "2023-09-11T18:03:45Z",
        "body": "Noticed a small typo in one of the panic messages when looking through the AST code",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-11T11:58:26Z",
        "closed_at": "2023-09-12T00:27:12Z",
        "merged_at": "2023-09-12T00:27:12Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nClose: #4919\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-11T11:20:55Z",
        "closed_at": "2023-09-11T15:54:23Z",
        "merged_at": "2023-09-11T15:54:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T11:16:18Z",
        "closed_at": "2023-09-11T15:53:28Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-11T10:48:38Z",
        "closed_at": "2023-10-17T00:05:50Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nAdds an alias for `bun un` for `bun remove` to achieve full compatibility with the npm API, this is an extension of #2137, since it was a minor change i did not consider opening an issue and have dropped a comment on #2137\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nCompiled it locally and created tried to run it as needed\r\n\r\n```sh\r\nun_test) cat package.json | jq\r\n# {\r\n#   \"dependencies\": {\r\n#     \"vite\": \"^4.4.9\"\r\n#   }\r\n# }\r\n```\r\n\r\nSeemed to run ok on macOS with no issues\r\n```sh\r\nun_test) ../packages/debug-bun-darwin-aarch64/bun-debug un vite\r\n[SYS] read(3, 4096) = 4096 (0.062ms)\r\n[SYS] close(3)\r\nbun remove v1.0.0_debug (589d236e)\r\n[16.00ms] done\r\nNo packages! Deleted empty lockfile\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-09-11T09:49:43Z",
        "closed_at": "2023-10-03T22:30:05Z",
        "merged_at": "2023-10-03T22:30:05Z",
        "body": "### What does this PR do?\r\n\r\nSSIA.\r\nFixes `Buffer.prototype.copy()` and `Buffer.prototype.compare()` in the following cases:\r\n\r\n<details>\r\n  <summary>Buffer.prototype.copy()</summary>\r\n  \r\n  ```\r\n  Welcome to Node.js v18.17.1.\r\n  Type \".help\" for more information.\r\n  > Buffer.alloc(0).copy(Buffer.alloc(0), undefined)\r\n  0\r\n  ```\r\n  \r\n  ```\r\n  Welcome to Bun v1.0.0\r\n  Type \".help\" for more information.\r\n  > Buffer.alloc(0).copy(Buffer.alloc(0), undefined)\r\n  1 | \"use strict\";void 0;Buffer.alloc(0).copy(Buffer.alloc(0), undefined);\r\n                         ^\r\n  TypeError: Expected number\r\n  ```\r\n</details>\r\n\r\n<details>\r\n  <summary>Buffer.prototype.compare()</summary>\r\n  \r\n  ```\r\n  Welcome to Node.js v18.17.1.\r\n  Type \".help\" for more information.\r\n  > Buffer.alloc(0).compare(Buffer.alloc(0), undefined)\r\n  0\r\n  ```\r\n  \r\n  ```\r\n  Welcome to Bun v1.0.0\r\n  Type \".help\" for more information.\r\n  > Buffer.alloc(0).compare(Buffer.alloc(0), undefined)\r\n  1 | \"use strict\";void 0;Buffer.alloc(0).compare(Buffer.alloc(0), undefined);\r\n                         ^\r\n  TypeError: Expected number\r\n  ```\r\n</details>\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-11T09:45:39Z",
        "closed_at": "2023-09-11T15:49:57Z",
        "merged_at": "2023-09-11T15:49:57Z",
        "body": "### What does this PR do?\r\n\r\nThe version API of `detect-libc` was implemented in reverse (see https://www.npmjs.com/package/detect-libc). This causes the installation of sharp to fail.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\nIf JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-11T09:22:35Z",
        "closed_at": "2023-09-19T01:30:04Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Remove a line that would break out of the block handling code execution\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n- [x] I ran `zig fmt` on the changed files\r\n- [x] Automated tests\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T09:06:30Z",
        "closed_at": "2023-09-14T04:59:16Z",
        "merged_at": "2023-09-14T04:59:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nI changed \"pages\" to \"(pages/app)\" because now the /app directory is more populer than the /pages directory.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T04:36:21Z",
        "closed_at": "2023-09-14T05:00:06Z",
        "merged_at": "2023-09-14T05:00:06Z",
        "body": "I have removed the / before ${server.port} because it its incorrect and I replaced the localhost to ${server.hostname}",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 9,
        "changed_files": 7,
        "created_at": "2023-09-10T23:26:34Z",
        "closed_at": "2023-09-11T15:50:40Z",
        "merged_at": "2023-09-11T15:50:40Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nit's => its\r\nlets => let's\r\nwere => we're\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-10T18:02:07Z",
        "closed_at": "2023-09-13T05:21:59Z",
        "merged_at": "2023-09-13T05:21:59Z",
        "body": "### What does this PR do?\r\n\r\nThis invokes the write() callback function correctly when encoding is not provided.\r\n\r\nFixes #4731.\r\n\r\nref: https://nodejs.org/api/stream.html#writablewritechunk-encoding-callback\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 1,
        "changed_files": 7,
        "created_at": "2023-09-10T16:16:13Z",
        "closed_at": "2023-09-12T04:52:32Z",
        "merged_at": "2023-09-12T04:52:32Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-10T13:08:08Z",
        "closed_at": "2023-09-12T00:53:43Z",
        "merged_at": "2023-09-12T00:53:43Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nClose: #4789\r\n\r\n\r\nIn Bun 0.1, this code will log an empty string, but node will log `..`.\r\n\r\n```JavaScript\r\nconst path = require(\"path\");\r\n\r\nconsole.log(path.relative(\"../\", \"../../\"));\r\n```\r\n\r\nThis is because the parameter `allow_above_root` we passed is `false`.\r\n\r\nhttps://github.com/oven-sh/bun/blob/d48ff53e4ec4cb49172e0e96ca9890446f971a0e/src/resolver/resolve_path.zig#L479-L490\r\n\r\nIn `normalizeStringGeneric` function, if `allow_above_root` is false, `../` will be converted to empty string. \r\n\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/d48ff53e4ec4cb49172e0e96ca9890446f971a0e/src/resolver/resolve_path.zig#L535-L544\r\n\r\nThis also affects paths like `../static`, which will be converted into `static`. So in Bun, the result for the following code is `true`. Actually, it's comparing `static` and `static`.\r\n\r\n```JavaScript\r\nconsole.log(path.relative(\"../static\", \"../../static\") == \"\");\r\n```\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-10T12:57:50Z",
        "closed_at": "2023-09-20T04:54:46Z",
        "merged_at": "2023-09-20T04:54:46Z",
        "body": "### What does this PR do?\r\n\r\nAdds guide to install and start a new [Qwik](https://qwik.builder.io/) project\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\nI ran the commands in the guide I wrote. Below is the screenshot of the app running.\r\n\r\n![image](https://github.com/oven-sh/bun/assets/1625114/cff0069e-d6e6-4c5d-896b-a1c9df5cfff3)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-10T12:53:36Z",
        "closed_at": "2023-09-10T18:30:46Z",
        "merged_at": "2023-09-10T18:30:46Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds a link to compatibility page (https://bun.sh/docs/runtime/nodejs-apis) to its reference in index.md, so it's easier to reach out to.\r\n\r\n![image](https://github.com/oven-sh/bun/assets/43436529/9e6986e2-d4fc-4242-a992-ed9a382e3cd6)\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-10T12:35:14Z",
        "closed_at": "2023-09-10T18:33:05Z",
        "merged_at": "2023-09-10T18:33:05Z",
        "body": "### What does this PR do?\r\n\r\nRemoved a sentence that was accidentally left in twice. PR is only markdown change in `/docs`\r\n\r\nhttps://bun.sh/docs/runtime/debugger#debuggers\r\n\r\n![Screenshot 2023-09-10 at 13 33 55](https://github.com/oven-sh/bun/assets/817611/1fc5cce1-2b1c-4c76-b5d3-49050119d9b5)\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-10T12:03:07Z",
        "closed_at": "2023-09-11T04:40:47Z",
        "merged_at": "2023-09-11T04:40:46Z",
        "body": "### What does this PR do?\r\n\r\nAdds navigator.platform as a global\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform\r\n\r\nFixes #4588\r\n\r\nSupersedes #4739 \r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-10T11:05:37Z",
        "closed_at": "2023-09-10T18:34:04Z",
        "merged_at": "2023-09-10T18:34:04Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 481,
        "deletions": 73,
        "changed_files": 19,
        "created_at": "2023-09-10T09:52:29Z",
        "closed_at": "2023-09-11T06:15:35Z",
        "merged_at": "2023-09-11T06:15:35Z",
        "body": "### What does this PR do?\r\n\r\nThis aligns bundler behavior with runtime behavior.\r\n\r\nThis makes it so the following JSON file:\r\n```json\r\n{\r\n   \"foo\": [1]\r\n}\r\n```\r\n\r\nCan be imported or required like so:\r\n```js\r\nimport {foo, default as object} from './baz.json';\r\n\r\nconsole.log(foo) // [1]\r\nconsole.log(object) // { foo: [1] }\r\nconsole.log(object.foo === foo); // true\r\n```\r\n\r\nThis also makes files that start with `tsconfig.` or `jsconfig.` and end with `.json` allow comments and trailing newlines. So that tooling which wants to read these files can do so via import/require instead of a special one-off json-with-comments parser that Bun already implements. This doesn't add support for json-with-comments more gneerally. Only for files that start with the name `jsconfig.` or `tsconfig.` and end with `.json`.\r\n\r\nFixes #3387 \r\n\r\n### How did you verify your code works?\r\n\r\nAutomated tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-10T09:39:20Z",
        "closed_at": "2023-09-10T18:33:39Z",
        "merged_at": "2023-09-10T18:33:39Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types\r\n- [ ] Code changes\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-10T08:33:11Z",
        "closed_at": "2023-09-14T22:15:38Z",
        "merged_at": null,
        "body": "In AWS Lambda (using bun-lambda) when calling console.log only the first argument gets printed out.\r\n\r\n```javascript\r\nconsole.log(\"hello\", \"world\");\r\n```\r\nOnly prints \"hello\".\r\n\r\nThis is happens because Bun.inspect is called with an array of arguments but only one argument gets returned.\r\n\r\n```javascript\r\n  const message = Bun.inspect(...args).replace(/\\n/g, \"\\r\");\r\n```\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nUpdates runtime.ts:log() to only pass one argument at a time to Bun.inspect\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n \r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] I ran a series of tests to validate output correctness\r\n\r\nInput:\r\n```javascript\r\n  console.log(\"sample\");\r\n  console.log(\"sample\", \"1\", 2, true, {\"hello\": \"world\"}, 5n, [0,-1]);\r\n  console.warn([1,2,3,4], [5,6,7,8]);\r\n  console.error({\r\n    l1: {\r\n      l2: {\r\n        l3: {\r\n          l4: {\r\n            val: \"level 5\",\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, {\"even\": {\"more\": {\"nesting\": \"now\"}}});\r\n```\r\n\r\nOutput:\r\n```sh\r\nINFO RequestId: 4d30f1c7-043f-4538-9ad1-9c0ea5b7e4da \"sample\"\r\nINFO RequestId: 4d30f1c7-043f-4538-9ad1-9c0ea5b7e4da \"sample\" \"1\" 2 true {\r\n  hello: \"world\"\r\n} 5n [ 0, -1 ]\r\nWARN RequestId: 4d30f1c7-043f-4538-9ad1-9c0ea5b7e4da [ 1, 2, 3, 4 ] [ 5, 6, 7, 8 ]\r\nERROR RequestId: 4d30f1c7-043f-4538-9ad1-9c0ea5b7e4da {\r\n  l1: {\r\n    l2: {\r\n      l3: {\r\n        l4: {\r\n          val: \"level 5\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n} {\r\n  even: {\r\n    more: {\r\n      nesting: \"now\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-10T08:26:08Z",
        "closed_at": "2023-09-21T09:10:54Z",
        "merged_at": "2023-09-21T09:10:54Z",
        "body": "### What does this PR do?\r\n\r\nPreviously, `make jsc` failed on Linux with `/usr/bin/bash: Line 3: -DUSE_BUN_JSC_ADDITIONS=ON: Command not found`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI ran `make jsc`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-10T07:26:24Z",
        "closed_at": "2023-09-10T18:32:31Z",
        "merged_at": "2023-09-10T18:32:31Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-10T06:03:23Z",
        "closed_at": "2023-09-14T22:24:12Z",
        "merged_at": null,
        "body": "When running `bun run publish-layer` the following warnings displayed:\r\n\r\n```sh\r\n$ bun scripts/publish-layer.ts\r\n101 |     async load() {\r\n102 |         this.type = this.options.type || 'core';\r\n103 |         this.tag = this.options.tag;\r\n104 |         const root = await findRoot(this.options.name, this.options.root);\r\n105 |         if (!root)\r\n106 |             throw new Error(`could not find package.json with ${(0, util_1.inspect)(this.options)}`);\r\n                      ^\r\nwarn: could not find package.json with { type: 'dev',\r\n```\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nAdded missing package @oclif/plugin-plugins to resolved warning\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n-->\r\n\r\n- [x] I ran `bun run publish-layer` and verified layer was published\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-10T04:22:18Z",
        "closed_at": "2023-09-15T01:06:16Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-09T23:29:33Z",
        "closed_at": "2023-09-10T02:04:05Z",
        "merged_at": "2023-09-10T02:04:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFixes a typo on the guide page for Nuxt (https://bun.sh/guides/ecosystem/nuxt)\r\n`WelcomePage` -> `NuxtWelcome`\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-09T22:41:01Z",
        "closed_at": "2023-09-10T02:03:47Z",
        "merged_at": "2023-09-10T02:03:47Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR fixes external `wasi-js` links.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-09T22:35:11Z",
        "closed_at": "2023-09-10T02:05:13Z",
        "merged_at": "2023-09-10T02:05:13Z",
        "body": "Fix missing method declaration on schema and Schema database name from Kitten to Animal\r\n\r\n### What does this PR do?\r\n\r\nUpdate ecosystem guide on how to use mongoose to add missing `speak` method declaration and rename model name to be concise with schema name and it's purpose (storing animals not kittens \ud83d\ude04 )\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-09T22:32:31Z",
        "closed_at": "2023-09-10T12:03:32Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nSome packages throw if `navigator` exists, but is missing the `platform` field: https://github.com/oven-sh/bun/issues/4588\r\n\r\nThis PR adds `navigator.platform`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] I added TypeScript types for the new methods, getters, or setters",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-09T16:36:19Z",
        "closed_at": "2023-09-10T02:03:28Z",
        "merged_at": "2023-09-10T02:03:28Z",
        "body": "### What does this PR do?\r\n\r\nThis updates the `bun-server.test.ts` test case which, I believe mistakenly, had a `.only` in it.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Test changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-09T14:52:48Z",
        "closed_at": "2023-09-27T13:54:55Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-09T13:04:43Z",
        "closed_at": "2023-09-17T01:51:19Z",
        "merged_at": "2023-09-17T01:51:19Z",
        "body": "### What does this PR do?\r\n\r\nCloses: #4509 \r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis PR fix the node compatibility with the path string which need to accept empty string. Then the syscall return the good result (ENOENT for `stat`, false for `exist`, etc...). See the posix stat documentation (https://man7.org/linux/man-pages/man2/fstat.2.html or the extract in the screen below):\r\n\r\n<img width=\"623\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/73360179/605e92ba-6ee8-44ca-8a4a-9db2ed200d1f\">\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nWith tests \r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-09T10:36:17Z",
        "closed_at": "2023-09-10T09:58:11Z",
        "merged_at": "2023-09-10T09:58:11Z",
        "body": "### What does this PR do?\r\n\r\nFix https://github.com/oven-sh/bun/issues/4675\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nRun `make headers`, then success.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-09T08:20:36Z",
        "closed_at": "2023-09-19T02:32:23Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/1990\r\nFollowup: https://github.com/oven-sh/bun/pull/4530\r\n\r\nThis PR implements the https module which currently exports http module. \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 38,
        "changed_files": 10,
        "created_at": "2023-09-09T06:46:29Z",
        "closed_at": "2023-10-10T14:47:09Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n1. regarding the markdown bash code block notation, I made a change because I felt it would be easier to see if it was unified with the notation for prompt execution!\r\n    - 6c0a83f8129fbf88858e8c25b44b3009da902af2\r\n2. fixed different language names in code block\r\n    - 61a3c7b34a8928a121c725302ff08d6d8022bd7d\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 15913,
        "deletions": 5833,
        "changed_files": 322,
        "created_at": "2023-09-09T06:27:27Z",
        "closed_at": "2023-09-18T19:10:10Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nCloses #4651\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 157,
        "deletions": 21,
        "changed_files": 6,
        "created_at": "2023-09-09T05:48:24Z",
        "closed_at": "2023-09-15T20:25:44Z",
        "merged_at": "2023-09-15T20:25:44Z",
        "body": "### What does this PR do?\r\n- [x] Syntax highlighting for bunlock files\r\n- [x] Fix incorrect description of the `bun.debugTerminal` config field.\r\n- [x] Make documentation consistent between package JSON and README.\r\n\r\n### How did you verify your code works?\r\n\r\nI manually tested it on Windows and MacOS for quite complex lockfiles. Testing for the VSCode extension is not currently (fully) set up. Tests should be a priority moving forward, but that is out scope for this PR. The extension is still small enough to make manual testing possible.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-09T04:29:07Z",
        "closed_at": "2023-09-14T22:19:37Z",
        "merged_at": "2023-09-14T22:19:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nHello, I've just started using bun!\r\nI was a bit puzzled by the different behavior between `bun` and `bun run` when dealing with files that have a shebang (the documentation states that the two commands should behave identically).\r\nWhen I use the `--bun` option, the behavior becomes the same as expected. I think this might be a better approach. What do you think? (I've just started using bun, so I could be wrong).\r\nP.S. This message was machine-translated, so I apologize if it's hard to understand.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-09T02:25:52Z",
        "closed_at": "2023-09-09T21:46:41Z",
        "merged_at": "2023-09-09T21:46:41Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 111,
        "deletions": 41,
        "changed_files": 9,
        "created_at": "2023-09-08T23:38:17Z",
        "closed_at": "2023-09-12T00:19:21Z",
        "merged_at": "2023-09-12T00:19:21Z",
        "body": "### What does this PR do?\r\nfixes #4594 \r\nfixes #5015 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nmanually tested and added tests.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-08T21:55:20Z",
        "closed_at": "2023-09-08T23:27:44Z",
        "merged_at": "2023-09-08T23:27:44Z",
        "body": "Fixes #4582\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-08T15:10:27Z",
        "closed_at": "2023-09-08T16:32:37Z",
        "merged_at": "2023-09-08T16:32:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nAdd in the missing arguments for `new Bun.CryptoHasher()`. Running the examples in the docs before the fix gives you `TypeError: Expected an algorithm name as an argument`.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nYou can't have bugs when didn't write any code.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-08T12:46:38Z",
        "closed_at": "2023-09-08T16:32:15Z",
        "merged_at": "2023-09-08T16:32:15Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-08T11:30:06Z",
        "closed_at": "2023-09-19T23:54:55Z",
        "merged_at": "2023-09-19T23:54:55Z",
        "body": "### What does this PR do?\r\n\r\nResolves https://github.com/oven-sh/bun/issues/1720\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nCompile and execute `bun pm cache rm`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 42,
        "changed_files": 6,
        "created_at": "2023-09-08T02:11:57Z",
        "closed_at": "2023-09-08T05:07:00Z",
        "merged_at": "2023-09-08T05:07:00Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes:\r\n- A crash that can occur when using fetch() a lot\r\n- A crash that could occur when calling `import.meta.path` or other getters on `import.meta`\r\n- A potential crash when getting the file path for a URL from in node:fs functions\r\n\r\n### How did you verify your code works?\r\n\r\nValgrind",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 322,
        "deletions": 27,
        "changed_files": 9,
        "created_at": "2023-09-08T01:26:03Z",
        "closed_at": "2023-09-29T10:39:34Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nCloses #3540\r\nImplements `server.requestIp(request)`, returning the origin IP address of a Request. \r\n\r\nCurrently it just returns an ipv6 address string directly from UWS. The plan is to return a \"SocketAddress\" object, which will contain the address string and a value signaling what type it is.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 293,
        "deletions": 60,
        "changed_files": 29,
        "created_at": "2023-09-07T22:06:35Z",
        "closed_at": "2023-10-10T00:50:17Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nThis fix fetch behavior on error cases, fix HTTP destroying too early causing missing parts/events not to be emitted, fix `AbortSignal.timeout`, fix proper closing/ending off fetch when aborted, and also fix the state of readable streams to be used not only empty.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nExisting tests + abort tests\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 224,
        "deletions": 188,
        "changed_files": 2,
        "created_at": "2023-09-07T20:12:42Z",
        "closed_at": "2023-09-08T02:42:44Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-07T17:50:15Z",
        "closed_at": "2023-09-08T16:33:35Z",
        "merged_at": "2023-09-08T16:33:35Z",
        "body": "### What does this PR do?\r\n\r\nTerminals like iTerm require valid URL to make them clickable.  Adding a space to make link clickable in terminal. \r\n\r\nSimilar problem is on https://bun.sh/, where protocol is missing.\r\n\r\n### How did you verify your code works?\r\n\r\nCosmetic change. Tested on macOS with iTerm.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 344,
        "deletions": 365,
        "changed_files": 9,
        "created_at": "2023-09-07T16:39:11Z",
        "closed_at": "2023-09-07T17:57:47Z",
        "merged_at": "2023-09-07T17:57:47Z",
        "body": "\ud83c\udf89",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-07T15:57:47Z",
        "closed_at": "2023-09-08T20:19:53Z",
        "merged_at": "2023-09-08T20:19:53Z",
        "body": "I added some guidance about how to build for production. Still WIP since I would like to add a more complete deployment guide.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 88,
        "deletions": 34,
        "changed_files": 4,
        "created_at": "2023-09-07T13:44:16Z",
        "closed_at": "2023-09-07T16:04:21Z",
        "merged_at": "2023-09-07T16:04:21Z",
        "body": "\r\nCloses #4465\r\n\r\nthe pr is named bun_init but i actually gave up and stashed my bun init specific changes",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-07T13:09:37Z",
        "closed_at": "2023-09-07T15:34:13Z",
        "merged_at": "2023-09-07T15:34:13Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 36,
        "changed_files": 1,
        "created_at": "2023-09-07T12:13:07Z",
        "closed_at": "2023-09-08T20:21:42Z",
        "merged_at": "2023-09-08T20:21:42Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nDelete buchta.md since its development is discontinued by LowByteFox: https://twitter.com/LowByteFox/status/1694025965452636612\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-07T10:59:57Z",
        "closed_at": "2023-09-08T20:20:07Z",
        "merged_at": "2023-09-08T20:20:07Z",
        "body": "### What does this PR do?\r\n\r\nSimple spell check. disconect to disconnect",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-07T06:47:09Z",
        "closed_at": "2023-09-09T05:18:25Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis implements the https module with full compatibility with node  \r\n\r\n- [x] Code changes\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\nI will write automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7625,
        "deletions": 7034,
        "changed_files": 18,
        "created_at": "2023-09-06T05:56:24Z",
        "closed_at": "2023-09-07T05:23:24Z",
        "merged_at": "2023-09-07T05:23:24Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nshould reject any cert error (default: true)\r\n```js\r\nconst result = await fetch(\"https://bun.sh\", {\r\n  tls: { rejectUnauthorized: true },\r\n}).then((res) => res.text());\r\n```\r\n\r\nshould NOT reject any cert error\r\n```js\r\nconst result = await fetch(\"https://bun.sh\", {\r\n  tls: { rejectUnauthorized: false },\r\n}).then((res) => res.text());\r\n```\r\n\r\nshould be able to pass a custom `checkServerIdentity` to check self-sign certs\r\n```js\r\nconst result = await fetch(\"https://mydomain.test\", {\r\n  tls: {\r\n    checkServerIdentity: (hostname, cert) => {\r\n      console.log(hostname, cert);\r\n      if (hostname !== \"mydomain.test\")\r\n        throw new Error(\"Only mydomain.test is allowed to have cert errors\");\r\n    },\r\n  },\r\n}).then((res) => res.text());\r\n\r\n```\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests + existing tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-06T03:56:26Z",
        "closed_at": "2023-09-06T09:04:00Z",
        "merged_at": "2023-09-06T09:04:00Z",
        "body": "### What does this PR do?\r\nfixes file reloads when running `bun --bun run dev` in astro docs.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-09-05T21:20:02Z",
        "closed_at": "2023-09-05T22:21:34Z",
        "merged_at": "2023-09-05T22:21:34Z",
        "body": "### What does this PR do?\r\n\r\nFixes https://github.com/oven-sh/bun/issues/4138 https://github.com/oven-sh/bun/issues/2940 https://github.com/oven-sh/bun/issues/3471 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\nManually tested \r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 28,
        "changed_files": 3,
        "created_at": "2023-09-05T14:01:27Z",
        "closed_at": "2023-09-05T22:22:10Z",
        "merged_at": "2023-09-05T22:22:10Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFixes #4500\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1993,
        "deletions": 912,
        "changed_files": 2,
        "created_at": "2023-09-05T12:33:20Z",
        "closed_at": "2023-09-06T03:28:20Z",
        "merged_at": "2023-09-06T03:28:20Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Update Root Certs\r\n\r\nFix: https://github.com/oven-sh/bun/issues/4389\r\nMore info about\r\nhttps://groups.google.com/a/mozilla.org/g/dev-security-policy/c/C-HrP1SEq1A\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nThere are tests\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-05T09:42:26Z",
        "closed_at": "2023-09-05T13:12:55Z",
        "merged_at": "2023-09-05T13:12:55Z",
        "body": "### What does this PR do?\r\nfixes #2941 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 143,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-05T07:07:41Z",
        "closed_at": "2023-09-06T00:53:32Z",
        "merged_at": "2023-09-06T00:53:32Z",
        "body": "### What does this PR do?\r\nfixes #3214 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7863,
        "deletions": 612,
        "changed_files": 23,
        "created_at": "2023-09-05T06:04:33Z",
        "closed_at": "2023-09-28T06:51:49Z",
        "merged_at": "2023-09-28T06:51:49Z",
        "body": "### What does this PR do?\r\n\r\nRemoved the majority of the very buggy `node:util` browserify implementation (to the extent of functions of the module `util.inspect` depends on) in favor of a fresh implementation based on [node-inspect-extracted](https://github.com/hildjj/node-inspect-extracted) with Bun-specific patches and optimizations.\r\n\r\nExtras:\r\n* Fix `util.types.isArrayBuffer` to not return true for SharedArrayBuffers\r\n* Add missing primordial functions to `node:tty`\r\n\r\nThis new implementation is still incomplete and has some remaining TODOs, but most are minimal and it's already many times better than the original.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI adapted Node's automated tests for `node:util` into Bun, under the `node-inspect-tests` folder.\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7638,
        "deletions": 7618,
        "changed_files": 49,
        "created_at": "2023-09-05T02:47:15Z",
        "closed_at": "2023-09-27T00:43:43Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n\r\nThis PR includes:\r\n- any kind of ptr that is initialized to `undefined` changes to `foo: ?ptr = null`, as `.?` will panic in `safemode` instead of `UB`. Plus [an optional pointer is guaranteed to be the same size as a pointer. The null of the optional is guaranteed to be address 0](https://ziglang.org/documentation/master/#Optional-Pointers)\r\n- any fields that don't need to init to undefined, `= undefined` is removed\r\n\r\n`.?` should be optimized away in non-safe mode, so these changes should not impact performance, just make use of these nullable pointers more explicit\r\n\r\nCloses: #4426 \r\n\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-05T01:29:14Z",
        "closed_at": "2023-09-07T12:51:05Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nReserves the following commands for future use. \r\n\r\n- deploy\r\n- cloud\r\n- info\r\n- config\r\n- use\r\n- auth\r\n- login\r\n- logout\r\n- whoami\r\n- publish\r\n- prune\r\n- outdated\r\n- list\r\n- why\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-09-04T23:45:32Z",
        "closed_at": "2023-09-06T04:58:48Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6986,
        "deletions": 6986,
        "changed_files": 4,
        "created_at": "2023-09-04T23:06:18Z",
        "closed_at": "2023-09-05T11:49:08Z",
        "merged_at": "2023-09-05T11:49:07Z",
        "body": "### What does this PR do?\r\n\r\nthese are diffs generated during a clean build from a85bd5d083b4f4010467640d6545bcd7df3d9ae6\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nhttps://bun.sh/docs/project/development#first-build\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 180,
        "deletions": 158,
        "changed_files": 37,
        "created_at": "2023-09-04T23:04:52Z",
        "closed_at": "2023-09-07T17:09:09Z",
        "merged_at": "2023-09-07T17:09:09Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-04T22:07:21Z",
        "closed_at": "2023-09-05T00:37:47Z",
        "merged_at": "2023-09-05T00:37:47Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFix https://github.com/oven-sh/bun/issues/4478\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n I wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-04T21:15:45Z",
        "closed_at": "2023-09-06T03:28:39Z",
        "merged_at": "2023-09-06T03:28:39Z",
        "body": "Remove comment about removed `BUN_OVERRIDE_MODULE_PATH` env var\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-04T15:15:54Z",
        "closed_at": "2023-09-04T19:35:08Z",
        "merged_at": "2023-09-04T19:35:08Z",
        "body": "### What does this PR do?\r\n\r\nIt should be `loader` instead of `loaders`. Close: #4377\r\n\r\nhttps://github.com/oven-sh/bun/blob/18767906db0dd29b2d898f84a023d403c3084d6e/src/bunfig.zig#L686\r\n\r\nIn command line, we also use the `--loader`, no `--loaders`.\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 188,
        "deletions": 62,
        "changed_files": 7,
        "created_at": "2023-09-04T15:09:23Z",
        "closed_at": "2023-09-14T00:03:54Z",
        "merged_at": null,
        "body": "- fixes spurious exit code 42 from `spawn()`\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nTODO: suppress log output from `postinstall` scripts instead of spewing all over the console &minus; only display logs from failed scripts to aid debugging.\r\n\r\nMaking this PR now because during development I have discovered the root cause for the `exitCode=42` bug, so seems like a good point to check this in.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9421,
        "deletions": 8907,
        "changed_files": 73,
        "created_at": "2023-09-03T22:32:47Z",
        "closed_at": "2023-09-07T11:58:44Z",
        "merged_at": "2023-09-07T11:58:44Z",
        "body": "### What does this PR do?\r\n\r\n- [x] feat(runtime): implement `child_process.fork` / ipc channels. Closes #3620\r\n- [x] fix(runtime): undefined values in spawn env args no longer be passed\r\n- [x] chore: remove `BUN_OVERRIDE_MODULE_PATH` (it doesn't do anything)\r\n- [x] feat(runtime): implement `fs.promises.opendir`\r\n- [x] feat(runtime): implement `v8.getHeapStatistics`\r\n- [X] fix(runtime): do not append `node:` to `require.resolve(\"without_prefix\")`\r\n- [X] feat(runtime): implement setter for `require('module')._resolveFilename`\r\n- [X] fix(runtime): make `fs.WriteStream` and `NativeWritable` function-style classes \r\n- [X] fix(runtime): do not inline resolved paths into transpiled CommonJS (fixes next.js react duplication bugs)\r\n- [X] fix(runtime): ensure `req.socket` === the `socket` passed to the `\"upgrade\"` event.\r\n- [X] chore(cli): remove `bun dev`. closes #4166\r\n- [X] feat(cli): make `bun create` execute `create-` packages. closes #485\r\n- [X] chore(cli): make the cli help menus nicer.\r\n- ... any more?\r\n\r\n### How did you verify your code works?\r\n\r\nI've been testing with Next.js to get it farther.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1309,
        "deletions": 12,
        "changed_files": 17,
        "created_at": "2023-09-03T22:23:45Z",
        "closed_at": "2023-09-06T00:41:39Z",
        "merged_at": "2023-09-06T00:41:39Z",
        "body": "### What does this PR do?\r\n\r\nImplements `fs.watchFile` and `fs.unwatchFile`, as well as the `StatWatcher` class it returns. This code is not optimal in terms of performance but it does implement the API as correctly as possible.\r\n\r\nThis implementation isn't very optimal but it doesn't block the JS thread very much.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI did mostly manual testing and wrote some unit tests. After 1.0 we can revisit writing more tests that hit more edge cases.\r\n\r\nI used debug logging to verify `deinit` is called when needed.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-03T14:07:25Z",
        "closed_at": "2023-09-04T00:30:30Z",
        "merged_at": "2023-09-04T00:30:30Z",
        "body": "### What does this PR do?\r\n\r\nClose: #4198 \r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n## Explanation\r\n\r\n### Why `unlinkSync` throws `EPERM`\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/5c43744bce358f132a63d5002baffd7647d47a76/src/sys.zig#L912-L921\r\n\r\n`unlinkSync` uses the `sys.unlink` which behaves differently at compile time based on whether we link to `libc` or not.\r\n\r\nhttps://ziglang.org/documentation/master/std/#A;std:os.system\r\n\r\n![2023-09-03_22-46](https://github.com/oven-sh/bun/assets/9482395/26bc8d97-b823-4267-9dd7-0e83f00d1416)\r\n\r\n\r\nIf we link to `libc`, we use the `unlink` function from the C library. From `man 2 unlink`, we should read the `errno`\r\n\r\n> RETURN VALUE\r\n       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.\r\n\r\nhttps://github.com/oven-sh/bun/blob/5c43744bce358f132a63d5002baffd7647d47a76/src/sys.zig#L247-L264\r\n\r\n`-1` will be converted to `1` (`EPERM`), so we get a `Operation not permitted`.\r\n\r\n\r\n### Why `open` work correctly before?\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/5c43744bce358f132a63d5002baffd7647d47a76/src/sys.zig#L419-L434\r\n\r\n\r\n`Syscall.system.openat` is https://github.com/ziglang/zig/blob/62f727eedb2b8d8b8f922d52a0ff4218a92e6cff/lib/std/os/linux.zig#L750. This is not `libc` function, just a linux platform syscall.\r\n\r\n\r\n### Why `unlinkSync` work on darwin?\r\n\r\nOn darwin, libc is linked, and the value directly from `std.os.errno` is used in `getErrno`.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-02T11:56:53Z",
        "closed_at": "2023-09-14T05:00:31Z",
        "merged_at": "2023-09-14T05:00:31Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-02T01:57:33Z",
        "closed_at": "2023-09-02T03:10:55Z",
        "merged_at": "2023-09-02T03:10:55Z",
        "body": "### What does this PR do?\r\nfixes `Bun.serve` with files when sendfile isn't available.\r\nfixes #4368 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually and added a test\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 111,
        "deletions": 9,
        "changed_files": 8,
        "created_at": "2023-09-02T01:41:26Z",
        "closed_at": "2023-09-07T05:04:47Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nCloses #3555\r\nAdds support for dependencies using a OAuth2 GitHub URL. E.g.\r\n```json\r\n\"dependencies\": {\r\n    \"@biz/module\": \"https://oauth2:your_token_here@github.com/user/repo.git#master\"\r\n}\r\n```\r\nIt's more of a workaround than I'd like, as dependency parsing and request header generation is mostly hardcoded for npm style workflows. This makes it hard to modify how dependencies are fetched through `bun install`.\r\n\r\nThe included test requires fetching a private GitHub repo using a real OAuth2 token.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-01T15:35:58Z",
        "closed_at": "2023-09-02T06:49:10Z",
        "merged_at": "2023-09-02T06:49:10Z",
        "body": "Replace\r\n`key: [Bun.file('./key1.pem'), Bun.file('./key2.pem']` with\r\n`key: [Bun.file('./key1.pem'), Bun.file('./key2.pem')]`\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nFixes a typo in a TLS example for TCP (found in https://bun.sh/docs/api/tcp)\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-01T04:20:30Z",
        "closed_at": "2023-09-01T06:03:45Z",
        "merged_at": "2023-09-01T06:03:45Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually that `--hot` and the test runner only set the breakpoint once.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-01T04:14:17Z",
        "closed_at": "2023-09-02T08:39:40Z",
        "merged_at": "2023-09-02T08:39:39Z",
        "body": "### What does this PR do?\r\n\r\nWe have existing test failures on macos arm and x64, where the value of mtime is offset by exactly `0x8000000`. This offset happens for no clear reason, only on **MacOS release builds**.\r\n\r\n![image](https://github.com/oven-sh/bun/assets/24465214/39a49d10-9421-4c51-b397-aacd378c56eb)\r\n![image](https://github.com/oven-sh/bun/assets/24465214/4ef4cdb5-43c9-45e8-8b0c-90947f7c011f)\r\n\r\nI noticed re-ordering the fields and playing with `align(n)` would make different fields break, or none at all. This indicates a bug in Zig, because the ordering of fields should not cause bit flips. Could not reproduce this in an isolated project, it is very hard to narrow.\r\n\r\nThe workaround I'm going with is using an `extern struct` because it they seem to be more reliable, given the \"well-defined memory layout\" stuff.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nPreviously failing tests pass.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-01T00:26:49Z",
        "closed_at": "2023-09-01T06:04:19Z",
        "merged_at": "2023-09-01T06:04:19Z",
        "body": "### What does this PR do?\r\n\r\nCloses #4436 \r\n\r\n- Error messages did not always contain the proper path.\r\n- Fix a crash during one of the errors.\r\n- `clonefile` path can `ENOENT` if there the destination directory doesnt exist.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 17,
        "changed_files": 3,
        "created_at": "2023-08-31T22:26:21Z",
        "closed_at": "2023-09-01T22:27:59Z",
        "merged_at": "2023-09-01T22:27:59Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI did a release build locally as the crash does not happen in debug builds, and then ran `bun test dns`\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-08-31T21:00:45Z",
        "closed_at": "2023-09-01T00:33:08Z",
        "merged_at": "2023-09-01T00:33:08Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nfixes #4396 \r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nadded tests and tested manually\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 737,
        "deletions": 500,
        "changed_files": 1,
        "created_at": "2023-08-31T15:07:05Z",
        "closed_at": "2023-09-22T00:43:01Z",
        "merged_at": "2023-09-22T00:43:01Z",
        "body": "### What does this PR do?\r\n\r\nUpdate bun's zsh completions. Part of #4016\r\n\r\n#### Checklist\r\n\r\n- [x] run\r\n- [x] build\r\n- [x] x\r\n- [x] init\r\n- [x] create\r\n- [x] install\r\n- [x] add\r\n- [x] update\r\n- [x] link\r\n- [x] remove\r\n- [x] unlink\r\n- [x] pm\r\n- [x] dev\r\n- [x] upgrade\r\n- [x] completions\r\n- [x] discord\r\n- [x] help\r\n\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTest manually.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 243,
        "deletions": 65,
        "changed_files": 7,
        "created_at": "2023-08-31T00:55:50Z",
        "closed_at": "2023-09-01T00:36:04Z",
        "merged_at": "2023-09-01T00:36:03Z",
        "body": "### What does this PR do?\r\nCloses #3899\r\nRegistry and package URLs are now joined using `WTF`, instead of blindly format printing.\r\nErrors are now reported when enqueuing dependencies as well.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests.\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8612,
        "deletions": 7898,
        "changed_files": 18,
        "created_at": "2023-08-30T19:14:24Z",
        "closed_at": "2023-09-04T19:26:50Z",
        "merged_at": "2023-09-04T19:26:50Z",
        "body": "### What does this PR do?\r\nFixes https://github.com/oven-sh/bun/issues/4408\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6984,
        "deletions": 6984,
        "changed_files": 4,
        "created_at": "2023-08-30T18:22:57Z",
        "closed_at": "2023-08-30T21:48:31Z",
        "merged_at": "2023-08-30T21:48:31Z",
        "body": "### What does this PR do?\r\n\r\nthese are diffs generated during a clean build from 908018a4df5b03168988993f0b664d9443fca381\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nhttps://bun.sh/docs/project/development#first-build\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 81,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-08-30T15:13:18Z",
        "closed_at": "2023-08-31T01:49:09Z",
        "merged_at": "2023-08-31T01:49:09Z",
        "body": "### What does this PR do?\r\n\r\nBefore this, we believed that the version range `[6.3.0, 7.0.0]` included version `7.0.0-rc-2`. However, in npm, if a version with a pre-release tag is not explicitly specified in `package.json`, it is not allowed to match pre-release versions. This pr adds additional restrictions, close close https://github.com/oven-sh/bun/issues/4398\r\n\r\n\r\nRef: https://github.com/npm/node-semver#prerelease-tags\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 187,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-08-30T14:29:02Z",
        "closed_at": "2023-08-31T00:35:29Z",
        "merged_at": "2023-08-31T00:35:29Z",
        "body": "fixes #4319\r\n\r\n### What does this PR do?\r\n\r\nDetect and store changes to root `package.json`'s life-cycle scripts properly.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1481,
        "deletions": 87,
        "changed_files": 17,
        "created_at": "2023-08-30T13:52:23Z",
        "closed_at": "2023-09-06T00:52:57Z",
        "merged_at": "2023-09-06T00:52:57Z",
        "body": "### What does this PR do?\r\n\r\nIn Node, `process.nextTick` runs before microtasks are drained. Previously, Bun was treating `process.nextTick` as the same queue as the microtask queue. This led to subtle bugs.\r\n\r\nFixes #4252, probably others\r\n\r\nThe code is loosely based on https://github.com/nodejs/node/blob/main/lib/internal/process/task_queues.js. The main difference is that our implementation is lazier and we don't emit on unhandledexception callbacks currently.\r\n\r\n### How did you verify your code works?\r\n\r\nA couple tests. Have to avoid referencing the process object inside outer function to avoid causing it to infinite loop. Using the `$createFIFO` builtin creates too large of an array in stress tests, causing an infinite loop. That's why it uses this fixed buffer abstraction from node. \r\n\r\nI think we will need to make one small tweak to support AsyncLocalStorage, but @paperdave will know more about that than me",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 2,
        "changed_files": 5,
        "created_at": "2023-08-30T02:13:06Z",
        "closed_at": "2023-09-05T21:25:19Z",
        "merged_at": "2023-09-05T21:25:19Z",
        "body": "### What does this PR do?\r\n\r\npart of fixing #4319\r\n\r\nRight now the main issue causing inconsistant lockfiles is fixed, it is memory that is set within the *padding* of some fields.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI havent finished it yet but I am going to write a regression test using the exact repro.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 72,
        "changed_files": 9,
        "created_at": "2023-08-30T02:10:27Z",
        "closed_at": "2023-08-30T04:17:56Z",
        "merged_at": "2023-08-30T04:17:56Z",
        "body": "### What does this PR do?\r\n\r\nAfter the recent event loop changes, an assertion failure hit where the FilePoll structs were being freed too early.\r\n\r\nThis defers freeing any FilePoll structs until the next event loop iteration ends\r\n\r\n### How did you verify your code works?\r\n\r\nThe assertion failure no longer triggers and I checked for leaks manually by checking the count of how many are freed",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7008,
        "deletions": 6965,
        "changed_files": 8,
        "created_at": "2023-08-30T01:47:37Z",
        "closed_at": "2023-08-30T16:50:11Z",
        "merged_at": "2023-08-30T16:50:10Z",
        "body": "### What does this PR do?\r\nFixes: https://github.com/oven-sh/bun/issues/4397\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 209,
        "deletions": 106,
        "changed_files": 10,
        "created_at": "2023-08-29T20:46:24Z",
        "closed_at": "2023-08-30T02:45:16Z",
        "merged_at": "2023-08-30T02:45:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew tests\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-08-29T15:37:31Z",
        "closed_at": "2023-08-30T02:39:12Z",
        "merged_at": "2023-08-30T02:39:12Z",
        "body": "### What does this PR do?\r\n\r\nI see that Bun 0.8.1 adds unix socket option for `Bun.serve()` \ud83c\udf89. This pr makes `http.server` also support this.\r\n\r\nRef: https://nodejs.org/api/net.html#serverlistenpath-backlog-callback\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-08-29T04:36:18Z",
        "closed_at": "2023-08-29T16:44:47Z",
        "merged_at": "2023-08-29T16:44:47Z",
        "body": "### What does this PR do?\r\n\r\nThe close callback is called and open event is emitted for `fs.WriteStream`.\r\n\r\nfixes #4241 fixes #4379 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdded some tests for calling the callbacks and the order they are called in.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1373,
        "deletions": 860,
        "changed_files": 14,
        "created_at": "2023-08-29T01:09:00Z",
        "closed_at": "2023-08-30T06:44:39Z",
        "merged_at": "2023-08-30T06:44:39Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 40,
        "changed_files": 4,
        "created_at": "2023-08-28T19:29:17Z",
        "closed_at": "2023-08-29T03:08:09Z",
        "merged_at": "2023-08-29T03:08:09Z",
        "body": "### What does this PR do?\r\n\r\nAllows `fd` to be used when creating `fs.ReadStream` and `fs.WriteStream`. Also includes a fix for `@clack/prompts`.\r\n\r\nfixes #3099 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nadded tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 221239,
        "deletions": 24,
        "changed_files": 29267,
        "created_at": "2023-08-28T13:23:51Z",
        "closed_at": "2023-08-28T15:38:30Z",
        "merged_at": "2023-08-28T15:38:30Z",
        "body": "### What does this PR do?\r\n\r\nIn preparation for implementing the IOCP / Windows backend, this moves our forked versions of uSockets and uWebSockets into Bun's repository instead of continuing to live in a seemingly random GitHub repository under my name\r\n\r\n### How did you verify your code works?\r\n\r\nRan `make uws` locally and checked it linked successfully",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2023-08-27T09:20:33Z",
        "closed_at": "2023-08-28T06:58:31Z",
        "merged_at": "2023-08-28T06:58:31Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nClose: #4362\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9346,
        "deletions": 1344,
        "changed_files": 92,
        "created_at": "2023-08-26T12:24:47Z",
        "closed_at": "2023-08-28T11:39:16Z",
        "merged_at": "2023-08-28T11:39:16Z",
        "body": "### What does this PR do?\r\n\r\nbatch of changes that should have no impact \r\n\r\n### How did you verify your code works?\r\n\r\nit doesn't. just slightly gets us closer, hopefully without breaking anything",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-26T11:10:09Z",
        "closed_at": "2023-08-30T20:39:11Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis will partially address #3951 by clearing the screen if `bun test` is in `--watch` mode.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI ran it locally with `bun test` and `bun --watch test`\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-26T06:24:04Z",
        "closed_at": "2023-08-26T08:14:41Z",
        "merged_at": "2023-08-26T08:14:41Z",
        "body": "Close: #4240\r\n\r\n### What does this PR do?\r\n\r\nHandle invalid `resolution_id`.\r\n\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 36006,
        "deletions": 544,
        "changed_files": 60,
        "created_at": "2023-08-26T02:45:13Z",
        "closed_at": "2023-08-26T09:34:26Z",
        "merged_at": "2023-08-26T09:34:26Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 503,
        "deletions": 57,
        "changed_files": 11,
        "created_at": "2023-08-26T02:20:15Z",
        "closed_at": "2023-08-26T04:08:41Z",
        "merged_at": "2023-08-26T04:08:41Z",
        "body": "### What does this PR do?\r\n\r\nThis makes it so the following hot reloads with zero configuration:\r\n\r\n```js\r\nBun.serve({\r\n  fetch(req) {\r\n     return new Response(\"!!!\");\r\n  }\r\n});\r\n```\r\n\r\nPreviously, you had to use `export default { fetch(req) { ... }`  instead to support hot reloading.\r\n\r\nThis is only enabled when `bun --hot` itself is enabled. Even so, it can be disabled by setting `id` to `null` in `Bun.serve`\r\n\r\nThis also adds an `id` property to `Bun.serve()` which is initially just used for hot reloads, but in the future it could be used in stack traces or other logging.\r\n\r\n### How did you verify your code works?\r\n\r\nJust manually for now",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2494,
        "deletions": 452,
        "changed_files": 24,
        "created_at": "2023-08-26T00:18:40Z",
        "closed_at": "2023-08-31T01:30:06Z",
        "merged_at": "2023-08-31T01:30:06Z",
        "body": "### What does this PR do?\r\n\r\n- Implements `cpSync`/`cp` partially in native code. If you pass `filter` flag or another that isnt supported in the native impl, it falls back to the JS version which is a lazy loaded version of what node.js does.\r\n  - On MacOS, this uses `clonefile`, achieving extremely high performance. \r\n- Implement async version of `copyFile`, this improves performance when doing many parallel copies, which makes the async fallback faster.\r\n- Async `fs.cp()`\r\n\r\nCloses #3778\r\nCloses #1519\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdded tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-25T23:58:03Z",
        "closed_at": "2023-08-26T09:35:10Z",
        "merged_at": "2023-08-26T09:35:10Z",
        "body": "### What does this PR do?\r\n\r\nSome tests are flaky due to the test runner defaulting to `Etc/UTC` but spawn/spawnSync having a different time zone in certain cases",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-08-25T22:35:40Z",
        "closed_at": "2023-09-05T23:59:40Z",
        "merged_at": "2023-09-05T23:59:40Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4316\r\n\r\nWe add a handlers object with connectError, but also the connect promise rejects with the same error, leading to two error events, so I took out the handler and only use the promise rejection (we'd have to call .catch regardless to prevent unhandled rejection).\r\n\r\nWe also need to call the close event on the socket.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 412,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-08-25T15:54:43Z",
        "closed_at": "2023-08-29T03:10:33Z",
        "merged_at": "2023-08-29T03:10:33Z",
        "body": "### What does this PR do?\r\n\r\nImplement `dns.reverse`, Close: #4299 \r\n\r\nSee also: https://c-ares.org/ares_gethostbyname.html\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 127,
        "changed_files": 3,
        "created_at": "2023-08-25T15:38:09Z",
        "closed_at": "2023-08-28T14:21:46Z",
        "merged_at": "2023-08-28T14:21:46Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-25T09:40:11Z",
        "closed_at": "2023-09-02T06:49:51Z",
        "merged_at": "2023-09-02T06:49:50Z",
        "body": "I just removed the incorrect escape of the port number in the simple http server example:\r\n\r\n![Screenshot 2023-08-25 at 11 34 48](https://github.com/oven-sh/bun/assets/68194/79577815-26e6-4880-a80f-29f5a4f91752)\r\n\r\nFeel free to close and fix as part of another change if that is preferred.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 46,
        "changed_files": 7,
        "created_at": "2023-08-25T07:58:20Z",
        "closed_at": "2023-10-17T00:18:30Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n* upgrade llvm to 16 to match zig 0.11.0\r\n* the usocket version we depends on have some issues need to change  `UWS_CC_FLAGS` to ignore\r\n```diff\r\n- UWS_CC_FLAGS = -pthread  -DLIBUS_USE_OPENSSL=1 -DUWS_HTTPRESPONSE_NO_WRITEMARK=1  -DLIBUS_USE_BORINGSSL=1 -DWITH_BORINGSSL=1 -Wpedantic -Wall -Wextra -Wsign-conversion -Wconversion $(UWS_INCLUDE) -DUWS_WITH_PROXY\r\n+ UWS_CC_FLAGS = -pthread  -DLIBUS_USE_OPENSSL=1 -DUWS_HTTPRESPONSE_NO_WRITEMARK=1  -DLIBUS_USE_BORINGSSL=1 -DWITH_BORINGSSL=1 -Wpedantic -Wall -Wextra -Wsign-conversion -Wconversion $(UWS_INCLUDE) -DUWS_WITH_PROXY -Wno-error=implicit-function-declaration -Wno-error=incompatible-function-pointer-types -Wno-error=implicit-int\r\n```\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] [blocking PR](https://github.com/oven-sh/WebKit/pull/16)\r\n\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 470,
        "deletions": 99,
        "changed_files": 10,
        "created_at": "2023-08-25T04:41:20Z",
        "closed_at": "2023-08-25T05:49:59Z",
        "merged_at": "2023-08-25T05:49:59Z",
        "body": "### What does this PR do?\r\n\r\nThis implements support for starting an HTTP server that listens on a unix domain socket in `Bun.serve()`\r\n\r\n```js\r\nBun.serve({\r\n  unix: \"/var/run/myapp.sock\",\r\n  fetch(req) { return new Response(); }\r\n});\r\n```\r\n\r\n### How did you verify your code works?\r\n\r\nThere are a couple tests.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 787,
        "deletions": 0,
        "changed_files": 17,
        "created_at": "2023-08-25T02:45:10Z",
        "closed_at": "2023-08-25T05:28:08Z",
        "merged_at": "2023-08-25T05:28:08Z",
        "body": "\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 117,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-08-24T22:45:20Z",
        "closed_at": "2023-08-25T00:18:51Z",
        "merged_at": "2023-08-25T00:18:51Z",
        "body": "fixes #4269\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-08-24T21:45:26Z",
        "closed_at": "2023-08-25T00:03:05Z",
        "merged_at": "2023-08-25T00:03:05Z",
        "body": "### What does this PR do?\r\n\r\nFixes #172 again\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests. `bbox.test` should not fail",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 178,
        "deletions": 35,
        "changed_files": 6,
        "created_at": "2023-08-24T15:58:49Z",
        "closed_at": "2023-08-25T00:17:49Z",
        "merged_at": "2023-08-25T00:17:49Z",
        "body": "- also fix parsing of `1.2.3pre+build`\r\n\r\nfixes #4266\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-08-24T13:41:37Z",
        "closed_at": "2023-08-25T00:16:51Z",
        "merged_at": "2023-08-25T00:16:51Z",
        "body": "### What does this PR do?\r\n\r\n- Make the server not crash if an error occurs in the dev build.\r\n\r\nClose: #4298 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 17,
        "changed_files": 3,
        "created_at": "2023-08-24T11:17:19Z",
        "closed_at": "2023-08-25T00:17:19Z",
        "merged_at": "2023-08-25T00:17:19Z",
        "body": "### What does this PR do?\r\n\r\nFix the URL formatting issue when using axios under `http_proxy` environment.  Close: #4295 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-24T08:38:28Z",
        "closed_at": "2023-08-24T21:36:40Z",
        "merged_at": "2023-08-24T21:36:40Z",
        "body": "### What does this PR do?\r\n\r\nSince we execute microtasks at the end of each request instead of all requests now, we also have to drain the microtasks after any of the callbacks from uWS\r\n\r\n### How did you verify your code works?\r\n\r\nAfter:\r\n```js\r\nSummary:\r\n  Success rate:\t1.0000\r\n  Total:\t1.6464 secs\r\n  Slowest:\t0.0056 secs\r\n  Fastest:\t0.0000 secs\r\n  Average:\t0.0004 secs\r\n  Requests/sec:\t121475.3116\r\n\r\n  Total data:\t0 B\r\n  Size/request:\t0 B\r\n  Size/sec:\t0 B\r\n\r\nResponse time histogram:\r\n  0.000 [170]    |\r\n  0.000 [7184]   |\u25a0\u25a0\r\n  0.000 [100164] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\r\n  0.000 [49522]  |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\r\n  0.001 [25150]  |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\r\n  0.001 [7917]   |\u25a0\u25a0\r\n  0.001 [4490]   |\u25a0\r\n  0.001 [2155]   |\r\n  0.001 [1811]   |\r\n  0.001 [330]    |\r\n  0.001 [1107]   |\r\n\r\nLatency distribution:\r\n  10% in 0.0003 secs\r\n  25% in 0.0003 secs\r\n  50% in 0.0004 secs\r\n  75% in 0.0005 secs\r\n  90% in 0.0006 secs\r\n  95% in 0.0007 secs\r\n  99% in 0.0010 secs\r\n\r\nDetails (average, fastest, slowest):\r\n  DNS+dialup:\t0.0020 secs, 0.0014 secs, 0.0028 secs\r\n  DNS-lookup:\t0.0000 secs, 0.0000 secs, 0.0003 secs\r\n\r\nStatus code distribution:\r\n  [200] 200000 responses\r\n```\r\n\r\nBefore (Bun v0.8)\r\n```js\r\nSummary:\r\n  Success rate:\t1.0000\r\n  Total:\t9.0704 secs\r\n  Slowest:\t0.0575 secs\r\n  Fastest:\t0.0000 secs\r\n  Average:\t0.0023 secs\r\n  Requests/sec:\t22049.6255\r\n\r\n  Total data:\t0 B\r\n  Size/request:\t0 B\r\n  Size/sec:\t0 B\r\n\r\nResponse time histogram:\r\n  0.001 [4783]   |\u25a0\r\n  0.001 [121170] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\r\n  0.002 [16151]  |\u25a0\u25a0\u25a0\u25a0\r\n  0.002 [10845]  |\u25a0\u25a0\r\n  0.003 [16191]  |\u25a0\u25a0\u25a0\u25a0\r\n  0.004 [5689]   |\u25a0\r\n  0.004 [4450]   |\u25a0\r\n  0.005 [2868]   |\r\n  0.006 [2394]   |\r\n  0.006 [1539]   |\r\n  0.007 [13920]  |\u25a0\u25a0\u25a0\r\n\r\nLatency distribution:\r\n  10% in 0.0007 secs\r\n  25% in 0.0009 secs\r\n  50% in 0.0010 secs\r\n  75% in 0.0023 secs\r\n  90% in 0.0045 secs\r\n  95% in 0.0083 secs\r\n  99% in 0.0177 secs\r\n\r\nDetails (average, fastest, slowest):\r\n  DNS+dialup:\t0.0051 secs, 0.0043 secs, 0.0060 secs\r\n  DNS-lookup:\t0.0001 secs, 0.0000 secs, 0.0005 secs\r\n\r\nStatus code distribution:\r\n  [200] 200000 responses\r\n```\r\n\r\nCode:\r\n\r\n```js\r\nBun.serve({\r\n  port: 3000,\r\n  async fetch(req) {\r\n    await req.json();\r\n    return new Response();\r\n  },\r\n});\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 320,
        "deletions": 104,
        "changed_files": 18,
        "created_at": "2023-08-24T07:35:58Z",
        "closed_at": "2023-08-25T02:39:00Z",
        "merged_at": "2023-08-25T02:39:00Z",
        "body": "### What does this PR do?\r\n\r\nThis adds memory size reporting for:\r\n- `Headers`\r\n- `Blob`\r\n\r\nThis also adds reporting for the `fetch()` function call because that can easily cost 3 KB per call.\r\n\r\n### How did you verify your code works?\r\n\r\nManually with breakpoints\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-24T02:41:48Z",
        "closed_at": "2023-08-25T02:41:23Z",
        "merged_at": "2023-08-25T02:41:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nfix https://github.com/oven-sh/bun/issues/4283\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 9,
        "changed_files": 7,
        "created_at": "2023-08-24T01:37:38Z",
        "closed_at": "2023-08-24T08:32:23Z",
        "merged_at": "2023-08-24T08:32:22Z",
        "body": "### What does this PR do?\r\n\r\nTasks from uSockets need to also drain the microtask queue or they will be unnecessarily delayed and cost a bunch of memory.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-23T11:28:14Z",
        "closed_at": "2023-08-23T17:36:26Z",
        "merged_at": "2023-08-23T17:36:26Z",
        "body": "### What does this PR do?\r\n\r\nRemove link to DNS API docs on the README which is broken. This PR would also closes #4087.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-23T03:26:27Z",
        "closed_at": "2023-08-25T00:17:50Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThese need tests. Fixes a segfault when doing `bun install grunt-contrib-yuidoc` without it cached.\r\n\r\nI havent fully gone through how bun install tests work, and it's definitely a bit quirky to test because the first\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\ni verified it manually but i will write tests soon\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 272,
        "deletions": 49,
        "changed_files": 2,
        "created_at": "2023-08-23T03:10:56Z",
        "closed_at": "2023-08-23T22:56:46Z",
        "merged_at": "2023-08-23T22:56:46Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI used its type in https://github.com/codehz/bun_python/blob/%F0%9F%A5%9F/src/types.ts and verified it should works better than current types.\r\n\r\nIt's just two small changes:\r\n1. Add Readonly so we can use `as const` to forced type narrow (when use with dedicated SYMBOLS table like that https://github.com/codehz/bun_python/blob/%F0%9F%A5%9F/src/symbols.ts#L277)\r\n2. Split FFITypeToType to FFITypeToArgsType and FFITypeToReturnsType, it more precisely reflects the actual type than before.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-23T02:43:57Z",
        "closed_at": "2023-08-23T04:54:59Z",
        "merged_at": "2023-08-23T04:54:59Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4261\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI added new bundler test.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1299,
        "deletions": 6,
        "changed_files": 5,
        "created_at": "2023-08-23T00:33:56Z",
        "closed_at": "2023-09-14T00:04:08Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis includes a list of default `trustedDependencies`. This allows popular packages like `sharp` and so on to work without any extra configuration, just `bun install sharp`.\r\n\r\nCloses #606 \r\n\r\nThe list is the top 500 packages on NPM that include a lifecycle script (most downloads/week, lowest on this was about ~7500 weekly downloads). This list was generated on 2023-06-26.\r\n\r\nThe list works, but this PR is a draft because before we can ship this enabled by default\r\n\r\n- [ ] #4051 should be addressed\r\n- [ ] Run scripts in parallel\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-08-22T22:45:08Z",
        "closed_at": "2023-08-23T22:53:47Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis is necessary because `finalizeWithoutDeinit()` will deref the url string and if the string only has one ref it will be destroyed.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nmodified test to repro this bug more often\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-22T14:05:34Z",
        "closed_at": "2023-08-23T07:42:34Z",
        "merged_at": "2023-08-23T07:42:33Z",
        "body": "### What does this PR do?\r\nFixes https://github.com/oven-sh/bun/issues/4255\r\n\r\nAsk for `bun --revision` instead `bun -v` in bug issue template\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 867,
        "deletions": 549,
        "changed_files": 31,
        "created_at": "2023-08-22T06:38:56Z",
        "closed_at": "2023-08-23T21:05:05Z",
        "merged_at": "2023-08-23T21:05:05Z",
        "body": "### What does this PR do?\r\n\r\n- Faster microticks by not updating the daylight savings time cache on every microtask call\r\n- Automatically flush pending writes to HTTP response bodies after the microtask queue has been drained, which fixes #1886\r\n- Fix a UAF in fetch body streams\r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 19,
        "changed_files": 4,
        "created_at": "2023-08-22T04:58:29Z",
        "closed_at": "2023-08-22T06:39:41Z",
        "merged_at": "2023-08-22T06:39:41Z",
        "body": "### What does this PR do?\r\n\r\nPrevents the process from being kept alive for one more keypress. Also fixes a bug when resuming readline keypress events.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nUsed previous tests and manual tests.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 64,
        "changed_files": 9,
        "created_at": "2023-08-22T03:12:07Z",
        "closed_at": "2023-08-22T06:39:56Z",
        "merged_at": "2023-08-22T06:39:56Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 169,
        "deletions": 149,
        "changed_files": 12,
        "created_at": "2023-08-22T02:25:19Z",
        "closed_at": "2023-08-24T21:39:29Z",
        "merged_at": "2023-08-24T21:39:29Z",
        "body": "### What does this PR do?\r\n\r\nUpdates to polyfills and bun-wasm\r\n\r\n- `bun-polyfills`:\r\n  - `Bun.Transpiler` polyfill implemented\r\n  - Initial polyfill revision for `bun:jsc` module & `Bun.gc` polyfill\r\n- `bun-wasm`:\r\n  - Fixed a lot of memory and data transfer errors/bugs and edge-cases.\r\n\r\n### How did you verify your code works?\r\nManual testing (neither polyfills nor bun-wasm have test integration yet)\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it (N/A wasm build doesn't have tests yet)\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-08-22T00:09:18Z",
        "closed_at": "2023-08-22T02:32:41Z",
        "merged_at": "2023-08-22T02:32:41Z",
        "body": "### What does this PR do?\r\n\r\nFix backspace then pressing single quote. this is an edge case with prompt libraries like inquirer\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\nI tested inquirer manually (writing automated tty tests sucks)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 19,
        "changed_files": 11,
        "created_at": "2023-08-21T23:43:13Z",
        "closed_at": "2023-08-22T04:11:27Z",
        "merged_at": "2023-08-22T04:11:27Z",
        "body": "### What does this PR do?\r\n\r\nThis matches node's behavior for require/import error `code` property\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-08-21T21:13:49Z",
        "closed_at": "2023-08-21T23:40:26Z",
        "merged_at": "2023-08-21T23:40:26Z",
        "body": "### What does this PR do?\r\n\r\nThis might not actually fix the bug but regardless we should do this.\r\n\r\nI could not reproduce the original issue exactly.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 17,
        "changed_files": 3,
        "created_at": "2023-08-21T12:17:09Z",
        "closed_at": "2023-08-21T15:31:18Z",
        "merged_at": "2023-08-21T15:31:17Z",
        "body": "### What does this PR do?\r\n\r\n![image](https://github.com/oven-sh/bun/assets/709451/620ce059-171b-45bc-a285-c9404e2dbfb8)\r\n\r\n### How did you verify your code works?\r\n\r\nThere are existing tests, which failed many times before they started passing locally",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 253,
        "deletions": 225,
        "changed_files": 28,
        "created_at": "2023-08-21T08:49:20Z",
        "closed_at": "2023-08-24T23:13:14Z",
        "merged_at": "2023-08-24T23:13:14Z",
        "body": "### What does this PR do?\r\n\r\nThis PR includes:\r\n* update zig to 0.11.0 ( 0.12 as of now *0.12.0-dev.161+6a5463951* works as well though)\r\n* fix several memory deallocating mismatches with allocating function issues\r\n* fix the build script to make it works  on the latest zig compiler\r\n* change jsonStringify signature to make it works on the latest zig compiler\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\nThanks to @Hanaasagi ,  @ianprime0509 and @mlugg  for helping me out\r\n",
        "comments": 21
    },
    {
        "merged": true,
        "additions": 297,
        "deletions": 70,
        "changed_files": 8,
        "created_at": "2023-08-21T01:05:26Z",
        "closed_at": "2023-08-21T04:29:10Z",
        "merged_at": "2023-08-21T04:29:09Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes #1675\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-08-20T15:15:23Z",
        "closed_at": "2023-08-22T01:22:37Z",
        "merged_at": "2023-08-22T01:22:37Z",
        "body": "### What does this PR do?\r\n\r\n1. Fix `--outfile` doesn't work with nested path.  Close: #4195\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests \r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 102,
        "deletions": 42,
        "changed_files": 17,
        "created_at": "2023-08-20T07:59:01Z",
        "closed_at": "2023-08-21T02:34:33Z",
        "merged_at": "2023-08-21T02:34:33Z",
        "body": "### What does this PR do?\r\n\r\nThis makes `--inspect-wait` more reliable and adds a new `--inspect-brk` CLI flag which injects a `debugger;` statement into the first line of the main ES or CJS module. It inserts it into the main file using the transpiler to ensure it is reached even if a breakpoint cannot be set at the location. This is also supported in `bun test`, it will insert into each test file individually. \r\n\r\nThis needs a JSC upgrade before the PR will build successfully.\r\n\r\n| Flag                     |  Description\r\n|-----------------|----------------------------|\r\n`--inspect`  | Enable the inspector, might exit first\r\n`--inspect-wait`  | Enable the inspector & wait for one to connect |\r\n`--inspect-brk`  | Wait for the inspector to connect  & add `debugger;` to the first line |\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManually",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-19T23:55:48Z",
        "closed_at": "2023-08-22T00:49:27Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 38,
        "changed_files": 19,
        "created_at": "2023-08-19T21:00:20Z",
        "closed_at": "2023-08-30T03:14:57Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nCloses #4217\r\n\r\nWhen the JS lexer sees `\"\\n\"`, it marks this as utf8 / fast path, but the string `javascriptLenth` will incorrectly take the fast path and return the byte length instead of the escaped length.\r\n\r\nDuring testing i noticed issues `dedent` was causing, so I rewrote that as a one off util.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdded this case to the bundler tests\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-19T01:00:54Z",
        "closed_at": "2023-08-20T01:48:59Z",
        "merged_at": "2023-08-20T01:48:59Z",
        "body": "### What does this PR do?\r\nAdd the following comment to https://github.com/oven-sh/bun/blob/main/dockerhub/Dockerfile-distroless:\r\n\r\n```Dockerfile\r\n# Not officially supported (yet)\r\n```\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1874,
        "deletions": 221,
        "changed_files": 14,
        "created_at": "2023-08-19T00:42:25Z",
        "closed_at": "2023-08-19T02:59:03Z",
        "merged_at": "2023-08-19T02:59:03Z",
        "body": "### What does this PR do?\r\n\r\nThis implements BigIntStats and also cleans up the Stats struct a little. This allows `fs.statSync(..., { bigint: true })`. Fixes fs-extra, gets Nuxt farther, and surely many other packages.\r\n\r\nBefore we had two fields per time (`mtime_ms: f64`, then `mtime: u64`). While BigIntStats adds a new field for `_ns`, I did combine the previous `mtime_ms` and `mtime` into one field as they represented the same thing, and wrote a date conversion function for the date getters.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 147,
        "deletions": 26,
        "changed_files": 7,
        "created_at": "2023-08-18T18:46:37Z",
        "closed_at": "2023-08-19T02:59:23Z",
        "merged_at": "2023-08-19T02:59:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nadds `selfClosing` & `canHaveContent` getters on `Element`. Also addresses @Jarred-Sumner 's feedback about passing around `CallFrame`s\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n\r\n-->\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 487,
        "deletions": 37,
        "changed_files": 10,
        "created_at": "2023-08-18T06:12:18Z",
        "closed_at": "2023-08-22T04:34:03Z",
        "merged_at": "2023-08-22T04:34:03Z",
        "body": "- Debugger guide\r\n- Improved `bun test` docs\r\n- Update nodejs compat section",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 648,
        "deletions": 78,
        "changed_files": 15,
        "created_at": "2023-08-17T19:46:33Z",
        "closed_at": "2023-08-18T03:56:52Z",
        "merged_at": "2023-08-18T03:56:52Z",
        "body": "### What does this PR do?\r\n\r\nThis merges `util.inspect` and `Bun.inspect`, as well as gives the console formatter support for calling `util.inspect.custom` functions.\r\n\r\n**Breaking change**: `Bun.inspect` instead of taking variadic arguments, it will function exactly like `util.inspect`.\r\n\r\n- Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [X] I wrote automated tests\r\n- [X] I ran `make js` and committed the transpiled changes\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [X] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n- [X] I added TypeScript types for the new methods, getters, or setters\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6111,
        "deletions": 2277,
        "changed_files": 16,
        "created_at": "2023-08-17T19:42:55Z",
        "closed_at": "2023-08-17T21:25:10Z",
        "merged_at": "2023-08-17T21:25:10Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nUsing [this](https://gist.github.com/bru02/e3ee5a79c6c9ab20bc47a846c25e0483) real-wordish HTMLRewriter on ~59k records.\r\n\r\nHere are the bench results:\r\n<img width=\"571\" alt=\"Screenshot 2023-08-17 at 18 07 35\" src=\"https://github.com/oven-sh/bun/assets/35275408/11cd6a5a-00af-4ee2-a0a5-bb69cd9cc6d2\">\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-17T16:37:45Z",
        "closed_at": "2023-08-17T19:13:17Z",
        "merged_at": "2023-08-17T19:13:17Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChanged example bunfig.toml to use \"install.lockfile\" instead of \"install\"\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 151,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-08-17T15:40:37Z",
        "closed_at": "2023-08-17T21:27:33Z",
        "merged_at": "2023-08-17T21:27:33Z",
        "body": "Close: #4178\r\n\r\n### What does this PR do?\r\n\r\n1. Add `buffer` parameter in `fs.read` callback. Ref: https://nodejs.org/api/fs.html#fsreadfd-buffer-offset-length-position-callback\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-17T15:18:23Z",
        "closed_at": "2023-08-17T19:49:11Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10025,
        "deletions": 11665,
        "changed_files": 72,
        "created_at": "2023-08-17T09:42:09Z",
        "closed_at": "2023-08-19T02:58:04Z",
        "merged_at": "2023-08-19T02:58:04Z",
        "body": "### What does this PR do?\r\n\r\nBefore:\r\n\r\n<img width=\"951\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/a28a129c-6a7a-4ef2-bafb-2d2041d5ba99\">\r\n\r\n\r\nAfter:\r\n\r\n<img width=\"981\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/43d315f8-0e44-4fbb-a82b-c5a92483ed92\">\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManually\r\n\r\nSome of this is copy-pasted from WebCore (thanks @dcrousso)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13542,
        "deletions": 9216,
        "changed_files": 73,
        "created_at": "2023-08-17T08:03:17Z",
        "closed_at": "2023-08-25T05:53:34Z",
        "merged_at": "2023-08-25T05:53:34Z",
        "body": "### What does this PR do?\r\n\r\nMade various changes and improvements to how the `debug-adapter-protocol` works.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 11,
        "changed_files": 5,
        "created_at": "2023-08-17T03:52:47Z",
        "closed_at": "2023-08-17T05:10:01Z",
        "merged_at": "2023-08-17T05:10:01Z",
        "body": "### What does this PR do?\r\n\r\nJSFFIFunction is repurposed in a few other places to create functions from Zig -> JS, and is not supposed to have `.ptr` property when not used from FFI.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 821,
        "deletions": 722,
        "changed_files": 23,
        "created_at": "2023-08-16T22:58:29Z",
        "closed_at": "2023-08-19T07:11:25Z",
        "merged_at": "2023-08-19T07:11:25Z",
        "body": "### What does this PR do?\r\nAdds `WriteStream` and `ReadStream` to tty module. Also adds rawmode to readline enabling libraries like inquirer and enquirer.\r\n\r\ncloses #4153 , closes #4061 , closes #2081 , closes #1787 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nWrote tests for tty streams and process.stdout/stdin\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-16T09:50:51Z",
        "closed_at": "2023-08-16T23:10:23Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Saves next four characters\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-16T03:22:11Z",
        "closed_at": "2023-08-16T05:13:14Z",
        "merged_at": "2023-08-16T05:13:14Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 18,
        "changed_files": 8,
        "created_at": "2023-08-15T13:40:52Z",
        "closed_at": "2023-08-20T08:52:18Z",
        "merged_at": "2023-08-20T08:52:18Z",
        "body": "### What does this PR do?\r\n\r\nClose: #3844\r\n\r\n1. When bundling the code, use different alias mappings based on the target.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-15T13:35:38Z",
        "closed_at": "2023-08-15T15:11:12Z",
        "merged_at": "2023-08-15T15:11:12Z",
        "body": "### What does this PR do?\r\n\r\nThe latest main branch cannot be built currently. Commit sha 1a6a52314f88946e66ac0f36d00d624ec1a5296f. Strangely, the CI status is still green \ud83e\udd14. There is no `latin1` method in `WTFStringImplStruct`, only a `latin1Slice` method.\r\n\r\n\r\n![2023-08-15_22-31](https://github.com/oven-sh/bun/assets/9482395/0b4e49fd-a2b6-4e88-8a32-4b4eeac1e526)\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12492,
        "deletions": 447,
        "changed_files": 84,
        "created_at": "2023-08-15T07:44:16Z",
        "closed_at": "2023-08-17T02:40:21Z",
        "merged_at": "2023-08-17T02:40:21Z",
        "body": "### What does this PR do?\r\n\r\nThis adds:\r\n- Debugger support via WebKit's Inspector Protocol\r\n- AsyncStackTrace tracking when `--inspect` is enabled, which is manually propagated through the debugger\r\n- Makes various functions used internally appear in profiling when inspected\r\n- Updates WebKit with a new `USE(BUN_JSC_ADDITIONS)` which we can more easily wrap our changes into. In preparation for eventually using the upstream version of WebKit rather than a fork.\r\n\r\n\r\nHopefully didn't mess up the merge conflicts but we shall see",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-08-15T06:21:48Z",
        "closed_at": "2023-08-16T01:09:11Z",
        "merged_at": "2023-08-16T01:09:11Z",
        "body": "### What does this PR do?\r\n\r\nBefore, the event loop is not reffed between the time `Bun.connect` is called and the `open` callback is emitted. We are relying on the `await` to keep the event loop on.\r\n\r\nThis fixes #4108 as well as this minimal repro.\r\n\r\n```ts\r\n(async () => {\r\n  await Bun.sleep(10);\r\n  console.log(\"connecting pool...\");\r\n  await Bun.connect({\r\n    hostname: \"localhost\",\r\n    port: 5432,\r\n    socket: { data() {} },\r\n  });\r\n  console.log(\"connected pool\");\r\n})();\r\n```\r\n\r\nThough it makes me think if we'll need more cases for keeping the event loop alive, as we should not have to rely on top-level await to carry us. Later we should investigate if `Bun.build` and any other promise-returning API has this sort of issue.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI verified the current tests work as well as the issue did not reproduce.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 7,
        "changed_files": 10,
        "created_at": "2023-08-15T05:57:11Z",
        "closed_at": "2023-08-21T23:26:07Z",
        "merged_at": "2023-08-21T23:26:07Z",
        "body": "### What does this PR do?\r\n\r\nThis implements `napi_ref_threadsafe_function`\r\n\r\n- Closes #3978\r\n- Gets `@tauri-apps/cli` a little farther\r\n- probably some other packages that get fixed too.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-08-15T04:33:53Z",
        "closed_at": "2023-08-15T08:56:37Z",
        "merged_at": "2023-08-15T08:56:37Z",
        "body": "### What does this PR do?\r\n\r\nCloses #4149 (doesnt fix the underlying problem but the source of the crash)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew tests\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-08-15T03:07:11Z",
        "closed_at": "2023-08-17T21:57:43Z",
        "merged_at": "2023-08-17T21:57:43Z",
        "body": "### What does this PR do?\r\n\r\nCloses #4141\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- Added new test\r\n- Verified manually server.js works\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 284,
        "deletions": 275,
        "changed_files": 4,
        "created_at": "2023-08-15T00:50:53Z",
        "closed_at": "2023-08-15T03:28:18Z",
        "merged_at": "2023-08-15T03:28:18Z",
        "body": "### What does this PR do?\r\n\r\nMay fix an issue in the debugger re: invalid urls.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\ni tried an error to see it doesnt alter this message\r\n<img width=\"779\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/5a331274-4322-4362-bf13-48e5b15cee45\">\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 20,
        "changed_files": 12,
        "created_at": "2023-08-14T18:48:56Z",
        "closed_at": "2023-08-16T23:12:02Z",
        "merged_at": "2023-08-16T23:12:02Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Tests fixes\r\n### How did you verify your code works?\r\n\r\nRun into CI\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 222,
        "deletions": 2204,
        "changed_files": 34,
        "created_at": "2023-08-12T03:29:30Z",
        "closed_at": "2023-08-12T05:13:47Z",
        "merged_at": "2023-08-12T05:13:47Z",
        "body": "### What does this PR do?\r\n\r\nBun stopped generating `node_modules.bun` as of Bun v0.6. We continued to have code that loads `node_modules.bun`, but there are no tests. This deprecates `node_modules.bun` entirely, deleting the code that makes use of it.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-12T02:11:41Z",
        "closed_at": "2023-08-12T05:14:09Z",
        "merged_at": "2023-08-12T05:14:09Z",
        "body": "Close: #4128\r\n\r\n### What does this PR do?\r\n\r\n- Fix `bun --config <PATH>`\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1876,
        "deletions": 156,
        "changed_files": 19,
        "created_at": "2023-08-12T01:35:27Z",
        "closed_at": "2023-08-22T03:30:34Z",
        "merged_at": "2023-08-22T03:30:34Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests + existing tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 465,
        "deletions": 263,
        "changed_files": 35,
        "created_at": "2023-08-11T02:21:13Z",
        "closed_at": "2023-08-12T20:51:03Z",
        "merged_at": "2023-08-12T20:51:03Z",
        "body": "### What does this PR do?\r\n\r\nFixes worker tests but it makes these changes to WebWorker.\r\n\r\n**was reimplemented a little on aug 11**:\r\n\r\n- A worker's event loop impacts the main process' event loop. Meaning if you setTimeout in a worker/listen for messages, it keeps main alive.\r\n- Worker is by default `.ref()`, but workers will exit if their event loop dies.\r\n- If you do `addEventListener(\"message\")` on a message port or the global, this refs the event loop.\r\n- If you do `worker.unref()` this no longer makes the worker's event loop affect the caller's. This is what esbuild depends on.\r\n- We were not freeing WebWorker struct. This was because its a little complex. ~~I solved it by assigning vm to null when the vm is done with, then the while(true) loop for the worker (the source of the UAF) would call real deinit.~~ It's not really that complex with the changes to the worker event loop. `.terminate` sets a flag to tell the worker to exit the event loop, and the deinit is called from within `spin()` on the Worker's thread.\r\n\r\nI'd like a close review to make sure i did everything right. I triple checked my uses of event loop refs and memory usage in the worker zig file.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI ran unit tests. For testing large scale worker event loop stuff.\r\n\r\n```ts\r\nimport { Worker, isMainThread, workerData } from \"worker_threads\";\r\n\r\nif (isMainThread) {\r\n  for (let i = 0; i < 1000; i++) {\r\n    const w = new Worker(\"/Users/dave/code/bun/test/js/web/worker-demo.mjs\", { ref: false, workerData: i });\r\n    let recieved = false;\r\n    w.on(\"message\", msg => {\r\n      if (msg === \"initial message\") {\r\n        recieved = true;\r\n      } else {\r\n        console.log(\"WHAT?\", msg);\r\n      }\r\n    });\r\n    setTimeout(() => {\r\n      if (!recieved) {\r\n        w.terminate();\r\n        console.log(\"worker\", i, \"did not respond\");\r\n      }\r\n    }, 5000 + 500);\r\n  }\r\n} else {\r\n  setTimeout(() => {\r\n    self.postMessage(\"initial message\");\r\n    console.log(\"workerid=\", workerData);\r\n  }, Math.random() * 5000 + 500);\r\n}\r\n```\r\n\r\nPipe this to a file to see that exactly 1000 lines are output.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-10T21:58:56Z",
        "closed_at": "2023-08-10T23:43:20Z",
        "merged_at": "2023-08-10T23:43:20Z",
        "body": "### What does this PR do?\r\n\r\nhttps://github.com/oven-sh/bun/pull/4106 leaks the base64url string\r\n\r\n### How did you verify your code works?\r\n\r\n\r\nAfter:\r\n```\r\ncpu: Apple M1 Max\r\nruntime: bun 0.7.4_debug (arm64-darwin)\r\n\r\nbenchmark                                 time (avg)             (min \u2026 max)       p75       p99      p995\r\n---------------------------------------------------------------------------- -----------------------------\r\nBuffer(110000).toString('base64url')   92.24 \u00b5s/iter    (48.58 \u00b5s \u2026 3.21 ms)  52.63 \u00b5s 765.96 \u00b5s 875.54 \u00b5s\r\n\r\nPeak memory usage: 60 MB\r\n```\r\n\r\nBefore:\r\n```\r\ncpu: Apple M1 Max\r\nruntime: bun 0.7.4 (arm64-darwin)\r\n\r\nbenchmark                                 time (avg)             (min \u2026 max)       p75       p99      p995\r\n---------------------------------------------------------------------------- -----------------------------\r\nBuffer(110000).toString('base64url')   60.46 \u00b5s/iter   (57.5 \u00b5s \u2026 113.75 \u00b5s)  61.29 \u00b5s  70.75 \u00b5s  71.92 \u00b5s\r\n\r\nPeak memory usage: 1226 MB\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-10T20:54:56Z",
        "closed_at": "2023-08-17T19:51:45Z",
        "merged_at": "2023-08-17T19:51:45Z",
        "body": "Merge after https://github.com/withastro/astro/pull/7944 lands",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-10T20:54:31Z",
        "closed_at": "2023-08-10T22:25:52Z",
        "merged_at": "2023-08-10T22:25:52Z",
        "body": "### What does this PR do?\r\n\r\nIf the JS task queue is paused (like when debugging), setInterval timers still run and that's strange. This PR makes it so even if setInterval timer has triggered, we don't actually schedule a new callback task until the previous one has started executing (started is the important part, the amount of time the callback takes is only relevant insofar as if the event loop is very far behind)\r\n\r\n### How did you verify your code works?\r\n\r\nManual testing, but we also have tests for setInterval\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-10T18:56:46Z",
        "closed_at": "2023-08-10T21:00:14Z",
        "merged_at": "2023-08-10T21:00:14Z",
        "body": "### What does this PR do?\r\n\r\nFix the permission on temporary files created by bun. I'm not sure why this was ever IRWXO.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThis is a one character change.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 26,
        "changed_files": 8,
        "created_at": "2023-08-10T18:51:50Z",
        "closed_at": "2023-08-10T20:32:04Z",
        "merged_at": "2023-08-10T20:32:04Z",
        "body": "### What does this PR do?\r\n\r\nUses a slightly tweaked version of zig's std base64 encoder for `base64url`. The WebKit one has strange issues on Linux. Had to tweak the logic a little from the zig std implementation to add the extra padding bytes that Node outputs.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n\r\nFixes #4062 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 36,
        "changed_files": 3,
        "created_at": "2023-08-10T18:31:57Z",
        "closed_at": "2023-08-21T23:25:23Z",
        "merged_at": "2023-08-21T23:25:23Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4089 \r\n\r\n### How did you verify your code works?\r\n\r\nAutomated tests\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 180,
        "deletions": 18,
        "changed_files": 10,
        "created_at": "2023-08-09T23:28:26Z",
        "closed_at": "2023-08-18T02:34:05Z",
        "merged_at": "2023-08-18T02:34:05Z",
        "body": "### What does this PR do?\r\n\r\n- fs.Stats() as constructor\r\n- util.formatWithOptions\r\n- repl._builtinLibs\r\n\r\nHelps but does not close; #3771\r\nCloses #3760\r\nCloses #3793\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 311,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-08-09T18:41:39Z",
        "closed_at": "2023-08-10T20:29:53Z",
        "merged_at": "2023-08-10T20:29:53Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nAdd description formatting to test.each and describe.each callbacks\r\n\r\nhttps://jestjs.io/docs/api#testeachtablename-fn-timeout\r\n\r\nGenerate unique test titles by positionally injecting parameters with [printf formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\r\n\r\n- [ ] %p - [pretty-format](https://www.npmjs.com/package/pretty-format).\r\n- [x] %s- String.\r\n- [x] %d- Number.\r\n- [x] %i - Integer.\r\n- [x] %f - Floating point value.\r\n- [x] %j - JSON.\r\n- [x] %o - Object.\r\n- [x] %# - Index of the test case.\r\n- [x] %% - single percent sign ('%'). This does not consume an argument.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI updated automated tests\r\n\r\n![image](https://github.com/oven-sh/bun/assets/25390037/4bfe715d-fe2c-4b26-b929-f3b60a227d17)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-08-09T18:02:55Z",
        "closed_at": "2023-08-10T20:09:03Z",
        "merged_at": "2023-08-10T20:09:03Z",
        "body": "### What does this PR do?\r\n\r\nCloses #3760\r\n\r\n- Adds `util.formatWithOptions`\r\n- Add extra `%` rules to `format` and `formatWithOptions`. It is not perfect but it's closer to what node does.\r\n\r\nThis works towards Nuxt\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests. TBH we could have many more, but i'm not super confident in our util.inspect implementation.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-08-09T11:04:45Z",
        "closed_at": "2023-08-09T16:45:50Z",
        "merged_at": "2023-08-09T16:45:50Z",
        "body": "Close: #3914\r\n\r\n### What does this PR do?\r\n\r\n- Fix constructing buffer from a UTF16 string with the Latin1 encoding. If this issue is resolved, then `XLSX.read` will not coredump. \r\n\r\nPlease see comments in #3914.\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests \r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 192,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-08-09T07:11:48Z",
        "closed_at": "2023-08-18T10:25:06Z",
        "merged_at": null,
        "body": "Reopening: #3661 (Reason: troubles with git)\r\n\r\n---\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis implements the \"config\" option in package.json which declares env variables.\r\nCloses #73\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n### Note:\r\narrays are not implemented here\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 321,
        "changed_files": 7,
        "created_at": "2023-08-09T06:18:34Z",
        "closed_at": "2023-08-10T18:57:38Z",
        "merged_at": "2023-08-10T18:57:38Z",
        "body": "### What does this PR do?\r\n\r\nRemoves some node_fallbacks. This\r\n\r\n- Stops bun build from overriding the module\r\n- Stops bun run from overriding the module sometimes\r\n\r\nCloses #2040\r\nCloses #4077\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2127,
        "deletions": 26,
        "changed_files": 34,
        "created_at": "2023-08-09T05:49:25Z",
        "closed_at": "2023-08-10T19:17:40Z",
        "merged_at": "2023-08-10T19:17:40Z",
        "body": "### What does this PR do?\r\n\r\nCreate and implement an initial base version of `bun-polyfills` package. The polyfills part of this branch is not finished.\r\n\r\nThis also includes some fixes to `bun-types` to allow polyfills to match, syncing these being main reason for this PR, as these type changes are needed for the next Bun release. @Jarred-Sumner this includes the type changes for #4054 \r\n\r\nThere are not and will not be any changes outside those 2 packages in the polyfills branch. Work on the main bun code necessary for supporting polyfills will be done in separate branches for organization and merge conflict prevention.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nN/A Unfinished. Polyfills test integration will be done later.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 24128,
        "deletions": 25802,
        "changed_files": 2,
        "created_at": "2023-08-09T05:19:19Z",
        "closed_at": "2023-08-09T16:14:52Z",
        "merged_at": "2023-08-09T16:14:52Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nBefore: 2023-06-21 08:09:45 -0400\r\nAfter:  2023-08-08 16:23:39 -0400\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 15,
        "changed_files": 7,
        "created_at": "2023-08-08T08:50:09Z",
        "closed_at": "2023-08-09T05:19:46Z",
        "merged_at": "2023-08-09T05:19:46Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 18,
        "changed_files": 8,
        "created_at": "2023-08-08T06:25:15Z",
        "closed_at": "2023-08-08T08:42:44Z",
        "merged_at": "2023-08-08T08:42:44Z",
        "body": "### What does this PR do?\r\n\r\n`await import(eval(\"'bun'))` previously did not work\r\n\r\nNow it does, though it only exports bun on the `default` property because of obscure issues related to the JSC C API which is still partially in use\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nAdded a test\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 723,
        "deletions": 185,
        "changed_files": 23,
        "created_at": "2023-08-08T05:01:08Z",
        "closed_at": "2023-08-08T06:58:39Z",
        "merged_at": "2023-08-08T06:58:39Z",
        "body": "### What does this PR do?\r\n\r\n- Types: Fix Worker and Node Worker being the same type; they are different.\r\n- Implement the `env` option for workers.\r\n- In some stubbed parts of worker_threads, throw better errors.\r\n- .terminate calls unref properly\r\n- ref true is default\r\n\r\nMakes sveltekit work\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nnew automated tests\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 53,
        "changed_files": 5,
        "created_at": "2023-08-07T22:26:52Z",
        "closed_at": "2023-08-08T02:32:23Z",
        "merged_at": "2023-08-08T02:32:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nbefore:\r\n```js\r\nconst headers = new Headers();\r\nheaders.append(\"Set-Cookie\", \"cookies\");\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\nconsole.log([...headers]);\r\n// output: [ [ \"content-type\", \"application/json\" ], [ \"content-type\", \"application/json\" ] ]\r\n```\r\nafter:\r\n```js\r\n// output: [ [ \"content-type\", \"application/json\" ], [ \"set-cookie\", \"cookies\" ] ]\r\n```\r\n\r\n### How did you verify your code works?\r\nupdated and added test for headers with `set-cookie`\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 324,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2023-08-07T20:36:50Z",
        "closed_at": "2023-08-09T05:25:32Z",
        "merged_at": "2023-08-09T05:25:32Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n\r\nadd support for [test.each()](https://jestjs.io/docs/api#testeachtablename-fn-timeout) and [describe.each()](https://jestjs.io/docs/api#describeeachtablename-fn-timeout)\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests and ran bun test\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n![image](https://github.com/oven-sh/bun/assets/25390037/96366186-45f0-4c6b-8b04-ffe360da8306)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 389,
        "deletions": 89,
        "changed_files": 5,
        "created_at": "2023-08-07T20:31:56Z",
        "closed_at": "2023-08-08T03:11:32Z",
        "merged_at": "2023-08-08T03:11:32Z",
        "body": "- analogous to `npm update`\r\n- `bun update <name>` to refresh specified package under `package.json`\r\n- `bun update` to refresh all package to latest versions\r\n\r\n\r\n### What does this PR do?\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 966,
        "deletions": 170,
        "changed_files": 25,
        "created_at": "2023-08-07T13:23:05Z",
        "closed_at": "2023-08-08T01:51:16Z",
        "merged_at": "2023-08-08T01:51:16Z",
        "body": "### What does this PR do?\r\n\r\nThis does three things\r\n1) Get's Bun's transpiler to successfully run in WASM\r\n2) Creates a small internal abstraction for using bun's transpiler to analyze parsed ASTs\r\n3) Uses the above abstraction to export a `getTests` function to WASM which returns an array of `test` and `describe` calls in a file along with the name of the tests. It will include tests with `test.only`, but ignore any other kinds of tests. IT skips if the test does not have a string argument.\r\n\r\n@jhmaster2000 this is probably an okay starting point for other cases where you might want to directly use Bun in `node-bun`\r\n\r\nSome notes:\r\n- WASM build is 1.3 MB with release fast and with release small, it's 800 KB.\r\n- .tsx only (which also includes .js and .ts)\r\n\r\n\r\nAPI example in `test/node.mjs` in `packages/bun-wasm`:\r\n\r\n```ts\r\nimport { readFileSync } from \"fs\";\r\nimport { init, getTests } from \"../\";\r\n\r\nconst buf = (process.argv.length > 2 ? readFileSync(process.argv.at(-1)) : \"\") || readFileSync(import.meta.url);\r\nawait init(new URL(\"../bun.wasm\", import.meta.url));\r\n\r\nconsole.log(getTests(buf));\r\n```\r\n\r\nIf we pass that to [./test/js/node/buffer.test.js](https://github.com/oven-sh/bun/blob/jarred/wasm-test-analyzer/test/js/node/buffer.test.js#L2555)\r\n\r\n```js\r\n[\r\n  { name: 'isAscii', byteOffset: 258, kind: 'test' },\r\n  { name: 'isUtf8', byteOffset: 625, kind: 'test' },\r\n  { name: 'Buffer global is settable', byteOffset: 1166, kind: 'test' },\r\n  { name: 'length overflow', byteOffset: 1448, kind: 'test' },\r\n  { name: 'truncate input values', byteOffset: 1681, kind: 'test' },\r\n  { name: 'Buffer.allocUnsafe()', byteOffset: 1957, kind: 'test' },\r\n  { name: 'Buffer.from()', byteOffset: 2064, kind: 'test' },\r\n  { name: 'offset properties', byteOffset: 2154, kind: 'test' },\r\n  {\r\n    name: 'creating a Buffer from a Uint32Array',\r\n    byteOffset: 2312,\r\n    kind: 'test'\r\n  },\r\n  {\r\n    name: 'creating a Buffer from a Uint32Array (old constructor)',\r\n    byteOffset: 2530,\r\n    kind: 'test'\r\n  },\r\n  { name: 'invalid encoding', byteOffset: 2757, kind: 'test' },\r\n  { name: 'create 0-length buffers', byteOffset: 3159, kind: 'test' },\r\n  {\r\n    name: 'write() beyond end of buffer',\r\n    byteOffset: 3436,\r\n    kind: 'test'\r\n  },\r\n  ...\r\n]\r\n```\r\n\r\nNote that to add exported functions, you have to:\r\n\r\n- Append to  `-sEXPORTED_FUNCTIONS` in the Makefile\r\n- `export fn ...` in Zig\r\n- Reference the function in a `comptime` scope\r\n- Reference the function in `emcc_main` \r\n\r\nCommunication between WASM and JS is handled via peechy, using the schema. The heap size is a hardcoded limit you can pass on initialization\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 29,
        "changed_files": 4,
        "created_at": "2023-08-07T02:24:59Z",
        "closed_at": "2023-08-07T03:39:40Z",
        "merged_at": "2023-08-07T03:39:40Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4029 \r\nFixes #4022\r\n\r\n### How did you verify your code works?\r\n\r\nAutomated tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 98,
        "deletions": 22,
        "changed_files": 3,
        "created_at": "2023-08-06T22:34:37Z",
        "closed_at": "2023-08-07T00:42:08Z",
        "merged_at": "2023-08-07T00:42:08Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nPreviously `bun add pkg` on the following `package.json`:\r\n```json\r\n{\r\n  \"peerDependencies\": {\r\n    \"pkg\": \"^1.2.3\"\r\n  }\r\n}\r\n```\r\nwill result in failure, i.e.:\r\n```json\r\n{\r\n  \"peerDependencies\": {\r\n    \"pkg\": \"\"\r\n  }\r\n}\r\n```\r\nwithout installing `pkg`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-08-06T21:26:19Z",
        "closed_at": "2023-08-09T17:43:04Z",
        "merged_at": "2023-08-09T17:43:04Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\nAdds a CLI flag to print bun version with revision\r\nhttps://github.com/oven-sh/bun/issues/3676\r\n\r\n### How did you verify your code works?\r\n\r\n```\r\nbun-debug --revision\r\n0.7.3_debug (ddf78d8a)\r\n```\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-06T21:08:27Z",
        "closed_at": "2023-08-07T00:43:25Z",
        "merged_at": "2023-08-07T00:43:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\nRunning missing scripts exits with non-0\r\nhttps://github.com/oven-sh/bun/issues/4011\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nAutomated tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 244,
        "deletions": 21,
        "changed_files": 10,
        "created_at": "2023-08-05T07:44:31Z",
        "closed_at": "2023-08-08T03:15:54Z",
        "merged_at": "2023-08-08T03:15:54Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nthis adds support for fetching data urls\r\n```js\r\nconst res = await fetch(\"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D\");\r\nconsole.log(await res.text()); // Hello, World!\r\n```\r\n\r\n### How did you verify your code works?\r\nadded tests for fetching valid and invalid data urls\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 151,
        "deletions": 7,
        "changed_files": 8,
        "created_at": "2023-08-05T05:29:37Z",
        "closed_at": "2023-08-06T13:13:39Z",
        "merged_at": "2023-08-06T13:13:39Z",
        "body": "### What does this PR do?\r\n\r\nCloses #3990\r\n\r\n<img width=\"1255\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/8cc09c15-556a-4b70-9e9d-8b0af55a400b\">\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-08-04T23:20:55Z",
        "closed_at": "2023-08-05T03:41:17Z",
        "merged_at": "2023-08-05T03:41:17Z",
        "body": "### What does this PR do?\r\n\r\nSupport `--dev`/`-D`. Yarn ~and pnpm~ use `--dev` so it is more expected.\r\nSupport dependency flags on `bun install` (long overdue)\r\n\r\nIdeally we'd rework clap to support \"hidden flags\". Currently the helptext looks as below. Separate lines for both `-d, --dev` and `-D, --development` but visually they share a description.\r\n\r\n```txt\r\nbun-debug add -h    \r\n[SYS] read(3, 4096) = 4096 (0.211ms)\r\n[SYS] close(3)\r\n\t-c, --config <STR>?            \tLoad config (bunfig.toml)\r\n\t-y, --yarn                     \tWrite a yarn.lock file (yarn v1)\r\n\t-p, --production               \tDon't install devDependencies\r\n\t    --no-save                  \tDon't save a lockfile\r\n\t    --save                     \tSave to package.json\r\n\t    --dry-run                  \tDon't install anything\r\n\t    --lockfile <PATH>          \tStore & load a lockfile at a specific filepath\r\n\t    --frozen-lockfile          \tDisallow changes to lockfile\r\n\t-f, --force                    \tAlways request the latest versions from the registry & reinstall all dependencies\r\n\t    --cache-dir <PATH>         \tStore & load cached data from a specific directory path\r\n\t    --no-cache                 \tIgnore manifest cache entirely\r\n\t    --silent                   \tDon't log anything\r\n\t    --verbose                  \tExcessively verbose logging\r\n\t    --no-progress              \tDisable the progress bar\r\n\t    --no-summary               \tDon't print a summary\r\n\t    --no-verify                \tSkip verifying integrity of newly downloaded packages\r\n\t    --ignore-scripts           \tSkip lifecycle scripts in the project's package.json (dependency scripts are never run)\r\n\t-g, --global                   \tInstall globally\r\n\t    --cwd <STR>                \tSet a specific cwd\r\n\t    --backend <STR>            \tPlatform-specific optimizations for installing dependencies. Possible values: \"clonefile\" (default), \"hardlink\", \"symlink\", \"copyfile\"\r\n\t    --link-native-bins <STR>...\tLink \"bin\" from a matching platform-specific \"optionalDependencies\" instead. Default: esbuild, turbo\r\n\t    --help                     \tPrint this help menu\r\n\t-d, --dev                      \tAdd dependency to \"devDependencies\"\r\n\t-D, --development              \t\r\n\t    --optional                 \tAdd dependency to \"optionalDependencies\"\r\n\t    --exact                    \tAdd the exact version instead of the ^range\r\n```\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 243,
        "changed_files": 5,
        "created_at": "2023-08-04T22:38:11Z",
        "closed_at": "2023-08-05T11:42:30Z",
        "merged_at": "2023-08-05T11:42:30Z",
        "body": "### What does this PR do?\r\n\r\nThis fully removes the transpiler macro we have for `import { plugin } from 'bun'`. What bun tried to do before is given code that calls plugin:\r\n\r\n```ts\r\nimport { plugin } from \"bun\";\r\nimport mdx from \"@mdx-js/esbuild\";\r\n\r\nplugin(mdx());\r\n\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport Foo from \"./bar.mdx\";\r\nconsole.log(renderToStaticMarkup(<Foo />));\r\n```\r\n\r\nBun used to hoist this call into a new file\r\n\r\n```ts\r\nimport { plugin } from \"bun\";\r\nimport mdx from \"@mdx-js/esbuild\";\r\nplugin(mdx());\r\n```\r\n\r\nAnd execute that as a preload.\r\n\r\nThe hook is broken for any non-trival use cases and is overall very confusing to developers because it's too magical.\r\n\r\nWhat should be done instead is `plugin` should be called in it's own file, and then loaded with `--preload`. So you'd save the second code block above into it's own file like `preload.ts` and then run just your application code like `bun -r ./preload.ts ./index.tsx`, and it works.\r\n\r\nThis pattern gives the developer a better understanding of what is actually going on:\r\n- Preload is loaded\r\n- All imports in preload are evaluated before any code runs\r\n- Plugin is registered\r\n- Main script is loaded\r\n- Those imports are all evaluated before code starts\r\n- (Plugin onLoad/onResolve hits)\r\n- Application code starts\r\n\r\nSo by this logic of `import` statements running before app code, it does mean you can register plugins during app code runtime and use `await import` after calling Bun.plugin, but this pattern we should discourage.\r\n\r\nCloses #3968\r\nCloses #3068\r\nCloses #1441\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nran the automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 135,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-08-04T15:38:53Z",
        "closed_at": "2023-08-06T13:16:54Z",
        "merged_at": "2023-08-06T13:16:54Z",
        "body": "Close: #3981\r\n\r\n### What does this PR do?\r\n\r\n- Implement the `dns.getServers` function\r\n\r\nReference:\r\n\r\n- https://nodejs.org/api/dns.html#dnsgetservers\r\n- https://c-ares.org/ares_get_servers_ports.html\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-04T09:37:11Z",
        "closed_at": "2023-08-04T11:01:11Z",
        "merged_at": "2023-08-04T11:01:11Z",
        "body": "### feat(hot-clear-screen): clear terminal on hot reload\r\n\r\nthis clears the screen on file change when running with the `--hot` flag which is similar to how `--watch` behaves currently.\r\nthis will address #3954.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI tested it locally\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1212,
        "deletions": 62,
        "changed_files": 32,
        "created_at": "2023-08-04T09:20:53Z",
        "closed_at": "2023-08-06T13:30:23Z",
        "merged_at": "2023-08-06T13:30:23Z",
        "body": "### What does this PR do?\r\n\r\nThis is an extremely WIP PR that lets you see what code ran in `bun test`. \r\n\r\nThis adds a new flag `--coverage` to `bun test` which enables JavaScriptCore's `JSC::ControlFlowProfiler` which tracks the positions (byte offsets) of code that was executed and how many times.\r\n\r\nThe hard part here is not the code coverage, but is source-mapping from these byte offsets to line numbers in the input source file. \r\n\r\nI see a couple approaches to solving this:\r\n1) Store byte ranges in sourcemaps, in addition to lines and columns (expensive!)\r\n2) JSC::SourceProviderCache maybe??\r\n\r\n### How did you verify your code works?\r\n\r\nToo manually. We need some integration tests for this.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 187,
        "deletions": 82,
        "changed_files": 5,
        "created_at": "2023-08-04T09:20:13Z",
        "closed_at": "2023-08-04T20:28:43Z",
        "merged_at": "2023-08-04T20:28:43Z",
        "body": "- resolve cwd consistently\r\n- speed up package diff\r\n- update `test/bun.lockb`\r\n\r\nfixes #3685\r\nfixes #3958\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-08-04T08:48:22Z",
        "closed_at": "2023-08-04T23:08:50Z",
        "merged_at": "2023-08-04T23:08:50Z",
        "body": "![image](https://github.com/oven-sh/bun/assets/24465214/a0a4eca6-48d1-41cd-932c-437398b60a52)\r\n\r\nI cant believe tests did not catch this. This is my biggest mistake of the century.\r\n\r\nI wrote a new test for specifically making sure this never happens again.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-08-04T07:34:59Z",
        "closed_at": "2023-08-04T23:08:25Z",
        "merged_at": "2023-08-04T23:08:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nfixes #3947 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-08-04T05:09:42Z",
        "closed_at": "2023-08-05T02:34:10Z",
        "merged_at": "2023-08-05T02:34:10Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nstrings passed as arguments to macros and strings returned from macros are escaped correctly\r\n\r\n### How did you verify your code works?\r\nadded macro tests for escape characters\r\n\r\nfixes #3957 \r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 892,
        "deletions": 274,
        "changed_files": 14,
        "created_at": "2023-08-04T02:09:53Z",
        "closed_at": "2023-08-04T19:56:34Z",
        "merged_at": "2023-08-04T19:56:34Z",
        "body": "### What does this PR do?\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n\r\n- Make `vm`, `diagnostics_channel`, and `worker_threads` discoverable\r\n- Remove `@types/ws`\r\n- Add `declare module 'ws'`\r\n- Fix `bun run test` in `packages/bun-types`\r\n- Add `declare module \"*.toml\"`\r\n\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-08-03T14:47:59Z",
        "closed_at": "2023-08-03T22:40:38Z",
        "merged_at": "2023-08-03T22:40:38Z",
        "body": "Close: #3924\r\n\r\n### What does this PR do?\r\n\r\n- `path.relative(\"/webpack-hot-middleware\", \"/webpack/buildin/module.js\")` should return `../webpack/buildin/module.js`\r\n\r\n### Some explanations.\r\n\r\nAssuming the input is as follows:\r\n\r\n- `input[0]` => `/webpack-hot-middleware`\r\n- `input[1]` => `/webpack/buildin/module.js`\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/928816bef0945e9655c115767c719d6865ff138c/src/resolver/resolve_path.zig#L198-L207\r\n\r\n\r\n\r\nThe longest common substring is `/webpack`, So the index is `8` (point to `-` or `/`).\r\n\r\nBut here \r\n\r\nhttps://github.com/oven-sh/bun/blob/928816bef0945e9655c115767c719d6865ff138c/src/resolver/resolve_path.zig#L297-L303\r\n\r\nwe will get `/webpack/` here, a wrong directory.\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\nI wrote automated tests\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-03T13:28:51Z",
        "closed_at": "2023-08-03T19:34:41Z",
        "merged_at": "2023-08-03T19:34:41Z",
        "body": "Close: #3948\r\n\r\n### What does this PR do?\r\n\r\n- Fix the encoding issue in the return value of `path.extname`.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-08-03T12:06:32Z",
        "closed_at": "2023-08-03T19:35:05Z",
        "merged_at": "2023-08-03T19:35:05Z",
        "body": "### What does this PR do?\r\n\r\nFix the review comment of https://github.com/oven-sh/bun/pull/3916#discussion_r1282502694\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 17,
        "changed_files": 4,
        "created_at": "2023-08-03T12:05:09Z",
        "closed_at": "2023-08-03T19:37:29Z",
        "merged_at": "2023-08-03T19:37:29Z",
        "body": "- handle workspaces under `--production` correctly\r\n- fix `Makefile`\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-08-03T03:16:54Z",
        "closed_at": "2023-08-07T02:04:04Z",
        "merged_at": null,
        "body": "Have not really started it, this is what we need to match:\r\n\r\n```\r\nmodule.require         - is unbound\r\nmodule.require.resolve - does not exist\r\n\r\nrequire                - is bound\r\nrequire.resolve        - exists and is bound\r\n```\r\n\r\nBy bound I mean doing `.call(null, \"...\")` works.\r\n\r\nRight now we have require.resolve set as a prototype on the require, so it needs `require.resolve.bind(require)` to work.\r\n\r\nI only wrote tests so far but maybe we use lazy property stuff to generate a require function's resolve on the fly, or do we just call `.bind` when we generate the transpiled code?",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-03T01:58:57Z",
        "closed_at": "2023-08-04T01:15:56Z",
        "merged_at": "2023-08-04T01:15:56Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1663,
        "deletions": 103,
        "changed_files": 9,
        "created_at": "2023-08-03T00:00:12Z",
        "closed_at": "2023-08-03T01:04:24Z",
        "merged_at": "2023-08-03T01:04:24Z",
        "body": "### What does this PR do?\r\n\r\nThis adds support for the `node:diagnostics_channel` APIs.\r\nhttps://nodejs.org/api/diagnostics_channel.html#diagnostics-channel\r\n\r\nExample:\r\n```js\r\nimport diagnostics_channel from 'node:diagnostics_channel';\r\n\r\n// Get a reusable channel object\r\nconst channel = diagnostics_channel.channel('my-channel');\r\n\r\nfunction onMessage(message, name) {\r\n  // Received data\r\n}\r\n\r\n// Subscribe to the channel\r\ndiagnostics_channel.subscribe('my-channel', onMessage);\r\n\r\n// Check if the channel has an active subscriber\r\nif (channel.hasSubscribers) {\r\n  // Publish data to the channel\r\n  channel.publish({\r\n    some: 'data',\r\n  });\r\n}\r\n\r\n// Unsubscribe from the channel\r\ndiagnostics_channel.unsubscribe('my-channel', onMessage);\r\n```\r\n\r\nCloses #2688\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests (ported from Node's tests)\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 38,
        "changed_files": 3,
        "created_at": "2023-08-02T22:04:10Z",
        "closed_at": "2023-08-02T23:16:22Z",
        "merged_at": "2023-08-02T23:16:22Z",
        "body": "### What does this PR do?\r\n\r\nFixes #3931\r\n\r\n### How did you verify your code works?\r\n\r\ntest",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-08-02T16:14:41Z",
        "closed_at": "2023-08-02T19:58:45Z",
        "merged_at": "2023-08-02T19:58:45Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nRun https://github.com/oven-sh/bun/issues/3862 test on release build with `Bun.gc(true)` before fetching\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\nFix: https://github.com/oven-sh/bun/issues/3862",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-02T12:32:10Z",
        "closed_at": "2023-08-02T19:59:22Z",
        "merged_at": "2023-08-02T19:59:22Z",
        "body": "Typo",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 802,
        "deletions": 80,
        "changed_files": 22,
        "created_at": "2023-08-02T00:40:37Z",
        "closed_at": "2023-08-03T01:12:12Z",
        "merged_at": "2023-08-03T01:12:12Z",
        "body": "### What does this PR do?\r\n\r\nImplement `node:worker_threads` \r\n\r\nFixes #901 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1811,
        "deletions": 57,
        "changed_files": 21,
        "created_at": "2023-08-02T00:21:07Z",
        "closed_at": "2023-08-02T01:40:03Z",
        "merged_at": "2023-08-02T01:40:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis pr adds the `BroadcastChannel` web api. It also adds `ref`, `unref`, and `hasRef` to `MessagePort` and support for error instances in `SerializedScriptValue`.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote tests for broadcast channel used between workers and also ported broadcast channel behavior tests from WebKit.\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 174,
        "deletions": 106,
        "changed_files": 1,
        "created_at": "2023-08-01T16:07:55Z",
        "closed_at": "2023-08-02T20:00:02Z",
        "merged_at": "2023-08-02T20:00:02Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 23,
        "changed_files": 2,
        "created_at": "2023-08-01T15:18:28Z",
        "closed_at": "2023-08-02T02:06:08Z",
        "merged_at": "2023-08-02T02:06:08Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Test Changes\r\n\r\n### How did you verify your code works?\r\n\r\nRunning on CI/CD the tests\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-08-01T14:18:16Z",
        "closed_at": "2023-08-02T02:04:06Z",
        "merged_at": "2023-08-02T02:04:06Z",
        "body": "### What does this PR do?\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\nFix: https://github.com/oven-sh/bun/issues/3911",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 20,
        "changed_files": 3,
        "created_at": "2023-08-01T10:53:11Z",
        "closed_at": "2023-08-03T01:56:47Z",
        "merged_at": null,
        "body": "Close: #3116\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 97,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-08-01T00:38:24Z",
        "closed_at": "2023-08-03T00:51:06Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis pr will ensure the `module` field in `exports` does not resolve before `require`, `import`, or `default` for runtime imports.\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote tests to run the same code bundled and unbundled and compared the output to make sure the correct files were imported.\r\n\r\nfixes #3901 \r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 52,
        "changed_files": 3,
        "created_at": "2023-07-31T15:57:22Z",
        "closed_at": "2023-08-01T02:41:42Z",
        "merged_at": "2023-08-01T02:41:42Z",
        "body": "### What does this PR do?\r\n\r\nAn error will occur when you try to import a built-in module that does not exist\r\nFixes https://github.com/oven-sh/bun/issues/3912\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\nI or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\nI included a test for the new code, or an existing test covers it\r\n\r\n### Zig files changed:\r\n\r\nI or my editor ran `zig fmt` on the changed files\r\nI included a test for the new code, or an existing test covers it\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 27,
        "changed_files": 1,
        "created_at": "2023-07-31T08:51:26Z",
        "closed_at": "2023-08-02T02:12:07Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nJust a quick PR to update Stric ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 256,
        "deletions": 130,
        "changed_files": 16,
        "created_at": "2023-07-31T05:42:53Z",
        "closed_at": "2023-07-31T06:51:44Z",
        "merged_at": "2023-07-31T06:51:44Z",
        "body": "### What does this PR do?\r\n\r\n- Fix a memory leak in response.clone() where the headers were cloned twice and the first clone was never freed\r\n- Make `request.url` and `response.url` faster by avoiding the unnecessary UTF-8 clone\r\n- Atomize/intern response.url, request.url, response.statusText\r\n- Runs WebKit's URL parser on `new Request()`, which is a breaking change that aligns the `Request` constructor with web & other runtimes. It will now throw if the URL is invalid. Previously, it would only throw if the hostname was empty or the url was empty. This also properly normalizes the URL, so that `http://localhost:3000` becomes `http://localhost:3000/`. This makes the Request constructor about 2x slower than before, but it's still multiple times faster than node/deno so it's fine\r\n\r\n\r\n```js\r\n\u276f mem bun --smol request-response-clone.mjs\r\ncpu: Apple M1 Max\r\nruntime: bun 0.7.2 (arm64-darwin)\r\n\r\nbenchmark time (avg) (min \u2026 max) p75 p99 p995\r\n-------------------------------------------------------- -----------------------------\r\nreq.clone().url 77.3 ns/iter (40.35 ns \u2026 222.64 ns) 91.53 ns 128.11 ns 172.78 ns\r\nresp.clone().url 162.43 ns/iter (116 ns \u2026 337.77 ns) 177.4 ns 232.38 ns 262.65 ns\r\n\r\nPeak memory usage: 60 MB\r\n\r\n\u276f mem bun-0.7.1 --smol request-response-clone.mjs\r\ncpu: Apple M1 Max\r\nruntime: bun 0.7.1 (arm64-darwin)\r\n\r\nbenchmark time (avg) (min \u2026 max) p75 p99 p995\r\n-------------------------------------------------------- -----------------------------\r\nreq.clone().url 115.85 ns/iter (80.35 ns \u2026 247.39 ns) 128.19 ns 181.93 ns 207.23 ns\r\nresp.clone().url 252.32 ns/iter (202.6 ns \u2026 351.07 ns) 266.56 ns 325.88 ns 334.73 ns\r\n\r\nPeak memory usage: 1179 MB\r\n\r\n\u276f mem node request-response-clone.mjs\r\ncpu: Apple M1 Max\r\nruntime: node v20.4.0 (arm64-darwin)\r\n\r\nbenchmark             time (avg)             (min \u2026 max)       p75       p99      p995\r\n-------------------------------------------------------- -----------------------------\r\nreq.clone().url    45.52 \u00b5s/iter     (8.96 \u00b5s \u2026 1.86 ms)  62.67 \u00b5s  82.83 \u00b5s  85.04 \u00b5s\r\nresp.clone().url    70.3 \u00b5s/iter    (47.63 \u00b5s \u2026 4.21 ms)  61.83 \u00b5s 152.29 \u00b5s 233.25 \u00b5s\r\n(node:70671) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 11 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n\r\nPeak memory usage: 485 MB\r\n```\r\n\r\nProbably will help with #3065 \r\n\r\n### How did you verify your code works?\r\n\r\n\r\nExisting tests, but I also added a couple",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 23116,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-07-30T22:09:44Z",
        "closed_at": "2023-08-03T01:58:33Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nFix https://github.com/oven-sh/bun/issues/3896\r\nadd log [exports](https://github.com/sirenkovladd/bun/blob/08904eeeb84ca7ac0944b7e1f243bc99bf85a070/test/exports/bun-exports.bun-v0.7.2.json)\r\n\r\nFirst, I tried adding `constants_string` in [module_loader.zig](src/bun.js/module_loader.zig) for `node:wasi` as in `node:fs/promises`, but that added the `constants` to the export in `wasi`\r\n\r\nIn my opinion, it would be better to just import `constant` from `fs`\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n### Documentation or TypeScript types\r\n~Code changes~\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n~I ran `make js` and committed the transpiled changes~\r\nI or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\nI included a test for the new code, or an existing test covers it (test exports)\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-30T19:06:03Z",
        "closed_at": "2023-07-31T00:53:22Z",
        "merged_at": "2023-07-31T00:53:22Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nFix Uint8Array to a ReadableStream code snippet language highlighting\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 130,
        "deletions": 45,
        "changed_files": 2,
        "created_at": "2023-07-30T16:39:27Z",
        "closed_at": "2023-08-18T10:25:00Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nThis implements the new fs.readdir option recursive, which recursively walks over a directory (added in node.js since v20.1.0: https://nodejs.org/api/fs.html#fsreaddirpath-options-callback)\r\n\r\n### How did you verify your code works?\r\n\r\nRun it on my local hardware (ext4), i'll comment my attempts to run it in vm's and on different hardware in the discussion.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\nThanks to @InKryption for helping me\r\nCloses #3871",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 164,
        "changed_files": 8,
        "created_at": "2023-07-30T13:52:00Z",
        "closed_at": "2023-07-30T14:54:17Z",
        "merged_at": "2023-07-30T14:54:17Z",
        "body": "### What does this PR do?\r\n\r\nFor a folder structure like so:\r\n\r\n- \ud83d\udcc1 / \ud83d\udcc4 index.ts\r\n- \ud83d\udcc1 / \ud83d\udcc4 index.js\r\n\r\nRunning `bun .` will run `index.ts`. \r\n\r\nIf no `index.ts`, `index.js` will be chosen instead (this uses the default module resolution algorithm)\r\n\r\nIf there is a package.json with a `\"main\"` field that points to a different file:\r\n\r\n- \ud83d\udcc1 / \ud83d\udcc4 package.json\r\n- \ud83d\udcc1 / \ud83d\udcc4 index.js\r\n- \ud83d\udcc1 / \ud83d\udcc4 my-custom-main.js\r\n\r\n```json\r\n{\r\n  \"main\": \"my-custom-main.js\"\r\n}\r\n```\r\n\r\nInstead of executing `index.js`, `my-custom-main.js` will be run instead.\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 191,
        "deletions": 87,
        "changed_files": 10,
        "created_at": "2023-07-30T07:37:33Z",
        "closed_at": "2023-07-30T09:03:32Z",
        "merged_at": "2023-07-30T09:03:32Z",
        "body": "### What does this PR do?\r\n\r\nWe weren't freeing strong references. Everything using `JSC.Strong` leaked memory.  The code using `.protect()` or `.unprotect()` is unaffected.\r\n\r\nFixes #3065 \r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 37,
        "changed_files": 3,
        "created_at": "2023-07-29T22:49:26Z",
        "closed_at": "2023-07-30T08:17:03Z",
        "merged_at": "2023-07-30T08:17:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n(Reopened: <https://github.com/oven-sh/bun/pull/3366>)\r\n\r\nImplements optimizations for the toBeTypeOf() matcher in jest(-extended),\r\nAlso I moved some tests to their desired location.\r\n\r\n### How did you verify your code works?\r\n\r\nRun it on my local hardware.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-29T15:09:28Z",
        "closed_at": "2023-07-30T08:18:14Z",
        "merged_at": "2023-07-30T08:18:14Z",
        "body": "Close: #3607\r\n\r\n### What does this PR do?\r\n\r\nFix coredump when reading an empty file.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### Something helpful\r\n\r\nPlease check the call stack information for the coredump in the issue #3607 .\r\n\r\n\r\nWhen reading a empty file by `readStream`:\r\n\r\nhttps://github.com/oven-sh/bun/blob/681be10294c19b8ce402ec44df5cd6554e2c86c0/src/bun.js/webcore/streams.zig#L4435-L4438\r\n\r\n`readable_file.start(&blob.data.file);` will call\r\n\r\nhttps://github.com/oven-sh/bun/blob/681be10294c19b8ce402ec44df5cd6554e2c86c0/src/bun.js/webcore/streams.zig#L4026-L4036\r\n\r\nAnd the result could be `.empty` (`stat.size` will be 0 when file is empty).\r\n\r\n```zig\r\n if (result != .ready) { \r\n     return result; \r\n } \r\n```\r\n\r\nThis would cause an early return, preventing `this.lazy_readable` from transitioning from `.bloc` to `.readable`.\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 68,
        "changed_files": 6,
        "created_at": "2023-07-29T08:23:43Z",
        "closed_at": "2023-07-29T13:18:52Z",
        "merged_at": "2023-07-29T13:18:52Z",
        "body": "### What does this PR do?\r\n\r\n`bun:jsc` is using a less accurate API on Linux for getting the resident set size. Now it uses the same code as `process.memoryUsage()`. \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nexisting tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-29T00:45:45Z",
        "closed_at": "2023-07-29T01:53:45Z",
        "merged_at": "2023-07-29T01:53:45Z",
        "body": "### What does this PR do?\r\n\r\n`bun foo.js | head` panics because `head` closes stdout causing printing to stdout to fail. The correct behavior here is a little ambiguous, but we can be sure that panicking is unhelpful. Node dumps an error to stderr. In this case, we change it to simply ignore errors. That can cause bugs if stdout is closed and a new file descriptor is assigned, but I don't think that happens because our many calls to close() explicitly ignore closing stdout\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nlets see what tests do\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 126,
        "deletions": 30,
        "changed_files": 7,
        "created_at": "2023-07-28T17:06:31Z",
        "closed_at": "2023-07-28T22:43:15Z",
        "merged_at": "2023-07-28T22:43:15Z",
        "body": "Depends on https://github.com/Jarred-Sumner/uSockets/pull/10 and https://github.com/Jarred-Sumner/uWebSockets/pull/20",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 3752,
        "deletions": 247,
        "changed_files": 57,
        "created_at": "2023-07-28T08:54:17Z",
        "closed_at": "2023-07-28T23:44:29Z",
        "merged_at": "2023-07-28T23:44:29Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nthis pr implements `MessageChannel` and `MessagePort`\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\nI wrote some tests for transferring message ports between message channels and across threads with `Worker`.\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 281,
        "deletions": 183,
        "changed_files": 6,
        "created_at": "2023-07-28T08:34:06Z",
        "closed_at": "2023-07-28T22:44:06Z",
        "merged_at": "2023-07-28T22:44:06Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis adds support for `fetch` to load `file:` URLs.\r\n\r\n\r\n```js\r\nconst res = await fetch(new URL(\"hello!.jpg\", import.meta.url));\r\nconst arrayBuffer = await res.arrayBuffer();\r\nconsole.log(arrayBuffer.byteLength);\r\n```\r\n\r\nInternally, this is roughly equivalent to:\r\n\r\n```js\r\nimport { join } from \"path\";\r\nconst arrayBuffer = await Bun.file(\r\n  join(import.meta.dir, \"hello!.jpg\"),\r\n).arrayBuffer();\r\n```\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 6,
        "changed_files": 11,
        "created_at": "2023-07-28T07:13:40Z",
        "closed_at": "2023-07-28T08:33:01Z",
        "merged_at": "2023-07-28T08:33:01Z",
        "body": "## What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nFixes #3795\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-07-28T04:02:04Z",
        "closed_at": "2023-07-28T22:44:33Z",
        "merged_at": "2023-07-28T22:44:33Z",
        "body": "Close: #3668\r\n\r\n## What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nTest Code:\r\n\r\n```JavaScript\r\n\r\nconst fs = require(\"node:fs\");\r\nconst s = require(\"node:stream\");\r\n\r\nconst path = \"./test.txt\";\r\nfs.writeFileSync(path, \"12345\");\r\n\r\nconst stream = fs.createReadStream(path, { start: 0, end: 4 });\r\n\r\nconst writable = new s.Writable({\r\n  write(chunk, encoding, callback) {\r\n    console.log(chunk);\r\n  },\r\n});\r\n\r\nstream.pipe(writable);\r\n\r\n```\r\n\r\n![2023-07-28_13-03](https://github.com/oven-sh/bun/assets/9482395/beac1f3c-c3c2-4419-b9a3-60e9c5872e1e)\r\n\r\n\r\n\r\n### Checklist\r\n\r\n<!-- **Please delete the sections which are not relevant. If there were no code changes, feel free to delete or ignore this section entirely** -->\r\n\r\nIf JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\nIf Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\nIf new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n\r\nIf dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n\r\nIf functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\nIf \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\nIf a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 446,
        "deletions": 19,
        "changed_files": 7,
        "created_at": "2023-07-28T00:09:55Z",
        "closed_at": "2023-07-28T23:00:43Z",
        "merged_at": "2023-07-28T23:00:43Z",
        "body": "Copy from https://github.com/nodejs/node/blob/v20.5.0/lib/child_process.js#L101-L173\r\nand corrected for `bun`",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 899,
        "deletions": 47,
        "changed_files": 34,
        "created_at": "2023-07-27T21:58:41Z",
        "closed_at": "2023-07-31T19:20:23Z",
        "merged_at": "2023-07-31T19:20:23Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 523,
        "deletions": 197,
        "changed_files": 8,
        "created_at": "2023-07-27T20:37:53Z",
        "closed_at": "2023-07-28T02:23:55Z",
        "merged_at": "2023-07-28T02:23:55Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 212,
        "deletions": 5,
        "changed_files": 6,
        "created_at": "2023-07-27T16:15:41Z",
        "closed_at": "2023-07-28T22:46:44Z",
        "merged_at": "2023-07-28T22:46:44Z",
        "body": "expect().pass(), passing assertion: <https://jest-extended.jestcommunity.dev/docs/matchers/pass>\r\nexpect().fail(), failing assertion: <https://jest-extended.jestcommunity.dev/docs/matchers/fail>",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-07-27T12:02:14Z",
        "closed_at": "2023-07-27T21:45:32Z",
        "merged_at": "2023-07-27T21:45:32Z",
        "body": "initializeIndex is for uninitialized arrays and this array is initialized",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-07-27T06:55:49Z",
        "closed_at": "2023-07-27T10:34:18Z",
        "merged_at": "2023-07-27T10:34:18Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 141,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-26T14:18:40Z",
        "closed_at": "2023-07-26T22:35:47Z",
        "merged_at": "2023-07-26T22:35:47Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 569,
        "deletions": 24,
        "changed_files": 8,
        "created_at": "2023-07-26T08:02:06Z",
        "closed_at": "2023-07-26T22:36:05Z",
        "merged_at": "2023-07-26T22:36:05Z",
        "body": "This improves Bun's start up time by making the transpiler run conurrently at runtime.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 479,
        "deletions": 14,
        "changed_files": 6,
        "created_at": "2023-07-26T06:56:34Z",
        "closed_at": "2023-07-30T08:14:48Z",
        "merged_at": null,
        "body": "Adds support for `fs.watchFile()`, will add tests.\r\n\r\nCloses #3812",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 17349,
        "deletions": 37592,
        "changed_files": 199,
        "created_at": "2023-07-26T06:53:44Z",
        "closed_at": "2023-08-02T23:27:36Z",
        "merged_at": "2023-08-02T23:27:36Z",
        "body": "Closes #3773\r\nCloses #3863 \r\nCloses\r\nFixes immediate segfault of #3746 but astro isnt working fully yet\r\n\r\n- This changes all `node:*` and `bun:*` modules to use CommonJS modules. Since the bundler does not emit CommonJS code, this is done with a custom pre/postprocessor step.\r\n  - `require` is intercepted at build time and inlined to `$requireId(...)` where a static number is inlined.\r\n  - Introduce `InternalModuleRegistry` in C++. This is an internal fields object of about 50.\r\n- All builtin modules now actually use builtins syntax. Meaning we can access private globals like `$isArray` and so on.\r\n- `make builtins` & `make esm` are now one build process: `make js`. It is also faster.\r\n- Removes some hacks we had\r\n  - `Symbol.for(\"CommonJS\")`\r\n  - `$lazy(\"primordials\")`\r\n  - in the future we can remove `globalThis[Symbol.for(\"Bun.lazy\")]` and make `$lazy` real, or take a diff approach to this.\r\n- Changes how native c++ modules are formatted to be a bit easier for us to add more if we want.\r\n- Removes `bun:events_native`. it is now `$lazy('events')`, we should fully remove this later.\r\n- Moves bun:jsc into a native module\r\n- process.binding('constants') into native code, add `ProcessBindingConstants` and `$processBindingConstants`\r\n- a few specific strings to process.binding() will throw issues with github issue links.\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 44,
        "changed_files": 2,
        "created_at": "2023-07-25T15:07:05Z",
        "closed_at": "2023-07-26T17:48:23Z",
        "merged_at": null,
        "body": "* Fixed typos from Readme\r\n* Removed old commented code from docker file",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-25T09:46:49Z",
        "closed_at": "2023-07-25T12:49:49Z",
        "merged_at": "2023-07-25T12:49:49Z",
        "body": "- Fix the encoding of `dirname`'s return value.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 862,
        "deletions": 357,
        "changed_files": 13,
        "created_at": "2023-07-25T05:12:54Z",
        "closed_at": "2023-07-27T04:35:50Z",
        "merged_at": "2023-07-27T04:35:50Z",
        "body": "- Buffer the file instead of calling read() one byte at a time...\r\n- Use faster method for equality checks\r\n- Cache the result since your CPUs will not change without restarting your computer",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-25T00:38:08Z",
        "closed_at": "2023-07-25T02:08:57Z",
        "merged_at": "2023-07-25T02:08:56Z",
        "body": "fixes #3751 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 169,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-07-24T12:57:49Z",
        "closed_at": "2023-07-25T07:41:22Z",
        "merged_at": "2023-07-25T07:41:22Z",
        "body": "Close: #3782",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-07-24T12:37:35Z",
        "closed_at": "2023-07-25T00:01:44Z",
        "merged_at": "2023-07-25T00:01:44Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 126,
        "deletions": 73,
        "changed_files": 1,
        "created_at": "2023-07-24T09:58:41Z",
        "closed_at": "2023-07-25T00:01:22Z",
        "merged_at": "2023-07-25T00:01:22Z",
        "body": "By being a little smarter about how JSC APIs are used, bun:sqlite gets 10% faster at returning results from sqlite\r\n\r\n<img width=\"682\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/f3143807-10bd-48a5-b4fb-d65111268aa9\">\r\n\r\n\r\ncc @AlexBlokh ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 517,
        "deletions": 634,
        "changed_files": 39,
        "created_at": "2023-07-24T04:07:07Z",
        "closed_at": "2023-07-24T05:37:49Z",
        "merged_at": "2023-07-24T05:37:48Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-23T23:32:10Z",
        "closed_at": "2023-07-24T04:19:11Z",
        "merged_at": "2023-07-24T04:19:11Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-23T18:03:02Z",
        "closed_at": "2023-09-09T20:56:16Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-23T09:14:26Z",
        "closed_at": "2023-08-22T01:09:09Z",
        "merged_at": null,
        "body": "I've firstly checked the comment left by Jarred in the issue, but seems like `inherits` is never truthy (I was using `@resvg/resvg-js`). I was only able to get a valid pointer to `NapiClass` going through the prototype chain. I don't know if the code in this PR is valid, but I was able to make `@resvg/resvg-js` functioning.\r\n\r\nP.S. where should be tests located in?\r\n\r\nIssue: #172 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 39,
        "changed_files": 7,
        "created_at": "2023-07-23T06:57:00Z",
        "closed_at": "2023-07-23T12:13:48Z",
        "merged_at": "2023-07-23T12:13:48Z",
        "body": "We were missing a flag to getaddrinfo that caused it to return addresses which cannot be routed to. This should make fetch() faster and more reliable in Bun.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-23T04:05:19Z",
        "closed_at": "2023-07-23T05:20:10Z",
        "merged_at": "2023-07-23T05:20:10Z",
        "body": "This makes the lifetime of the blob store more clear\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 415,
        "deletions": 93,
        "changed_files": 5,
        "created_at": "2023-07-23T00:11:38Z",
        "closed_at": "2023-07-23T03:05:24Z",
        "merged_at": "2023-07-23T03:05:24Z",
        "body": "- respect semver ranges\r\n- allow double definition of package within `workspaces` & `dependencies` as long as versioning is compatible",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 531,
        "deletions": 72,
        "changed_files": 36,
        "created_at": "2023-07-22T07:28:42Z",
        "closed_at": "2023-07-22T11:31:59Z",
        "merged_at": "2023-07-22T11:31:59Z",
        "body": "This makes it so JavaScriptCore schedules tasks to Bun's event loop, instead of Bun's event loop periodically checking if JavaScriptCore's event loop has any work to do. \r\n\r\nThis properly fixes https://github.com/oven-sh/bun/issues/3524\r\n\r\nFixes https://github.com/oven-sh/bun/issues/2353\r\nFixes https://github.com/oven-sh/bun/issues/1189\r\n\r\nA better fix for https://github.com/oven-sh/bun/issues/127\r\n\r\nSurprisingly, does not fix https://github.com/oven-sh/bun/issues/2732 but I suspect the reproduction's WASM file is invalid\r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 166,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-07-22T01:13:58Z",
        "closed_at": "2023-07-22T23:45:45Z",
        "merged_at": "2023-07-22T23:45:45Z",
        "body": "fixes `vite build`",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-07-22T01:13:46Z",
        "closed_at": "2023-07-22T03:33:15Z",
        "merged_at": "2023-07-22T03:33:15Z",
        "body": "fixes #3716 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 233,
        "deletions": 289,
        "changed_files": 17,
        "created_at": "2023-07-21T23:44:42Z",
        "closed_at": "2023-07-25T02:32:05Z",
        "merged_at": "2023-07-25T02:32:05Z",
        "body": "We used to implement `require` twice. once for `import.meta.require` and then once in the actual `require` implementation. This is just old code from before the CJS rewrite.\r\n\r\n`import.meta.require` and `createRequire` now create an empty `JSCommonJSModule` and return it's `require` function.\r\n\r\nFixes #3724, because the old require implementation would not append `__esModule` to certain case.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 321,
        "deletions": 63,
        "changed_files": 8,
        "created_at": "2023-07-21T22:58:05Z",
        "closed_at": "2023-07-22T06:27:29Z",
        "merged_at": "2023-07-22T06:27:29Z",
        "body": "This makes `fetch()` and `bun install` use WebKit's URL parser which has far better test coverage than ours. \r\n\r\nFixes #3725\r\n\r\nIt probably also fixes other issues.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-21T15:02:45Z",
        "closed_at": "2023-07-21T23:13:05Z",
        "merged_at": "2023-07-21T23:13:05Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-21T12:58:16Z",
        "closed_at": "2023-07-23T05:25:00Z",
        "merged_at": "2023-07-23T05:25:00Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-07-21T07:07:24Z",
        "closed_at": "2023-07-21T08:35:07Z",
        "merged_at": "2023-07-21T08:35:07Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-07-21T04:11:40Z",
        "closed_at": "2023-07-21T07:18:15Z",
        "merged_at": "2023-07-21T07:18:15Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-20T22:23:11Z",
        "closed_at": "2023-07-20T23:44:44Z",
        "merged_at": "2023-07-20T23:44:44Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-07-19T23:56:58Z",
        "closed_at": "2023-07-20T21:50:55Z",
        "merged_at": "2023-07-20T21:50:55Z",
        "body": "The constructor now actually sets TextDecoder properties using the options parameter. This lets users enable the `fatal` parameter, closing #3572.\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 6,
        "changed_files": 6,
        "created_at": "2023-07-19T21:46:45Z",
        "closed_at": "2023-07-19T23:02:29Z",
        "merged_at": "2023-07-19T23:02:29Z",
        "body": "depends on https://github.com/Jarred-Sumner/uSockets/pull/9 and https://github.com/Jarred-Sumner/uWebSockets/pull/19",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 273,
        "deletions": 480,
        "changed_files": 8,
        "created_at": "2023-07-19T19:51:47Z",
        "closed_at": "2023-07-19T22:39:02Z",
        "merged_at": "2023-07-19T22:39:02Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-07-19T18:14:01Z",
        "closed_at": "2023-07-19T23:01:37Z",
        "merged_at": "2023-07-19T23:01:37Z",
        "body": "Fix: https://github.com/oven-sh/bun/issues/3529\r\n\r\nFor compatibility in this case Bun will throw a similar error when key is invalid and iv null in ECB mode\r\n\r\n```js\r\nconst decipher = createDecipheriv('aes-128-ecb', key, null).setAutoPadding(false)\r\n```\r\n```bash\r\nnode:internal/crypto/cipher:122\r\n    this[kHandle].initiv(cipher, credential, iv, authTagLength);\r\n                  ^\r\n\r\nRangeError: Invalid key length\r\n    at Decipheriv.createCipherBase (node:internal/crypto/cipher:122:19)\r\n    at Decipheriv.createCipherWithIV (node:internal/crypto/cipher:141:3)\r\n    at new Decipheriv (node:internal/crypto/cipher:295:3)\r\n    at createDecipheriv (node:crypto:154:10)\r\n    at file:///home/cirospaciari/Repos/bun/test.mjs:343:18\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25) {\r\n  code: 'ERR_CRYPTO_INVALID_KEYLEN'\r\n}\r\n\r\nNode.js v20.1.0\r\n```\r\nAnd without the iv arg will throw also similar to node.js\r\n```js\r\nconst decipher = createDecipheriv('aes-128-ecb', key).setAutoPadding(false)\r\n```\r\n```bash\r\nnode:internal/errors:490\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"iv\" argument must be of type string or an instance of ArrayBuffer, Buffer, TypedArray, or DataView. Received undefined\r\n    at Decipheriv.createCipherWithIV (node:internal/crypto/cipher:140:29)\r\n    at new Decipheriv (node:internal/crypto/cipher:295:3)\r\n    at createDecipheriv (node:crypto:154:10)\r\n    at file:///home/cirospaciari/Repos/bun/test.mjs:356:18\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25) {\r\n  code: 'ERR_INVALID_ARG_TYPE'\r\n}\r\n\r\nNode.js v20.1.0\r\n```\r\n\r\nfor ECB mode `null` and `Buffer.alloc(0)` should be accepted\r\n```js\r\nconst decipher = createDecipheriv('aes-128-ecb', Buffer.alloc(16), null)\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-07-19T09:56:11Z",
        "closed_at": "2023-07-19T21:08:53Z",
        "merged_at": "2023-07-19T21:08:53Z",
        "body": "This might make sense to not merge after @alexlamsl's changes but we shall see",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 529,
        "deletions": 20,
        "changed_files": 16,
        "created_at": "2023-07-18T17:25:23Z",
        "closed_at": "2023-07-18T23:09:19Z",
        "merged_at": "2023-07-18T23:09:19Z",
        "body": "This also adds a step to improve compatibility with `tedious` `mssql` driver.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-18T16:49:29Z",
        "closed_at": "2023-07-18T23:03:06Z",
        "merged_at": "2023-07-18T23:03:06Z",
        "body": "This function was not properly exposed.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4869,
        "deletions": 4906,
        "changed_files": 154,
        "created_at": "2023-07-18T04:05:31Z",
        "closed_at": "2023-07-18T08:20:21Z",
        "merged_at": "2023-07-18T08:20:21Z",
        "body": "`0.11.0-dev.4004+a57608217`",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 71,
        "deletions": 26,
        "changed_files": 8,
        "created_at": "2023-07-18T01:07:58Z",
        "closed_at": "2023-07-20T06:59:15Z",
        "merged_at": "2023-07-20T06:59:15Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-18T00:57:59Z",
        "closed_at": "2023-07-18T02:26:34Z",
        "merged_at": "2023-07-18T02:26:34Z",
        "body": "fixes #3659 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-07-18T00:10:35Z",
        "closed_at": "2023-07-18T11:54:24Z",
        "merged_at": "2023-07-18T11:54:24Z",
        "body": "fixes #3494",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 197,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-07-17T21:48:56Z",
        "closed_at": "2023-07-17T23:06:32Z",
        "merged_at": "2023-07-17T23:06:32Z",
        "body": "fixes #3644",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 40007,
        "deletions": 38920,
        "changed_files": 650,
        "created_at": "2023-07-17T18:19:29Z",
        "closed_at": "2023-08-09T07:11:51Z",
        "merged_at": null,
        "body": "Closes #73\r\n\r\n<sub>Thanks to @InKryption for helping me <3</sub>",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 188,
        "deletions": 28,
        "changed_files": 3,
        "created_at": "2023-07-17T10:40:14Z",
        "closed_at": "2023-09-12T12:23:40Z",
        "merged_at": null,
        "body": "Close #3657.\r\n\r\n- Add newly created files in the directory to the watch list.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-07-17T04:19:51Z",
        "closed_at": "2023-07-17T05:42:20Z",
        "merged_at": "2023-07-17T05:42:20Z",
        "body": "This is technically a breaking change, but it aligns closer to Node.js\r\n\r\nWe were sticking a `data:base64,` whenever encoding `base64url` contents from crypto hashing",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 367,
        "deletions": 2,
        "changed_files": 6,
        "created_at": "2023-07-16T21:58:48Z",
        "closed_at": "2023-08-09T05:14:31Z",
        "merged_at": "2023-08-09T05:14:30Z",
        "body": "(fwup) stands for follow up, because I couldn't fix merge conflicts on my [first PR](https://github.com/oven-sh/bun/pull/3268/)\r\n\r\n----\n\n_toSatisfy:_\r\n\r\n`expect(value).toSatisfy(function)`, the function passed to \"toSatisfy\" function is called with the value in expect, so it's almost the same as calling:\r\n\r\n`expect(function(value)).toBeTrue();`\r\nMore about it: https://vitest.dev/api/expect.html#tosatisfy\r\n\r\nWhat I already have done for toSatisfy:\r\n\r\n- [x] Types\r\n- [x] Testing\r\n- [x] Implement toSatisfy itself\r\n\r\n---\r\n\r\n_toIncludeRepeated:_\r\n\r\nMore about it: https://jest-extended.jestcommunity.dev/docs/matchers/string/#toincluderepeatedsubstring-times\r\n\r\nWhat I already have done for toIncludeRepeated:\r\n\r\n- [x] Types\r\n- [x] Testing\r\n- [x] Implement toIncludeRepeated itself\r\n\r\n<sub>_Huge thanks to @inKryption for helping me with toIncludeRepeated() <3_</sub> ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-16T21:37:00Z",
        "closed_at": "2023-07-17T03:31:54Z",
        "merged_at": "2023-07-17T03:31:54Z",
        "body": "When the line is missing:\r\n![image](https://github.com/oven-sh/bun/assets/1305378/aee63027-2ecc-414b-a955-82e052c9a393)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2796,
        "deletions": 75,
        "changed_files": 46,
        "created_at": "2023-07-16T09:41:29Z",
        "closed_at": "2023-07-17T04:15:25Z",
        "merged_at": "2023-07-17T04:15:24Z",
        "body": "This adds `Worker` support to Bun.\r\n\r\n```js\r\nimport { expect, test } from \"bun:test\";\r\n\r\ntest(\"worker\", done => {\r\n  const worker = new Worker(new URL(\"worker-fixture.js\", import.meta.url).href, {\r\n    bun: {\r\n//      smol: true,\r\n    },\r\n  });\r\n  worker.postMessage(\"hello\");\r\n  worker.onerror = e => {\r\n    console.log(e);\r\n    worker.terminate();\r\n  };\r\n  worker.ref();\r\n  worker.onmessage = e => {\r\n    console.log(e.data);\r\n    worker.unref();\r\n    done();\r\n  };\r\n});\r\n\r\n```\r\n\r\nIt's currently something in-between the web API and Node.js `worker_threads`. \r\n\r\nLike Node.js:\r\n- `Worker` has a `ref` and `unref` function\r\n- By default, workers will terminate when they finish executing code. To keep a worker alive indefinitely, .ref() must be called.\r\n- `process.exit()` inside a Worker terminates the worker instead of the process\r\n\r\nLike the web:\r\n- `Worker` is a global that inherits from `EventTarget`\r\n- `Worker` accepts a `name`. This becomes the posix thread name.\r\n- `worker.postMessage` works and `self.onmessage`, `self.postMessage`, `self.addEventListener(\"message\", cb)`, etc works\r\n\r\nTechnically neither, but sort of like the web:\r\n- `Worker` emits a `close` event on exit\r\n- `Worker` emits an `open` event after the initial code has been evaluated\r\n\r\n`Worker` also supports a `bun: { smol: true}` flag which reduces memory usage at the cost of running garbage collection more often.\r\n\r\nWhat's missing:\r\n- [ ] We do not yet handle lifetimes for async data correctly yet (e.g. `fetch` response that shows up later for a terminated worker will currently not be freed). We will need to do something about task cancellation. \r\n- [ ] Need to write tests.\r\n- [ ] `BroadcastChannel`, `MessagePort` and friends\r\n- [x] console.log needs a mutex. Outside of debug builds, interleaved output is extremely possible\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-16T02:20:45Z",
        "closed_at": "2023-07-17T03:32:18Z",
        "merged_at": "2023-07-17T03:32:18Z",
        "body": "Fixes #3641 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6671,
        "deletions": 20,
        "changed_files": 23,
        "created_at": "2023-07-15T00:45:25Z",
        "closed_at": "2023-07-15T02:37:23Z",
        "merged_at": "2023-07-15T02:37:23Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-13T20:28:56Z",
        "closed_at": "2023-07-13T21:29:25Z",
        "merged_at": "2023-07-13T21:29:25Z",
        "body": "Fixes #3589\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-13T00:04:15Z",
        "closed_at": "2023-07-17T17:05:01Z",
        "merged_at": "2023-07-17T17:05:01Z",
        "body": "- update `bun link` tests\r\n- update `tests/bun.lockb`\r\n- drop unused import in test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-07-12T08:31:33Z",
        "closed_at": "2023-07-17T03:32:34Z",
        "merged_at": "2023-07-17T03:32:34Z",
        "body": "Repro:\r\n```c++\r\n#include <node_api.h>\r\n#include <stdio.h>\r\n\r\nnapi_value MyClassConstructor(napi_env env, napi_callback_info info) {\r\n  napi_value this_arg;\r\n  napi_get_cb_info(env, info, NULL, NULL, &this_arg, NULL);\r\n  return this_arg;\r\n}\r\n\r\nnapi_value Init(napi_env env, napi_value exports) {\r\n  napi_value cls;\r\n  napi_define_class(env, \"MyClass\", NAPI_AUTO_LENGTH, MyClassConstructor, NULL,\r\n                    0, NULL, &cls);\r\n\r\n  napi_status status = napi_wrap(env, cls, (void *)env, NULL, NULL, NULL);\r\n  if (status != napi_ok) {\r\n    printf(\"napi_wrap failed: %d\\n\", status);\r\n    return NULL;\r\n  }\r\n\r\n  return exports;\r\n}\r\n\r\n\r\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\r\n```\r\n\r\n```js\r\nrequire(\"./addon.node\")\r\n```\r\n\r\nThis needs a test\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-12T00:12:26Z",
        "closed_at": "2023-07-12T01:49:35Z",
        "merged_at": "2023-07-12T01:49:35Z",
        "body": "fixes #3597 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 180,
        "deletions": 131,
        "changed_files": 33,
        "created_at": "2023-07-11T23:29:17Z",
        "closed_at": "2023-07-12T22:21:56Z",
        "merged_at": "2023-07-12T22:21:56Z",
        "body": "- Add `$putInternalField` and `$getInternalField` (this is upcoming in my PR to our webkit fork)\r\n- `Bun.lazy` is a build-time define that converts to the symbol. This allows us to typedef it.\r\n- typo: remove unused code related to `Bun.lazy(\"vm\")`\r\n- make init-submodules -> make submodule. and this no longer clones webkit which was a mistake of mine\r\n\r\nI also commented how that lazy stuff works",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 42,
        "changed_files": 5,
        "created_at": "2023-07-11T00:57:18Z",
        "closed_at": "2023-07-11T19:48:19Z",
        "merged_at": "2023-07-11T19:48:19Z",
        "body": "`console.log(class X{})` -> `[class x]`\r\n\r\nFixes #3570",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-10T23:45:38Z",
        "closed_at": "2023-07-11T19:48:33Z",
        "merged_at": "2023-07-11T19:48:33Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-10T21:31:05Z",
        "closed_at": "2023-07-11T16:09:07Z",
        "merged_at": "2023-07-11T16:09:07Z",
        "body": "This should fix #3080. \r\nIn the database prepare function I added optional param types.\r\nFeel free to correct if you feel like there are better types to reflect the current runtime behavior. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 70,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-07-10T21:19:43Z",
        "closed_at": "2023-07-11T00:14:37Z",
        "merged_at": "2023-07-11T00:14:37Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/3584",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3204,
        "deletions": 595,
        "changed_files": 23,
        "created_at": "2023-07-10T20:09:42Z",
        "closed_at": "2023-07-18T02:39:10Z",
        "merged_at": "2023-07-18T02:39:10Z",
        "body": "- [x] _start() added (calls .connect, not documented but is a hack way to start socket after upgrading it) \r\n- [x] event `secure` (not documented but used for some frameworks)\r\n- [x] tls.checkServerIdentity and new TLSocket({ checkServerIdentity })\r\n- [x] TLSSocket.getPeerFinished (BoringSSL does not support this for TLSv1.3+)\r\n- [x] TLSSocket.getFinished (BoringSSL does not support this for TLSv1.3+)\r\n- [x] TLSSocket.getProtocol\r\n- [x] TLSSocket.getSharedSigalgs\r\n- [x] TLSSocket.isSessionReused\r\n- [x] TLSSocket.exportKeyingMaterial\r\n- [x] TLSSocket.setMaxSendFragment\r\n- [x] TLSSocket.getPeerCertificate() / TLSSocket.getPeerCertificate(true)\r\n- [x] TLSSocket.getCertificate\r\n- [x] TLSSocket.enableTrace (mocked)\r\n- [x] TLSSocket.disableRenegotiation\r\n- [x] TLSSocket.getCipher\r\n- [x] TLSSocket.getEphemeralKeyInfo (BorringSSL does not support this, so we will return empty object if we cant get a private key)\r\n- [x] TLSSocket.getTLSTicket (This is client, we still need to implement tickets, setTicketKeys and getTicketKeys on server)\r\n- [x] TLSSocket.getSession \r\n- [x] TLSSocket.setSession and tls.connect({ session })\r\n\r\nWill be implemented on another PR:\r\n- [ ] ~~disconnect raw data stream after upgrading socket to TLS~~ this needs more investigation \r\n- [ ] TLSSocket.renegotiate\r\n- [ ] TLSSocket.getPeerCertificate(false)\r\n- [ ] TLSSocket.getX509Certificate\r\n- [ ] TLSSocket,getX509PeerCertificate\r\n- [ ] ~~TLSSocket.createSecurePair~~ (deprecated)\r\n- [ ] event `keylog`\r\n- [ ] event `OCSPResponse`\r\n- [ ] event `session` (not implemented yet, needs usockets adjustments on SSL_CTX_get_ex_data and SSL_CTX_set_ex_data)\r\n- [ ] TLSServer.setTicketsKeys\r\n- [ ] TLSServer.getTicketKeys\r\n\r\nMissing options:\r\n- [ ] sigalgs\r\n- [ ] minVersion, maxVersion\r\n- [ ] pskCallback\r\n- [ ] minDHSize\r\n- [ ] highWaterMark \r\n- [ ] onread\r\n- [ ] pfx \r\n- [ ] privateKeyIdentifier\r\n- [ ] privateKeyEngine\r\n- [ ] honorCipherOrder\r\n- [ ] ecdhCurve\r\n- [ ] crl\r\n- [ ] clientCertEngine\r\n- [ ] ticketKeys\r\n- [ ] sessionIdContext\r\n- [ ] sessionTimeout\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-10T13:11:50Z",
        "closed_at": "2023-07-11T20:09:44Z",
        "merged_at": "2023-07-11T20:09:44Z",
        "body": "Close: #3585",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 149,
        "deletions": 63,
        "changed_files": 2,
        "created_at": "2023-07-10T08:10:33Z",
        "closed_at": "2023-07-10T09:21:03Z",
        "merged_at": "2023-07-10T09:21:03Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 620,
        "deletions": 60,
        "changed_files": 7,
        "created_at": "2023-07-10T00:50:29Z",
        "closed_at": "2023-07-10T04:50:20Z",
        "merged_at": "2023-07-10T04:50:20Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 812,
        "deletions": 450,
        "changed_files": 10,
        "created_at": "2023-07-09T10:47:02Z",
        "closed_at": "2023-07-09T23:33:50Z",
        "merged_at": "2023-07-09T23:33:50Z",
        "body": "This adds:\r\n\r\n- [x] _debugEnd (stub)\r\n- [x] _debugProcess (stub)\r\n- [x] _fatalException (stub)\r\n- [x] _getActiveHandles (always returns an empty array)\r\n- [x] _getActiveRequests (always returns an empty array)\r\n- [x] _linkedBinding (returns undefined)\r\n- [x] _preload_modules (empty object)\r\n- [x] _rawDebug (returns undefined)\r\n- [x] _startProfilerIdleNotifier (returns undefined)\r\n- [x] _stopProfilerIdleNotifier (returns undefined)\r\n- [x] _tickCallback (returns undefined)\r\n- [x] allowedNodeEnvironmentFlags (returns empty Set)\r\n- [x] assert\r\n- [x] debugPort (validates input, but does nothing)\r\n- [x] features (fake object mimicking node)\r\n- [x] getActiveResourcesInfo (returns empty array)\r\n- [x] getegid\r\n- [x] geteuid\r\n- [x] getgid\r\n- [x] getgroups\r\n- [x] getuid\r\n- [x] moduleLoadList (returns empty object)\r\n- [x] openStdin (calls process.stdin.resume() and returns process.stdin)\r\n- [x] reallyExit\r\n- [x] setSourceMapsEnable (returns undefined)\r\n\r\nThis also makes `process` use a HashTable for the properties and removes some of the not-so-great hacks we were doing to make these values lazier. It should slightly improve startup time. \r\n\r\nThis also makes `require(\"process\")` directly just return globalThis.process, which makes `require(\"process\")` 7ms faster.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-07-09T01:12:13Z",
        "closed_at": "2023-07-10T03:08:17Z",
        "merged_at": null,
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-08T09:40:16Z",
        "closed_at": "2023-07-08T11:00:56Z",
        "merged_at": "2023-07-08T11:00:56Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 402,
        "deletions": 78,
        "changed_files": 13,
        "created_at": "2023-07-08T09:12:29Z",
        "closed_at": "2023-07-08T21:26:20Z",
        "merged_at": "2023-07-08T21:26:20Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 352,
        "deletions": 92,
        "changed_files": 12,
        "created_at": "2023-07-08T00:11:46Z",
        "closed_at": "2023-07-11T19:48:47Z",
        "merged_at": "2023-07-11T19:48:46Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-07-07T11:45:27Z",
        "closed_at": "2023-07-07T22:10:50Z",
        "merged_at": "2023-07-07T22:10:50Z",
        "body": "Close: #3562\r\n\r\n- Add boundary check to `utf8CheckIncomplete` function.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-07T07:53:34Z",
        "closed_at": "2023-07-08T03:12:39Z",
        "merged_at": "2023-07-08T03:12:39Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 41,
        "changed_files": 3,
        "created_at": "2023-07-07T07:04:18Z",
        "closed_at": "2023-07-08T04:20:30Z",
        "merged_at": "2023-07-08T04:20:30Z",
        "body": "This is preparation for fixing the bugs with runtime plugins that block it from being used nicely in `bun test`\r\n\r\n- First we should unify the implementations so there's only one for both bundler and runtime\r\n- Then we should disable running module resolution twice - no more running it after transpilation and then again at runtime\r\n- Then we should wire up JSBundlerPlugin to work with ModuleLoader.cpp\r\n\r\nWill need to do something about async module resolution. Maybe we don't allow it at runtime?\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-07-07T04:40:29Z",
        "closed_at": "2023-07-07T07:38:18Z",
        "merged_at": "2023-07-07T07:38:18Z",
        "body": "This makes `request.method` return the list of HTTP methods that node supports\r\n\r\nit also makes request.method an interned string which should slightly reduce memory usage by avoiding copying it",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 270,
        "deletions": 199,
        "changed_files": 25,
        "created_at": "2023-07-07T02:12:44Z",
        "closed_at": "2023-07-07T22:10:33Z",
        "merged_at": "2023-07-07T22:10:33Z",
        "body": "Fixes `tsc` when run from root\r\n\r\nStill broken when running from inside `test` but that's a bigger project",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 131,
        "changed_files": 9,
        "created_at": "2023-07-06T14:41:34Z",
        "closed_at": "2023-07-06T20:55:28Z",
        "merged_at": "2023-07-06T20:55:28Z",
        "body": "This refactors the wrapTLS into upgradeTLS and removes the internal open call that doesn't make sense anymore. Also fixed the \"connection\" event behavior for this case.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 78,
        "changed_files": 4,
        "created_at": "2023-07-06T09:46:04Z",
        "closed_at": "2023-08-23T19:09:04Z",
        "merged_at": null,
        "body": "This marks properties as `DOMException`, `Event`, `CustomEvent`, and others, as writable properties. They are writable in other environments and may patched by third-party libraries (which are responsible for error handling, etc.). Given the following code which is valid:\r\n```js\r\nconst originalImpl = globalThis.CustomEvent;\r\nglobalThis.CustomEvent = function(...args) {\r\n  // Do some tracking stuff...\r\n  return new originalImpl(...args);\r\n};\r\n```",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-07-06T04:21:34Z",
        "closed_at": "2023-07-06T05:23:33Z",
        "merged_at": "2023-07-06T05:23:33Z",
        "body": "fixes #2951 ",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 123,
        "deletions": 99,
        "changed_files": 16,
        "created_at": "2023-07-05T20:23:06Z",
        "closed_at": "2023-09-29T15:51:33Z",
        "merged_at": null,
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-07-05T17:15:52Z",
        "closed_at": "2023-07-07T23:24:07Z",
        "merged_at": "2023-07-07T23:24:07Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 31,
        "changed_files": 2,
        "created_at": "2023-07-05T15:47:06Z",
        "closed_at": "2023-07-06T05:22:57Z",
        "merged_at": "2023-07-06T05:22:56Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 168,
        "deletions": 38,
        "changed_files": 9,
        "created_at": "2023-07-05T08:43:58Z",
        "closed_at": "2023-07-05T10:46:11Z",
        "merged_at": "2023-07-05T10:46:11Z",
        "body": "ref(), unref(), and .refresh() are supposed to return the Timer object (probably for chainability reasons)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 182,
        "deletions": 190,
        "changed_files": 4,
        "created_at": "2023-07-05T07:18:31Z",
        "closed_at": "2023-07-05T08:21:35Z",
        "merged_at": "2023-07-05T08:21:35Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 23,
        "changed_files": 3,
        "created_at": "2023-07-05T04:47:36Z",
        "closed_at": "2023-07-05T07:09:00Z",
        "merged_at": "2023-07-05T07:09:00Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-07-04T23:39:05Z",
        "closed_at": "2023-07-05T07:08:50Z",
        "merged_at": "2023-07-05T07:08:49Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2023-07-04T19:00:16Z",
        "closed_at": "2023-07-04T22:41:37Z",
        "merged_at": "2023-07-04T22:41:37Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3269,
        "deletions": 2927,
        "changed_files": 32,
        "created_at": "2023-07-04T16:55:00Z",
        "closed_at": "2023-08-03T22:31:56Z",
        "merged_at": "2023-08-03T22:31:56Z",
        "body": "[`utf-8-validate`](https://www.npmjs.com/package/utf-8-validate) is a popular package to validate utf-8, mostly because `ws` [recommends](https://github.com/websockets/ws#opt-in-for-performance) that developers use it.\r\n\r\nNode.js has since introduced the [`isUtf8`](https://nodejs.org/api/buffer.html#bufferisutf8input) function on `node:buffer`. This PR makes utf-8-validate use the built-in function, to avoid potential bugs and issues with the package",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-07-04T15:33:56Z",
        "closed_at": "2023-07-04T22:38:44Z",
        "merged_at": "2023-07-04T22:38:44Z",
        "body": "Close: https://github.com/oven-sh/bun/issues/3338\r\n\r\n- Add some alias for Buffer operation.\r\n\r\nRef: https://github.com/nodejs/node/blob/main/doc/api/buffer.md\r\nP.S. You can grep `This function is also available under` in this page and get all alias that defined in nodejs. \r\n\r\n\r\n- `readBigUint64BE`\r\n- `readBigUint64LE`\r\n- `readUint8`\r\n- `readUint16BE`\r\n- `readUint16LE`\r\n- `readUint32BE`\r\n- `readUint32LE`\r\n- `readUintBE`\r\n- `readUintLE`\r\n- `writeBigUint64BE`\r\n- `writeBigUint64LE`\r\n- `writeUint8`\r\n- `writeUint16BE`\r\n- `writeUint16LE`\r\n- `writeUint32BE`\r\n- `writeUint32LE`\r\n- `writeUintBE`\r\n- `writeUintLE`\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 109,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-07-04T13:43:52Z",
        "closed_at": "2023-07-04T22:40:27Z",
        "merged_at": "2023-07-04T22:40:27Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 154,
        "deletions": 86,
        "changed_files": 4,
        "created_at": "2023-07-04T01:38:44Z",
        "closed_at": "2023-07-04T09:09:59Z",
        "merged_at": "2023-07-04T09:09:59Z",
        "body": "- fix version buffer confusion\r\n- improve workaround to handle cached modules\r\n\r\nfixes #3507",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-07-03T20:10:25Z",
        "closed_at": "2023-07-11T20:33:55Z",
        "merged_at": null,
        "body": "Fixes #1579.\r\n\r\nI'm not entirely confident this is the best approach, and I left some notes below as to why. This PR fixes the issue by changing argument parsing for Stat to accept the new optional argument, and a works ugly check in `node_fs_binding.zig`.\r\n\r\nTODOs:\r\n- [ ] Investigate if there is a way to compare `err.errno` to `.ENOENT` instead of the int value\r\n- [ ] Verify that the argument parsing changes are the correct way to make these changes\r\n- [ ] Check to see if there's a better way to implement the error comparison for this. Ideally wrapping the `callSync` function for just the `.stat` call?\r\n\r\nI think a better approach for this would be to change:\r\n```\r\n    pub const statSync = callSync(.stat);\r\n```\r\n\r\nto a function body that can introspect the args and catch the error if it is appropriate given the arguments. However, I do not understand Zig well enough to make that change.\r\n\r\nSomething like this as a replacement for src/bun.js/node/node_fs_binding.zig#231:\r\n```\r\n  pub const statSync = fn (args) {\r\n      try {\r\n      callSync(.stat);\r\n     } catch err => .ENOENT {\r\n     if (args[1][\"throwIfNoEntry\"]) {\r\n        // don't throw\r\n    }\r\n  }\r\n```",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 27,
        "changed_files": 2,
        "created_at": "2023-07-03T01:07:03Z",
        "closed_at": "2023-07-03T03:16:53Z",
        "merged_at": "2023-07-03T03:16:53Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-07-02T23:52:08Z",
        "closed_at": "2023-07-03T03:24:15Z",
        "merged_at": "2023-07-03T03:24:15Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 70,
        "deletions": 30,
        "changed_files": 12,
        "created_at": "2023-07-02T20:41:35Z",
        "closed_at": "2023-07-03T05:09:50Z",
        "merged_at": "2023-07-03T05:09:50Z",
        "body": "This depends on https://github.com/oven-sh/WebKit/commit/26c819733315f0ab64ae8e8e65b77d77d31211e1\r\n\r\nThis works at a lower level than Jest's implementation. That means:\r\n- `Date.now`, `new Date()` remain `===` after fake timers are enabled\r\n- `new Intl.DateTimeFormat().format()` uses the mocked time\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-02T18:33:47Z",
        "closed_at": "2023-07-03T01:06:22Z",
        "merged_at": "2023-07-03T01:06:22Z",
        "body": "This implements the `isUtf8` and `isAscii` functions on the `node:buffer` module which Node.js added in v19.x",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 28,
        "changed_files": 3,
        "created_at": "2023-07-02T06:18:09Z",
        "closed_at": "2023-07-02T08:06:41Z",
        "merged_at": "2023-07-02T08:06:41Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 391,
        "deletions": 260,
        "changed_files": 9,
        "created_at": "2023-07-02T05:02:51Z",
        "closed_at": "2023-07-04T03:53:42Z",
        "merged_at": "2023-07-04T03:53:42Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-02T03:08:57Z",
        "closed_at": "2023-07-02T04:58:06Z",
        "merged_at": "2023-07-02T04:58:06Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 6,
        "changed_files": 8,
        "created_at": "2023-07-02T01:59:21Z",
        "closed_at": "2023-07-02T03:02:50Z",
        "merged_at": "2023-07-02T03:02:50Z",
        "body": "This adds https://github.com/aklomp/base64 as a dependency to Bun, which is the same library that Node uses.\r\n\r\n```zig\r\ncpu: Apple M1 Max\r\nruntime: bun 0.6.13_debug (arm64-darwin)\r\n\r\nbenchmark                      time (avg)             (min \u2026 max)       p75       p99      p995\r\n----------------------------------------------------------------- -----------------------------\r\nBuffer.toString('base64')   40.41 \u00b5s/iter    (12.5 \u00b5s \u2026 10.22 ms)  15.58 \u00b5s 561.83 \u00b5s   1.13 ms\r\n\r\n\u276f bun\r\ncpu: Apple M1 Max\r\nruntime: bun 0.6.12 (arm64-darwin)\r\n\r\nbenchmark                      time (avg)             (min \u2026 max)       p75       p99      p995\r\n----------------------------------------------------------------- -----------------------------\r\nBuffer.toString('base64')  269.96 \u00b5s/iter     (177 \u00b5s \u2026 38.42 ms) 186.92 \u00b5s 905.17 \u00b5s   3.41 ms\r\n\r\n\u276f node\r\ncpu: Apple M1 Max\r\nruntime: node v20.1.0 (arm64-darwin)\r\n\r\nbenchmark                      time (avg)             (min \u2026 max)       p75       p99      p995\r\n----------------------------------------------------------------- -----------------------------\r\nBuffer.toString('base64')  129.44 \u00b5s/iter    (22.08 \u00b5s \u2026 6.61 ms)  57.79 \u00b5s   1.65 ms   2.02 ms\r\n\r\n\r\n\u276f deno\r\ncpu: unknown\r\nruntime: deno 1.34.2 (aarch64-apple-darwin)\r\n\r\nbenchmark                      time (avg)             (min \u2026 max)       p75       p99      p995\r\n----------------------------------------------------------------- -----------------------------\r\nBuffer.toString('base64')   154.7 \u00b5s/iter   (36.29 \u00b5s \u2026 12.95 ms) 105.54 \u00b5s   1.44 ms   1.91 ms\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 242,
        "deletions": 153,
        "changed_files": 20,
        "created_at": "2023-07-01T23:31:43Z",
        "closed_at": "2023-07-02T00:37:44Z",
        "merged_at": "2023-07-02T00:37:44Z",
        "body": "- This fixes a crash that can happen when certain exceptions are thrown and GC'd introduced in Bun v0.6.12\r\n- This switches the `SystemError` type used for throwing exceptions with extra context to use `bun.String` instead of `ZigString`. \r\n- This makes usages of static strings go through the AtomString lookup table instead of leaking the `ExternalStringImpl*` type forever on each call\r\n- This adds a test that checks we don't crash as a result of GC'ing exceptions thrown by `node:fs` (SystemError)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 137,
        "deletions": 134,
        "changed_files": 1,
        "created_at": "2023-07-01T20:08:00Z",
        "closed_at": "2023-07-01T21:40:06Z",
        "merged_at": "2023-07-01T21:40:06Z",
        "body": "After: 304 bytes per request\r\nBefore: 312 bytes per request\r\n\r\nNote: this does not include JS request object or JS response objects. Just the internal representation",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-01T15:36:30Z",
        "closed_at": "2023-07-03T21:08:49Z",
        "merged_at": "2023-07-03T21:08:49Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/3469#issuecomment-1615954844\r\n- [x] fix code\r\n- [x] add tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-06-30T20:41:24Z",
        "closed_at": "2023-06-30T21:58:39Z",
        "merged_at": "2023-06-30T21:58:39Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 182,
        "deletions": 158,
        "changed_files": 5,
        "created_at": "2023-06-30T20:35:17Z",
        "closed_at": "2023-07-11T01:25:20Z",
        "merged_at": "2023-07-11T01:25:20Z",
        "body": "Fixes `bun --bun x prisma generate`\r\n\r\nThe issue is if you do createReadStream on a large file, the `readable` event was emitted extra times after the stream was destroyed because the readablestate destroyed value was never set. This made prisma's hash function call .digest multiple times.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 62,
        "deletions": 17,
        "changed_files": 8,
        "created_at": "2023-06-30T13:50:27Z",
        "closed_at": "2023-06-30T17:03:54Z",
        "merged_at": "2023-06-30T17:03:54Z",
        "body": "fixes #3430",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-30T06:36:04Z",
        "closed_at": "2023-06-30T17:04:46Z",
        "merged_at": "2023-06-30T17:04:46Z",
        "body": "For the following issue, https://github.com/oven-sh/bun/issues/3061 was `ClientRequest` and `OutgoingMessage` missing in the export. This is causing some packages depending to receive undefined when using the `http` package.\r\n\r\n\r\n\r\n```\r\n 6 | const {initializeTLSOptions } = require('./request-options');\r\n 7 | const http = require('http');\r\n 8 | const https = require('https');\r\n 9 | const {Stream} = require('stream');\r\n10 | function addFunctions(container , obj){\r\n11 |   const proto = obj.prototype;\r\n                    ^\r\nTypeError: undefined is not an object (evaluating 'obj.prototype')\r\n      at /Users/stijnvanhulle/GitHub/kubb/node_modules/.pnpm/http2-client@1.3.5/node_modules/http2-client/lib/request.js:11:16\r\n      at /Users/stijnvanhulle/GitHub/kubb/node_modules/.pnpm/http2-client@1.3.5/node_modules/http2-client/lib/request.js:28:0\r\n      at globalThis (/Users/stijnvanhulle/GitHub/kubb/node_modules/.pnpm/http2-client@1.3.5/node_modules/http2-client/lib/request.js:591:0)\r\n      at /Users/stijnvanhulle/GitHub/kubb/node_modules/.pnpm/http2-client@1.3.5/node_modules/http2-client/lib/index.js:2:46\r\n      at globalThis (/Users/stijnvanhulle/GitHub/kubb/node_modules/.pnpm/http2-client@1.3.5/node_modules/http2-client/lib/index.js:21:0)\r\n```\r\n\r\n\r\n```\r\nconsole.log(http.ClientRequest, http, require('node:http'))\r\n\r\n{\r\n  Agent: [Function: Agent],\r\n  Server: [Function: Server],\r\n  METHODS: [ \"ACL\", \"BIND\", \"CHECKOUT\", \"CONNECT\", \"COPY\", \"DELETE\", \"GET\", \"HEAD\", \"LINK\", \"LOCK\", \"M-SEARCH\", \"MERGE\",\r\n    \"MKACTIVITY\", \"MKCALENDAR\", \"MKCOL\", \"MOVE\", \"NOTIFY\", \"OPTIONS\", \"PATCH\", \"POST\", \"PROPFIND\", \"PROPPATCH\",\r\n    \"PURGE\", \"PUT\", \"REBIND\", \"REPORT\", \"SEARCH\", \"SOURCE\", \"SUBSCRIBE\", \"TRACE\", \"UNBIND\", \"UNLINK\", \"UNLOCK\", \"UNSUBSCRIBE\"\r\n  ],\r\n  STATUS_CODES: {\r\n    \"100\": \"Continue\",\r\n    \"101\": \"Switching Protocols\",\r\n    \"102\": \"Processing\",\r\n    \"103\": \"Early Hints\",\r\n    \"200\": \"OK\",\r\n    \"201\": \"Created\",\r\n    \"202\": \"Accepted\",\r\n    \"203\": \"Non-Authoritative Information\",\r\n    \"204\": \"No Content\",\r\n    \"205\": \"Reset Content\",\r\n    \"206\": \"Partial Content\",\r\n    \"207\": \"Multi-Status\",\r\n    \"208\": \"Already Reported\",\r\n    \"226\": \"IM Used\",\r\n    \"300\": \"Multiple Choices\",\r\n    \"301\": \"Moved Permanently\",\r\n    \"302\": \"Found\",\r\n    \"303\": \"See Other\",\r\n    \"304\": \"Not Modified\",\r\n    \"305\": \"Use Proxy\",\r\n    \"307\": \"Temporary Redirect\",\r\n    \"308\": \"Permanent Redirect\",\r\n    \"400\": \"Bad Request\",\r\n    \"401\": \"Unauthorized\",\r\n    \"402\": \"Payment Required\",\r\n    \"403\": \"Forbidden\",\r\n    \"404\": \"Not Found\",\r\n    \"405\": \"Method Not Allowed\",\r\n    \"406\": \"Not Acceptable\",\r\n    \"407\": \"Proxy Authentication Required\",\r\n    \"408\": \"Request Timeout\",\r\n    \"409\": \"Conflict\",\r\n    \"410\": \"Gone\",\r\n    \"411\": \"Length Required\",\r\n    \"412\": \"Precondition Failed\",\r\n    \"413\": \"Payload Too Large\",\r\n    \"414\": \"URI Too Long\",\r\n    \"415\": \"Unsupported Media Type\",\r\n    \"416\": \"Range Not Satisfiable\",\r\n    \"417\": \"Expectation Failed\",\r\n    \"418\": \"I'm a Teapot\",\r\n    \"421\": \"Misdirected Request\",\r\n    \"422\": \"Unprocessable Entity\",\r\n    \"423\": \"Locked\",\r\n    \"424\": \"Failed Dependency\",\r\n    \"425\": \"Too Early\",\r\n    \"426\": \"Upgrade Required\",\r\n    \"428\": \"Precondition Required\",\r\n    \"429\": \"Too Many Requests\",\r\n    \"431\": \"Request Header Fields Too Large\",\r\n    \"451\": \"Unavailable For Legal Reasons\",\r\n    \"500\": \"Internal Server Error\",\r\n    \"501\": \"Not Implemented\",\r\n    \"502\": \"Bad Gateway\",\r\n    \"503\": \"Service Unavailable\",\r\n    \"504\": \"Gateway Timeout\",\r\n    \"505\": \"HTTP Version Not Supported\",\r\n    \"506\": \"Variant Also Negotiates\",\r\n    \"507\": \"Insufficient Storage\",\r\n    \"508\": \"Loop Detected\",\r\n    \"509\": \"Bandwidth Limit Exceeded\",\r\n    \"510\": \"Not Extended\",\r\n    \"511\": \"Network Authentication Required\"\r\n  },\r\n  createServer: [Function: createServer],\r\n  ServerResponse: [Function: ServerResponse],\r\n  IncomingMessage: [Function: IncomingMessage],\r\n  request: [Function: request],\r\n  get: [Function: get],\r\n  maxHeaderSize: 16384,\r\n  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],\r\n  globalAgent: [Getter],\r\n  [Symbol(CommonJS)]: 0\r\n}\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 135,
        "deletions": 43,
        "changed_files": 3,
        "created_at": "2023-06-30T04:44:59Z",
        "closed_at": "2023-07-02T00:01:52Z",
        "merged_at": "2023-07-02T00:01:52Z",
        "body": "Close: https://github.com/oven-sh/bun/issues/3085\r\n\r\n- Fix calling `Buffer.toString` with `(offset, length, encoding)`\r\n- Fix `utf8Slice`, `latin1Slice`, ...",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1712,
        "deletions": 146,
        "changed_files": 24,
        "created_at": "2023-06-30T04:20:29Z",
        "closed_at": "2023-08-29T22:45:25Z",
        "merged_at": null,
        "body": "This originally was the EventStream pr but since we are not certain about it's API, we're going to go with just the underlying fixes it brought since those changes are more important than an API that can/should be done in userland/frameworks.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 153,
        "deletions": 85,
        "changed_files": 3,
        "created_at": "2023-06-30T00:49:42Z",
        "closed_at": "2023-07-01T18:44:05Z",
        "merged_at": "2023-07-01T18:44:05Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1888,
        "deletions": 297,
        "changed_files": 26,
        "created_at": "2023-06-29T18:44:43Z",
        "closed_at": "2023-07-03T19:19:51Z",
        "merged_at": "2023-07-03T19:19:51Z",
        "body": "Depends on\r\nhttps://github.com/Jarred-Sumner/uSockets/pull/6 and on bump https://github.com/Jarred-Sumner/uWebSockets/pull/16\r\n- [x] Add C support\r\n- [x] Add Zig wrappers\r\n- [x] Change #socket to be a symbol\r\n- [x] Add Tests\r\n\r\nThis will enable this to work:\r\n```js\r\nimport nodemailer from \"nodemailer\";\r\nnodemailer.createTestAccount(async (err, account) => {\r\n  const transporter = nodemailer.createTransport({\r\n    host: account.smtp.host,\r\n    port: account.smtp.port,\r\n    secure: account.smtp.secure,\r\n    debug: true,\r\n    auth: {\r\n      user: account.user, // generated ethereal user\r\n      pass: account.pass, // generated ethereal password\r\n    },\r\n  });\r\n\r\n  // send mail with defined transport object\r\n  let info = await transporter.sendMail({\r\n    from: '\"Fred Foo \ud83d\udc7b\" <foo@example.com>', // sender address\r\n    to: \"example@gmail.com\", // list of receivers\r\n    subject: \"Hello \u2714\", // Subject line\r\n    text: \"Hello world?\", // plain text body\r\n    html: \"<b>Hello world?</b>\", // html body\r\n  });\r\n\r\n  console.log(\"Message sent: %s\", info.messageId);\r\n  // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n\r\n  // Preview only available when sending through an Ethereal account\r\n  console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\r\n  // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n});\r\n```\r\n\r\nFix https://github.com/oven-sh/bun/issues/3003 https://github.com/oven-sh/bun/issues/3236 \r\n\r\nAlso adds ALPNprotocols support, socket.alpnProtocol and socket.setServername support (edgeDB works after this)\r\nFixes setTimeout/setInterval/setImmediate keeping the process alive forever when returning a object on the callback\r\n\r\nFix https://github.com/oven-sh/bun/issues/2915 https://github.com/oven-sh/bun/issues/3009\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 112,
        "deletions": 79,
        "changed_files": 3,
        "created_at": "2023-06-29T18:05:10Z",
        "closed_at": "2023-06-29T21:51:24Z",
        "merged_at": "2023-06-29T21:51:24Z",
        "body": "fixes #3309 , fixes #3454 \r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-06-29T06:46:13Z",
        "closed_at": "2023-06-29T15:53:44Z",
        "merged_at": "2023-06-29T15:53:44Z",
        "body": "Fixes #3303 (i promise it's fixed this time)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 440,
        "deletions": 259,
        "changed_files": 20,
        "created_at": "2023-06-29T03:23:04Z",
        "closed_at": "2023-06-30T03:36:18Z",
        "merged_at": "2023-06-30T03:36:18Z",
        "body": "Fixes #3336 \r\n```ts\r\nimport ytdl from \"ytdl-core\";\r\nconst info = await ytdl.getInfo(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\r\nconsole.log(info);\r\n```\r\n\r\nThis fixes a lot of subtle things in bun:\r\n\r\n- In JSReadableState, check if `highWaterMark` is a number. Would segfault if exists but not an integer number.\r\n- Cleanup `node:http`\r\n- `node:https`'s `request` and `get` will set the protocol to https properly now.\r\n- reading a body with `request`/`get` now uses a `ReadableStream` under the hood, as the old implementation didn't seem to work properly (might be a bug relating to `Readable.fromWeb`). this approach is simpler and also would be a little faster.\r\n- Add types for `readMany`\r\n- Fix a crash with `createServer` and you abort a request in a specific way.\r\n- Fix `emitClose` being false by default in some cases, causing `\"close\"` not be emitted.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 198,
        "deletions": 143,
        "changed_files": 10,
        "created_at": "2023-06-29T01:06:53Z",
        "closed_at": "2023-06-29T04:11:06Z",
        "merged_at": "2023-06-29T04:11:06Z",
        "body": "This fixes a number of memory leaks, lifetime-related bugs, and encoding issues that could happen when printing exceptions",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 210,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-06-29T00:11:30Z",
        "closed_at": "2023-06-29T02:28:53Z",
        "merged_at": "2023-06-29T02:28:53Z",
        "body": "fixes #3434 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2023-06-28T21:04:45Z",
        "closed_at": "2023-06-28T23:09:09Z",
        "merged_at": "2023-06-28T23:09:09Z",
        "body": "```js\r\nconsole.log(\r\n  await Bun.file(import.meta.path).exists() // true\r\n)\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 241,
        "deletions": 67,
        "changed_files": 12,
        "created_at": "2023-06-28T07:53:42Z",
        "closed_at": "2023-06-28T20:53:10Z",
        "merged_at": "2023-06-28T20:53:10Z",
        "body": "This will fail to build until WebKit finishes building",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-28T07:27:01Z",
        "closed_at": "2023-06-28T18:27:02Z",
        "merged_at": "2023-06-28T18:27:02Z",
        "body": "Missed something. Now this works:\r\n\r\n```ts\r\nimport { randomInt } from \"node:crypto\";\r\n\r\nrandomInt();\r\n```\r\n\r\nWhereas before only this worked:\r\n\r\n```ts\r\nimport crypto from \"node:crypto\";\r\n\r\ncrypto.randomInt();\r\n```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 355,
        "deletions": 53,
        "changed_files": 13,
        "created_at": "2023-06-28T01:45:41Z",
        "closed_at": "2023-07-06T20:02:29Z",
        "merged_at": "2023-07-06T20:02:29Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-06-28T01:15:59Z",
        "closed_at": "2023-06-28T18:27:32Z",
        "merged_at": "2023-06-28T18:27:32Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 143,
        "deletions": 106,
        "changed_files": 5,
        "created_at": "2023-06-27T22:33:34Z",
        "closed_at": "2023-06-28T08:21:00Z",
        "merged_at": "2023-06-28T08:21:00Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-27T22:29:11Z",
        "closed_at": "2023-06-28T00:27:06Z",
        "merged_at": "2023-06-28T00:27:06Z",
        "body": "Apple's proprietary build of SQLite supports FTS5. This PR enables FTS5 on the Linux build and adds a test.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 326,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-27T13:15:33Z",
        "closed_at": "2023-06-27T15:23:25Z",
        "merged_at": "2023-06-27T15:23:25Z",
        "body": "Close: #3424\r\n\r\n1. Add error code `ERR_FALSY_VALUE_REJECTION`.\r\n2. Fix the parameters of the `process.nextTick` function.\r\n3. Add some unittests for `callbackify`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 48,
        "changed_files": 7,
        "created_at": "2023-06-27T10:01:10Z",
        "closed_at": "2023-06-27T11:05:59Z",
        "merged_at": "2023-06-27T11:05:59Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-27T00:41:23Z",
        "closed_at": "2023-06-27T02:00:55Z",
        "merged_at": "2023-06-27T02:00:55Z",
        "body": "fixes #3413 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 611,
        "deletions": 12,
        "changed_files": 10,
        "created_at": "2023-06-26T17:54:50Z",
        "closed_at": "2023-06-26T18:56:53Z",
        "merged_at": "2023-06-26T18:56:53Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 150,
        "deletions": 11,
        "changed_files": 5,
        "created_at": "2023-06-26T04:16:50Z",
        "closed_at": "2023-06-26T15:12:38Z",
        "merged_at": "2023-06-26T15:12:38Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 155,
        "deletions": 15,
        "changed_files": 8,
        "created_at": "2023-06-26T01:36:38Z",
        "closed_at": "2023-06-26T22:51:58Z",
        "merged_at": "2023-06-26T22:51:58Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 16,
        "changed_files": 2,
        "created_at": "2023-06-25T21:26:14Z",
        "closed_at": "2023-06-25T22:43:58Z",
        "merged_at": "2023-06-25T22:43:58Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 124,
        "deletions": 17,
        "changed_files": 7,
        "created_at": "2023-06-25T17:27:27Z",
        "closed_at": "2023-06-25T23:32:28Z",
        "merged_at": "2023-06-25T23:32:28Z",
        "body": "This adds support for reading files embedded in executables created via `bun build --compile`.\r\n\r\nThe following snippet works now:\r\n\r\n```bash\r\nbun build --compile ./hello.ts\r\n```\r\n\r\n\r\n```ts\r\n// hello.ts\r\nimport index from \"./file.html\";\r\nimport pic from \"./favicon.png\";\r\nimport { readFileSync } from \"node:fs\";\r\nimport { file, serve } from \"bun\";\r\n\r\nserve({\r\n  fetch(req) {\r\n    const { pathname } = new URL(req.url);\r\n    if (pathname === \"/\") {\r\n      return new Response(file(index));\r\n    }\r\n\r\n    if (pathname === \"/favicon.png\") {\r\n      return new Response(file(pic));\r\n    }\r\n\r\n    return new Response(\"Not found\", { status: 404 });\r\n  },\r\n});\r\n\r\n// Works with readFileSync() as well.\r\nconsole.log(\"index.html is\", readFileSync(index).byteLength, \"bytes\");\r\n```\r\n\r\nThis adds support for `Bun.file(path)` and `readFileSync(path)`. it doesn't add support for the rest of the `node:fs` functions.\r\n\r\nConfusingly, outside of `bun build --compile`, the snippet above doesn't work without setting `.html` and `.png` to be a `file` loader:\r\n```bash\r\nbun --loader=.html:file --loader=.png:file ./hello.ts\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-06-25T15:57:54Z",
        "closed_at": "2023-06-26T00:54:55Z",
        "merged_at": "2023-06-26T00:54:55Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 350,
        "deletions": 291,
        "changed_files": 16,
        "created_at": "2023-06-25T14:45:13Z",
        "closed_at": "2023-06-26T02:48:56Z",
        "merged_at": "2023-06-26T02:48:56Z",
        "body": "This fixes the test failures in `import-meta.test` from #3379 \r\n\r\nThis also aligns `require(\"module\")._cache` more closely with Node, it now points to `require.cache`\r\n\r\nThis should also make it slightly faster to create these import.meta.require functions. Last time we tried this, we ran into some issues though. It seems to be okay so long as we don't try to use `putDirectWithoutTransition` or `addPropertyToStructure`.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-25T13:31:58Z",
        "closed_at": "2023-06-25T23:15:56Z",
        "merged_at": "2023-06-25T23:15:56Z",
        "body": "Close: #3395",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 34,
        "changed_files": 2,
        "created_at": "2023-06-25T12:15:25Z",
        "closed_at": "2023-06-26T01:49:17Z",
        "merged_at": "2023-06-26T01:49:17Z",
        "body": "- also fixes a memory leak in the error handler\r\n\r\nFixes #3334 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-06-25T10:47:39Z",
        "closed_at": "2023-06-27T19:37:57Z",
        "merged_at": "2023-06-27T19:37:57Z",
        "body": "Remove @stricjs/core example and replace with @stricjs/router example",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 352,
        "deletions": 260,
        "changed_files": 11,
        "created_at": "2023-06-24T19:54:53Z",
        "closed_at": "2023-06-25T23:16:26Z",
        "merged_at": "2023-06-25T23:16:26Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 25668,
        "deletions": 21382,
        "changed_files": 4,
        "created_at": "2023-06-24T16:42:36Z",
        "closed_at": "2023-06-25T09:58:49Z",
        "merged_at": "2023-06-25T09:58:49Z",
        "body": "This fixes https://github.com/oven-sh/bun/issues/3341 (though I can't say with confidence it fully works, just the specific cause was due to under-estimating latin1 length)\r\n\r\nThe specific fix here is:\r\n1) Count UTF-8 byte length for latin1 characters instead of assuming latin1 is ASCI\r\n1) Fix a bug with counting Latin1 characters caused by the SIMD code\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 221,
        "deletions": 15,
        "changed_files": 17,
        "created_at": "2023-06-24T15:59:49Z",
        "closed_at": "2023-06-26T19:49:21Z",
        "merged_at": "2023-06-26T19:49:21Z",
        "body": "This interprets the `__esModule` annotation at runtime:\r\n- If `default` and the `__esModule` property is defined on `module.exports`, then the `default` ESM export\r\nbecomes the value of `module.exports.default` (like Babel), unless the enclosing package.json's `\"type\"` field is set to `\"module\"` (like esbuild)\r\n- If  the `__esModule` annotation is not defined on `module.exports`, then we\r\nset the `default` ESM export to `module.exports` or if `\"package.json\"'s `\"type\"` field is set to `\"module\"` (like Node.js)\r\n\r\nNote that this interpretation is slightly different than esbuild and other tooling:\r\n-  We do not disable this based on the caller's file extension. In a JS runtime, there is only one ModuleNamespaceObject per ES module\r\n-  We ignore the value of the `__esModule` annotation. We only look for the existence of the `__esModule` property on `module.exports`. This is for performance reasons (bun loops through the `module.exports` objects at runtime). \r\n\r\nRelevant links:\r\n- https://andrewbranch.github.io/interop-test\r\n- https://stackoverflow.com/questions/50943704/whats-the-purpose-of-object-definepropertyexports-esmodule-value\r\n- https://github.com/nodejs/node/issues/40891\r\n- https://github.com/evanw/bundler-esm-cjs-tests\r\n- https://github.com/evanw/esbuild/issues/1591\r\n   \r\n\r\nFixes https://github.com/oven-sh/bun/issues/3383\r\n\r\ncc @andrewbranch @colinhacks @paperdave \r\n\r\n\r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-06-24T14:46:34Z",
        "closed_at": "2023-06-27T20:42:26Z",
        "merged_at": "2023-06-27T20:42:26Z",
        "body": "getIfPropertyExists is safer than getDirect",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-06-23T19:54:53Z",
        "closed_at": "2023-06-27T01:25:33Z",
        "merged_at": "2023-06-27T01:25:33Z",
        "body": "Hi, when I tried to install Bun on WSL today, I got:\r\n\r\n```\r\nerror: unzip is required to install bun (see: https://github.com/oven-sh/bun#unzip-is-required)\r\n```\r\nWhich I quickly found out this documentation does not exist at this location anymore. It looks like the main branch has already fixed this, but the [docs page it points to](https://bun.sh/docs/installation) contains no information about this error. It looks like the error is described on the [troubleshooting ](https://github.com/oven-sh/bun/blob/main/docs/troubleshooting.md) page, however, that page is commented out in nav.ts [here](https://github.com/oven-sh/bun/blob/217501e180eadd1999f30733e0f13580cd1f0abf/docs/nav.ts#L318).\r\n\r\nThis PR adds a troubleshooting section to the installation page containing the info about unzip which has been taken verbatim from the troubleshooting page. This seemed more innocuous than bringing back the troubleshooting page altogether as I assume it was commented out for a reason at some point. \r\n\r\nThis also updates the link in install.sh to bring users directly to the troubleshooting section.\r\n\r\nPlease feel free to close this out if this is not a desired change. Also happy to tweak this if something else is needed. Thanks!",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-23T19:31:55Z",
        "closed_at": "2023-06-24T01:19:01Z",
        "merged_at": "2023-06-24T01:19:00Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 141,
        "deletions": 48,
        "changed_files": 2,
        "created_at": "2023-06-23T02:13:12Z",
        "closed_at": "2023-06-23T03:13:26Z",
        "merged_at": "2023-06-23T03:13:26Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4177,
        "deletions": 2703,
        "changed_files": 112,
        "created_at": "2023-06-22T14:27:29Z",
        "closed_at": "2023-06-24T13:02:16Z",
        "merged_at": "2023-06-24T13:02:16Z",
        "body": "- This fixes the main crash people have been running into. ~There still is one more crash to address.~\r\n- Builtins now have a `SourceOrigin` set to the `builtin://` URL protocol. This isn't user-facing. \r\n- `import.meta.primordials` is replaced with `globalThis[Symbol.for(\"Bun.lazy\")(\"primordials\")`. This function returns undefined if the caller source origin is not `builtin://`\r\n- `depd` is no longer a hardcoded module\r\n- The code that re-exports CommonJS module into the ESM registry is now only run when the CommonJS module has been imported or needs to exist in \r\n- `import.meta.require` is no longer used in builtin ESM modules. It is now a regular import\r\n- `node:url` is no longer minified in the source and it uses a tweaked, vendored version of @ljharb's module. The main tweaks are using Bun's `fileURLToPath`, `pathToFileURL` functions and using `new URLSearchParams(query).toJSON()` to parse the the query string instead of a separate module\r\n\r\nThe cause of the GC crash was due to:\r\n- Incorrect JSC::Structure use (setting inline capacity seems to cause property offsets to be wrong in non-trivial prototypes)\r\n- Using `functionSpace` instead of `plainObjectSpace` for the prototypes\r\n\r\n~The remaining crash repros like this:~ **fixed!**\r\n```ts\r\nimport path from 'path';\r\nimport esbuild from 'esbuild';\r\nconsole.log(path, esbuild) // mark them as used\r\n```\r\n\r\nThis crash happens because `esbuild` is evaluated at link time. `esbuild` uses `path`. `path` is evaluated after `esbuild` since it is already in the ESM registry\r\n\r\nNote that the following does not crash (esbuild loading before path)\r\n```ts\r\nimport esbuild from 'esbuild';\r\nimport path from 'path';\r\nconsole.log(path, esbuild) // mark them as used\r\n```\r\n\r\nWe could make the builtins use `import.meta.require` when loaded from user code, but that would only solve this issue for the builtins (and only when statically known). I do not think it would fix it for cjs -> ESM -> cjs.\r\n\r\n\r\nOur options here are:\r\n- Load CommonJS & ESM modules twice\r\n- Do some hoisting thing that probably won't work\r\n- Rely on static analysis to pick up CommonJS export names, evaluate CommonJS at the same time as ES Modules (what Node.js does)\r\n- Evaluate CommonJS immediately, before link time\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 186,
        "deletions": 116,
        "changed_files": 32,
        "created_at": "2023-06-22T06:32:55Z",
        "closed_at": "2023-06-24T06:23:39Z",
        "merged_at": "2023-06-24T06:23:39Z",
        "body": "Fixes #3303\r\n\r\nThe CommonJS doesnt work if the module itself is a CommonJS module, etc",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 23,
        "changed_files": 6,
        "created_at": "2023-06-22T06:03:24Z",
        "closed_at": "2023-06-24T06:24:05Z",
        "merged_at": "2023-06-24T06:24:05Z",
        "body": "also made it so you can run mock-fn.test.js with vitest but tbh it doesn't really work the way i wanted it to.\r\n\r\ndid run to see that the things that matter pass (theres some subtle differences in how vi.fn handles name and so on)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1772,
        "deletions": 1584,
        "changed_files": 152,
        "created_at": "2023-06-21T20:07:57Z",
        "closed_at": "2023-06-22T06:38:19Z",
        "merged_at": "2023-06-22T06:38:19Z",
        "body": "- `@enumToInt` -> `@intFromEnum` and other similar builtins\r\n- `std.sort.sort` -> `std.sort.block` and `sortContext` -> `blockContext`\r\n- replace `std.math.max/min` with `@min/max`\r\n- update `@memcpy/memset` to use slices\r\n- `std.builtin.version` -> `std.SemanticVersion`\r\n- lowercase enum names for `std.fs.File.Kind`\r\n- copy pasted the previous implementation of `std.hash.Wyhash` to `Wyhash.zig` and made available through `bun.Wyhash`\r\n- `std.mem.set/copy` -> `@memset/memcpy`\r\n- `os.system.COPYFILE_DATA` -> `os.system.COPYFILE.DATA`\r\n- remove a few `@truncate`\r\n- append null character to field name from `@typeInfo` in `src/bun.js/base.zig:1308`\r\n- `std.math.nan_<T> / inf_<T>` -> `std.math.nan(T) / inf(T)`\r\n- add type arg to `std.mem.alignForward`\r\n- make callback comptime in `Expr.joinAllWithCommaCallback()`\r\n- `std.debug.detectTTYConfig` -> `std.io.tty.detectConfig`",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-06-21T01:15:06Z",
        "closed_at": "2023-06-21T02:29:48Z",
        "merged_at": "2023-06-21T02:29:48Z",
        "body": "Before:\r\n\r\n![image](https://github.com/oven-sh/bun/assets/709451/3f0972b0-9f8a-4bc2-b869-3fbe6376eb19)\r\n\r\n\r\nAfter:\r\n\r\n![image](https://github.com/oven-sh/bun/assets/709451/65c8bb3e-3c68-42d5-a48b-4bf322e007a4)\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 429,
        "deletions": 147,
        "changed_files": 8,
        "created_at": "2023-06-21T00:16:18Z",
        "closed_at": "2023-06-21T02:06:59Z",
        "merged_at": "2023-06-21T02:06:58Z",
        "body": "also includes a few `deepEquals` bug fixes for `Dates`, `Strings`, `Sets`, and `Maps`",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-06-20T15:37:37Z",
        "closed_at": "2023-07-29T21:51:52Z",
        "merged_at": null,
        "body": "As mentioned [here](https://github.com/oven-sh/bun/pull/3316#issuecomment-1598148057), Jarred merged my pr, but he asked me to do a follow up with some little optimizations, here they are.\r\n\r\n*Also, I made some other little fixes and added more test coverage*",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 2,
        "changed_files": 18,
        "created_at": "2023-06-20T12:05:27Z",
        "closed_at": "2023-06-25T23:43:39Z",
        "merged_at": "2023-06-25T23:43:39Z",
        "body": "I have broken deployments a few times because running `bun install` on CI server does not raise if the lockfile is updated, but it will raise when running with `--production` flag during deployment.\r\n\r\nAttempted to resolve this by adding `--frozen-lockfile` flag to match the API of other package managers (https://pnpm.io/cli/install#--frozen-lockfile) as it was briefly mentioned in this issue: https://github.com/oven-sh/bun/issues/1776#issuecomment-1380973259 \r\n\r\nIn this PR I also added the flag to the schema, but I'm wondering if that is necessary/desired. Let me know if you think it should only be a CLI option. \r\n\r\nThank you for providing such an excellent tool! \ud83d\udc9a",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 93,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-06-20T01:21:54Z",
        "closed_at": "2023-06-21T02:29:20Z",
        "merged_at": "2023-06-21T02:29:20Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 232,
        "deletions": 39,
        "changed_files": 8,
        "created_at": "2023-06-19T23:54:13Z",
        "closed_at": "2023-06-20T06:28:40Z",
        "merged_at": "2023-06-20T06:28:40Z",
        "body": "- fix source map positions for getLineNumber / getColumnNumber\r\n- fix return value getting coerced to a string\r\n- implement CallFrame.p.toString\r\n- add tests for getFunction, getThis, isConstructor, isNative, toString, getLineNumber, getColumnNumber\r\n\r\nstill not implemented:\r\n- isPromiseAll/getPromiseIndex\r\n- getEvalOrigin\r\n- getScriptHash\r\n- getPosition\r\n- getEnclosingColumnNumber/getEnclosingLineNumber\r\n- isAsync\r\n- accessing Error.stack should call prepareStackTrace\r\n\r\nstill broken:\r\n- isEval: often returns false when it should return true\r\n- isToplevel: often returns true when it should return false\r\n\r\nRefs: https://v8.dev/docs/stack-trace-api\r\nRefs: v8/src/objects/call-site-info.cc\r\nFixes: https://github.com/oven-sh/bun/issues/2883",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 5,
        "changed_files": 7,
        "created_at": "2023-06-19T10:40:07Z",
        "closed_at": "2023-06-26T22:35:48Z",
        "merged_at": "2023-06-26T22:35:48Z",
        "body": "Closes #3355",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-06-19T10:33:48Z",
        "closed_at": "2023-06-25T23:48:04Z",
        "merged_at": "2023-06-25T23:48:04Z",
        "body": "also fixes #2444",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 715,
        "deletions": 134,
        "changed_files": 21,
        "created_at": "2023-06-18T14:42:33Z",
        "closed_at": "2023-06-18T17:47:43Z",
        "merged_at": "2023-06-18T17:47:43Z",
        "body": "- Fixes a bug where `file:` URLs with space characters in them would be % encoded instead of decoded\r\n- Fixes a crash when `readdir` returns a large directory and some elements are UTF-16\r\n- Make `Encoding` use `bun.String`\r\n- Add helper for `ComptimeStringMap` with `bun.String`\r\n- Use `bun.String` in `readlink` and `realpath`, reuse the same string when the return value is equal which skips an allocation\r\n- Fixes a potential crash when booelan arguments in node:fs functions are passed as non-boolean arguments",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 371,
        "deletions": 440,
        "changed_files": 5,
        "created_at": "2023-06-17T23:32:34Z",
        "closed_at": "2023-06-23T00:05:55Z",
        "merged_at": "2023-06-23T00:05:55Z",
        "body": "- fixes `strings.indexOfAny()`\r\n- fixes OOB array access\r\n\r\nfixes #411 \r\nfixes #2823\r\nfixes #3042\r\nfixes #3380",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-17T19:34:55Z",
        "closed_at": "2023-06-17T21:05:29Z",
        "merged_at": "2023-06-17T21:05:29Z",
        "body": "Currently the types are missing for toBeOdd & toBeEven, but the functions are implemented, this pr implements the missing types for these matchers.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-17T18:34:07Z",
        "closed_at": "2023-06-17T21:05:12Z",
        "merged_at": "2023-06-17T21:05:12Z",
        "body": "All messages sent by the clients are expected to be received by all clients. Without the `publishToSelf` option a message is not sent back to the sender and the benchmark hangs.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-06-17T03:11:09Z",
        "closed_at": "2023-06-17T04:11:57Z",
        "merged_at": "2023-06-17T04:11:57Z",
        "body": "input:\r\n```js\r\n{\r\n  const foo = () => {\r\n    return data;\r\n  }\r\n  const data = 123;\r\n\r\n  foo();\r\n}\r\n```\r\noutput before change:\r\n```js\r\n(() => {\r\n  return data;\r\n})();\r\n```\r\nafter change:\r\n```js\r\n{\r\n  const foo = () => {\r\n    return data;\r\n  }, data = 123;\r\n  foo();\r\n}\r\n```\r\nfixes #3328",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 203,
        "deletions": 49,
        "changed_files": 6,
        "created_at": "2023-06-15T19:58:10Z",
        "closed_at": "2023-06-21T01:57:37Z",
        "merged_at": "2023-06-21T01:57:37Z",
        "body": "Re: DOM testing, this just has the basics. Followup guides for different component libs coming later.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 322,
        "deletions": 268,
        "changed_files": 5,
        "created_at": "2023-06-15T07:08:08Z",
        "closed_at": "2023-06-15T08:18:23Z",
        "merged_at": "2023-06-15T08:18:23Z",
        "body": "This doesn't 100% fix the situation. We still crash when ~tens of thousands of CommonJS modules have been loaded from an ES module, an exception occurs in the top-level, and then garbage collector runs. That is the immediate cause of  #3295, however it is throwing in that case because fs.watch is not implemented and Chokidar needs it. \r\n\r\nTesting this is not easy. \r\n\r\nMy current process is:\r\n- Try to load Elysia (which uses TypeBox which does interesting things with CommonJS)\r\n- Run the bench snippet\r\n- import `discord.js`, `vyme`, and socket-io\r\n- Run the code in #3295 \r\n\r\nCurrently, the latter one throws, hangs, or segfaults but the others succeed.\r\n\r\nThe better fix here I think, which I'll work on next, is splitting up how we load CommonJS into two phases:\r\n\r\n## ESM <> CJS\r\n\r\nThis would look similar to how we do it now.\r\n\r\n## CJS <> CJS\r\n\r\nThis would skip going through the module loader when a CJS module loads another CJS module. This would be slightly faster, but more usefully here, it should be better able to deal with all the garbage collector stuff by not entering/exiting from JavaScript quite so much. From there, we can lazily materialize CommonJS modules into ES module exports when imported/loaded from ESM\r\n\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3970,
        "deletions": 4050,
        "changed_files": 16,
        "created_at": "2023-06-14T23:25:47Z",
        "closed_at": "2023-06-23T05:27:00Z",
        "merged_at": "2023-06-23T05:27:00Z",
        "body": "Adds support for:\r\n\r\n```js\r\nimport { test } from \"bun:test\";\r\n\r\ntest(\"resolves and rejects\", () => {\r\n  expect(Promise.resolve()).resolves.toBeUndefined();\r\n  expect(Promise.reject(new Error()).rejects.toBeInstanceOf(Error);\r\n});\r\n```",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 384,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-06-14T18:48:51Z",
        "closed_at": "2023-06-20T05:39:44Z",
        "merged_at": "2023-06-20T05:39:44Z",
        "body": "*toBeArray*: Determines whether a value is an array.\r\n\r\n- [x] Implement [toBeArray](https://jest-extended.jestcommunity.dev/docs/matchers/array/#tobearray)\r\n    - [x] Function itself\r\n    - [x] Types\r\n    - [x] Tests\r\n<hr>\r\n \r\n *toBeArrayOfSize*: Determinies whether a value is an array with a specific size (length)\r\n- [x] Implement [toBeArrayOfSize](https://jest-extended.jestcommunity.dev/docs/matchers/array/#tobearrayofsize) \r\n    - [x] Function itself\r\n    - [x] Types\r\n    - [x] Tests\r\n    \r\n<hr>    \r\n\r\n*toBeTypeOf*: `expect(1).toBeTypeOf('number')`, same as `expect(typeof 1).toBe('number')`\r\n- [x] Implement [toBeTypeOf](https://vitest.dev/api/expect.html#tobetypeof)\r\n    - [x] Function itself\r\n    - [x] Types\r\n    - [x] Tests",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 102,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-06-14T16:40:23Z",
        "closed_at": "2023-06-15T02:29:37Z",
        "merged_at": "2023-06-15T02:29:37Z",
        "body": "This adds the check into `tls` option (for sockets and Bun.serve) and also fails if no object/argument is passed into `Bun.serve()`",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 23,
        "changed_files": 3,
        "created_at": "2023-06-14T08:54:39Z",
        "closed_at": "2023-06-14T11:01:29Z",
        "merged_at": "2023-06-14T11:01:29Z",
        "body": "This makes `process.argv` and `Bun.argv` return the same thing. Also makes `process.argv` faster because it becomes the value \r\n\r\nThis fixes #3307 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4655,
        "deletions": 3712,
        "changed_files": 25,
        "created_at": "2023-06-14T02:08:54Z",
        "closed_at": "2023-06-21T19:59:57Z",
        "merged_at": "2023-06-21T19:59:56Z",
        "body": "- `expect()` does not throw anymore, and is equivalent to `expect(undefined)`\r\n- implement all of JSMockFunction.prototype\r\n- test test orginization + making it run in jest\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-13T21:00:59Z",
        "closed_at": "2023-06-14T08:48:51Z",
        "merged_at": "2023-06-14T08:48:51Z",
        "body": "Closes #3293\r\n\r\n`Bun.argv` is weird, it's the raw arguments. Not 100% sure if the current behavior is what we even want, but maybe there is some value to being able to access the raw arguments.\r\n\r\nMaybe later we should have a nice api like `Bun.args` which is equivalent of `process.argv.slice(2)`; that's what i assume the main usecase of process.argv is.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 705,
        "deletions": 272,
        "changed_files": 36,
        "created_at": "2023-06-13T12:42:28Z",
        "closed_at": "2023-06-13T16:15:06Z",
        "merged_at": "2023-06-13T16:15:06Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-06-12T23:26:53Z",
        "closed_at": "2023-06-13T12:38:11Z",
        "merged_at": "2023-06-13T12:38:11Z",
        "body": "fixes #53",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 342,
        "deletions": 259,
        "changed_files": 9,
        "created_at": "2023-06-12T21:31:39Z",
        "closed_at": "2023-06-26T18:55:26Z",
        "merged_at": "2023-06-26T18:55:26Z",
        "body": "closes #2073",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-11T15:29:43Z",
        "closed_at": "2023-06-14T10:48:53Z",
        "merged_at": null,
        "body": "update typescript and bun-types version in init command.\r\n\r\n<img width=\"1179\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/39974954/a25cf650-88cb-49ca-968a-d32f35e42917\">\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1438,
        "deletions": 416,
        "changed_files": 34,
        "created_at": "2023-06-11T07:18:15Z",
        "closed_at": "2023-06-11T12:26:38Z",
        "merged_at": "2023-06-11T12:26:38Z",
        "body": "This enables zero-copy sharing of strings between JavaScript/C++ and Zig\r\n\r\nFor now, this is only enabled for module resolution but it fixes https://github.com/oven-sh/bun/issues/1562",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-11T06:14:16Z",
        "closed_at": "2023-06-11T16:26:47Z",
        "merged_at": "2023-06-11T16:26:47Z",
        "body": "* `bun link` only modifies `package.json` when `--save` is passed.\r\n* clang-15 is a separate package from llvm-15.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 56,
        "changed_files": 3,
        "created_at": "2023-06-11T06:03:03Z",
        "closed_at": "2023-06-11T14:10:55Z",
        "merged_at": "2023-06-11T14:10:55Z",
        "body": "When bun encounters a long opt argument which it doesn't understand, it immediately stops parsing all remaining arguments (see src/deps/zig-clap/clap/streaming.zig:96). This leads to some weird behavior:\r\n\r\n1. We currently don't define `--save` as a possible argument to `bun install`. This meant that `bun install --save X` would be incorrectly parsed as `bun install`.\r\n2. On the other hand, `bun install X --save` would be parsed as `bun install X`. But that would be redirected to `bun add` and parsed as `bun add X`, which works fine.\r\n\r\nTo fix this, define `--save` as a possible argument for `bun install`. This in turn requires some refactoring because we used to use the presence of `--save` in the argument parser definition to determine if the subcommand should default to modifying package.json or not. Instead we introduce a Subcommand enum and clean that logic up, along with some similar subcommand-specific logic.\r\n\r\nA future diff may fix the long opt behavior, assuming I'm not missing a good reason for its existence. :)\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/3203",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 10,
        "changed_files": 7,
        "created_at": "2023-06-10T18:12:14Z",
        "closed_at": "2023-06-21T04:35:02Z",
        "merged_at": null,
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 43,
        "changed_files": 3,
        "created_at": "2023-06-10T09:36:58Z",
        "closed_at": "2023-06-10T22:38:10Z",
        "merged_at": "2023-06-10T22:38:10Z",
        "body": "In this benchmark: https://github.com/orogene/orogene/blob/main/BENCHMARKS.md\r\n\r\nUnder \"no lockfile, no cache\", this PR brings us from around 2.7 GB to 1.2 GB of memory\r\n\r\n<details> \r\n\r\n<summary>package.json</summary>\r\n\r\n```json\r\n{\r\n  \"name\": \"floc\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"css\": \"unocss 'src/**/*.tsx'\",\r\n    \"build\": \"npm run css && next build\",\r\n    \"dev\": \"concurrently \\\"next dev\\\" \\\"npm run dev:css\\\"\",\r\n    \"dev:css\": \"npm run css -- --watch\",\r\n    \"postinstall\": \"prisma generate\",\r\n    \"lint\": \"next lint\",\r\n    \"start\": \"next start\",\r\n    \"typecheck\": \"tsc -p .\",\r\n    \"typecheck:watch\": \"npm run typecheck -- --watch\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@iconify-json/ph\": \"^1.1.4\",\r\n    \"@iconify-json/uil\": \"^1.1.4\",\r\n    \"@iconify-json/uim\": \"^1.1.5\",\r\n    \"@iconify-json/uis\": \"^1.1.4\",\r\n    \"@iconify-json/uit\": \"^1.1.4\",\r\n    \"@prisma/client\": \"^4.11.0\",\r\n    \"@react-types/shared\": \"^3.17.0\",\r\n    \"@sindresorhus/is\": \"^5.3.0\",\r\n    \"@tanstack/react-query\": \"^4.24.10\",\r\n    \"@trpc/client\": \"^10.13.2\",\r\n    \"@trpc/next\": \"^10.13.2\",\r\n    \"@trpc/react-query\": \"^10.13.2\",\r\n    \"@trpc/server\": \"^10.13.2\",\r\n    \"@types/lodash-es\": \"^4.17.6\",\r\n    \"@unocss/cli\": \"^0.50.3\",\r\n    \"clsx\": \"^1.2.1\",\r\n    \"concurrently\": \"^7.6.0\",\r\n    \"eslint-plugin-simple-import-sort\": \"^10.0.0\",\r\n    \"eslint-plugin-unused-imports\": \"^2.0.0\",\r\n    \"husky\": \"^8.0.3\",\r\n    \"i18next\": \"^22.4.10\",\r\n    \"i18next-chained-backend\": \"^4.2.0\",\r\n    \"i18next-http-backend\": \"^2.1.1\",\r\n    \"immer\": \"^9.0.19\",\r\n    \"iron-session\": \"^6.3.1\",\r\n    \"lodash-es\": \"^4.17.21\",\r\n    \"masto\": \"^5.10.0\",\r\n    \"next\": \"13.2.3\",\r\n    \"next-i18next\": \"^13.2.0\",\r\n    \"react\": \"18.2.0\",\r\n    \"react-aria\": \"^3.23.0\",\r\n    \"react-dom\": \"18.2.0\",\r\n    \"react-i18next\": \"^12.2.0\",\r\n    \"react-merge-refs\": \"^2.0.1\",\r\n    \"react-stately\": \"^3.21.0\",\r\n    \"react-use\": \"^17.4.0\",\r\n    \"superjson\": \"^1.12.2\",\r\n    \"unocss\": \"^0.50.3\",\r\n    \"zod\": \"^3.20.6\",\r\n    \"zustand\": \"^4.3.5\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@commitlint/cli\": \"^17.4.4\",\r\n    \"@commitlint/config-conventional\": \"^17.4.4\",\r\n    \"@types/node\": \"^18.14.2\",\r\n    \"@types/prettier\": \"^2.7.2\",\r\n    \"@types/react\": \"^18.0.28\",\r\n    \"@types/react-dom\": \"^18.0.11\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^5.54.0\",\r\n    \"@typescript-eslint/parser\": \"^5.54.0\",\r\n    \"@unocss/eslint-config\": \"^0.50.3\",\r\n    \"eslint\": \"^8.35.0\",\r\n    \"eslint-config-next\": \"13.2.3\",\r\n    \"lint-staged\": \"^13.1.2\",\r\n    \"prettier\": \"^2.8.4\",\r\n    \"prisma\": \"^4.11.0\",\r\n    \"typescript\": \"^4.9.5\"\r\n  },\r\n  \"browserslist\": [\r\n    \"defaults and supports es6-module\"\r\n  ],\r\n  \"ct3aMetadata\": {\r\n    \"initVersion\": \"7.4.0\"\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\nCommand:\r\n```js\r\nrm -rf  ~/.bun/install/cache node_modules bun.lockb\r\ngtime -v bun install\r\n```\r\n\r\nWill need to see what the perf impact is, as the memory allocators used here are slower at resizing large amounts of data and I haven't run this on a release build yet.\r\n\r\nThe main differences are:\r\n- Free the package manifest API request bodies\r\n- Free the tarballs we downloaded\r\n- Use a smaller AST node arena (also used by the bundler) and reset it more often\r\n- Use an arena allocator for parsing manifest JSON\r\n\r\nThis PR has no impact on the following scenario:\r\n```bash\r\nrm -rf  ~/.bun/install/cache node_modules\r\ngtime -v bun install\r\n```\r\n\r\nWhich likely means similar changes can be applied to the main thread and have a similar ~2x impact",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-06-10T07:30:56Z",
        "closed_at": "2023-06-10T09:26:48Z",
        "merged_at": "2023-06-10T09:26:48Z",
        "body": "We must call `EVP_MD_CTX_cleanup` because `EVP_MD_CTX` containers pointers inside to allocated memory",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 370,
        "deletions": 3,
        "changed_files": 9,
        "created_at": "2023-06-10T05:56:05Z",
        "closed_at": "2023-07-16T21:50:52Z",
        "merged_at": null,
        "body": "_toSatisfy:_\r\n\r\n`expect(value).toSatisfy(function)`, the function passed to \"toSatisfy\" function is called with the value in expect, so it's almost the same as calling:\r\n\r\n`expect(function(value)).toBeTrue();`\r\nMore about it: https://vitest.dev/api/expect.html#tosatisfy\r\n\r\nWhat I already have done for toSatisfy:\r\n\r\n- [x] Types\r\n- [x] Testing\r\n- [x] Implement toSatisfy itself\r\n\r\n---\r\n\r\n_toIncludeRepeated:_\r\n\r\nMore about it: https://jest-extended.jestcommunity.dev/docs/matchers/string/#toincluderepeatedsubstring-times\r\n\r\nWhat I already have done for toIncludeRepeated:\r\n\r\n- [x] Types\r\n- [x] Testing\r\n- [x] Implement toIncludeRepeated itself\r\n\r\n<sub>_Huge thanks to @inKryption for helping me with toIncludeRepeated() <3_</sub>\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1659,
        "deletions": 117,
        "changed_files": 22,
        "created_at": "2023-06-09T23:19:58Z",
        "closed_at": "2023-06-10T02:26:36Z",
        "merged_at": "2023-06-10T02:26:36Z",
        "body": "This adds `toMatchObject` and asymmetric matchers:\r\n - `expect.anything()`\r\n - `expect.stringContaining()`\r\n - `expect.stringMatching()`\r\n\r\nThe inverse versions, `expect.not.stringContaining()` and `expect.not.stringMatching()` are not implemented yet",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2958,
        "deletions": 1858,
        "changed_files": 26,
        "created_at": "2023-06-09T12:06:15Z",
        "closed_at": "2023-07-13T16:39:43Z",
        "merged_at": "2023-07-13T16:39:43Z",
        "body": "```js\r\nimport { serve } from \"bun\";\r\n\r\nserve({\r\n  fetch(request, server) {\r\n    if (server.upgrade(request)) {\r\n      return;\r\n    }\r\n    return new Response();\r\n  },\r\n  websocket: {\r\n    open(ws) {\r\n      ws.ping();\r\n    },\r\n    ping(ws, data) {\r\n      ws.pong(data);\r\n    },\r\n    pong(ws, data) {\r\n      ws.terminate();\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n# New stuff\r\n* Default `binaryType` in `WebSocket` is now \"nodebuffer\" to match the server **[breaking]**\r\n* `ws.terminate()` - abruptly closes the connection\r\n* `ws.ping(data?)` - sends a ping\r\n* `ws.pong(data?)` - sends a pong\r\n# Bug fixes\r\n* `ws.close(1000, \"non-ascii\")` was not encoded properly\r\n* `hostname` and `pathname` were not encoded properly on WebSocket upgrade\r\n* `idleTimeout` could crash if between `(0, 8]` due to uws limitation",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-09T08:38:24Z",
        "closed_at": "2023-06-14T00:42:30Z",
        "merged_at": "2023-06-14T00:42:30Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 23,
        "changed_files": 5,
        "created_at": "2023-06-09T01:05:43Z",
        "closed_at": "2023-06-09T08:33:23Z",
        "merged_at": "2023-06-09T08:33:23Z",
        "body": "~(cosmetic changes to `src/install/lockfile.zig` for triggering build & test jobs &minus; will revert when PR is ready)~",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 134,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-06-09T00:20:24Z",
        "closed_at": "2023-07-12T20:41:47Z",
        "merged_at": "2023-07-12T20:41:47Z",
        "body": "https://jestjs.io/docs/configuration#bail-number--boolean\r\n\r\nFixes #3044 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1550,
        "deletions": 7,
        "changed_files": 13,
        "created_at": "2023-06-08T23:48:48Z",
        "closed_at": "2023-06-09T23:38:06Z",
        "merged_at": "2023-06-09T23:38:06Z",
        "body": "This implements:\r\n- `expect(fn).toHaveBeenCalled()`\r\n- `expect(fn).toHaveBeenCalledTimes(1)`\r\n\r\n```ts\r\nimport { describe, expect, it, mock } from \"bun:test\";\r\n\r\ndescribe(\"mocks\", () => {\r\n  it(\"are callable\", () => {\r\n    const fn = mock(() => 42);\r\n    expect(fn()).toBe(42);\r\n    expect(fn.mock.calls.length).toBe(1);\r\n    expect(fn.mock.calls[0].length).toBe(0);\r\n    expect(fn).toHaveBeenCalled();\r\n    expect(fn).toHaveBeenCalledTimes(1);\r\n  });\r\n});\r\n\r\n```\r\n\r\nThis leaves `toHaveBeenReturned` & friends to a subsequent PR. \r\n\r\nmockImplementationOnce() doesn't work right yet\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3072,
        "deletions": 27,
        "changed_files": 36,
        "created_at": "2023-06-08T19:52:18Z",
        "closed_at": "2023-06-24T06:24:34Z",
        "merged_at": "2023-06-24T06:24:34Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-08T08:34:06Z",
        "closed_at": "2023-06-09T12:20:37Z",
        "merged_at": "2023-06-09T12:20:37Z",
        "body": "add missing right parenthesis in example code in `HTTP server` section",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 84,
        "changed_files": 1,
        "created_at": "2023-06-07T18:47:26Z",
        "closed_at": "2023-06-07T21:45:15Z",
        "merged_at": "2023-06-07T21:45:15Z",
        "body": "initially was adding fromWeb but i noticed some other issues",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 368,
        "deletions": 150,
        "changed_files": 4,
        "created_at": "2023-06-07T14:42:44Z",
        "closed_at": "2023-06-10T00:30:43Z",
        "merged_at": "2023-06-10T00:30:43Z",
        "body": "- scripts from dependencies did not run during re-installation\r\n- `bun.lockb` now contains data on life cycle scripts\r\n- handle prior lockfile format by reading missing info from every `package.json`   ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 289,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-06-07T13:12:46Z",
        "closed_at": "2023-06-09T15:42:39Z",
        "merged_at": "2023-06-09T15:42:39Z",
        "body": "This will fix https://github.com/oven-sh/bun/issues/2614\r\n\r\nAlso I added some tests for `bun remove` command.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-07T02:25:08Z",
        "closed_at": "2023-06-07T06:48:13Z",
        "merged_at": "2023-06-07T06:48:13Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 75,
        "changed_files": 6,
        "created_at": "2023-06-06T22:00:10Z",
        "closed_at": "2023-06-07T06:44:40Z",
        "merged_at": "2023-06-07T06:44:40Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 120,
        "deletions": 31,
        "changed_files": 6,
        "created_at": "2023-06-06T21:37:44Z",
        "closed_at": "2023-06-07T06:50:43Z",
        "merged_at": "2023-06-07T06:50:43Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-06T06:12:57Z",
        "closed_at": "2023-06-23T14:59:45Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-06T05:36:37Z",
        "closed_at": "2023-06-07T06:51:06Z",
        "merged_at": "2023-06-07T06:51:06Z",
        "body": "lets see what tests fail",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-06-06T05:23:59Z",
        "closed_at": "2023-06-07T06:52:24Z",
        "merged_at": "2023-06-07T06:52:24Z",
        "body": "Not sure if we'll merge this yet\r\n\r\nPreviously, the following returned `null` due to no matching rows:\r\n```js\r\ndb.query(\"SELECT * FROM foo WHERE id > 9999\").values();\r\n// null\r\n```\r\n\r\nAfter this PR, it returns `[]`:\r\n```js\r\ndb.query(\"SELECT * FROM foo WHERE id > 9999\").values();\r\n// []\r\n```\r\n\r\nThis is consistent with `.all()` and what people usually expect for functions that return an array of results - to always return an array and not change between an array and `null`.\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-06-05T22:12:52Z",
        "closed_at": "2023-06-06T00:38:03Z",
        "merged_at": "2023-06-06T00:38:03Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-06-05T18:12:18Z",
        "closed_at": "2023-06-05T20:33:02Z",
        "merged_at": "2023-06-05T20:33:02Z",
        "body": "closes #3212 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-06-04T23:56:02Z",
        "closed_at": "2023-06-05T01:19:42Z",
        "merged_at": "2023-06-05T01:19:42Z",
        "body": "fixes #3199 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1339,
        "deletions": 3,
        "changed_files": 7,
        "created_at": "2023-06-04T09:05:58Z",
        "closed_at": "2023-06-05T01:20:04Z",
        "merged_at": "2023-06-05T01:20:04Z",
        "body": "This adds password hashing and verifying functions to the `Bun` global and import. `Bun.password` runs each task in bun's thread pool and `passwordSync` runs on the same thread.\r\n\r\n`bcrypt` and `argon2` is supported. `argon2` is the default.\r\n\r\n```js\r\nimport {password, passwordSync} from \"bun\";\r\n\r\n// uses argon2\r\nconst hash = await password.hash(\"hello world\");\r\n\r\n// reads the algorithm from the previous hash\r\nconst verify = await password.verify(\"hello world\", hash);\r\nconsole.log(verify); // true\r\n```\r\n\r\n```js\r\nimport {password, passwordSync} from \"bun\";\r\n\r\n// uses bcrypt\r\nconst hash = await password.hash(\"hello world\", \"brypt\");\r\n\r\n// reads the algorithm from the previous hash, but you can specify it as well\r\nconst verify = await password.verify(\"hello world\", hash);\r\nconsole.log(verify); // true\r\n```\r\n\r\ncc @jedisct1, this uses `std.crypto.pwhash.bcrypt` and `std.crypto.pwhash.argon2` from Zig's standard library. Would love if you could look over this PR. There will be a couple unrelated test failures as CI isn't green right now",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-03T22:44:44Z",
        "closed_at": "2023-07-03T12:00:10Z",
        "merged_at": null,
        "body": "https://github.com/emastho/bun-can-run\r\n\r\nI'm actively working on keeping the list fresh, following discord and issues, I'd love to get some eyes on this, so people don't even need to ask if something is working or not\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3800,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-06-03T16:20:11Z",
        "closed_at": "2023-06-03T22:04:20Z",
        "merged_at": "2023-06-03T22:04:20Z",
        "body": "using  `PRISMA_POSTGRES_DATABASE_URL` and `PRISMA_MONGODB_DATABASE_URL` for configuration if not configured test will auto skip with a warning",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-06-03T06:38:43Z",
        "closed_at": "2023-06-03T23:38:34Z",
        "merged_at": "2023-06-03T23:38:34Z",
        "body": "renames the hardcoded modules script to `make esm`, and then documents the fact you need bun to build bun as we do not explicitly state this",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-03T05:35:43Z",
        "closed_at": "2023-06-03T23:38:49Z",
        "merged_at": "2023-06-03T23:38:49Z",
        "body": "Test case from #2918 isolated. This was the underlying issue that caused express to fail",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-03T05:03:11Z",
        "closed_at": "2023-06-05T16:12:22Z",
        "merged_at": null,
        "body": "Have 100 of different workflows for macos and Linux is bad approach. We can make it in two (Mac and Linux) and readable.\r\n\r\nFirst PR: https://github.com/oven-sh/bun/pull/898\r\n\r\nThis is not done, don't close or merge it.\r\n\r\n> Warning\r\n> I can't ly test this, because custom runners but I'll try to do what I can",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 34737,
        "changed_files": 104,
        "created_at": "2023-06-03T02:30:48Z",
        "closed_at": "2023-06-03T04:36:05Z",
        "merged_at": "2023-06-03T04:36:05Z",
        "body": "this separates detect-libc into two files, one per platform and a similar thing for ffi\r\n\r\nalso removes from GitHub the `modules_dev` folder which isn't something I ever intended to commit.\r\n\r\n`make dev` will run `make hardcoded` which is partially needed because the dev version of these files is not committed and it feels better to run it on every build in case you forget to run the other command.\r\n\r\nthis does make it so that you need to have bun installed to build bun, which is fine for most cases but would be an issue if trying to build on other platforms\r\n\r\n\r\nthis also todo's out a failing test",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 17,
        "changed_files": 3,
        "created_at": "2023-06-02T19:11:21Z",
        "closed_at": "2023-06-03T00:56:16Z",
        "merged_at": "2023-06-03T00:56:16Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-06-02T09:24:20Z",
        "closed_at": "2023-06-02T11:01:26Z",
        "merged_at": "2023-06-02T11:01:26Z",
        "body": "This fixes #3161 without changing the module evaluation order (unlike #3173)\r\n\r\nit seems that the WithScope is being collected prematurely.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-06-02T06:24:51Z",
        "closed_at": "2023-06-02T21:22:40Z",
        "merged_at": "2023-06-02T21:22:40Z",
        "body": "Lets see what tests fail",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 46,
        "changed_files": 7,
        "created_at": "2023-06-01T23:25:12Z",
        "closed_at": "2023-06-02T01:04:10Z",
        "merged_at": "2023-06-02T01:04:09Z",
        "body": "This brings us closer to #2083 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 184,
        "changed_files": 7,
        "created_at": "2023-06-01T23:16:16Z",
        "closed_at": "2023-06-02T01:02:41Z",
        "merged_at": "2023-06-02T01:02:41Z",
        "body": "- Fixes a bug with `path.isAbsolute` that can cause a segfault\r\n- Fixes a bug with `path.isAbsolute` where it wouldn't throw an error that Node does throw\r\n- Fixes a bug with `\"proxy\"` in fetch that could cause a segfault when the URL is UTF-16",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 4,
        "changed_files": 10,
        "created_at": "2023-06-01T17:56:54Z",
        "closed_at": "2023-06-01T19:35:27Z",
        "merged_at": "2023-06-01T19:35:27Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-06-01T17:43:40Z",
        "closed_at": "2023-06-15T22:10:26Z",
        "merged_at": null,
        "body": "I kept commands in Makefile because few more releases should be also released to the old repository but we should migrate.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 34,
        "changed_files": 2,
        "created_at": "2023-05-31T23:29:34Z",
        "closed_at": "2023-06-01T01:20:50Z",
        "merged_at": "2023-06-01T01:20:50Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 112,
        "deletions": 40,
        "changed_files": 11,
        "created_at": "2023-05-31T20:34:59Z",
        "closed_at": "2023-06-01T23:48:38Z",
        "merged_at": "2023-06-01T23:48:38Z",
        "body": "**Status** \u2014 hello worlds work, but real applications including the sveltekit demo do not fully work\r\n\r\nThis PR makes progress towards #250 and #600, fixing small random bugs in places to help vite and sveltekit run within bun's runtime:\r\n\r\n- fs: `existsSync(null)` and other invalid paths must not throw\r\n- resolver: `import \"file:///...\"`\r\n- ~~`Path.isAbsoluteString` supports utf16 strings~~\r\n- unrelated, make `Bun.readableStreamToArrayBuffer` sync if possible.\r\n\r\nthis also (temporarily) contains changes from #2913 which I think help out vite\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 109,
        "deletions": 19,
        "changed_files": 3,
        "created_at": "2023-05-31T16:17:37Z",
        "closed_at": "2023-05-31T19:07:52Z",
        "merged_at": "2023-05-31T19:07:52Z",
        "body": "Fix: https://github.com/oven-sh/bun/issues/3126\r\nFix: https://github.com/oven-sh/bun/issues/2338",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 38,
        "changed_files": 4,
        "created_at": "2023-05-31T16:05:02Z",
        "closed_at": "2023-06-01T22:32:48Z",
        "merged_at": null,
        "body": "Like with https://github.com/oven-sh/bun/pull/2628, we should consider removing `discord` command as its unnecessary.\r\nIf you have bun installed, you've probably been to the site and had the option to connect to the discord server directly on the site.\r\n![image](https://github.com/oven-sh/bun/assets/56601352/bbd161e5-bec1-4631-9de6-b1148e69b2ff)\r\n\r\nIn my opinion, we shouldn't add such subcommands to the CLI that do \"useless\" things. Better to do some other command that return also web, discord and all other medias. This is just my opinion, I would be happy if more of us would vote on this change.\r\n\r\nAt this stage of bun this is not a big change and it is a breaking change but I think it will affect minimum people/projects or even nobody. We need bun to get to some stage before 1.0 where making breaking changes will then be possible, but not as easily as we can (can't) afford to do now.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 951,
        "deletions": 93,
        "changed_files": 32,
        "created_at": "2023-05-31T07:48:53Z",
        "closed_at": "2023-06-01T00:20:30Z",
        "merged_at": "2023-06-01T00:20:30Z",
        "body": "TODO: benchmark\r\n\r\nThis enables sendfile() for file uploads",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 406,
        "deletions": 50,
        "changed_files": 6,
        "created_at": "2023-05-31T05:10:45Z",
        "closed_at": "2023-05-31T07:44:00Z",
        "merged_at": "2023-05-31T07:44:00Z",
        "body": "This fixes #2264 and implements a non-streaming, unoptimized version of file upload support in `fetch()`.\r\n\r\nUpload with `Bun.file`:\r\n```js\r\nconst body = Bun.file(\"img.jpg\");\r\nawait fetch(\"https://example.com\", {method: \"PUT\", body});\r\n```\r\n\r\nUpload multi-part with `FormData`:\r\n\r\n```js\r\nconst body = new FormData();\r\nbody.append(\"image\", Bun.file(\"img.jpg\"));\r\nawait fetch(\"https://example.com\", {method: \"PUT\", body});\r\n```\r\n\r\nThis also fixes a hypothetical crash when many `Blob` are used with a custom `type` property \r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 77,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-05-30T10:39:52Z",
        "closed_at": "2023-08-18T10:24:54Z",
        "merged_at": null,
        "body": "Fixes #1675 \r\n\r\nI also have to mention that it already handles the truncate stuff and the permissions.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 29,
        "changed_files": 4,
        "created_at": "2023-05-29T20:27:43Z",
        "closed_at": "2023-06-02T19:48:19Z",
        "merged_at": "2023-06-02T19:48:19Z",
        "body": "related discussion: https://discord.com/channels/876711213126520882/888839314056839309/1112824893428478115",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 997,
        "deletions": 499,
        "changed_files": 17,
        "created_at": "2023-05-29T04:18:31Z",
        "closed_at": "2023-05-29T18:23:11Z",
        "merged_at": "2023-05-29T18:23:11Z",
        "body": "This introduces native support for CommonJS at runtime in Bun.\r\n\r\nThis code works now:\r\n\r\n```js\r\nexport * as foo from './my-CommonJS-module.cjs';\r\nexport * from './my-CommonJS-module.cjs';\r\n```\r\n\r\nPreviously, CommonJS modules would undergo a transform that missed all the non-default export statements.\r\n\r\n```js\r\nexport default commonJSToESM((module, exports) => { ... sourceCode });\r\n```\r\n\r\nThat caused many bugs.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/2717\r\nFixes https://github.com/oven-sh/bun/issues/2699\r\n\r\nThis also fixes the issue @malonehedges ran into that broke importing `viem` (cc @worm-emoji)\r\n\r\nThis should also fix the issue where Node-RED wouldn't successfully import.\r\n\r\nWe need some more tests to verify that this code doesn't crash. We also need to benchmark ESM vs CJS because this code should in theory have more overhead than ESM. We have 3 writes to a Map. \r\n\r\nCyclical require/import is handled by eagerly writing the exports object to the Map before the code is executed and then overwriting the exports object to the Map at the end of execution. This is similar to what CommonJS does in Node.js, but not precisely the same.\r\n\r\nThe new CommonJS wrapper looks like this\r\n\r\n```js\r\n(function(module, exports, require) {\r\n  // ...code\r\n})(module, exports, require);\r\n```\r\n\r\n`module`, `exports`, and `require` are defined via a `with` scope and the expression is called via `eval`.\r\n\r\nUsing a `with` scope here because it means we can skip the native overhead of defining a function, receiving the JSFunction, calling the JSFunction. It saves a roundtrip through JS<>C++.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 164,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-28T22:07:46Z",
        "closed_at": "2023-05-29T04:02:51Z",
        "merged_at": "2023-05-29T04:02:51Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 30,
        "changed_files": 5,
        "created_at": "2023-05-28T12:37:24Z",
        "closed_at": "2023-05-28T20:20:32Z",
        "merged_at": "2023-05-28T20:20:32Z",
        "body": "fix #3094",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 36,
        "changed_files": 3,
        "created_at": "2023-05-28T04:02:57Z",
        "closed_at": "2023-05-28T06:33:48Z",
        "merged_at": "2023-05-28T06:33:48Z",
        "body": "This fixes a crash that can occur when using streaming files with Bun.file() from the HTTP server due to the operating system sending SIGPIPE. It seems that MSG_NOSIGNAL is not supported with `sendfile()` because it doesn't accept flags. On Linux, there is no way to set a socket option to ignore sigpipe (unlike BSDs). So we must globally ignore SIGPIPE for the entire process.\r\n\r\nOne downside is that spawned subprocesses will now pause the debugger on exit with \"SIGINT\". We handle this in launch.json by ignoring the SIGINT flag as part of the commands we send to LLDB. The question is if ignoring SIGPIPE globally will have any other unwanted side effects, particularly when dealing with pipes after they have disconnected.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 43,
        "changed_files": 4,
        "created_at": "2023-05-28T00:07:22Z",
        "closed_at": "2023-05-28T03:43:09Z",
        "merged_at": "2023-05-28T03:43:09Z",
        "body": "This PR implements process.env.npm_lifecycle_event.\r\n\r\nnpm_lifecycle_event is an environment variable provided by the the script runner runtime during the execution of scripts. When running scripts defined in a project's package.json file using the npm run command, npm_lifecycle_event stores the name of the currently executing npm lifecycle event.\r\n\r\nFor example:\r\n// package.json\r\n```\r\n{\r\n  \"scripts\": {\r\n    \"start:dev\": \"bun a.js\"\r\n  }\r\n}\r\n```\r\n// a.js\r\n`console.log(process.env.npm_lifecycle_event);`\r\n\r\nWhen running a.js using `bun run start:dev` it should output \"start:dev\", in current version of bun it just returns undefined.\r\n\r\nFixes #2972 ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 4916,
        "deletions": 3669,
        "changed_files": 67,
        "created_at": "2023-05-27T02:07:41Z",
        "closed_at": "2023-07-20T00:20:00Z",
        "merged_at": "2023-07-20T00:20:00Z",
        "body": "This implements `AsyncLocalStorage`, and partial support for `AsyncResource` and `EventEmitterAsyncResource`. It also has code to make the [`AsyncContext`](https://github.com/tc39/proposal-async-context#async-context-for-javascript) proposal functional, but I don't think we should expose this yet since it's stage 2 and they want to do some breaking changes there.\r\n\r\nThis PR requires a new patch to JSC, which is available on the [`async` branch](https://github.com/oven-sh/WebKit/tree/async) in our WebKit fork.\r\n\r\nThe runtime overhead is extremely minimal (TODO: get an exact benchmark)",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-26T20:24:20Z",
        "closed_at": "2023-05-26T22:07:04Z",
        "merged_at": "2023-05-26T22:07:04Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 279,
        "deletions": 62,
        "changed_files": 14,
        "created_at": "2023-05-26T11:14:59Z",
        "closed_at": "2023-05-26T23:28:10Z",
        "merged_at": "2023-05-26T23:28:10Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 645,
        "deletions": 364,
        "changed_files": 28,
        "created_at": "2023-05-26T04:32:45Z",
        "closed_at": "2023-05-26T10:32:29Z",
        "merged_at": "2023-05-26T10:32:29Z",
        "body": "This also fixes an extra quote in error messages",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-26T00:54:29Z",
        "closed_at": "2023-05-26T04:39:02Z",
        "merged_at": "2023-05-26T04:39:02Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 886,
        "deletions": 2,
        "changed_files": 8,
        "created_at": "2023-05-25T22:45:05Z",
        "closed_at": "2023-06-18T03:54:51Z",
        "merged_at": "2023-06-18T03:54:51Z",
        "body": "Supported features:\r\n- [x] retry, id, data, event fields\r\n- [x] chunked, content-length or no size hint\r\n- [x] auto retry\r\n- [x] HTTP / 1.1\r\n- [x] TLS support\r\n\r\nFuture features that we need to add on the future:\r\n- [ ] decompression with gzip/deflate\r\n- [ ] HTTP / 2.0\r\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 3464,
        "deletions": 804,
        "changed_files": 25,
        "created_at": "2023-05-25T21:29:32Z",
        "closed_at": "2023-06-01T06:12:04Z",
        "merged_at": "2023-06-01T06:12:04Z",
        "body": "## Changelog\r\n\r\nc09fcb2380ba5d4958341daceb7e2e6a44e870da The skip icon is now `\u00bb` instead of `-` (it's nicer).\r\n\r\n<img width=\"331\" alt=\"Screen_Shot_2023-05-25_at_11 21 05_AM\" src=\"https://github.com/oven-sh/bun/assets/3238291/893eeb50-ff59-4686-8d63-0594774e54ac\">\r\n\r\n---\r\n\r\n1d7b76b2fb2a1c683eb0ae93aa66af37beddea85 The title of each test file is now its path instead of its filename.\r\n\r\n| Before | After |\r\n| - | - |\r\n| <img width=\"324\" alt=\"Screen Shot 2023-05-25 at 2 23 37 PM\" src=\"https://github.com/oven-sh/bun/assets/3238291/f904eb94-36b0-4afe-bc2a-f84b1142ce90\"> | <img width=\"324\" alt=\"Screen Shot 2023-05-25 at 2 20 16 PM\" src=\"https://github.com/oven-sh/bun/assets/3238291/54b9544d-b9c4-4562-a927-03836eb72d2e\"> |\r\n\r\n---\r\n\r\n4926e6a8dc617c04a751f9e2bc7adafc6614614e When `bun test` is run in Github Actions, logs are grouped by test file using [workflow commands](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines). Detection is done by checking that the `GITHUB_ACTIONS` environment variable is set to `true`.\r\n\r\nhttps://github.com/oven-sh/bun/assets/3238291/b0f84105-44e2-46ec-99bf-4f615f478f95\r\n\r\n---\r\n\r\nd1c658e0be8e974b434edb403f6e9ab92ab3d251 When an error occurs in a test, an annotation is emitted.\r\n\r\nhttps://github.com/oven-sh/bun/assets/3238291/6ef956c9-2c82-4b28-860b-cce305799f35\r\n\r\n\r\n\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 161,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-05-25T13:56:31Z",
        "closed_at": "2023-05-26T04:58:30Z",
        "merged_at": "2023-05-26T04:58:30Z",
        "body": "- causes intermittent `bun install` failures on `bun-types`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-25T09:13:22Z",
        "closed_at": "2023-05-25T17:14:30Z",
        "merged_at": "2023-05-25T17:14:30Z",
        "body": "Fix serialize example.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-05-25T08:00:12Z",
        "closed_at": "2023-05-26T05:04:07Z",
        "merged_at": "2023-05-26T05:04:07Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 261,
        "deletions": 9,
        "changed_files": 7,
        "created_at": "2023-05-25T01:59:50Z",
        "closed_at": "2023-05-27T02:24:20Z",
        "merged_at": "2023-05-27T02:24:20Z",
        "body": "## [`toBeEmpty()`](https://jest-extended.jestcommunity.dev/docs/matchers/toBeEmpty)\r\n\r\n```js\r\n  describe(\"toBeEmpty()\", () => {\r\n    const values = [\r\n      \"\",\r\n      [],\r\n      {},\r\n      new Set(),\r\n      new Map(),\r\n      new String(),\r\n      new Array(),\r\n      new Uint8Array(),\r\n      new Object(),\r\n      Buffer.from(\"\"),\r\n    ];\r\n    for (const value of values) {\r\n      test(label(value), () => {\r\n        expect(value).toBeEmpty();\r\n      });\r\n    }\r\n  });\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 160,
        "deletions": 51,
        "changed_files": 4,
        "created_at": "2023-05-25T01:21:37Z",
        "closed_at": "2023-05-25T02:37:57Z",
        "merged_at": "2023-05-25T02:37:57Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 200,
        "deletions": 123,
        "changed_files": 7,
        "created_at": "2023-05-24T23:08:58Z",
        "closed_at": "2023-05-25T01:33:29Z",
        "merged_at": "2023-05-25T01:33:29Z",
        "body": "fixes #3050 #3028 #2308 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 98,
        "deletions": 36,
        "changed_files": 4,
        "created_at": "2023-05-24T18:41:03Z",
        "closed_at": "2023-06-02T21:24:16Z",
        "merged_at": "2023-06-02T21:24:16Z",
        "body": "## Changes\r\n- [`NO_COLOR`](https://no-color.org/) now is checked\r\n- [`FORCE_COLOR`](https://github.com/nodejs/node/pull/37477) now matches the same logic as Node.js\r\n- `DISABLE_BUN_ANALYTICS` was removed and replaced with a more standard [`DO_NOT_TRACK`](https://do-not-track.dev/)\r\n- Change the docs to show a table of supported environment variables that Bun checks (note: this is still missing a lot of things, but will need to be updated in another PR)\r\n\r\n## Notes\r\n- We cannot properly test when `NO_COLOR` is not defined, since we would need to fake a TTY, and because `FORCE_COLOR` will always override `NO_COLOR`. Those tests are marked as `todo`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-05-24T17:22:02Z",
        "closed_at": "2023-05-24T23:36:20Z",
        "merged_at": "2023-05-24T23:36:20Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 375,
        "deletions": 374,
        "changed_files": 33,
        "created_at": "2023-05-24T17:16:44Z",
        "closed_at": "2023-06-01T21:37:36Z",
        "merged_at": "2023-06-01T21:37:36Z",
        "body": "clear to merge if tests pass",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-05-24T15:10:09Z",
        "closed_at": "2023-05-25T01:52:14Z",
        "merged_at": "2023-05-25T01:52:14Z",
        "body": "fix: https://github.com/oven-sh/bun/issues/2711",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-05-24T12:04:14Z",
        "closed_at": "2023-05-24T15:33:18Z",
        "merged_at": "2023-05-24T15:33:18Z",
        "body": "- avoid intermittent failures due to network latencies",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 187,
        "deletions": 1,
        "changed_files": 9,
        "created_at": "2023-05-24T06:12:40Z",
        "closed_at": "2023-05-24T19:01:59Z",
        "merged_at": "2023-05-24T19:01:59Z",
        "body": "In this implementation of `require.cache`, `delete require.cache[id]` also deletes the ESM entry.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/1530\r\nTowards https://github.com/oven-sh/bun/issues/3043",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-05-24T00:33:56Z",
        "closed_at": "2023-05-24T19:02:33Z",
        "merged_at": "2023-05-24T19:02:33Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-05-23T23:48:45Z",
        "closed_at": "2023-05-24T05:33:32Z",
        "merged_at": "2023-05-24T05:33:32Z",
        "body": "You can now change the default per-test timeout in `bun test` with the `--timeout` flag.\r\n\r\n```sh\r\nbun test --timeout 10\r\n```\r\n```\r\nTimeout: test \"test\" timed out after 10ms\r\n\u2717 test [18.24ms]\r\n```\r\n\r\nHowever, this does not change the timeout when `test(fn, timeout)` is used, such as:\r\n```ts\r\nimport { test } from \"bun:test\";\r\nimport { sleep } from \"bun\";\r\n\r\ntest(\"test\", async () => {\r\n  await sleep(10);\r\n}, 5);\r\n``` ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 390,
        "deletions": 73,
        "changed_files": 12,
        "created_at": "2023-05-23T22:33:56Z",
        "closed_at": "2023-05-25T01:52:51Z",
        "merged_at": "2023-05-25T01:52:51Z",
        "body": "This also reintroduces accidentally removed process.env.NODE_ENV inlining by default in v0.6\r\n\r\n```js\r\nimport { test } from \"bun:test\";\r\n\r\ntest(\"load .env\", () => {\r\n  console.log((process.env.NODE_ENV = \"production\") === process.env.NODE_ENV);\r\n});\r\n```\r\n\r\nThat means the following will log `false`.\r\n\r\nWhile `process.env.NODE_ENV` is updated at runtime to `\"production\"`, at build time, `process.env.NODE_ENV` when not being assigned or deleted is inlined into the string literal `\"test\"`. This can be changed by explicitly passing the `NODE_ENV` variable. ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 49064,
        "deletions": 1298,
        "changed_files": 250,
        "created_at": "2023-05-23T21:45:06Z",
        "closed_at": "2023-06-02T01:16:47Z",
        "merged_at": "2023-06-02T01:16:47Z",
        "body": "Closes #2351 \r\n\r\n## Hardcoded Modules\r\n\r\nAll of our `.exports.js` files have been moved to `src/js/`, sorted into three folders:\r\n\r\n- `./node` contains all `node:*` modules\r\n- `./bun` contains all `bun:*` modules\r\n- `./thirdparty` contains npm modules we replace like `ws`\r\n\r\nThe naming convention here is to take the import name and replace `/` with `.`, like `fs.promises.js` and `child_process.js`. We can also use TypeScript now.\r\n\r\nWhenever these files are changed, you will need to run `make hardcoded`. CI is unable to run `bun` right now, so you need to make sure you run and commit new changes. After rebuilding, you should be able to run `bun-debug` without rebuilding and changes will be present (excluding `fs/promises` and `bun:ffi`)\r\n\r\nFor doing different things based on the platform/arch, you can directly use `process.platform`:\r\n```ts\r\nexport const suffix =\r\n  process.platform === \"darwin\"\r\n    ? \"dylib\"\r\n    : process.platform === \"linux\"\r\n    ? \"so\"\r\n    : process.platform === \"win32\"\r\n    ? \"dll\"\r\n    : $bundleError(\"Unsupported platform\");\r\n```\r\nWhich will compile and minify to include the single string. If `$bundleError` is caught in the build, it fails with the message at bundle time (like zig `@compileError`)\r\n\r\nFor not implemented modules, we can use `throwNotImplemented` which is defined in `shared.ts`\r\n\r\n```ts\r\nexport function doSomething() {\r\n  throwNotImplemented(\"doSomething\", 1234);\r\n  // \"NotImplementedError: doSomething is not yet implemented in Bun. Track the status & thumbs up the issue: https://github.com/oven-sh/bun/issues/1234\"\r\n}\r\n```\r\n\r\nFor now that helper function and any others get bundled into each module that uses it, but if we have enough of these, later it may make sense to have a secret bun global or internal module that deduplicates this code.\r\n\r\n## Builtins\r\n\r\nBuiltins are moved into `src/js/builtins`, and otherwise function the same as before.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 13,
        "changed_files": 5,
        "created_at": "2023-05-23T20:58:59Z",
        "closed_at": "2023-06-15T05:43:31Z",
        "merged_at": null,
        "body": "This changes our Bun tests to use the same runner as the ecosystem tests. It produces a richer output that contains links to individual tests and a table which summarizes all the test statuses. Eventually, some of this functionality can be built-in to Bun, but for now, it is being produced with a script.\r\n\r\nThis can be tested locally by running:\r\n```sh\r\ncd packages/bun-internal-test\r\nGITHUB_STEP_SUMMARY=summary.txt GITHUB_OUTPUT=output.txt bun run test\r\n```\r\n\r\nBelow is an example output from a test run:\r\n<h2>Summary</h2><table><tr><th>Passed</th><th>Failed</th><th>Skipped</th><th>Todo</th><th>Duration</th></tr><tr><td>\u2705 4282</td><td>\u274c 169</td><td>\u23ed\ufe0f 340</td><td>\ud83d\udcdd 0</td><td>1m 16s</td></tr></table><table><tr><th>File</th><th>Status</th><th>Passed</th><th>Failed</th><th>Skipped</th><th>Todo</th><th>Duration</th></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts\">api.test.ts</a></td><td>\u274c</td><td>7</td><td>7</td><td></td><td></td><td>90 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_browser.test.ts\">bundler_browser.test.ts</a></td><td>\u274c</td><td>5</td><td>1</td><td>1</td><td></td><td>651 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_cjs2esm.test.ts\">bundler_cjs2esm.test.ts</a></td><td>\u274c</td><td>11</td><td>1</td><td></td><td></td><td>440 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_edgecase.test.ts\">bundler_edgecase.test.ts</a></td><td>\u274c</td><td>26</td><td>17</td><td>4</td><td></td><td>974 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_jsx.test.ts\">bundler_jsx.test.ts</a></td><td>\u274c</td><td>3</td><td>10</td><td>2</td><td></td><td>357 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_minify.test.ts\">bundler_minify.test.ts</a></td><td>\u274c</td><td>7</td><td>1</td><td>1</td><td></td><td>293 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_naming.test.ts\">bundler_naming.test.ts</a></td><td>\u274c</td><td>8</td><td>2</td><td>3</td><td></td><td>439 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_npm.test.ts\">bundler_npm.test.ts</a></td><td>\u274c</td><td>2</td><td>1</td><td></td><td></td><td>571 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_plugin.test.ts\">bundler_plugin.test.ts</a></td><td>\u274c</td><td>14</td><td>8</td><td>5</td><td></td><td>540 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_regressions.test.ts\">bundler_regressions.test.ts</a></td><td>\u274c</td><td>4</td><td>1</td><td></td><td></td><td>196 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/dce.test.ts\">dce.test.ts</a></td><td>\u274c</td><td>26</td><td>24</td><td>37</td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/default.test.ts\">default.test.ts</a></td><td>\u274c</td><td>99</td><td>6</td><td>113</td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/extra.test.ts\">extra.test.ts</a></td><td>\u274c</td><td>211</td><td>8</td><td>16</td><td></td><td>3s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/importstar.test.ts\">importstar.test.ts</a></td><td>\u274c</td><td>57</td><td>2</td><td>17</td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/lower.test.ts\">lower.test.ts</a></td><td>\u274c</td><td>1</td><td>1</td><td></td><td></td><td>85 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/packagejson.test.ts\">packagejson.test.ts</a></td><td>\u274c</td><td>60</td><td>1</td><td>21</td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/splitting.test.ts\">splitting.test.ts</a></td><td>\u274c</td><td>20</td><td>4</td><td></td><td></td><td>997 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/tsconfig.test.ts\">tsconfig.test.ts</a></td><td>\u274c</td><td>4</td><td>2</td><td>1</td><td></td><td>280 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bun-install.test.ts\">bun&#45;install.test.ts</a></td><td>\u274c</td><td>47</td><td>1</td><td></td><td></td><td></td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/run/run-cjs.test.ts\">run&#45;cjs.test.ts</a></td><td>\u274c</td><td>2</td><td>1</td><td></td><td></td><td>70 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/jsc/bun-jsc.test.ts\">bun&#45;jsc.test.ts</a></td><td>\u274c</td><td>22</td><td>1</td><td></td><td></td><td>37 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/plugin/plugins.test.ts\">plugins.test.ts</a></td><td>\u274c</td><td>13</td><td>2</td><td></td><td></td><td>161 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/png/test-png-import.test.js\">test&#45;png&#45;import.test.js</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>12 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/resolve.test.js\">resolve.test.js</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>35 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/spawn/spawn.test.ts\">spawn.test.ts</a></td><td>\u274c</td><td>22</td><td>1</td><td>4</td><td></td><td>604 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/stream/direct-readable-stream.test.tsx\">direct&#45;readable&#45;stream.test.tsx</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>63 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/preload-test.test.js\">preload&#45;test.test.js</a></td><td>\u274c</td><td></td><td>2</td><td></td><td></td><td>91 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/preload-test.test.js\">preload&#45;test.test.js</a></td><td>\u274c</td><td>2</td><td>3</td><td></td><td></td><td>105 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/bun-snapshots.test.ts\">bun&#45;snapshots.test.ts</a></td><td>\u274c</td><td>40</td><td>8</td><td>25</td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/snapshots/more-snapshots/different-directory.test.ts\">different&#45;directory.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/snapshots/more.test.ts\">more.test.ts</a></td><td>\u274c</td><td>4</td><td>1</td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/test-test.test.ts\">test&#45;test.test.ts</a></td><td>\u274c</td><td>51</td><td>5</td><td>14</td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/text-loader.test.ts\">text&#45;loader.test.ts</a></td><td>\u274c</td><td>10</td><td>3</td><td>6</td><td></td><td>431 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/crypto/webcrypto.test.ts\">webcrypto.test.ts</a></td><td>\u274c</td><td>229</td><td>1</td><td></td><td></td><td>198 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/blob.test.ts\">blob.test.ts</a></td><td>\u274c</td><td>2</td><td>1</td><td></td><td></td><td>13 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/buffer.test.js\">buffer.test.js</a></td><td>\u274c</td><td>127</td><td>1</td><td></td><td></td><td>363 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/http/node-http.test.ts\">node&#45;http.test.ts</a></td><td>\u274c</td><td>13</td><td>1</td><td></td><td></td><td></td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/process/process.test.js\">process.test.js</a></td><td>\u274c</td><td>15</td><td>1</td><td>1</td><td></td><td>50 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/napi_create_external/napi-create-external.test.ts\">napi&#45;create&#45;external.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>29 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-close.test.ts\">socket.io&#45;close.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>12 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-connection-state-recovery.test.ts\">socket.io&#45;connection&#45;state&#45;recovery.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>13 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-handshake.test.ts\">socket.io&#45;handshake.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>10 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-messaging-many.test.ts\">socket.io&#45;messaging&#45;many.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-middleware.test.ts\">socket.io&#45;middleware.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>13 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-namespaces.test.ts\">socket.io&#45;namespaces.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-server-attachment.test.ts\">socket.io&#45;server&#45;attachment.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>23 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-socket-middleware.test.ts\">socket.io&#45;socket&#45;middleware.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>14 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-socket-timeout.test.ts\">socket.io&#45;socket&#45;timeout.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>14 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io-utility-methods.test.ts\">socket.io&#45;utility&#45;methods.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/socket.io/socket.io.test.ts\">socket.io.test.ts</a></td><td>\u274c</td><td></td><td>1</td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/abort/abort.test.ts\">abort.test.ts</a></td><td>\u274c</td><td>1</td><td>1</td><td></td><td></td><td>701 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/body-stream.test.ts\">body&#45;stream.test.ts</a></td><td>\u274c</td><td>381</td><td>1</td><td></td><td></td><td></td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/fetch-leak.test.js\">fetch&#45;leak.test.js</a></td><td>\u274c</td><td>1</td><td>1</td><td></td><td></td><td>82 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/transpiler/transpiler.test.js\">transpiler.test.js</a></td><td>\u274c</td><td>59</td><td>20</td><td>1</td><td></td><td>45 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_compile.test.ts\">bundler_compile.test.ts</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_string.test.ts\">bundler_string.test.ts</a></td><td>\u2705</td><td>54</td><td></td><td></td><td></td><td>954 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/cli.test.ts\">cli.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>33 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/css.test.ts\">css.test.ts</a></td><td>\u2705</td><td></td><td></td><td></td><td></td><td>77 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/esbuild/importstar_ts.test.ts\">importstar_ts.test.ts</a></td><td>\u2705</td><td>24</td><td></td><td></td><td></td><td>453 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bad-workspace.test.ts\">bad&#45;workspace.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>50 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bun-add.test.ts\">bun&#45;add.test.ts</a></td><td>\u2705</td><td>19</td><td></td><td></td><td></td><td>16s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bun-install-pathname-trailing-slash.test.ts\">bun&#45;install&#45;pathname&#45;trailing&#45;slash.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>64 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bun-link.test.ts\">bun&#45;link.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>141 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bun-pm.test.ts\">bun&#45;pm.test.ts</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>139 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/install/bunx.test.ts\">bunx.test.ts</a></td><td>\u2705</td><td>7</td><td></td><td></td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/cli/run/log-test.test.ts\">log&#45;test.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>55 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/console/console-iterator.test.js\">console&#45;iterator.test.js</a></td><td>\u2705</td><td>14</td><td></td><td></td><td></td><td>192 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/dns/resolve-dns.test.ts\">resolve&#45;dns.test.ts</a></td><td>\u2705</td><td>9</td><td></td><td>3</td><td></td><td>50 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/ffi/ffi.test.js\">ffi.test.js</a></td><td>\u2705</td><td>3</td><td></td><td>1</td><td></td><td>25 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/http/bun-server.test.ts\">bun&#45;server.test.ts</a></td><td>\u2705</td><td>7</td><td></td><td></td><td></td><td>49 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/http/proxy.test.js\">proxy.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>39 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/http/serve.test.ts\">serve.test.ts</a></td><td>\u2705</td><td>138</td><td></td><td></td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/io/bun-write.test.js\">bun&#45;write.test.js</a></td><td>\u2705</td><td>20</td><td></td><td>1</td><td></td><td>157 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/jsc/shadow.test.js\">shadow.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>12 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/net/socket.test.ts\">socket.test.ts</a></td><td>\u2705</td><td>7</td><td></td><td></td><td></td><td>85 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/net/tcp-server.test.ts\">tcp&#45;server.test.ts</a></td><td>\u2705</td><td>6</td><td></td><td></td><td></td><td>58 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/import-meta.test.js\">import&#45;meta.test.js</a></td><td>\u2705</td><td>20</td><td></td><td></td><td></td><td>30 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/resolve-error.test.ts\">resolve&#45;error.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/resolve-test.js\">resolve&#45;test.js</a></td><td>\u2705</td><td>6</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/resolve/toml/toml.test.js\">toml.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/spawn/bun-spawn-test.js\">bun&#45;spawn&#45;test.js</a></td><td>\u2705</td><td></td><td></td><td></td><td></td><td>28 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/spawn/exit-code.test.ts\">exit&#45;code.test.ts</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>75 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/spawn/spawn-streaming-stdin.test.ts\">spawn&#45;streaming&#45;stdin.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>4s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/spawn/spawn-streaming-stdout.test.ts\">spawn&#45;streaming&#45;stdout.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>961 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/sqlite/sql-raw.test.js\">sql&#45;raw.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>19 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/sqlite/sqlite.test.js\">sqlite.test.js</a></td><td>\u2705</td><td>12</td><td></td><td></td><td></td><td>53 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/bigint.test.js\">bigint.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>17 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/bun-test.test.ts\">bun&#45;test.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>23 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/expect.test.ts\">expect.test.ts</a></td><td>\u2705</td><td>32</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/jest-hooks.test.ts\">jest&#45;hooks.test.ts</a></td><td>\u2705</td><td>13</td><td></td><td></td><td></td><td>28 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/nested-describes.test.ts\">nested&#45;describes.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>17 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/bun-snapshots.test.ts\">bun&#45;snapshots.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/existing-snapshots.test.ts\">existing&#45;snapshots.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>11 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/new-snapshot.test.ts\">new&#45;snapshot.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>41 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/snapshots/moremore.test.ts\">moremore.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>11 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/snapshots/snapshot.test.ts\">snapshot.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>19 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/snapshot-tests/snapshots/snapshot.test.ts\">snapshot.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>155 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/test-auto-import-jest-globals.test.js\">test&#45;auto&#45;import&#45;jest&#45;globals.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>19 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/test/test-fixture-preload-global-lifecycle-hook-test.js\">test&#45;fixture&#45;preload&#45;global&#45;lifecycle&#45;hook&#45;test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/arraybuffersink.test.ts\">arraybuffersink.test.ts</a></td><td>\u2705</td><td>6</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/concat.test.js\">concat.test.js</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>11 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/escapeHTML.test.js\">escapeHTML.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/filesink.test.ts\">filesink.test.ts</a></td><td>\u2705</td><td>36</td><td></td><td></td><td></td><td>40 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/filesystem_router.test.ts\">filesystem_router.test.ts</a></td><td>\u2705</td><td>13</td><td></td><td></td><td></td><td>54 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/fileUrl.test.js\">fileUrl.test.js</a></td><td>\u2705</td><td>16</td><td></td><td></td><td></td><td>21 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/hash.test.js\">hash.test.js</a></td><td>\u2705</td><td>8</td><td></td><td></td><td></td><td>34 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/index-of-line.test.ts\">index&#45;of&#45;line.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>18 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/inspect.test.js\">inspect.test.js</a></td><td>\u2705</td><td>41</td><td></td><td></td><td></td><td>59 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/mmap.test.js\">mmap.test.js</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>70 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/peek.test.ts\">peek.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>18 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/reportError.test.js\">reportError.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/sleepSync.test.ts\">sleepSync.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>30 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/text-loader.test.ts\">text&#45;loader.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>72 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/unsafe.test.js\">unsafe.test.js</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>27 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/util/which.test.ts\">which.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>34 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/wasm/wasi.test.js\">wasi.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>41 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/bun/websocket/websocket-server.test.ts\">websocket&#45;server.test.ts</a></td><td>\u2705</td><td>26</td><td></td><td></td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/abort/abort-controller.test.ts\">abort&#45;controller.test.ts</a></td><td>\u2705</td><td>6</td><td></td><td></td><td></td><td>30 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/crypto/random.test.ts\">random.test.ts</a></td><td>\u2705</td><td>10</td><td></td><td></td><td></td><td>35 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/crypto/webcrypto.test.ts\">webcrypto.test.ts</a></td><td>\u2705</td><td>37</td><td></td><td>3</td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/encoding/encoding.test.ts\">encoding.test.ts</a></td><td>\u2705</td><td>21</td><td></td><td>2</td><td></td><td>32 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/event/custom-event.test.ts\">custom&#45;event.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>22 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/event/custom-event.test.ts\">custom&#45;event.test.ts</a></td><td>\u2705</td><td>8</td><td></td><td>2</td><td></td><td>23 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/event/event-target.test.ts\">event&#45;target.test.ts</a></td><td>\u2705</td><td>14</td><td></td><td>1</td><td></td><td>26 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/blob.test.ts\">blob.test.ts</a></td><td>\u2705</td><td>9</td><td></td><td>1</td><td></td><td>28 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/body.test.ts\">body.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td>2</td><td></td><td>116 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/body.test.ts\">body.test.ts</a></td><td>\u2705</td><td>306</td><td></td><td>8</td><td></td><td>196 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/headers.test.ts\">headers.test.ts</a></td><td>\u2705</td><td>26</td><td></td><td>1</td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/headers.test.ts\">headers.test.ts</a></td><td>\u2705</td><td>60</td><td></td><td>1</td><td></td><td>18 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/request.test.ts\">request.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td>2</td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/fetch/response.test.ts\">response.test.ts</a></td><td>\u2705</td><td>8</td><td></td><td>1</td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/url/url.test.ts\">url.test.ts</a></td><td>\u2705</td><td>30</td><td></td><td>4</td><td></td><td>32 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/url/url.test.ts\">url.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td>1</td><td></td><td>17 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/url/urlsearchparams.test.ts\">urlsearchparams.test.ts</a></td><td>\u2705</td><td>32</td><td></td><td></td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/first_party/undici/undici.test.ts\">undici.test.ts</a></td><td>\u2705</td><td>9</td><td></td><td></td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/assert/assert-test.test.ts\">assert&#45;test.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>21 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/child_process/child_process-node.test.js\">child_process&#45;node.test.js</a></td><td>\u2705</td><td>14</td><td></td><td></td><td></td><td>87 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/child_process/child-process-stdio.test.js\">child&#45;process&#45;stdio.test.js</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>156 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/crypto/crypto-scrypt.test.ts\">crypto&#45;scrypt.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>291 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/crypto/node-crypto.test.js\">node&#45;crypto.test.js</a></td><td>\u2705</td><td>14</td><td></td><td></td><td></td><td>72 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/dirname.test.js\">dirname.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/disabled-module.test.js\">disabled&#45;module.test.js</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>21 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/dns/node-dns.test.js\">node&#45;dns.test.js</a></td><td>\u2705</td><td>14</td><td></td><td></td><td></td><td>371 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/events/event-emitter.test.ts\">event&#45;emitter.test.ts</a></td><td>\u2705</td><td>20</td><td></td><td></td><td></td><td>25 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/events/node-builtins.test.js\">node&#45;builtins.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/fs/fs.test.ts\">fs.test.ts</a></td><td>\u2705</td><td>85</td><td></td><td></td><td></td><td>119 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/fs/node-fetch.test.js\">node&#45;fetch.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>27 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/harness.test.js\">harness.test.js</a></td><td>\u2705</td><td></td><td></td><td></td><td></td><td>11 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/module/node-module-module.test.js\">node&#45;module&#45;module.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/net/node-net-server.test.ts\">node&#45;net&#45;server.test.ts</a></td><td>\u2705</td><td>17</td><td></td><td></td><td></td><td>52 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/net/node-net.test.ts\">node&#45;net.test.ts</a></td><td>\u2705</td><td>12</td><td></td><td></td><td></td><td>41 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/os/os.test.js\">os.test.js</a></td><td>\u2705</td><td>21</td><td></td><td></td><td></td><td>39 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/path/path.test.js\">path.test.js</a></td><td>\u2705</td><td>7</td><td></td><td></td><td></td><td>21 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/process/process-args.test.js\">process&#45;args.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>87 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/process/process-nexttick.test.js\">process&#45;nexttick.test.js</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/process/process-stdio.test.ts\">process&#45;stdio.test.ts</a></td><td>\u2705</td><td>8</td><td></td><td></td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/readline/readline_promises.node.test.ts\">readline_promises.node.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>26 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/readline/readline.node.test.ts\">readline.node.test.ts</a></td><td>\u2705</td><td>76</td><td></td><td></td><td></td><td>462 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/stream/bufferlist.test.ts\">bufferlist.test.ts</a></td><td>\u2705</td><td>15</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/stream/node-stream-uint8array.test.ts\">node&#45;stream&#45;uint8array.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/stream/node-stream.test.js\">node&#45;stream.test.js</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>24 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/string_decoder/string-decoder.test.js\">string&#45;decoder.test.js</a></td><td>\u2705</td><td>80</td><td></td><td></td><td></td><td>36 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/stubs.test.js\">stubs.test.js</a></td><td>\u2705</td><td>361</td><td></td><td></td><td></td><td>96 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/timers/node-timers.test.ts\">node&#45;timers.test.ts</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>25 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/tls/node-tls-server.test.ts\">node&#45;tls&#45;server.test.ts</a></td><td>\u2705</td><td>20</td><td></td><td></td><td></td><td>77 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/util/test-util-types.test.js\">test&#45;util&#45;types.test.js</a></td><td>\u2705</td><td>48</td><td></td><td></td><td></td><td>18 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/util/util-promisify.test.js\">util&#45;promisify.test.js</a></td><td>\u2705</td><td>15</td><td></td><td>2</td><td></td><td>29 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/util/util.test.js\">util.test.js</a></td><td>\u2705</td><td>19</td><td></td><td></td><td></td><td>27 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/v8/capture-stack-trace.test.js\">capture&#45;stack&#45;trace.test.js</a></td><td>\u2705</td><td>8</td><td></td><td></td><td></td><td>17 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/vm/vm.test.ts\">vm.test.ts</a></td><td>\u2705</td><td>90</td><td></td><td>26</td><td></td><td>33 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/node/zlib/zlib.test.js\">zlib.test.js</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>46 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/body-parser/express-body-parser-test.test.ts\">express&#45;body&#45;parser&#45;test.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>130 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/esbuild/esbuild-child_process.test.ts\">esbuild&#45;child_process.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>156 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/esbuild/esbuild-child_process.test.ts\">esbuild&#45;child_process.test.ts</a></td><td>\u2705</td><td>23</td><td></td><td></td><td></td><td>250 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/esbuild/esbuild-test.js\">esbuild&#45;test.js</a></td><td>\u2705</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/third_party/svelte/svelte.test.ts\">svelte.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>167 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/console/console-log.test.ts\">console&#45;log.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>62 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/crypto/web-crypto.test.ts\">web&#45;crypto.test.ts</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/encoding/text-decoder.test.js\">text&#45;decoder.test.js</a></td><td>\u2705</td><td>17</td><td></td><td></td><td></td><td>153 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/encoding/text-encoder.test.js\">text&#45;encoder.test.js</a></td><td>\u2705</td><td>13</td><td></td><td></td><td></td><td>377 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/body-mixin-errors.test.ts\">body&#45;mixin&#45;errors.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/fetch_headers.test.js\">fetch_headers.test.js</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>1s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/fetch-gzip.test.ts\">fetch&#45;gzip.test.ts</a></td><td>\u2705</td><td>5</td><td></td><td></td><td></td><td>53 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/fetch/fetch.test.ts\">fetch.test.ts</a></td><td>\u2705</td><td>239</td><td></td><td>3</td><td></td><td>4s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/html/FormData.test.ts\">FormData.test.ts</a></td><td>\u2705</td><td>55</td><td></td><td></td><td></td><td>31 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/streams/streams.test.js\">streams.test.js</a></td><td>\u2705</td><td>34</td><td></td><td></td><td></td><td>218 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/timers/microtask.test.js\">microtask.test.js</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>14 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/timers/performance.test.js\">performance.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>18 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/timers/setImmediate.test.js\">setImmediate.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>13 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/timers/setInterval.test.js\">setInterval.test.js</a></td><td>\u2705</td><td>4</td><td></td><td></td><td></td><td>199 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/timers/setTimeout.test.js\">setTimeout.test.js</a></td><td>\u2705</td><td>11</td><td></td><td>1</td><td></td><td>957 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/util/atob.test.js\">atob.test.js</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/web-globals.test.js\">web&#45;globals.test.js</a></td><td>\u2705</td><td>8</td><td></td><td></td><td></td><td>46 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/web-globals.test.js\">web&#45;globals.test.js</a></td><td>\u2705</td><td>3</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/web/websocket/websocket.test.js\">websocket.test.js</a></td><td>\u2705</td><td>12</td><td></td><td></td><td></td><td>2s</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/workerd/html-rewriter.test.js\">html&#45;rewriter.test.js</a></td><td>\u2705</td><td>10</td><td></td><td></td><td></td><td>30 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/00631.test.ts\">00631.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>90 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/02005.test.ts\">02005.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>19 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/02367.test.ts\">02367.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>15 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/02368.test.ts\">02368.test.ts</a></td><td>\u2705</td><td>2</td><td></td><td></td><td></td><td>16 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/02369.test.ts\">02369.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>20 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/regression/issue/02499.test.ts\">02499.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>597 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/transpiler/decorators.test.ts\">decorators.test.ts</a></td><td>\u2705</td><td>19</td><td></td><td></td><td></td><td>29 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/transpiler/property.test.ts\">property.test.ts</a></td><td>\u2705</td><td>1</td><td></td><td></td><td></td><td>40 ms</td></tr><tr><td><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/js/deno/v8/error.test.ts\">error.test.ts</a></td><td>\u23ed\ufe0f</td><td></td><td></td><td>2</td><td></td><td>21 ms</td></tr></table><h2>Errors</h2><h3><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L75\">bundler/api.test.ts</a></h3><ul><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L75\">Bun.build &gt; Bun.write(BuildArtifact)</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\nReceived: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// bundler/fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// bundler/fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\n</code></pre><pre lang=\"typescript\"><code>70 |     Bun.gc(true);\r\n71 |     const x = await Bun.build({\r\n72 |       entrypoints: [join(import.meta.dir, &quot;./fixtures/trivial/index.js&quot;)],\r\n73 |     });\r\n74 |     await Bun.write(&quot;/tmp/bun&#45;build&#45;test&#45;write.js&quot;, x.outputs[0]);\r\n75 |     expect(readFileSync(&quot;/tmp/bun&#45;build&#45;test&#45;write.js&quot;, &quot;utf&#45;8&quot;)).toMatchSnapshot();\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L100\">Bun.build &gt; outdir &#43; reading out blobs works</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\nReceived: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// bundler/fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// bundler/fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\n</code></pre><pre lang=\"typescript\"><code>100 |     expect(await x.outputs.values().next().value?.text()).toMatchSnapshot();\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L115\">Bun.build &gt; BuildArtifact properties</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: &quot;0b00cce4004e6308&quot;\r\nReceived: &quot;bb43b0d2e78aff8d&quot;\r\n</code></pre><pre lang=\"typescript\"><code>110 |     expect(blob).toBeTruthy();\r\n111 |     expect(blob.type).toBe(&quot;text/javascript;charset=utf&#45;8&quot;);\r\n112 |     expect(blob.size).toBeGreaterThan(1);\r\n113 |     expect(blob.path).toBe(&quot;./index.js&quot;);\r\n114 |     expect(blob.hash).toBeTruthy();\r\n115 |     expect(blob.hash).toMatchSnapshot(&quot;hash&quot;);\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L136\">Bun.build &gt; BuildArtifact properties &#43; entry.naming</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: &quot;0aa19aefb10c4ad2&quot;\r\nReceived: &quot;ce5e7a50e02026c6&quot;\r\n</code></pre><pre lang=\"typescript\"><code>131 |     expect(blob).toBeTruthy();\r\n132 |     expect(blob.type).toBe(&quot;text/javascript;charset=utf&#45;8&quot;);\r\n133 |     expect(blob.size).toBeGreaterThan(1);\r\n134 |     expect(blob.path).toBe(&quot;./hello&quot;);\r\n135 |     expect(blob.hash).toBeTruthy();\r\n136 |     expect(blob.hash).toMatchSnapshot(&quot;hash&quot;);\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L154\">Bun.build &gt; BuildArtifact properties sourcemap</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: &quot;0b00cce4004e6308&quot;\r\nReceived: &quot;bb43b0d2e78aff8d&quot;\r\n</code></pre><pre lang=\"typescript\"><code>149 |     const [blob, map] = x.outputs;\r\n150 |     expect(blob.type).toBe(&quot;text/javascript;charset=utf&#45;8&quot;);\r\n151 |     expect(blob.size).toBeGreaterThan(1);\r\n152 |     expect(blob.path).toBe(&quot;./index.js&quot;);\r\n153 |     expect(blob.hash).toBeTruthy();\r\n154 |     expect(blob.hash).toMatchSnapshot(&quot;hash index.js&quot;);\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L207\">Bun.build &gt; new Response(BuildArtifact) sets content type</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toMatchSnapshot(expected)\r\n\r\nExpected: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\nReceived: \r\n&quot;var __create = Object.create;\r\nvar __descs = Object.getOwnPropertyDescriptors;\r\nvar __defProp = Object.defineProperty;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) =&gt; {\r\n  for (var name in all)\r\n    __defProp(target, name, {\r\n      get: all[name],\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (newValue) =&gt; all[name] = () =&gt; newValue\r\n    });\r\n};\r\nvar __esm = (fn, res) =&gt; () =&gt; (fn &amp;&amp; (res = fn(fn = 0)), res);\r\n\r\n// bundler/fixtures/trivial/fn.js\r\nvar exports_fn = {};\r\n__export(exports_fn, {\r\n  fn: () =&gt; {\r\n    {\r\n      return fn;\r\n    }\r\n  }\r\n});\r\nfunction fn(a) {\r\n  return a &#43; 42;\r\n}\r\nvar init_fn = __esm(() =&gt; {\r\n});\r\n\r\n// bundler/fixtures/trivial/index.js\r\nvar NS = Promise.resolve().then(() =&gt; (init_fn(), exports_fn));\r\nNS.then(({ fn: fn2 }) =&gt; {\r\n  console.log(fn2(42));\r\n});\r\n&quot;\r\n\r\n</code></pre><pre lang=\"typescript\"><code>202 |     const x = await Bun.build({\r\n203 |       entrypoints: [join(import.meta.dir, &quot;./fixtures/trivial/index.js&quot;)],\r\n204 |     });\r\n205 |     const response = new Response(x.outputs[0]);\r\n206 |     expect(response.headers.get(&quot;content&#45;type&quot;)).toBe(&quot;text/javascript;charset=utf&#45;8&quot;);\r\n207 |     expect(await response.text()).toMatchSnapshot(&quot;response text&quot;);\r\n        ^</code></pre></li><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/api.test.ts#L215\">Bun.build &gt; new Response(BuildArtifact) sets etag</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toBeTruthy()\r\n\r\nReceived: null\r\n</code></pre><pre lang=\"typescript\"><code>210 |   test(&quot;new Response(BuildArtifact) sets etag&quot;, async () =&gt; {\r\n211 |     const x = await Bun.build({\r\n212 |       entrypoints: [join(import.meta.dir, &quot;./fixtures/trivial/index.js&quot;)],\r\n213 |     });\r\n214 |     const response = new Response(x.outputs[0]);\r\n215 |     expect(response.headers.get(&quot;etag&quot;)).toBeTruthy();\r\n        ^</code></pre></li></ul><h3><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_browser.test.ts#L197\">bundler/bundler_browser.test.ts</a></h3><ul><li><a href=\"https://github.com/oven-sh/bun/tree/a5acf7bfa0333fc5cb298df2b3ea09eaa56075ac/test/bundler/bundler_browser.test.ts#L197\">bundler &gt; browser/NodePolyfillExternal</a><br/><br/><pre lang=\"diff\"><code>Error: expect(received).toStrictEqual(expected)\r\n\r\n&#43; []\r\n&#45; [\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:assert&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:buffer&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:child_process&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:cluster&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:console&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:constants&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:crypto&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:dgram&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:dns&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:domain&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:events&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:fs&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:http&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:https&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:module&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:net&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:os&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:path&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:perf_hooks&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:process&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:punycode&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:querystring&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:readline&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:repl&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:stream&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:string_decoder&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:sys&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:timers&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:tls&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:tty&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:url&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:util&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:v8&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:vm&quot;\r\n&#45;   },\r\n&#45;   {\r\n&#45;     kind: &quot;import&#45;statement&quot;,\r\n&#45;     path: &quot;node:zlib&quot;\r\n&#45;   }\r\n&#45; ]\r\n\r\n&#45; Expected  &#45; 142\r\n&#43; Received  &#43; 1\r\n</code></pre><pre lang=\"typescript\"><code>192 |     target: &quot;browser&quot;,\r\n193 |     external: Object.keys(nodePolyfillList),\r\n194 |     onAfterBundle(api) {\r\n195 |       const file = api.readFile(&quot;/out.js&quot;);\r\n196 |       const imports = new Bun.Transpiler().scanImports(file);\r\n197 |       expect(imports).toStrictEqual(\r\n          ^</code></pre></li></ul>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-05-23T20:05:27Z",
        "closed_at": "2023-05-23T21:56:04Z",
        "merged_at": "2023-05-23T21:56:04Z",
        "body": "fixes #3026 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-23T14:44:39Z",
        "closed_at": "2023-05-23T23:06:36Z",
        "merged_at": "2023-05-23T23:06:36Z",
        "body": "Without pkg-config, the libarchive build fails in autogen.sh[1]\r\n\r\n1: https://github.com/libarchive/libarchive/issues/742\r\n\r\n<details>\r\n<summary>error details when you try to build without pkg-config</summary>\r\n\r\n```\r\ncd /Users/llimllib/readme/tmp/bun/src/deps/libarchive; \\\r\n\t(make clean || echo \"\"); \\\r\n\t(./build/clean.sh || echo \"\"); \\\r\n\t./build/autogen.sh; \\\r\n\tCFLAGS=\"-mmacosx-version-min=11.0 -O3 -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -mtune=native\" CC=\" /usr/bin/clang\" CCACHE_COMPILER=/usr/bin/clang ./configure --disable-shared --enable-static  --with-pic  --disable-bsdtar   --disable-bsdcat --disable-rpath --enable-posix-regex-lib  --without-xml2  --without-expat --without-openssl  --without-iconv --without-zlib; \\\r\n\tmake -j12; \\\r\n\tcp ./.libs/libarchive.a /Users/llimllib/readme/tmp/bun/src/deps/libarchive.a;\r\nmake[1]: *** No rule to make target `clean'.  Stop.\r\n\r\n+ aclocal -I build/autoconf\r\n+ case `uname` in\r\n++ uname\r\n+ glibtoolize --automake -c\r\n+ autoconf\r\nconfigure.ac:108: warning: The macro `AC_PROG_CC_C99' is obsolete.\r\nconfigure.ac:108: You should run autoupdate.\r\n./lib/autoconf/c.m4:1659: AC_PROG_CC_C99 is expanded from...\r\nconfigure.ac:108: the top level\r\nconfigure.ac:112: warning: The macro `AC_LIBTOOL_WIN32_DLL' is obsolete.\r\nconfigure.ac:112: You should run autoupdate.\r\naclocal.m4:8546: AC_LIBTOOL_WIN32_DLL is expanded from...\r\nconfigure.ac:112: the top level\r\nconfigure.ac:112: warning: AC_LIBTOOL_WIN32_DLL: Remove this warning and the call to _LT_SET_OPTION when you\r\nconfigure.ac:112: put the 'win32-dll' option into LT_INIT's first parameter.\r\n./lib/autoconf/general.m4:2434: AC_DIAGNOSE is expanded from...\r\naclocal.m4:8546: AC_LIBTOOL_WIN32_DLL is expanded from...\r\nconfigure.ac:112: the top level\r\nconfigure.ac:113: warning: The macro `AC_PROG_LIBTOOL' is obsolete.\r\nconfigure.ac:113: You should run autoupdate.\r\naclocal.m4:122: AC_PROG_LIBTOOL is expanded from...\r\nconfigure.ac:113: the top level\r\nconfigure.ac:636: warning: The macro `AC_HEADER_TIME' is obsolete.\r\nconfigure.ac:636: You should run autoupdate.\r\n./lib/autoconf/headers.m4:743: AC_HEADER_TIME is expanded from...\r\nconfigure.ac:636: the top level\r\nconfigure.ac:140: error: possibly undefined macro: AC_MSG_FAILURE\r\n      If this token and others are legitimate, please use m4_pattern_allow.\r\n      See the Autoconf documentation.\r\nconfigure.ac:328: error: possibly undefined macro: AC_CHECK_LIB\r\nconfigure: error: cannot find required auxiliary files: compile config.guess config.sub missing install-sh\r\nmake[1]: *** No targets specified and no makefile found.  Stop.\r\ncp: ./.libs/libarchive.a: No such file or directory\r\nmake: *** [libarchive] Error 1\r\n```\r\n</details>\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-23T13:28:58Z",
        "closed_at": "2023-05-24T01:08:25Z",
        "merged_at": "2023-05-24T01:08:25Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 225,
        "deletions": 1,
        "changed_files": 12,
        "created_at": "2023-05-23T05:54:21Z",
        "closed_at": "2023-05-23T07:40:13Z",
        "merged_at": "2023-05-23T07:40:13Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-05-23T03:03:16Z",
        "closed_at": "2023-05-23T07:40:41Z",
        "merged_at": "2023-05-23T07:40:41Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-05-23T02:37:54Z",
        "closed_at": "2023-05-23T22:02:40Z",
        "merged_at": "2023-05-23T22:02:40Z",
        "body": "- Add noEmit to tsconfig.json\r\n- Bump bun-types in bun init package.json to `^0.6.0`\r\n- Add \"partially implemented\" to the documentation of `node:vm`\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-05-23T01:37:30Z",
        "closed_at": "2023-05-23T02:44:32Z",
        "merged_at": "2023-05-23T02:44:32Z",
        "body": "should fix this error: https://github.com/oven-sh/bun/issues/3009",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-05-23T00:36:58Z",
        "closed_at": "2023-05-23T02:44:22Z",
        "merged_at": "2023-05-23T02:44:22Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2496,
        "deletions": 353,
        "changed_files": 33,
        "created_at": "2023-05-22T22:08:56Z",
        "closed_at": "2023-05-29T18:49:52Z",
        "merged_at": "2023-05-29T18:49:52Z",
        "body": "Vercel preview: https://site-git-doc-server-oven.vercel.app/\r\n\r\nSister PR: https://github.com/oven-sh/site/pull/31",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-05-22T20:30:34Z",
        "closed_at": "2023-05-23T03:07:29Z",
        "merged_at": null,
        "body": "can't merge because of the uint8array crash stuff",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16346,
        "deletions": 25009,
        "changed_files": 127,
        "created_at": "2023-05-22T18:18:45Z",
        "closed_at": "2023-05-23T01:51:05Z",
        "merged_at": "2023-05-23T01:51:05Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2023-05-22T05:02:35Z",
        "closed_at": "2023-05-22T17:09:31Z",
        "merged_at": "2023-05-22T17:09:31Z",
        "body": "Fixes https://github.com/oven-sh/bun/issues/2985",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 44,
        "changed_files": 3,
        "created_at": "2023-05-22T01:00:33Z",
        "closed_at": "2023-05-22T02:36:42Z",
        "merged_at": "2023-05-22T02:36:42Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 13,
        "changed_files": 8,
        "created_at": "2023-05-20T02:22:03Z",
        "closed_at": "2023-05-21T00:04:52Z",
        "merged_at": "2023-05-21T00:04:51Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-05-20T00:00:35Z",
        "closed_at": "2023-05-20T01:22:55Z",
        "merged_at": "2023-05-20T01:22:55Z",
        "body": "fixes #2903 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 82,
        "changed_files": 5,
        "created_at": "2023-05-19T22:30:02Z",
        "closed_at": "2023-05-20T02:50:07Z",
        "merged_at": "2023-05-20T02:50:07Z",
        "body": "<img width=\"318\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/7ea36806-dcc6-46d5-9799-59a921876db5\">\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-19T20:28:21Z",
        "closed_at": "2023-05-20T03:44:59Z",
        "merged_at": "2023-05-20T03:44:59Z",
        "body": "This is a guess to fix #2964",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-05-19T19:39:48Z",
        "closed_at": "2023-05-19T23:04:38Z",
        "merged_at": "2023-05-19T23:04:38Z",
        "body": "fixes #2960 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-05-19T16:30:02Z",
        "closed_at": "2023-05-21T02:03:56Z",
        "merged_at": "2023-05-21T02:03:56Z",
        "body": "Progress for #1825 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-19T08:07:35Z",
        "closed_at": "2023-05-19T16:53:01Z",
        "merged_at": "2023-05-19T16:53:00Z",
        "body": "Unless that was a deliberate subliminal message ;) ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-05-19T02:31:04Z",
        "closed_at": "2023-05-19T22:23:25Z",
        "merged_at": "2023-05-19T22:23:25Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 43,
        "changed_files": 4,
        "created_at": "2023-05-18T04:56:12Z",
        "closed_at": "2023-05-18T17:38:50Z",
        "merged_at": "2023-05-18T17:38:50Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 33,
        "changed_files": 4,
        "created_at": "2023-05-18T04:14:12Z",
        "closed_at": "2023-05-18T17:52:34Z",
        "merged_at": "2023-05-18T17:52:34Z",
        "body": "fixes #622 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 803,
        "deletions": 286,
        "changed_files": 24,
        "created_at": "2023-05-17T22:19:48Z",
        "closed_at": "2023-05-21T16:50:53Z",
        "merged_at": "2023-05-21T16:50:53Z",
        "body": "Depends on https://github.com/Jarred-Sumner/uSockets/pull/4 and https://github.com/Jarred-Sumner/uWebSockets/pull/11\r\n\r\nFix: #2922 \r\nFix: #2355 \r\nFix: #1991 \r\nFix: #2737\r\nFix: #2485\r\nFix: #313 (fastify will at least start after this)\r\nFix: #2955",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-05-17T15:04:38Z",
        "closed_at": "2023-05-17T18:17:23Z",
        "merged_at": null,
        "body": "`bun-release` action is not executed: https://github.com/oven-sh/bun/actions/runs/4996129488/jobs/8948925147\r\n\r\nInstall dependencies step:\r\n```sh\r\nbun install v0.6.1 (78229da7)\r\n\r\n + conditional-type-checks@1.0.6\r\n + prettier@2.[8](https://github.com/oven-sh/bun/actions/runs/4996129488/jobs/8948925147#step:6:9).4\r\n + tsd@0.22.0\r\n + typescript@5.0.2\r\n\r\n 11[9](https://github.com/oven-sh/bun/actions/runs/4996129488/jobs/8948925147#step:6:10) packages installed [592.00ms]\r\nerror: linking semver: FileNotFound\r\n\r\nerror: linking resolve: FileNotFound\r\n\r\nerror: linking tsd: FileNotFound\r\n\r\nerror: linking semver: FileNotFound\r\n\r\nerror: linking prettier: FileNotFound\r\n\r\nerror: linking typescript: FileNotFound\r\n\r\nerror: linking @tsd/typescript: FileNotFound\r\n```\r\n\r\nBuild step:\r\n```sh\r\n$ echo $(which prettier) && prettier --write './**/*.{ts,tsx,js,jsx}'\r\n\r\n/usr/bin/bash: line 1: prettier: command not found\r\n```\r\n\r\nThe problem seems to be a conflict with the node.js installation step.\r\n\r\nCloses https://github.com/oven-sh/bun/issues/2923",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 31,
        "changed_files": 6,
        "created_at": "2023-05-17T04:02:24Z",
        "closed_at": "2023-05-17T17:25:56Z",
        "merged_at": "2023-05-17T17:25:56Z",
        "body": "This makes it so we do not success=false or status code 1 if we have warnings and no errors.\r\n\r\n**context from discord**:\r\n\r\n![image](https://github.com/oven-sh/bun/assets/24465214/06d055ab-c93f-4b18-ac15-cde47ba9235f)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-17T03:33:36Z",
        "closed_at": "2023-05-17T18:04:40Z",
        "merged_at": "2023-05-17T18:04:40Z",
        "body": "I know this is just a stub, but I've updated the plugin name to be correct in the meantime \ud83d\ude4f",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-05-17T03:24:56Z",
        "closed_at": "2023-06-03T05:34:47Z",
        "merged_at": null,
        "body": "changing the import record kind to .require instead of .stmt, but that doesn't FEEL right to me since it's changed in a cjs2esm transform. however, it doesn't break any new tests.\r\n\r\nfixes #2911",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1576,
        "deletions": 14304,
        "changed_files": 32,
        "created_at": "2023-05-17T01:59:21Z",
        "closed_at": "2023-06-01T21:31:36Z",
        "merged_at": "2023-06-01T21:31:36Z",
        "body": "Closes #2707, Closes #2077\r\n\r\nfixes some of the things that were reverted before\r\n\r\n- crypto improvement with lazy init stream\r\n- js implementation for node events\r\n- cjs entrypoints\r\n\r\nin addition to this, it makes discord.js work\r\n\r\n- ws changes\r\n- undici and builtins bug fix\r\n\r\nnote for the first one, it does cause slower runtime with\r\n\r\n```\r\nconst hasher = createHash(alg);\r\nhasher.write(data);\r\nhasher.end();\r\nhasher.read();\r\n```\r\n\r\nand we could totally optimize this simple use case too but i did not do that.\r\n\r\nthere were two fixes to this, and i went with (2)\r\n\r\n![image](https://github.com/oven-sh/bun/assets/24465214/d74b1d2b-bb35-4d51-8e8b-6e6d9aebf555)\r\n\r\n1 = current\r\n2 = lazy init + old event emitter from 0.6 and prior\r\n3 = lazy init + js event emitter + pure js streams",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 43,
        "changed_files": 8,
        "created_at": "2023-05-16T22:34:07Z",
        "closed_at": "2023-05-17T00:07:40Z",
        "merged_at": "2023-05-17T00:07:40Z",
        "body": "fixes:\r\n```\r\nnaming/AssetNamingMkdir\r\nnaming/AssetNamingDir\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-05-16T22:08:08Z",
        "closed_at": "2023-05-17T00:08:00Z",
        "merged_at": "2023-05-17T00:08:00Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 300,
        "deletions": 112,
        "changed_files": 4,
        "created_at": "2023-05-16T22:08:05Z",
        "closed_at": "2023-05-19T19:18:14Z",
        "merged_at": "2023-05-19T19:18:14Z",
        "body": "we shouldve tested this before 0.6.0. they all pass",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-16T20:23:28Z",
        "closed_at": "2023-05-17T00:08:45Z",
        "merged_at": "2023-05-17T00:08:45Z",
        "body": "This PR fixed the broken link.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 793,
        "deletions": 0,
        "changed_files": 24,
        "created_at": "2023-05-15T23:17:31Z",
        "closed_at": "2023-05-16T03:37:04Z",
        "merged_at": "2023-05-16T03:37:04Z",
        "body": "This can be merged but `JSBundler` hasn't yet been updated to expect the new `bun-plugin-server-components` structure\r\n\r\nImplements `bun-plugin-server-components` and `bun-plugin-yaml`. \r\n\r\nAdds directories (unimplemented) for:\r\n- `bun-plugin-lightningcss`\r\n- `bun-plugin-css`\r\n- `bun-plugin-mdx`",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2008,
        "deletions": 122,
        "changed_files": 11,
        "created_at": "2023-05-15T19:24:14Z",
        "closed_at": "2023-05-16T04:18:52Z",
        "merged_at": "2023-05-16T04:18:52Z",
        "body": "fixes some tests, we are 501 pass, 70 failing",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-05-15T18:59:12Z",
        "closed_at": "2023-05-16T15:49:35Z",
        "merged_at": "2023-05-16T15:49:35Z",
        "body": "fixes `bun run` with the following\r\n```ts\r\nthis;\r\nconsole.log(\"Hello World\");\r\n```\r\nor more specifically this generated snippet\r\n```ts\r\nexport default __cJS2ESM(() => console.log(\"Hello World\"))\r\n```",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-05-15T07:26:37Z",
        "closed_at": "2023-05-15T08:52:52Z",
        "merged_at": "2023-05-15T08:52:52Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6100,
        "deletions": 14,
        "changed_files": 22,
        "created_at": "2023-05-14T17:04:58Z",
        "closed_at": "2023-05-16T15:48:17Z",
        "merged_at": "2023-05-16T15:48:17Z",
        "body": "Add WebSocketServer wrapper, now we can make this simple `socket.io` app run! Still pending `https` support.\r\nAlso added some Makefile changes to search for `clang-format-15`\r\n\r\n#2874 is needed for `socket.io`\r\n\r\n```js\r\n\r\nconst html = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Socket.IO chat</title>\r\n  <style>\r\n    body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; }\r\n\r\n    #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }\r\n    #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }\r\n    #input:focus { outline: none; }\r\n    #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }\r\n\r\n    #messages { list-style-type: none; margin: 0; padding: 0; }\r\n    #messages > li { padding: 0.5rem 1rem; }\r\n    #messages > li:nth-child(odd) { background: #efefef; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <ul id=\"messages\"></ul>\r\n  <form id=\"form\" action=\"\">\r\n    <input id=\"input\" autocomplete=\"off\" /><button>Send</button>\r\n  </form>\r\n  <script src=\"https://cdn.socket.io/4.5.4/socket.io.min.js\"></script>\r\n<script>\r\nvar socket = io();\r\n\r\nvar messages = document.getElementById('messages');\r\nvar form = document.getElementById('form');\r\nvar input = document.getElementById('input');\r\n\r\nform.addEventListener('submit', function(e) {\r\n  e.preventDefault();\r\n  if (input.value) {\r\n    socket.emit('chat message', input.value);\r\n    input.value = '';\r\n  }\r\n});\r\n\r\nsocket.on('chat message', function(msg) {\r\n  var item = document.createElement('li');\r\n  item.textContent = msg;\r\n  messages.appendChild(item);\r\n  window.scrollTo(0, document.body.scrollHeight);\r\n});\r\n</script>\r\n</body>\r\n</html>\r\n\r\n`;\r\nconst app = require('express')();\r\nconst http = require(\"http\").createServer(app);\r\n\r\nconst io = require('socket.io')(http);\r\nconst port = process.env.PORT || 3000;\r\napp.get(\"/\", (req, res)=> res.send(html));\r\nio.on('connection', (socket) => {\r\n  socket.on('chat message', msg => {\r\n    io.emit('chat message', msg);\r\n  });\r\n});\r\n\r\nhttp.listen(port, () => {\r\n  console.log(`Socket.IO server running at http://localhost:${port}/`);\r\n});\r\n```",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 345,
        "deletions": 27,
        "changed_files": 10,
        "created_at": "2023-05-13T19:51:24Z",
        "closed_at": "2023-05-14T17:18:57Z",
        "merged_at": "2023-05-14T17:18:57Z",
        "body": "This is part of `socket.io` support",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 220,
        "deletions": 40,
        "changed_files": 5,
        "created_at": "2023-05-13T05:08:06Z",
        "closed_at": "2023-05-16T04:50:44Z",
        "merged_at": "2023-05-16T04:50:44Z",
        "body": "we could add an `ArrayHole` ast node, but some testing showed we have all cases covered in the printer except for `if/if else/else`",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-05-13T00:38:08Z",
        "closed_at": "2023-05-18T18:32:32Z",
        "merged_at": "2023-05-18T18:32:32Z",
        "body": "Progress for #1825 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 454,
        "deletions": 45,
        "changed_files": 13,
        "created_at": "2023-05-12T14:23:59Z",
        "closed_at": "2023-05-16T17:47:00Z",
        "merged_at": "2023-05-16T17:47:00Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 50,
        "changed_files": 3,
        "created_at": "2023-05-12T13:27:47Z",
        "closed_at": "2023-05-14T17:22:02Z",
        "merged_at": "2023-05-14T17:22:02Z",
        "body": "Fix: #1500",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-12T03:47:12Z",
        "closed_at": "2023-05-12T15:32:24Z",
        "merged_at": "2023-05-12T15:32:24Z",
        "body": "fixes #2862 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-05-12T03:11:47Z",
        "closed_at": "2023-05-12T04:25:04Z",
        "merged_at": "2023-05-12T04:25:04Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-05-12T00:15:33Z",
        "closed_at": "2023-05-12T11:06:18Z",
        "merged_at": "2023-05-12T11:06:18Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 562,
        "deletions": 88,
        "changed_files": 11,
        "created_at": "2023-05-12T00:15:13Z",
        "closed_at": "2023-05-12T14:33:08Z",
        "merged_at": "2023-05-12T14:33:08Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-05-11T15:58:22Z",
        "closed_at": "2023-05-11T21:23:33Z",
        "merged_at": "2023-05-11T21:23:33Z",
        "body": "Fix: #2568",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-05-11T15:12:28Z",
        "closed_at": "2023-05-12T11:05:47Z",
        "merged_at": "2023-05-12T11:05:46Z",
        "body": "Fix: #2674",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-05-11T14:03:26Z",
        "closed_at": "2023-05-11T21:25:21Z",
        "merged_at": "2023-05-11T21:25:21Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-05-11T03:58:08Z",
        "closed_at": "2023-05-11T06:55:27Z",
        "merged_at": "2023-05-11T06:55:27Z",
        "body": "fixes about 30 uglifyjs tests.\r\nalso fixes issue in comment https://github.com/oven-sh/bun/issues/2815#issuecomment-1542752471.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-05-11T01:53:33Z",
        "closed_at": "2023-05-11T09:30:20Z",
        "merged_at": "2023-05-11T09:30:20Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/2675",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 158,
        "deletions": 127,
        "changed_files": 7,
        "created_at": "2023-05-10T23:14:53Z",
        "closed_at": "2023-05-11T06:55:39Z",
        "merged_at": "2023-05-11T06:55:39Z",
        "body": "Fix: #2819",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 144,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-10T21:46:41Z",
        "closed_at": "2023-05-11T09:30:48Z",
        "merged_at": "2023-05-11T09:30:48Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 32,
        "changed_files": 6,
        "created_at": "2023-05-10T16:12:00Z",
        "closed_at": "2023-05-10T23:38:52Z",
        "merged_at": "2023-05-10T23:38:52Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/2794",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-10T06:52:29Z",
        "closed_at": "2023-05-10T20:12:16Z",
        "merged_at": "2023-05-10T20:12:16Z",
        "body": "fixes #2814 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-05-10T02:55:53Z",
        "closed_at": "2023-05-11T06:57:31Z",
        "merged_at": "2023-05-11T06:57:31Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 352,
        "deletions": 92,
        "changed_files": 6,
        "created_at": "2023-05-09T22:45:23Z",
        "closed_at": "2023-05-10T05:26:30Z",
        "merged_at": "2023-05-10T05:26:30Z",
        "body": "fixes #2592",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1100,
        "deletions": 299,
        "changed_files": 46,
        "created_at": "2023-05-09T17:55:45Z",
        "closed_at": "2023-05-11T21:42:54Z",
        "merged_at": "2023-05-11T21:42:54Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-05-09T17:42:23Z",
        "closed_at": "2023-05-09T21:20:13Z",
        "merged_at": "2023-05-09T21:20:13Z",
        "body": "if a function with `wrapWithHasContainer` does not get an error reference passed to it, then instead of checking that reference (would be always null), we check the result `.isError` and then properly throw that.\r\n\r\nalso refactored to use `defer` deinit of the iterator instead of how it was copy pasted throughout the function.\r\n\r\nthis is one of the first few times I've used comptime stuff, but I'm 99% sure i did it correctly. crazy cool stuff.\r\n\r\nFixes #2820 and some similar issues in other functions that use this wrapper",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-05-09T07:28:40Z",
        "closed_at": "2023-05-09T21:20:47Z",
        "merged_at": "2023-05-09T21:20:47Z",
        "body": "fixes `edgecase/TSConfigPathsStarOnlyInLeft`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 731,
        "deletions": 46,
        "changed_files": 8,
        "created_at": "2023-05-08T00:58:40Z",
        "closed_at": "2023-05-08T04:08:32Z",
        "merged_at": "2023-05-08T04:08:32Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1862,
        "deletions": 732,
        "changed_files": 26,
        "created_at": "2023-05-05T18:54:06Z",
        "closed_at": "2023-05-09T04:55:22Z",
        "merged_at": "2023-05-09T04:55:22Z",
        "body": "also:\r\n\r\n- remove --jsx-production as it didnt really work\r\n- add `format` even though it has no real use since it throws on anything other than the default value\r\n- implement expect bundled js API error tracking, but we should change how the errors are given out since it sucks",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 266,
        "deletions": 144,
        "changed_files": 6,
        "created_at": "2023-05-05T02:03:11Z",
        "closed_at": "2023-05-08T21:10:40Z",
        "merged_at": "2023-05-08T21:10:40Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-05-04T16:55:00Z",
        "closed_at": "2023-05-05T19:54:54Z",
        "merged_at": "2023-05-05T19:54:54Z",
        "body": "Unless I'm missing something obvious, it appears that Bun has the JSON API (`stringify`/`parse`) but is not listed anywhere in the documentation.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-05-04T08:50:18Z",
        "closed_at": "2023-05-04T15:21:33Z",
        "merged_at": "2023-05-04T15:21:33Z",
        "body": "fixes #2795 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 52,
        "changed_files": 5,
        "created_at": "2023-05-03T00:50:05Z",
        "closed_at": "2023-05-05T05:44:03Z",
        "merged_at": "2023-05-05T05:44:03Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1279,
        "deletions": 73,
        "changed_files": 9,
        "created_at": "2023-05-02T02:16:05Z",
        "closed_at": "2023-05-05T19:53:39Z",
        "merged_at": "2023-05-05T19:53:39Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 482,
        "deletions": 46,
        "changed_files": 7,
        "created_at": "2023-05-02T01:14:19Z",
        "closed_at": "2023-05-18T23:45:18Z",
        "merged_at": "2023-05-18T23:45:18Z",
        "body": "Resolves #401",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 133,
        "deletions": 65,
        "changed_files": 4,
        "created_at": "2023-05-01T02:27:39Z",
        "closed_at": "2023-05-01T03:41:33Z",
        "merged_at": "2023-05-01T03:41:33Z",
        "body": "fixes #2653",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 420,
        "deletions": 96,
        "changed_files": 2,
        "created_at": "2023-04-30T11:50:21Z",
        "closed_at": "2023-04-30T16:45:09Z",
        "merged_at": "2023-04-30T16:45:08Z",
        "body": "fixes #2602",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-04-29T19:59:32Z",
        "closed_at": "2023-05-01T04:16:33Z",
        "merged_at": "2023-05-01T04:16:32Z",
        "body": "1. changes bundle test runner to not seek out `bun-debug`, instead just uses the active bun. this is because back before you couldnt run the test runner on bun-debug since we didnt compile it, etc etc etc.\r\n2. two default export condition test. these are breaking react and vue from being bundled.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1100,
        "deletions": 210,
        "changed_files": 14,
        "created_at": "2023-04-28T23:29:43Z",
        "closed_at": "2023-05-01T05:09:40Z",
        "merged_at": "2023-05-01T05:09:40Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 394,
        "deletions": 252,
        "changed_files": 5,
        "created_at": "2023-04-28T00:10:18Z",
        "closed_at": "2023-04-28T15:35:20Z",
        "merged_at": "2023-04-28T15:35:20Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1399,
        "deletions": 776,
        "changed_files": 40,
        "created_at": "2023-04-27T21:56:02Z",
        "closed_at": "2023-04-29T04:08:48Z",
        "merged_at": "2023-04-29T04:08:48Z",
        "body": "## Changes to bun\r\n- fix a subtle automatic jsx import thing where it was missing a /\r\n- CLI entry names does not need `./` prefix\r\n- wired up CLI --chunk-naming and --asset-naming\r\n- renaming --entry-names to --entry-naming\r\n- rename `naming.entrypoints` to `naming.entry`\r\n- typo changes on bun.build docs\r\n- rename Platform to Target internally everywhere in the codebase \r\n- fix default node env\r\n- onStart/onEnd/onDispose callbacks throw a not implemented error linking to my github issue\r\n- fix multiple plugin bug\r\n\r\n## What must be fixed before 0.6\r\n\r\n- 17 splitting tests, mostly due to missing variables / imports.\r\n\t- `default/TopLevelAwaitAllowedImportWithSplitting` also affected\r\n- `import def2, * as ns2 from './c'` in test `edgecase/ImportNamespaceAndDefault`\r\n- `require` inside of trycatch is inlined with an error. `default/RequireWithCallInsideTry`\r\n- top level await in ES modules breaks `default/TopLevelAwaitAllowedImportWithoutSplitting` as the `__esm` is not given an async function\r\n- require a module that export * from external.`edgecase/ExternalES6ConvertedToCommonJSSimplified`. complex case `default/ExternalES6ConvertedToCommonJS`\r\n- empty commonjs modules cause `module.exports = undefined;` to be written instead of an empty object. `edgecase/EmptyCommonJSModule`\r\n- `edgecase/ImportTrailingSlash`\r\n- `import \"./test.bad\"` unknown file extension segfault\r\n- trying to externalize a node module\r\n- ~~default process.env.NODE_ENV to `development`~~ FIXED\r\n- We should escape `</script>` within strings and files `edgecase/ScriptTagEscape`\r\n- `naming` and `root`\r\n\t- We need to implement `outbase`, or as the docs call it `root`. Decide what name we'll use. This defaults to the closest shared parent directory of the entrypoints (not the whole codebase).\r\n\t- `[dir]` in naming templates has to be relative to `root`, currently it is a full absolute path which makes it unusable.\r\n\t- `naming` defaults\r\n\t\t- `naming.entry` has to be default `[dir]/[name].[ext]`\r\n\t\t- `naming.chunk` and `naming.asset` are fine as they are right now (`[name]-[hash].[ext]`)\r\n\t- conflicting paths\r\n\t\t- chunks with conflicting paths need to be assigned different hashes, even if contents are identical.\r\n\t\t- assets with conflicting paths but identical contents can be assigned the same file, but ones that are different should have different hashes (obviously).\r\n\t\t- if the file paths conflicts and there is no hash in the template (explicit setting), throw a build error instead of overwriting any files.\r\n- jsx\r\n\t- automatic mode\r\n\t\t- import source in production is ignored. the production transform can only apply when importSource is not defined.\r\n\t\t- fragments need to be imported from jsx-runtime/jsx-dev-runtime, not react.\r\n\t\t- future improvement: production inline fragments\r\n\t\t- future improvement: source position of element in development mode\r\n\t- classic mode\r\n\t\t- **never auto import**. ignore `importSource`\r\n\t\t- do not tree-shake away used variables\r\n- loader\r\n\t- text/toml loader cannot be set from cli (InvalidLoader) `edgecase/ValidLoaderSeenAsInvalid`\r\n\t- file loader being set from cli segfaults `edgecase/ValidLoaderSeenAsInvalid`\r\n\t- unknown loaders segfault `edgecase/InvalidLoaderSegfault`\r\n\t- `json` loader breaks on default import, tree shaking all the keys. see `edgecase/JSONDefaultImport` and `edgecase/JSONDefaultKeyImport`\r\n\t- `json` loader, like cjs transform, should not contain `default` as a refernece to the json data when JSON.stringifying. see `loader/JSONSharedWithMultipleEntriesESBuildIssue413` and `edgecase/JSONWithDefaultKeyNamespace`\r\n\t- invalid identifiers are stripped? this could be a combo of some other bugs:`loader/JSONInvalidIdentifierES6`\r\n\t- using require on an unknown filetype segfaults\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-04-27T15:04:25Z",
        "closed_at": "2023-05-01T06:36:32Z",
        "merged_at": "2023-05-01T06:36:32Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7840,
        "deletions": 8966,
        "changed_files": 12,
        "created_at": "2023-04-27T13:41:55Z",
        "closed_at": "2023-04-27T14:45:33Z",
        "merged_at": "2023-04-27T14:45:33Z",
        "body": "This commit will also:\r\n- add a CryptoHasher.copy function\r\n- make CryptoHasher.digest reset the hasher so it can be reused\r\n\r\nResolves #2651",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 185,
        "deletions": 45,
        "changed_files": 4,
        "created_at": "2023-04-27T08:34:39Z",
        "closed_at": "2023-04-27T10:35:46Z",
        "merged_at": "2023-04-27T10:35:46Z",
        "body": "main goal here is to re-use the code for writeFileSync outside of JS",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-27T08:28:44Z",
        "closed_at": "2023-04-27T11:00:35Z",
        "merged_at": "2023-04-27T11:00:35Z",
        "body": "From:\r\n\r\nThey need a way to access to the outside world...\r\n\r\nTo:\r\n\r\nThey need a way to access the outside world...",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-04-27T03:42:09Z",
        "closed_at": "2023-04-27T04:46:35Z",
        "merged_at": "2023-04-27T04:46:35Z",
        "body": "fixes #2744 ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 362,
        "deletions": 3,
        "changed_files": 8,
        "created_at": "2023-04-27T01:27:19Z",
        "closed_at": "2023-05-01T06:36:08Z",
        "merged_at": "2023-05-01T06:36:08Z",
        "body": "Adds odd/even matchers.\r\n  - failing tests with boilerplate\r\n  - passing tests implementation\r\n Fixes .toContain in the case of an empty string.\r\nA few extra truthy test cases.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1233,
        "deletions": 13,
        "changed_files": 6,
        "created_at": "2023-04-27T00:55:00Z",
        "closed_at": "2023-04-27T03:07:31Z",
        "merged_at": "2023-04-27T03:07:31Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 331,
        "deletions": 227,
        "changed_files": 12,
        "created_at": "2023-04-26T23:28:27Z",
        "closed_at": "2023-04-28T20:40:44Z",
        "merged_at": "2023-04-28T20:40:44Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-04-26T19:57:49Z",
        "closed_at": "2023-04-27T04:57:26Z",
        "merged_at": "2023-04-27T04:57:26Z",
        "body": "Fixes a few little issues I had while setting up bun development.\r\n\r\nNinja is faster than make at building, and explicitly setting which generator to use avoids issues when someone (like me) has `CMAKE_GENERATOR` set in their envvars.\r\n\r\nI'm not sure whether `test/bun.lockb` should be ignored or committed, but given it's not been committed thus far I assume it should be ignored :)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-04-26T15:53:15Z",
        "closed_at": "2023-04-27T04:07:41Z",
        "merged_at": "2023-04-27T04:07:40Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-26T15:10:31Z",
        "closed_at": "2023-05-01T17:37:40Z",
        "merged_at": "2023-05-01T17:37:40Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 319,
        "deletions": 41,
        "changed_files": 5,
        "created_at": "2023-04-26T13:06:01Z",
        "closed_at": "2023-04-26T14:22:29Z",
        "merged_at": "2023-04-26T14:22:29Z",
        "body": "- This also adds a `publicPath` option",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 156,
        "deletions": 21,
        "changed_files": 5,
        "created_at": "2023-04-26T05:06:34Z",
        "closed_at": "2023-05-01T06:36:48Z",
        "merged_at": null,
        "body": "This introduces a `FinalizationCallback` which can be used when we don't want to keep a JS type alive but do potentially need to access it when it might've been freed. It's like WeakRef but cheaper and assumes there is only one user.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 548,
        "deletions": 386,
        "changed_files": 7,
        "created_at": "2023-04-26T04:31:07Z",
        "closed_at": "2023-04-27T04:57:49Z",
        "merged_at": "2023-04-27T04:57:49Z",
        "body": "# what i think is important\r\n- 17 splitting tests, mostly due to missing variables / imports.\r\n\t- `default/TopLevelAwaitAllowedImportWithSplitting` also affected\r\n- `import def2, * as ns2 from './c'` in test `edgecase/ImportNamespaceAndDefault`\r\n- `require` inside of trycatch is inlined with an error. `default/RequireWithCallInsideTry` ![Pasted image 20230425233834](https://user-images.githubusercontent.com/24465214/234470357-32aa6cf3-c914-4838-b72a-29e9c2063f64.png)\r\n- `default/HashbangBundle` we do not add hashbangs like `#!/usr/bin/env bun`\r\n- top level await in ES modules breaks `default/TopLevelAwaitAllowedImportWithoutSplitting` as the `__esm` is not given an async function\r\n- `define` does not work with optional chaining `default/DefineOptionalChain`\r\n- require a module that export * from external.`edgecase/ExternalES6ConvertedToCommonJSSimplified`. complex case `default/ExternalES6ConvertedToCommonJS`\r\n\r\n## less important. skipped\r\n\r\n- top level await in a commonjs module does not error. `default/TopLevelAwaitForbiddenRequire`\r\n- identifier minification does not ignore comments\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1117,
        "deletions": 613,
        "changed_files": 18,
        "created_at": "2023-04-25T20:15:40Z",
        "closed_at": "2023-04-26T02:13:39Z",
        "merged_at": "2023-04-26T02:13:39Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-04-25T08:10:51Z",
        "closed_at": "2023-04-25T12:13:57Z",
        "merged_at": "2023-04-25T12:13:57Z",
        "body": "- minor clean-ups",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-04-24T23:43:37Z",
        "closed_at": "2023-04-25T00:56:43Z",
        "merged_at": "2023-04-25T00:56:43Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1372,
        "deletions": 106,
        "changed_files": 13,
        "created_at": "2023-04-23T08:56:27Z",
        "closed_at": "2023-04-24T21:11:59Z",
        "merged_at": "2023-04-24T21:11:59Z",
        "body": "The initial scope is to support the same plugins as in Bun.plugin(), excluding `\"object\"` loader.\r\n\r\nImplement:\r\n- [x] Scaffolding to reuse logic from Bun.plugin()\r\n- [x] `onLoad`\r\n- [ ] `onResolve`\r\n- [ ] Errors in `onLoad` and `onResolve` become build errors\r\n- [x] Async `onLoad`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 761,
        "deletions": 424,
        "changed_files": 24,
        "created_at": "2023-04-23T01:37:53Z",
        "closed_at": "2023-04-23T02:44:23Z",
        "merged_at": "2023-04-23T02:44:23Z",
        "body": "- Refactor memory management in the module resolver to use the global allocator \r\n- Fix a memory leak when parsing tasks\r\n- Fix a crash when freeing source code results\r\n- Fix freeing incorrect pointer when handling parse results\r\n- Fix a use-after-free in the module resolver when multiple threads do a build and then free all their data\r\n- Implement a way to send \"idle\" tasks to a specific Thread in the thread pool\r\n\r\n### How memory management works with Bun.build()\r\n\r\nCalling `Bun.build` serializes the data into an internal Config struct.\r\n\r\nIn this implementation, we have a single dedicated \"Bundler\" thread. This thread lives outside the thread pool. At the start of each build, it creates a heap for itself and the thread pool's tasks lazily create a `Worker` which has it's own instance of `Bundler`, `Resolver`, and `ASTMemoryAllocator`. \r\n\r\nThe output source code and file paths are allocated into the global heap (or directly with `mmap` if it's big enough) which allows them to be safely sent & subsequently freed across threads.\r\n\r\nAt the end of each build, the Bundler thread sends over the results to the calling thread and then enqueues an idle task to each `Worker` to free it's data. Mimalloc heaps are threadlocal and can only be freed on the thread that created it. \r\n\r\nThen, the Bundler thread frees it's own heap and waits idly for the next task.\r\n\r\nFuture TODOs:\r\n- When `async` and `await` re-land in Zig, refactor this code to use async/await so that multiple simultaneous bundles are supported\r\n- A persistent mode which skips re-parsing all the DefineData ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-04-21T21:54:38Z",
        "closed_at": "2023-04-26T21:54:06Z",
        "merged_at": "2023-04-26T21:54:06Z",
        "body": "Initial typings for `Bun.build` as currently implemented.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1250,
        "deletions": 2329,
        "changed_files": 19,
        "created_at": "2023-04-19T08:10:54Z",
        "closed_at": "2023-04-20T12:23:12Z",
        "merged_at": "2023-04-20T12:23:12Z",
        "body": "Input:\r\n```js\r\nexport default function minifyMe(iAmNotUsed, iAmNotUsedEither, iAmNotUsedEither2, iAmNotUsedEither3) {\r\n  return \"minfied!\";\r\n}\r\n\r\nlabel: {\r\n  console.log(\"hello\");\r\n  break label;\r\n}\r\n\r\nexport class Foo {\r\n  thisShouldNotBeMinified;\r\n}\r\n```\r\n\r\nOutput:\r\n```js\r\n// b.js\r\nfunction d(e, i, o, t) {\r\n  return \"minfied!\";\r\n}\r\ne: {\r\n  console.log(\"hello\");\r\n  break e;\r\n}\r\n\r\nclass r {\r\n  thisShouldNotBeMinified;\r\n}\r\nexport {\r\n  d as default,\r\n  r as Foo\r\n};\r\n```",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-04-19T00:15:01Z",
        "closed_at": "2023-04-19T01:55:01Z",
        "merged_at": "2023-04-19T01:55:00Z",
        "body": "- properly reset `JSC_BASE_DIR` after installing `bun-webkit`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1717,
        "deletions": 659,
        "changed_files": 11,
        "created_at": "2023-04-18T18:33:57Z",
        "closed_at": "2023-04-24T21:12:21Z",
        "merged_at": "2023-04-24T21:12:21Z",
        "body": "# notes\r\n\r\n## 2023-04-18\r\n\r\n`packagejson/PackageJsonSyntaxErrorComment` (skipped)\r\n`packagejson/PackageJsonSyntaxErrorTrailingComma` (skipped)\r\n- do we want to match esbuild and throw on packagejson errors? currently we just ignore the package json which is honestly fine. people wont run into this issue too much.\r\n- if we want to throw packagejson errors, do we want to match the error messages like \"JSON does not support comments\"\r\n\r\n`packagejson/PackageJsonBrowserMapModuleDisabled` (skipped)\r\n- very subtle difference to esbuild\r\n\r\n`packagejson/PackageJsonBrowserNodeModulesNoExt` (skipped)\r\n`packagejson/PackageJsonBrowserNodeModulesIndexNoExt` (skipped)\r\n- bun cannot resolve one edge case with not having an extension needs to reference package.json the `browser` object\r\n\r\n`packagejson/PackageJsonBrowserESBuildIssue2002A` (skipped)\r\n`packagejson/PackageJsonBrowserESBuildIssue2002B` (skipped)\r\n`packagejson/PackageJsonBrowserESBuildIssue2002C` (skipped)\r\n- see https://github.com/evanw/esbuild/issues/2002\r\n\r\n`packagejson/PackageJsonDualPackageHazardImportAndRequireSameFile` (skipped)\r\n`packagejson/PackageJsonDualPackageHazardImportAndRequireBrowser` (skipped)\r\n- a file imports and requires `demo-pkg`, which it's package json specifies as two separate files depending on import vs require; we need to ONLY use one. right now we use two\r\n\r\n`packagejson/PackageJsonExportsErrorInvalidModuleSpecifier`\r\n`packagejson/PackageJsonExportsErrorInvalidPackageConfiguration`\r\n`packagejson/PackageJsonExportsErrorInvalidPackageTarget`\r\n`packagejson/PackageJsonExportsErrorPackagePathNotExported`\r\n`packagejson/PackageJsonExportsErrorModuleNotFound`\r\n`packagejson/PackageJsonExportsErrorUnsupportedDirectoryImport`\r\n`packagejson/PackageJsonExportsErrorMissingTrailingSlash`\r\n`packagejson/PackageJsonExportsCustomConditions`\r\n`packagejson/PackageJsonExportsExactMissingExtension`\r\n- all of these pass, but esbuild explains why these cause resolution errors and not just say immediately\r\n\r\n## 2023-04-19\r\n\r\n`default/CharFreqIgnoreComments`\r\n- comments should not alter character frequencies\r\n\r\n`edgecase/MinifyPrivateIdentifiersNameCollision`\r\n- we need to keep # on private identifiers. this test produces a collision\r\n\r\n`default/MinifiedBundleES6`\r\n`default/MinifiedBundleCommonJS`\r\n- issue with minify whitespace mot including semicolons. not sure if caused from this pr\r\n\r\n`default/MinifyNestedLabelsNoBundle` (not your fault)\r\n- segfaults not due to minify identifiers but just the absurd input\r\n- added some related tests\r\n\r\n`default/SwitchScopeNoBundle` (not your fault. fixed in another branch)\r\n- mode=transform breaks\r\n\r\n`default/ArgumentDefaultValueScopeNoBundle`\r\n- waiting on format=iife or format=cjs to see if this test passes\r\n\r\n`default/WithStatementTaintingNoBundle` (not worth fixing anytime soon)\r\n- with statements shouldn't even be usable in ESM, but the identifier renaming is done wrong here\r\n\r\n`default/MinifySiblingLabelsNoBundle` (skipped)\r\n- esbuild re-uses label names when minifying. we should too\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-18T10:01:20Z",
        "closed_at": "2023-04-18T11:13:04Z",
        "merged_at": "2023-04-18T11:13:04Z",
        "body": "fixes\r\n```\r\npackagejson/PackageJsonExportsRequireOverImport\r\npackagejson/PackageJsonExportsImportOverRequire\r\npackagejson/PackageJsonExportsDefaultOverImportAndRequire\r\npackagejson/PackageJsonExportsBrowser\r\npackagejson/PackageJsonExportsNode\r\npackagejson/PackageJsonExportsNeutral\r\npackagejson/PackageJsonExportsOrderIndependent\r\npackagejson/PackageJsonExportsWildcard\r\npackagejson/PackageJsonExportsNotExactMissingExtension\r\npackagejson/PackageJsonExportsPatternTrailers\r\npackagejson/PackageJsonImports\r\npackagejson/PackageJsonImportsRemapToOtherPackage\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 709,
        "deletions": 651,
        "changed_files": 4,
        "created_at": "2023-04-17T13:03:28Z",
        "closed_at": "2023-04-17T14:13:02Z",
        "merged_at": "2023-04-17T14:13:02Z",
        "body": "this snippet works now\r\n```js\r\nimport axios from \"axios\";\r\n\r\naxios({\r\n  method: \"get\",\r\n  url: \"http://bit.ly/2mTM3nY\",\r\n  responseType: \"stream\",\r\n}).then(function (response) {\r\n  response.data.pipe(require(\"fs\").createWriteStream(\"ada_lovelace.jpg\"));\r\n});\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 439,
        "deletions": 350,
        "changed_files": 8,
        "created_at": "2023-04-16T20:30:38Z",
        "closed_at": "2023-04-17T01:57:57Z",
        "merged_at": "2023-04-17T01:57:56Z",
        "body": "also, this changes one line in zig to fix the error message circular imports gave\r\n\r\nref: https://discord.com/channels/876711213126520882/1005605542028394536/1086033806793920532\r\n\r\n# test notes\r\n\r\ntests failing\r\n\r\n- `default/ImportMissingCommonJS`: runtime failure that should be fixed\r\n- `default/RequireWithCallInsideTry`\r\n- `default/HashbangBundle`\r\n- `default/ExportFSNodeInCommonJSModule`: this is because the test was expecting an object as the default export, but intsead each property was exported on it's own. this makes more sense but is different and im not sure what the proper behavior is supposed to be when the entry module has the CJS->ESM transform applied.\r\n- `default/ImportWithQueryParameter`: the following doesn't resolve: \"import './file.txt?query'\"\r\n- `default/AutoExternalNode`: when doing platform=node, should \"import 'node:what-is-this'\" throw a resolve error, or should it just silently work? esbuild goes for the latter.\r\n- default/DefineOptionalChain\r\n\r\nproduces invalid JS code when a bundle error should happen:\r\n- `default/TopLevelAwaitForbiddenRequire`\r\n- `default/TopLevelAwaitAllowedImportWithoutSplitting`\r\n\r\nproduces invalid js when it should work\r\n- `default/TopLevelAwaitAllowedImportWithSplitting`\r\n\r\n- alot of JSX related tests fail because bun assumes you want to use react and the automatic runtime, and the tests are checking for trying to customize that. almost all of these tests are set to skip. its most important to get that automatic jsx working great, and not edge cases like \"--jsx-fragment=this\"\r\n\r\nLow priority (marked as skip) but might not need to be\r\n\r\n- `default/ImportMissingNeitherES6NorCommonJS`: should not error at bundle time but instead rewrite exports to {}\r\n- `default/RequireAndDynamicImportInvalidTemplate`: it seems we dont handle require(dynamic), but it could be a runtime bug that these cases aren't handled. this one is marked as skip for now\r\n- `default/RequireWithoutCallPlatformNeutral` and `default/NestedRequireWithoutCallPlatformNeutral` and `default/RequireWithoutCallInsideTry`, i heard we're dropping the neutral target anyways\r\n- `default/ThisWithES6Syntax`: top level this in the contexts it doesnt do anything useful is not used often. this test is just subtle differences. alot of these are just null vs undefined.\r\n- `default/ExternalModuleExclusionRelativePath`: when you use external with something you import by specifying a relative path, that path has to get rewritten to still resolve.\r\n- `default/MultipleEntryPointsSameNameCollision`, when two entrypoints share a name, bun overrides the first one. i disagree that anyone should have a build setup that allows this, but it seems important to handle this case.\r\n- `default/ImportWithHashParameter`. should \"import file from 'hello.txt#hash'\" work\r\n- `default/AssignToImport` and `default/AssignToImportNoBundle`: we cover most of the cases but not all of them so this cant be marked passing yet.\r\n- `default/WarningsInsideNodeModules`: warnings are causing bundle error. and also these warnings are coming from inside node modules which is what we want to avoid.\r\n- `default/DefineThis`: does anyone actually use `--define this=something` ???\r\n- `default/ConstWithLet`. this is a minification test. we need to rewrite const -> let. this also has to be identical on `default/ConstWithLetNoBundle`",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-16T10:16:36Z",
        "closed_at": "2023-04-16T14:13:08Z",
        "merged_at": "2023-04-16T14:13:08Z",
        "body": "after long time (i didnt have computer), im installing bun on my WSL :D \r\n\r\ni found unknown link in `install.sh` so i replaced it with `bun.sh/docs/installation`\r\nif its required, i can also create section about `unzip is required` but i think its unnecessary",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 826,
        "deletions": 215,
        "changed_files": 18,
        "created_at": "2023-04-15T21:14:56Z",
        "closed_at": "2023-04-16T01:28:21Z",
        "merged_at": "2023-04-16T01:28:21Z",
        "body": "**NOTE: loose mode is enabled by default, which marks most of our fails as SKIPS. it also marks all unchecked tests as success if they bundle.**\r\n\r\ndisable with `BUN_BUNDLER_TEST_LOOSE=false`, which will eventually be true by default or removed entirely\r\n\r\n![image](https://user-images.githubusercontent.com/24465214/232253363-9283c182-7ac0-41d1-a29f-2ea21b0f17a1.png)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-15T08:24:48Z",
        "closed_at": "2023-04-17T20:01:09Z",
        "merged_at": "2023-04-17T20:01:09Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-15T08:17:41Z",
        "closed_at": "2023-04-15T15:52:47Z",
        "merged_at": "2023-04-15T15:52:47Z",
        "body": "Noticed the expect counter for toBeFalsy wasn't updating.\r\n\r\n- Added counter increment.\r\n- Added test scope check\r\n- Made capitalization of `Internal consistency error` message consistent with other errors in file",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 28,
        "changed_files": 13,
        "created_at": "2023-04-14T08:59:30Z",
        "closed_at": "2023-04-14T10:58:39Z",
        "merged_at": "2023-04-14T10:58:39Z",
        "body": "This upgrades to `0.11.0-dev.2571+31738de28`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 367,
        "deletions": 72,
        "changed_files": 7,
        "created_at": "2023-04-14T05:04:22Z",
        "closed_at": "2023-04-14T08:49:30Z",
        "merged_at": "2023-04-14T08:49:30Z",
        "body": "This implements the following comment pragmas:\r\n- `@jsx`\r\n- `@jsxRuntime`\r\n- `@jsxImportSource`\r\n- `@jsxFragment`\r\n\r\nThis also parses `sourceMappingURL=` comments.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 265,
        "deletions": 14032,
        "changed_files": 13,
        "created_at": "2023-04-13T21:15:04Z",
        "closed_at": "2023-04-14T04:55:02Z",
        "merged_at": "2023-04-14T04:55:02Z",
        "body": "```ts\r\ncreateHash(algo).update(string).digest(format)\r\n```\r\n\r\nWill be over 3x faster, just shy of what our native `Bun.CryptoHasher` does. This is done by lazily initializing the `stream.Transform` only if the user decides to use the `Hash` as a stream, meaning the above case only calls CryptoHasher, giving it that performance boost.\r\n \r\n![image](https://user-images.githubusercontent.com/24465214/231895437-30b69c4c-d1de-4976-ae58-0384564fbe2a.png)\r\n\r\nThe exact way this is done is by extending `Transform` but not calling \"\"`super`\"\" in the constructor (it's an es5 class so this is allowed). Then there are a ton of getters and if any are triggered, we call the `Transform` constructor on our current instance and replace the prototype.\r\n\r\nAddresses #2190 but not the issue it's talking about, but it does solve performance issues for what it's testing for.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 29,
        "changed_files": 1,
        "created_at": "2023-04-13T17:58:59Z",
        "closed_at": "2023-04-13T22:14:59Z",
        "merged_at": "2023-04-13T22:14:59Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 53,
        "changed_files": 1,
        "created_at": "2023-04-13T17:39:11Z",
        "closed_at": "2023-04-13T22:14:34Z",
        "merged_at": "2023-04-13T22:14:34Z",
        "body": "Closes: #2644",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 124,
        "deletions": 164,
        "changed_files": 60,
        "created_at": "2023-04-13T06:27:20Z",
        "closed_at": "2023-04-13T11:11:12Z",
        "merged_at": "2023-04-13T11:11:12Z",
        "body": "Blocked on CI for https://github.com/oven-sh/WebKit/actions/runs/4685968642/jobs/8303559681",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-04-13T04:42:20Z",
        "closed_at": "2023-04-13T07:21:00Z",
        "merged_at": "2023-04-13T07:21:00Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-04-12T23:26:33Z",
        "closed_at": "2023-04-13T00:42:56Z",
        "merged_at": "2023-04-13T00:42:56Z",
        "body": "fixes transpiler test:\r\n```js\r\nexpectPrinted_('const x = `str` + \"``\";', \"const x = `str\\\\`\\\\``\");\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1745,
        "deletions": 926,
        "changed_files": 38,
        "created_at": "2023-04-12T23:24:55Z",
        "closed_at": "2023-04-14T01:26:45Z",
        "merged_at": "2023-04-14T01:26:45Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 475,
        "deletions": 438,
        "changed_files": 16,
        "created_at": "2023-04-12T22:29:43Z",
        "closed_at": "2023-04-13T01:40:21Z",
        "merged_at": "2023-04-13T01:40:21Z",
        "body": "- import text files\r\n- change `module_ref` and `wrapper_ref` from `?Ref` to `Ref`\r\n- import empty cjs and esm files\r\n- fix appending to outer prefix wrapper",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 310,
        "deletions": 73,
        "changed_files": 2,
        "created_at": "2023-04-12T20:01:09Z",
        "closed_at": "2023-04-13T01:41:05Z",
        "merged_at": "2023-04-13T01:41:05Z",
        "body": "can be merged whenever",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 55367,
        "deletions": 95,
        "changed_files": 39,
        "created_at": "2023-04-12T09:09:46Z",
        "closed_at": "2023-10-17T00:19:45Z",
        "merged_at": null,
        "body": "current status: barely does anything\r\n\r\n<img width=\"445\" alt=\"image\" src=\"https://user-images.githubusercontent.com/709451/231410252-768ae8a6-e30d-4a77-937c-810363105c91.png\">\r\n\r\n\r\nTODO:\r\n- [ ] Delete `JSGlobalObjectInspectorController.h` and `AugmentableInspectorController.h`\r\n- [ ] Fix `runEventLoopWhilePaused` to use our own function for running the event loop while paused, so that the websocket server continues to receive events when you press pause instead of freezing forever. See call stack below\r\n- [ ] Simulate `Runtime.consoleAPICalled`\r\n- [ ] Simulate `Network.requestWillBeSent`\r\n- [ ] Simulate `Network.responseReceived`\r\n- [ ] Simulate `Network.dataReceived`\r\n- [ ] Simulate `Network.loadingFinished`\r\n- [ ] Figure out why writing anything to the console does nothing\r\n\r\n\r\nCall stack while paused:\r\n```c++\r\nmach_absolute_time (@mach_absolute_time:30)\r\nWTF::MonotonicTime::now() (@WTF::MonotonicTime::now():8)\r\nWTF::RunLoop::populateTasks(WTF::RunLoop::RunMode, WTF::RunLoop::Status&, WTF::Deque<WTF::Ref<WTF::RunLoop::TimerBase::ScheduledTask, WTF::RawPtrTraits<WTF::RunLoop::TimerBase::ScheduledTask>>, 0ul>&) (@WTF::RunLoop::populateTasks(WTF::RunLoop::RunMode, WTF::RunLoop::Status&, WTF::Deque<WTF::Ref<WTF::RunLoop::TimerBase::ScheduledTask, WTF::RawPtrTraits<WTF::RunLoop::TimerBase::ScheduledTask>>, 0ul>&):75)\r\nWTF::RunLoop::runImpl(WTF::RunLoop::RunMode) (@WTF::RunLoop::runImpl(WTF::RunLoop::RunMode):60)\r\nWTF::RunLoop::cycle(unsigned int) (@WTF::RunLoop::cycle(unsigned int):8)\r\nInspector::JSGlobalObjectDebugger::runEventLoopWhilePaused() (@Inspector::JSGlobalObjectDebugger::runEventLoopWhilePaused():16)\r\nJSC::Debugger::handlePause(JSC::JSGlobalObject*, JSC::Debugger::ReasonForPause) (@JSC::Debugger::handlePause(JSC::JSGlobalObject*, JSC::Debugger::ReasonForPause):35)\r\nJSC::Debugger::pauseIfNeeded(JSC::JSGlobalObject*) (@JSC::Debugger::pauseIfNeeded(JSC::JSGlobalObject*):365)\r\nJSC::Debugger::atStatement(JSC::CallFrame*) (@JSC::Debugger::atStatement(JSC::CallFrame*):68)\r\nJSC::Interpreter::debug(JSC::CallFrame*, JSC::DebugHookType) (@JSC::Interpreter::debug(JSC::CallFrame*, JSC::DebugHookType):106)\r\nllint_slow_path_debug (@llint_slow_path_debug:31)\r\nllint_entry (@llint_entry:40162)\r\n```\r\n\r\n<details><summary>Example `Runtime.consoleAPICalled`:</summary>\r\n\r\n```json\r\n{\"type\":\"log\",\"args\":[{\"type\":\"string\",\"value\":\"Hey: 2\"}],\"executionContextId\":1,\"timestamp\":1681288114514.483,\"stackTrace\":{\"callFrames\":[{\"functionName\":\"count\",\"scriptId\":\"44\",\"url\":\"node:internal/console/constructor\",\"lineNumber\":466,\"columnNumber\":9},{\"functionName\":\"\",\"scriptId\":\"384\",\"url\":\"file:///private/tmp/yo.js\",\"lineNumber\":1,\"columnNumber\":10},{\"functionName\":\"listOnTimeout\",\"scriptId\":\"18\",\"url\":\"node:internal/timers\",\"lineNumber\":567,\"columnNumber\":16},{\"functionName\":\"processTimers\",\"scriptId\":\"18\",\"url\":\"node:internal/timers\",\"lineNumber\":510,\"columnNumber\":6}],\"parentId\":{\"id\":\"1\"}}}\r\n```\r\n\r\n</details>",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-12T01:51:52Z",
        "closed_at": "2023-04-13T01:40:03Z",
        "merged_at": "2023-04-13T01:40:03Z",
        "body": "## Problem\r\n`fs.promises.readFile` exists in Node.js but `fs.promises.readfile` doesn't:\r\n\r\nhttps://github.com/privatenumber/compare-bun-node#fspromises\r\n\r\n## Changes\r\n\r\nRemove `fs.promises.readfile`. This would be a breaking change.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-11T23:41:58Z",
        "closed_at": "2023-04-13T15:25:56Z",
        "merged_at": null,
        "body": "I think I randomly spotted this memory leak. I think we do not need to allocate the `alias`/`name` into a separate buffer. It should sit comfortably in `version_buf`, although I am not sure where that is freed just yet (I am currently stepping through the code to read/learn how it works, haha). The version_buf was from `manager.options.positionals[1..]` though (`manager` was created [here](https://github.com/oven-sh/bun/blob/a744f5369d356424c3039f9dcf6d7f9412565ecf/src/install/install.zig#L5885)).\r\n\r\nHere is the code which looks bad to me:\r\n\r\n```zig\r\nif (alias) |name| {\r\n    request.is_aliased = true;\r\n    // request owns this memory?\r\n    request.name = allocator.dupe(u8, name) catch unreachable;\r\n    request.name_hash = String.Builder.stringHash(name);\r\n} else {\r\n    request.name_hash = String.Builder.stringHash(version.literal.slice(input));\r\n}\r\n\r\nfor (update_requests.constSlice()) |*prev| {\r\n    // if we continue, `request` is never written to `update_requests`, therefore we leak `request.name` if it exists\r\n    if (prev.name_hash == request.name_hash and request.name.len == prev.name.len) continue :outer;\r\n}\r\n// this append could fail and perform `catch break`, at which point we leak `request.name` if it exists?\r\nupdate_requests.append(request) catch break;\r\n```",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 9,
        "changed_files": 4,
        "created_at": "2023-04-11T20:36:52Z",
        "closed_at": "2023-05-30T14:37:49Z",
        "merged_at": null,
        "body": "Adds `bun docs` which opens https://bun.sh/docs. \r\n\r\nCopied entirely from the implementation of `bun discord`",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-04-11T19:15:29Z",
        "closed_at": "2023-04-11T20:19:25Z",
        "merged_at": "2023-04-11T20:19:25Z",
        "body": "adds the `bash` language specifier to `which clang-15` so that when you click the copy button, it doesn't include the `$`",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 81,
        "deletions": 37,
        "changed_files": 3,
        "created_at": "2023-04-11T15:55:15Z",
        "closed_at": "2023-09-16T01:47:52Z",
        "merged_at": null,
        "body": "Today we do not wait until the handshake is properly done on fetch and do not wait on WebSocket before call open event.\r\n\r\nList of pending things:\r\n\r\n- [ ] Expose the true handshake error message like nodejs in fetch and reject if we have SSL errors when rejectUnauthorized == true (default: true)\r\n- [ ] Add global config for rejectUnauthorized aka https://nodejs.org/api/https.html#httpsglobalagent\r\n- [ ] fix fetch test failing website with tlsextname\r\n- [ ] fix fetch test failing simultaneous HTTPS fetch\r\n- [ ] proper signalize WebSocket open event on TLS\r\n - [ ] proper signalize WebSocket error event on TLS error matching fetch behavior and browser behavior.\r\n- [ ] add tests to check TLS behavior \r\n- [ ] add https://github.com/oven-sh/bun/blob/main/src/deps/boringssl.translated.zig#L18819-L18837 in bun_context_options_t so no need to use it onOpen anymore.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1568,
        "deletions": 829,
        "changed_files": 11,
        "created_at": "2023-04-11T15:53:18Z",
        "closed_at": "2023-04-12T01:18:50Z",
        "merged_at": "2023-04-12T01:18:50Z",
        "body": "#2380 mostly was just porting over tests, and not actually ensuring each test was accurate and runs in bun. this pr goes over all 800 ish tests and refines them to actually test what they're testing for.\r\n\r\n- esbuild/css.test.ts (skipping for now)\r\n- [x] esbuild/dce.test.ts (not including CSS related tests)\r\n- [ ] esbuild/default.test.ts\r\n- [x] esbuild/importstar.test.ts\r\n- [ ] esbuild/importstar_ts.test.ts\r\n- [ ] esbuild/loader.test.ts\r\n- [ ] esbuild/lower.test.ts\r\n- [ ] esbuild/packagejson.test.ts\r\n- [ ] esbuild/splitting.test.ts\r\n- [ ] esbuild/tsconfig.test.ts\r\n- [ ] esbuild/ts.test.ts\r\n- [ ] bundler_cjs2esm.test.ts\r\n- [x] bundler_edgecase.test.ts\r\n\r\nmany features of many tests like format=cjs, legal comments, inject; don't exist in bun, and might not for a while (or at all). any tests that don't support bun are automatically skipped.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 373,
        "deletions": 322,
        "changed_files": 3,
        "created_at": "2023-04-11T12:47:31Z",
        "closed_at": "2023-04-13T01:41:40Z",
        "merged_at": "2023-04-13T01:41:40Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-04-10T18:51:06Z",
        "closed_at": "2023-04-10T22:05:17Z",
        "merged_at": "2023-04-10T22:05:17Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1084,
        "changed_files": 13,
        "created_at": "2023-04-10T15:15:16Z",
        "closed_at": "2023-04-11T08:52:54Z",
        "merged_at": "2023-04-11T08:52:54Z",
        "body": "Should I also remove the following?\r\n- [x] https://github.com/oven-sh/bun/tree/main/.devcontainer\r\n- [x] https://github.com/oven-sh/bun/blob/main/Dockerfile.devcontainer\r\n- [ ] https://github.com/oven-sh/bun/blob/main/Dockerfile\r\n- [ ] https://github.com/oven-sh/bun/tree/main/.docker\r\n- [ ] https://github.com/oven-sh/bun/blob/main/.dockerignore\r\n- [ ] This line that also mentions Docker a lot: https://github.com/oven-sh/bun/blob/373248ce9c2915494b6dac5da958a39e236a5c10/Makefile#L771",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-10T07:00:57Z",
        "closed_at": "2023-06-05T16:30:09Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1161,
        "deletions": 210,
        "changed_files": 15,
        "created_at": "2023-04-10T05:47:33Z",
        "closed_at": "2023-04-18T21:59:52Z",
        "merged_at": "2023-04-18T21:59:52Z",
        "body": "Currently, `node:events` is implemented in C++, which may sound fast but ends up being much slower than a pure JS implementation as the rapid hopping between native code and JS with listener callbacks is a lot of overhead. This PR is not only porting the node.js `events` into JS as closely as possible, but also trying to get it as fast as possible.\r\n\r\nCurrently node.js own events implementation beats us, but we've gone from being 4x slower to something more like 2x.\r\n\r\nStill debating which implementation details are best, such as\r\n- `Object` vs `Map`: they lead to different gains in different tests\r\n- An optimization where having only one listener is not an array but just the function itself. This seems to be slower than just having and looping over a length=1 array.\r\n\r\nAlso, setting real-world benchmarks that tests actual usage instead of than a single \".emit()\". Microbenchmarks are handy but we need to consider the bigger picture.\r\n\r\n**required todo**:\r\n\r\n- [x] Replace the C++ module out for `events.exports.js`\r\n- [x] Find the best implementations for `addListener` and `emit`\r\n  - the array clone we have to do seems to be the slow part?\r\n- [x] `EventEmitter#once` (implemented but check if can be made faster)\r\n  - [x] optimization: compare arrow fn vs the current bind solution.\r\n- [x] `EventEmitter#removeListener` (reimplement)\r\n- [x] `EventEmitter#prependListener`\r\n- [x] `EventEmitter#listenerCount`\r\n- [x] `EventEmitter#types`\r\n- [x] `EventEmitter.once` (async iterator)\r\n- [x] `EventEmitter.setMaxListeners`\r\n- [x] `EventEmitter.getEventListeners`\r\n- [x] error event\r\n- [x] capturing rejections\r\n- [x] validators\r\n\r\n**things might not do in this PR**\r\n\r\n- [ ] Remove the C++ implementation, it's still in the code somewhere.\r\n- [ ] `EventEmitter.on` (async iterator)\r\n- [ ] `EventEmitterAsyncResource`\r\n\r\nFixes #2190 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-04-08T20:06:25Z",
        "closed_at": "2023-04-09T03:05:06Z",
        "merged_at": "2023-04-09T03:05:06Z",
        "body": "- docs typo with the callout tag\r\n![image](https://user-images.githubusercontent.com/24465214/230740556-e9a0b602-2390-469b-aac4-d4c6b22c38c3.png)\r\n\r\n- had some important stuff commented out in `make setup`\r\n- add troubleshooting notes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1190,
        "deletions": 350,
        "changed_files": 6,
        "created_at": "2023-04-08T08:59:32Z",
        "closed_at": "2023-04-09T10:16:12Z",
        "merged_at": "2023-04-09T10:16:12Z",
        "body": "Bun's TypeScript transpilation is effectively pre TypeScript 4.7 right now.\r\n\r\nThis PR fixes:\r\n- [x] https://github.com/oven-sh/bun/issues/765\r\n- [x] https://github.com/oven-sh/bun/issues/2203\r\n- [x] https://github.com/oven-sh/bun/issues/2377\r\n\r\nTODO:\r\n- Finish porting TypeScript parser functions for a few things\r\n- Copy esbuild tests",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-04-07T21:05:29Z",
        "closed_at": "2023-04-21T18:35:42Z",
        "merged_at": "2023-04-21T18:35:42Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 218,
        "deletions": 149,
        "changed_files": 11,
        "created_at": "2023-04-07T14:52:49Z",
        "closed_at": "2023-04-08T09:23:11Z",
        "merged_at": "2023-04-08T09:23:11Z",
        "body": "The dev container isn't a great experience for working on bun (biggest limit is you can't easily take bun-debug outside of it), and setting up a development environment on the host computer isn't very difficult, it's just not documented. This PR aims to fix that, Instead of 30-90 minutes on figuring out how to set up zig and docker, just ~5 commands and ~10-30 minutes of network and build time.\r\n\r\nIt only covers these three common situations, which I think we should expand to some more\r\n- MacOS\r\n- Ubuntu\r\n- Arch Linux\r\n\r\nBut this is much better than before, where we pushed the Docker Devcontainer instead.\r\n\r\nDocumentation TODO\r\n- [x] Move all other information in old that I omitted\r\n- [ ] Explain purpose for common make commands\r\n- [x] IDE Stuff\r\n  - [ ] ZLS, solved already by https://github.com/oven-sh/bun/pull/2434\r\n  - [x] C++ Config\r\n- [ ] Explain that `-j` shouldn't be used except on bindings. Note on why make dev runs on one core. etc.\r\n- [x] rename for consistency; URL should match sidebar `/project/development`, readme should match too.\r\n- [x] Explain that npm can be used if bun is not available\r\n- [x] Make note of the devcontainer; it works, but meh. (or should it be removed completely)\r\n- [x] How to build release\r\n\r\nMakefile changes:\r\n- `-l:libatomic.a` -> `-latomic` to support Arch Linux only shipping with a `.so` file of this.\r\n- [x] Hide `which` errors, since this confused me initially and made me think I had to install other packages when in reality the Makefile used a different binary that did exist.\r\n- [x] Use `node_modules/esbuild` instead of global (Ubuntu 20)\r\n- [X] Use `python3` when `python` and `python2` don't exist. (Ubuntu 20)\r\n- [x] Add `make setup` which is a shortcut for vendor, bindings, etc\r\n- [X] Add `make regenerate-bindings` which is a shortcut for `make clean-bindings builtins && make bindings -j (cpu count)`\r\n\r\nOther ideas\r\n- Move to using `bun i @oven/zig` in the actual repo? it's probably too soon for that in this PR. once that's been done, if decided, then the zig section of the document can be almost entirely removed.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 20,
        "changed_files": 4,
        "created_at": "2023-04-07T07:53:52Z",
        "closed_at": "2023-04-21T18:34:05Z",
        "merged_at": "2023-04-21T18:34:05Z",
        "body": "~~TODO: check if bun resolves extends from parent npm packages~~\r\n\r\nRemoved the `\"extends\": [\"bun-types\"]` for the moment\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-04-07T01:49:17Z",
        "closed_at": "2023-05-11T21:39:44Z",
        "merged_at": "2023-05-11T21:39:44Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": false,
        "additions": 413923,
        "deletions": 613,
        "changed_files": 85,
        "created_at": "2023-04-07T00:21:25Z",
        "closed_at": "2023-06-05T16:29:46Z",
        "merged_at": null,
        "body": "## `Dependency.Version.infer` updates\r\n - no longer matches httpgithub.com/u/r or https://github.com/u/# (not sure what `#` is matched for though?)\r\n - v=x is now properly inferred as an npm package\r\n - strings beginning with \"x.\" are no longer assumed to be npm (could be github or tarball)\r\n\r\nTo-do: Might want to fix up the npm version manager to match https://github.com/npm/node-semver/blob/main/internal/re.js (loose version)\r\n\r\n## Yarn.lock printer updates\r\n- made dependencies sort lexicographically\r\n- fixed inconsistent wrapping in quotes:\r\n  dependency versions now match the yarn stringify implementation :)\r\n\r\n  ```\r\n  \"library_with_build_info_3@^0.0.4\":\r\n  version \"0.0.4\"\r\n  resolved \"https://registry.npmjs.org/library_with_build_info_3/-/library_with_build_info_3-0.0.4.tgz\"\r\n  integrity sha512-11QipYcHSwOZyhzgizRUObdbZeeR5zSZgSKaBmu3DyLAfRkAJoYoYhXaDdpsslXbBifl/PeosrlYiRtrGLH46A==\r\n  dependencies:\r\n      add v2.0.2||2.0.5\r\n      is-number x\r\n      \"true\" \"0.0.3||0.0.2\"\r\n  optionalDependencies:\r\n      pad \"3.x\"\r\n  ```\r\n\r\n- Fixed incorrect and redundant emit for folder installs:\r\n  ```\r\n  \"bun-types@../_0/node_modules/bun-types\":\r\n    version \"../_0/node_modules/bun-types\"\r\n    resolved \"../_0/node_modules/bun-types\"\r\n  ```\r\n  new:\r\n  ```\r\n  bun-types@../_0/node_modules/bun-types:\r\n    version \"0.5.8\"\r\n  ```\r\n\r\n## JSON fix\r\n\r\nRunning `react@latest` will now properly resolve to the latest version in both `package.json` and `yarn.lock`\r\n\r\n## Notes\r\nMade a new `bun.openFileZ` function which can support longer paths than the OS will accept by default. \r\n\r\n## Ways we could be more consistent with yarn:\r\nWhen installing local tarballs, yarn prints links differently depending on how they were installed. The first package below was installed with a global path, the second with a local path, and the third was installed last from a global path from the directory above, using `--cwd` to work inside the lower directory.\r\n```\r\n\"emoji-turkey@file:../test/cli/install/resources/emoji-turkey-1.2.1.tgz\":\r\n  version \"1.2.1\"\r\n  resolved \"file:../test/cli/install/resources/emoji-turkey-1.2.1.tgz#11bcf77a172b80f17c203ed0ece034915a5a6886\"\r\n\r\n\"false@../test/cli/install/resources/false-0.0.4.tgz\":\r\n  version \"0.0.4\"\r\n  resolved \"../test/cli/install/resources/false-0.0.4.tgz#8f55de5af5c03f50bf68aed57ed80e3d2176a517\"\r\n\r\n\"true@/home/validark/bun/test/cli/install/resources/true-0.0.4.tgz\":\r\n  version \"0.0.4\"\r\n  resolved \"/home/validark/bun/test/cli/install/resources/true-0.0.4.tgz#921ebfbd58122d3a66cfff6dc054daf269eb9f21\"\r\n```\r\n\r\nIf one installs another package, it will update `true` to be:\r\n```\r\n\"true@file:../test/cli/install/resources/true-0.0.4.tgz\":\r\n  version \"0.0.4\"\r\n  resolved \"file:../test/cli/install/resources/true-0.0.4.tgz#921ebfbd58122d3a66cfff6dc054daf269eb9f21\"\r\n```\r\n\r\nThis seems like a bug in yarn, but it's one inconsistency Bun has with it nonetheless. We also do not yet output the `#921ebfbd58122d3a66cfff6dc054daf269eb9f21` you see at the end of the resolved URL's in yarn.lock files.\r\n\r\n~There is a bug I am aware of where we just straight-up do the wrong thing and it can cause crashes. It's one of our test cases actually, the one where we install \"uglify-js\", but it gets installed as \"uglify\" and is placed in \"node_modules/uglify\".~ The issue is that we have several places, ~including the yarn printer~, that assume \"node_modules/uglify-js\" is where it will be installed, and the printer believes `node_modules/uglify-js` is the name under which it should be installed. That's incorrect, it should be \"uglify\". I am not sure whether `Package.name` should be changed from `uglify-js` to `uglify`, or if we should leave that for where it might be needed, and switch to using the `Dependency.name` when we can. \r\n  - Fixed it in the printer. However, we should still decide whether parseWithJSON should be allowed to read the `name` property in situations like this.\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 119,
        "deletions": 77,
        "changed_files": 4,
        "created_at": "2023-04-07T00:13:09Z",
        "closed_at": "2023-04-07T11:03:06Z",
        "merged_at": "2023-04-07T11:03:06Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-04-06T09:20:48Z",
        "closed_at": "2023-04-06T22:09:20Z",
        "merged_at": "2023-04-06T22:09:20Z",
        "body": "Added notice that tells `bunx` is an alias for `bun x`\r\n\r\nI think it fits, for example, as we have seen with https://github.com/oven-sh/setup-bun/issues/9#issuecomment-1489426974\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 165,
        "deletions": 67,
        "changed_files": 9,
        "created_at": "2023-04-06T03:09:19Z",
        "closed_at": "2023-04-06T20:59:06Z",
        "merged_at": "2023-04-06T20:59:06Z",
        "body": "i left my PR (#1501) on \"ready to merge\", when it was not. oops.\r\n\r\ntime to do it again.\r\n\r\nthis cleans up the loose ends i didn't get finished",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1568,
        "deletions": 169,
        "changed_files": 17,
        "created_at": "2023-04-05T23:49:52Z",
        "closed_at": "2023-04-13T22:30:51Z",
        "merged_at": null,
        "body": "This PR is pretty much ready to go.\r\n\r\nThere are a few more tests I'll take a few mins to uncomment but seems like for the most part they should easily pass after working through most of the kinks.\r\n\r\nTODO: (in another PR)\r\n- [ ] Eventually use a lot more builtins.\r\n- [x] `node:events.once`\r\n- [ ] Fix `readline.AsyncIterator` to use this under the hood. I don't think it will work currently until we merge #2046 though, so I'll probably put that in that PR",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 9,
        "changed_files": 8,
        "created_at": "2023-04-05T19:54:24Z",
        "closed_at": "2023-04-06T22:55:24Z",
        "merged_at": "2023-04-06T22:55:24Z",
        "body": "Docs claim fs.constants is missing. in actuality it is `fs.promises.constants` that is missing (which is in node)\r\n\r\nThis PR:\r\n- fixes the missing export\r\n- adds unit test\r\n- fixes docs\r\n- typedefs",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-05T16:44:09Z",
        "closed_at": "2023-04-06T01:28:42Z",
        "merged_at": "2023-04-06T01:28:42Z",
        "body": "Per @Jarred-Sumner [in this Discord chat](https://discord.com/channels/876711213126520882/1092938757428219934/1092942936469143552), tests exist for the `preload` config for `bun run` but not for `bun test`. This PR adds those missing tests. (It also updates the `cowsay` example on the README to be compatible with `zsh`.)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 49,
        "created_at": "2023-04-05T13:32:00Z",
        "closed_at": "2023-06-05T16:26:36Z",
        "merged_at": null,
        "body": "This comes after https://github.com/oven-sh/bun/pull/2562\r\n## Problem\r\nJS files were essentially \"path-less\" (e.g. `node:path`) so they couldn't import relative paths, and thus couldn't reuse code.\r\n\r\n## Changes\r\n- Moves `src/bun.js/*.exports.js` files to `src/bun.js/src/*.exports.js`\r\n- Build using esbuild to `src/bun.js/dist/*.exports.js`\r\n\r\n\r\n## Other info\r\n- In the near future, we want to build these using bun\r\n\r\n- In the future, I wonder if Node.js APIs can be aliases (e.g. `node:path`), so their real FS path allows them to be used to resolve relative paths. This way, we can skip the build step during development. @Jarred-Sumner ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-04-05T13:09:51Z",
        "closed_at": "2023-04-06T00:38:47Z",
        "merged_at": "2023-04-06T00:38:47Z",
        "body": "Trying to build with esbuild emitted the following warnings",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-04-05T06:04:45Z",
        "closed_at": "2023-04-06T22:12:59Z",
        "merged_at": "2023-04-06T22:12:59Z",
        "body": "i dont think this is a true fix for #2438, but adding this info informs how to uninstall bun before some \"uninstall the runtime\" command is added.\r\n\r\ni think bun should have some command to remove itself. maybe something like `bun remove -g bun` or some top level command name i cant think of (uninstall is already a command), and what this would do on top of `rm ~/.bun` is do the reverse of the install script messing with your shell configurations, or printing a message if it couldn't remove (nonexistent) bun from your `$PATH`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 249,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-04-04T23:50:19Z",
        "closed_at": "2023-04-05T20:39:51Z",
        "merged_at": "2023-04-05T20:39:51Z",
        "body": "fixes #2417",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 1,
        "changed_files": 13,
        "created_at": "2023-04-04T22:24:43Z",
        "closed_at": "2023-04-04T23:26:40Z",
        "merged_at": "2023-04-04T23:26:40Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 186,
        "deletions": 31,
        "changed_files": 3,
        "created_at": "2023-04-04T21:53:56Z",
        "closed_at": "2023-04-06T00:48:18Z",
        "merged_at": "2023-04-06T00:48:18Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 13944,
        "deletions": 10367,
        "changed_files": 23,
        "created_at": "2023-04-04T18:20:35Z",
        "closed_at": "2023-04-07T11:02:06Z",
        "merged_at": "2023-04-07T11:02:06Z",
        "body": "To run the tests, rebuild usockets with the PR source is needed.\r\n\r\nCloses https://github.com/oven-sh/bun/issues/2504\r\nCloses https://github.com/oven-sh/bun/issues/2565\r\nCloses: https://github.com/oven-sh/bun/issues/2470",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-04T01:29:44Z",
        "closed_at": "2023-04-07T22:16:21Z",
        "merged_at": "2023-04-07T22:16:21Z",
        "body": "Adds the already-supported object form of `TranspilerOptions['tsconfig']`, currently defined as `string | undefined`.\r\n\r\nLets developers do this:\r\n\r\n```ts\r\nconst transpiler = new Bun.Transpiler({\r\n  loader: 'tsx',\r\n  tsconfig: { compilerOptions: { jsxImportSource: 'solid-js' } },\r\n});\r\n```\r\n\r\n...without having to `JSON.stringify` the object just to satisfy TypeScript:\r\n\r\n```ts\r\nconst transpiler = new Bun.Transpiler({\r\n  loader: 'tsx',\r\n  tsconfig: JSON.stringify({ compilerOptions: { jsxImportSource: 'solid-js' } }),\r\n});\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 30,
        "changed_files": 10,
        "created_at": "2023-04-03T23:10:58Z",
        "closed_at": "2023-04-04T23:47:57Z",
        "merged_at": "2023-04-04T23:47:57Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 102,
        "deletions": 98,
        "changed_files": 6,
        "created_at": "2023-04-03T22:26:20Z",
        "closed_at": "2023-10-05T22:59:03Z",
        "merged_at": "2023-10-05T22:59:03Z",
        "body": "Updates the messages from `bun install` to use the singular form of nouns when referring to only one of something. Otherwise, the plural form is used as it currently does in all cases.\r\n\r\nE.g., instead of `\"1 packages installed\"` it will now say `\"1 package installed\"` or `\"2 packages installed\"`.\r\n\r\n(I don't have an environment to test this, so I'm just hoping it works... This is also my first time to work with Zig.)",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 120,
        "deletions": 100,
        "changed_files": 5,
        "created_at": "2023-04-02T21:19:16Z",
        "closed_at": "2023-04-03T05:32:20Z",
        "merged_at": "2023-04-03T05:32:20Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1327,
        "deletions": 42,
        "changed_files": 20,
        "created_at": "2023-04-01T23:05:03Z",
        "closed_at": "2023-04-02T04:13:27Z",
        "merged_at": "2023-04-02T04:13:27Z",
        "body": "This adds stubs that throw better errors for the unimplemented Node.js builtins:\r\n- node:v8\r\n- node:trace_events\r\n- node:repl\r\n- node:inspector\r\n- node:http2\r\n- node:diagnostics_channel\r\n- node:dgram\r\n- node:cluster\r\n\r\nThis also adds some missing aliases to builtins",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-01T22:35:26Z",
        "closed_at": "2023-04-02T00:49:56Z",
        "merged_at": "2023-04-02T00:49:56Z",
        "body": "This is probably a very inconsequential change, but I thought it might be worth keeping the NodeJS LTS version up to date in the `npm_config_user_agent` string.\r\n\r\nThis PR updates it to \"v18.15.0\". v20.x isn't scheduled to be LTS until October of this year.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-31T22:59:28Z",
        "closed_at": "2023-04-01T02:20:11Z",
        "merged_at": "2023-04-01T02:20:11Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 58,
        "changed_files": 7,
        "created_at": "2023-03-30T08:06:33Z",
        "closed_at": "2023-03-31T02:34:20Z",
        "merged_at": "2023-03-31T02:34:20Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-03-30T04:25:53Z",
        "closed_at": "2023-04-21T21:35:50Z",
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-03-29T20:39:44Z",
        "closed_at": "2023-03-30T00:10:44Z",
        "merged_at": "2023-03-30T00:10:44Z",
        "body": "I am not sure at this moment how to make a test for this but in an empty folder the following commands repro the issue.\r\n\r\n```\r\nbun init\r\nbun add true -y\r\n```\r\n\r\nAt the time of writing this produces a yarn.lock file which looks like so:\r\n```\r\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\r\n# yarn lockfile v1\r\n# bun ./bun.lockb --hash: 11FD1BB989596431-20acd09908802a90-46C46CAD6336683E-4a23890a7915a917\r\n\r\n\r\nbun-types@^0.5.0:\r\n  version \"0.5.8\"\r\n  resolved \"https://registry.npmjs.org/bun-types/-/bun-types-0.5.8.tgz\"\r\n  integrity sha512-VHwD0MAHo3wraYAeqTWH2NDmXOdGfC3wWWOnZvK93ytI6yq/LkgsCjDudWNmN7MlfPvJb2zoLMnkzhjxNwLsLw==\r\n\r\ntrue@:\r\n  version \"0.0.4\"\r\n  resolved \"https://registry.npmjs.org/true/-/true-0.0.4.tgz\"\r\n  integrity sha512-e7hkFCda5y51OTE4eQHVPFbuljGnOpzrVcigGM5Pd9+Bw1bEsHCq3mVIm/z/O5Mh1bXtVPNxUV8oCl/dMunlRg==\r\n```\r\n\r\nThis PR fixes two bugs with the `true` emit. First of all, any package beginning with \"true\" or \"false\" would be wrapped in quotation marks by yarn ([source](https://github.com/yarnpkg/yarn/blob/158d96dce95313d9a00218302631cd263877d164/src/lockfile/stringify.js#L11)). Second of all, the version is not written between its `@` and `:`. I was not sure if this should have been fixed earlier in the pipeline but it appears to only happen to packages you installed with `bun add` or `bun install`. This makes it just drop the resolved version with a '^' in front of it. This seems correct in the most common case but again, I am not sure if it would more elegantly be fixed in a different way.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 462,
        "deletions": 320,
        "changed_files": 5,
        "created_at": "2023-03-29T05:28:07Z",
        "closed_at": "2023-03-29T12:37:16Z",
        "merged_at": "2023-03-29T12:37:16Z",
        "body": "This does three things:\r\n1) Ensures uWS never calls onWritable or onAborted after the request/response is ended.\r\n2) Adds a `has_marked_pending` flag to `RequestContext` which says \"Are we attempting to write a response body to the HTTP request, but haven't yet?\".  This happens when `tryEnd` tells us \"no not yet\", but we need to write _something_ or else the connection will hang. Previously, in #2499, we attempted to write two different response bodies and then promptly crashed. This issue affected development mode Bun.serve()\r\n3) Regenerates `schema.js`, which eventually ends up in bun-error.js. This somehow wasn't `prettier`'d last time. Prettier also escapes the strings in the identifiers in there. Quoting it fixes an HTML escaping issue that causes the default error JS page to appear as raw HTML instead of the `<script>` tag. \r\n\r\n\r\nFixes #2499",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 268,
        "deletions": 46,
        "changed_files": 14,
        "created_at": "2023-03-29T00:15:43Z",
        "closed_at": "2023-03-29T04:28:35Z",
        "merged_at": "2023-03-29T04:28:35Z",
        "body": "TODO \r\n- Write tests that check watch behavior. Can mostly copy from `bun --hot`\r\n- Manually test on Linux\r\n\r\n![okay](https://user-images.githubusercontent.com/709451/228396976-38a23864-4a1d-4c96-87cc-04e5181bf459.gif)\r\n\r\n\r\nnote: CI isn't green. These test failures are unrelated",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 450,
        "deletions": 29,
        "changed_files": 4,
        "created_at": "2023-03-28T15:10:30Z",
        "closed_at": "2023-03-28T20:45:00Z",
        "merged_at": "2023-03-28T20:45:00Z",
        "body": "closes #2448",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-28T07:07:00Z",
        "closed_at": "2023-07-18T03:48:23Z",
        "merged_at": null,
        "body": "From my testing, `bun link <package>` only does symlinking in `node_modules` and doesn't modify the `package.json`, whereas the docs make it sound like it does both.  I presume the docs mean to say that editing the `package.json` is an alternative way to use a linked package ... ?",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 29,
        "changed_files": 6,
        "created_at": "2023-03-27T23:56:27Z",
        "closed_at": "2023-03-28T01:22:13Z",
        "merged_at": "2023-03-28T01:22:13Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-27T20:24:44Z",
        "closed_at": "2023-05-14T17:15:12Z",
        "merged_at": null,
        "body": "This draft can make this example of socket.io run:\r\n\r\n```javascript\r\nconst html = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Socket.IO chat</title>\r\n  <style>\r\n    body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; }\r\n\r\n    #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }\r\n    #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }\r\n    #input:focus { outline: none; }\r\n    #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }\r\n\r\n    #messages { list-style-type: none; margin: 0; padding: 0; }\r\n    #messages > li { padding: 0.5rem 1rem; }\r\n    #messages > li:nth-child(odd) { background: #efefef; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <ul id=\"messages\"></ul>\r\n  <form id=\"form\" action=\"\">\r\n    <input id=\"input\" autocomplete=\"off\" /><button>Send</button>\r\n  </form>\r\n  <script src=\"https://cdn.socket.io/4.5.4/socket.io.min.js\"></script>\r\n<script>\r\nvar socket = io();\r\n\r\nvar messages = document.getElementById('messages');\r\nvar form = document.getElementById('form');\r\nvar input = document.getElementById('input');\r\n\r\nform.addEventListener('submit', function(e) {\r\n  e.preventDefault();\r\n  if (input.value) {\r\n    socket.emit('chat message', input.value);\r\n    input.value = '';\r\n  }\r\n});\r\n\r\nsocket.on('chat message', function(msg) {\r\n  var item = document.createElement('li');\r\n  item.textContent = msg;\r\n  messages.appendChild(item);\r\n  window.scrollTo(0, document.body.scrollHeight);\r\n});\r\n</script>\r\n</body>\r\n</html>\r\n\r\n`;\r\nconst app = require('express')();\r\nconst http = require(\"http\").createServer(app);\r\nconst io = require('socket.io')(http, {\r\n  wsEngine:  require(\"./node_modules/ws/index.js\").Server \r\n});\r\nconst port = process.env.PORT || 3000;\r\napp.get(\"/\", (req, res)=> res.send(html));\r\nio.on('connection', (socket) => {\r\n  socket.on('chat message', msg => {\r\n    io.emit('chat message', msg);\r\n  });\r\n});\r\n\r\nhttp.listen(port, () => {\r\n  console.log(`Socket.IO server running at http://localhost:${port}/`);\r\n});\r\n```\r\n\r\nPending:\r\n- [ ] setTimeout timer.refresh() is not implemented yet\r\n- [ ] ws.Server is not implemented yet\r\n\r\nCloses: https://github.com/oven-sh/bun/issues/2485\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 128,
        "deletions": 33,
        "changed_files": 6,
        "created_at": "2023-03-27T04:37:11Z",
        "closed_at": "2023-04-06T21:01:49Z",
        "merged_at": "2023-04-06T21:01:49Z",
        "body": "mtime value is epoch time stamp in millisecond unit.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-27T02:31:49Z",
        "closed_at": "2023-03-27T03:45:52Z",
        "merged_at": "2023-03-27T03:45:52Z",
        "body": "closes: https://github.com/oven-sh/bun/issues/2421",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 507,
        "deletions": 294,
        "changed_files": 29,
        "created_at": "2023-03-25T23:03:31Z",
        "closed_at": "2023-03-29T01:23:50Z",
        "merged_at": "2023-03-29T01:23:50Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-03-24T13:17:41Z",
        "closed_at": "2023-03-30T00:41:11Z",
        "merged_at": "2023-03-30T00:41:11Z",
        "body": "Hi!\r\n\r\nThat PR provide a quick fix to the bug #2422. If the parsing of the date is null, write `Invalid Date` instead. Maybe it could be fixed earlier inside `jsonStringify` ?\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-23T22:23:09Z",
        "closed_at": "2023-06-05T16:31:47Z",
        "merged_at": null,
        "body": "\r\n- dashed underline makes text difficult to read so made it a solid line\r\n- applied an offset to the underline so that it doesn't touch the bottom part of text",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-03-23T06:41:31Z",
        "closed_at": "2023-03-23T13:49:43Z",
        "merged_at": "2023-03-23T13:49:43Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-03-23T00:43:41Z",
        "closed_at": "2023-03-23T04:21:57Z",
        "merged_at": "2023-03-23T04:21:57Z",
        "body": "I made a pr and the CI failed when it tried to use `sudo` on the self-hosted arm runner:\r\n\r\nhttps://github.com/oven-sh/bun/actions/runs/4495384541/jobs/7909151739#step:4:17\r\n\r\nUsing `sudo` to install `bun` for testing PRs isn't a great idea...\r\n\r\nHere, I offer a way to create a temporary directory (`$stage_bin`) and add it to the path (via [`$GITHUB_PATH`](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path)) for the rest of a specific github workflow `job`. macOS will delete temp files periodically (see `/etc/defaults/periodic.conf`), but roughly:\r\n```\r\n# 110.clean-tmps\r\ndaily_clean_tmps_enable=\"YES\"                           # Delete stuff daily\r\ndaily_clean_tmps_dirs=\"/tmp\"                            # Delete under here\r\ndaily_clean_tmps_days=\"3\"                               # If not accessed for\r\n```\r\n\r\nThis avoids installing things into the system's normal path and scopes it for roughly the lifespan of the single workflow job.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 208,
        "deletions": 22,
        "changed_files": 3,
        "created_at": "2023-03-23T00:14:53Z",
        "closed_at": "2023-03-23T04:22:31Z",
        "merged_at": "2023-03-23T04:22:31Z",
        "body": "This PR adds the start of a small HTTP server for doing various tasks for HTTP testing, including testing timers (`/delay/{timeInSec}`), returning status specified in URL path (`/status/{code}`), and verifying that a client made a particular type of request (`GET`, `POST`, `HEAD`, for now). \r\n\r\nThis is replacing the external dependency of https://httpbin.org in the Undici tests since that was slowing down our test suite. Undici tests should be much faster now, and in the future we can reuse and extend this `http-test-server` util if needed.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 390,
        "deletions": 139,
        "changed_files": 25,
        "created_at": "2023-03-22T23:40:53Z",
        "closed_at": "2023-03-23T01:09:52Z",
        "merged_at": "2023-03-23T01:09:52Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 510,
        "deletions": 271,
        "changed_files": 76,
        "created_at": "2023-03-22T02:17:32Z",
        "closed_at": "2023-03-22T22:01:01Z",
        "merged_at": "2023-03-22T22:01:01Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-21T13:34:32Z",
        "closed_at": "2023-03-21T17:14:22Z",
        "merged_at": "2023-03-21T17:14:22Z",
        "body": "- fixed typo in the month name",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-20T17:40:27Z",
        "closed_at": "2023-03-21T00:49:56Z",
        "merged_at": "2023-03-21T00:49:56Z",
        "body": "\"postinstall\" is listed twice in the example for the \"bun-create\" section of package.json. Based on the context and content of the echo commands I believe the intent is that the first \"postinstall\" should be \"preinstall\".  This change corrects this.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-20T17:18:43Z",
        "closed_at": "2023-03-20T18:26:22Z",
        "merged_at": "2023-03-20T18:26:22Z",
        "body": "The example omits the actual command.  \r\nThis change corrects that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 410,
        "deletions": 219,
        "changed_files": 5,
        "created_at": "2023-03-20T11:13:20Z",
        "closed_at": "2023-03-20T12:57:23Z",
        "merged_at": "2023-03-20T12:57:23Z",
        "body": "This very common pattern works now:\r\n\r\n```json\r\n{\r\n    \"name\": \"myWorkspace\",\r\n    \"workspaces\": [\"packages/*\"]\r\n}\r\n```\r\n\r\nThis is a _very_ simple glob matcher. It only supports `/*`. The following are not implemented:\r\n- `packages/**/*`\r\n- `packages/*/*`\r\n- `packages/*/*/foo`\r\n- `packages/*/foo`\r\n- `packages/*-foo`\r\n- `packages/*-foo{.b}`\r\n\r\n\r\nSide note: it is surprising that `\"workspaces\"` also installs a package into the workspace root under node_modules. I don't think yarn does that.\r\n\r\nAlso, we no longer report the location of the duplicate workspace name in the package.json error. I think this is fine. We won't always have that information now since it is inferred via the glob star.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-03-20T07:24:31Z",
        "closed_at": "2023-06-05T16:30:44Z",
        "merged_at": null,
        "body": "Blocked on https://github.com/ziglang/vscode-zig/pull/91",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 46,
        "changed_files": 6,
        "created_at": "2023-03-20T05:27:46Z",
        "closed_at": "2023-05-17T08:17:16Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-03-20T01:24:26Z",
        "closed_at": "2023-03-20T02:42:45Z",
        "merged_at": "2023-03-20T02:42:45Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 17,
        "changed_files": 5,
        "created_at": "2023-03-19T19:56:24Z",
        "closed_at": "2023-03-21T02:51:24Z",
        "merged_at": "2023-03-21T02:51:24Z",
        "body": "[Based upon discussion](https://twitter.com/atcb/status/1637534900122435585) with @andrewbranch of the TypeScript team, this PR updates docs to use `\"moduleResolution\": \"bundler\"`\r\n\r\n![screenshot of discussion on Twitter](https://user-images.githubusercontent.com/1010525/226205543-9ac76f56-1d9c-445f-9f8a-df94a467f234.png)\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 635,
        "deletions": 251,
        "changed_files": 24,
        "created_at": "2023-03-19T06:43:45Z",
        "closed_at": "2023-03-19T21:08:20Z",
        "merged_at": "2023-03-19T21:08:20Z",
        "body": "Fixes a crash on code like this:\r\n\r\n```js\r\n expect(() => { throw Symbol(\"toString can throw\"); }).toThrow()`\r\n```\r\n\r\nFixes #874\r\n\r\nFixes merging behavior with `new Request(req1, req2)`",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-03-18T23:31:57Z",
        "closed_at": "2023-05-03T01:17:34Z",
        "merged_at": null,
        "body": "Not intended to be committed.\r\nJust want to see which tests fail on macos-10.15.",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-03-18T16:36:59Z",
        "closed_at": "2023-03-20T18:27:39Z",
        "merged_at": "2023-03-20T18:27:39Z",
        "body": "This fixes #2424",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 428,
        "deletions": 156,
        "changed_files": 20,
        "created_at": "2023-03-17T22:52:12Z",
        "closed_at": "2023-03-18T00:14:40Z",
        "merged_at": "2023-03-18T00:14:40Z",
        "body": "I also included `toStringTagSymbol` in `Process.cpp`",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2023-03-17T16:47:06Z",
        "closed_at": "2023-03-21T03:32:28Z",
        "merged_at": "2023-03-21T03:32:28Z",
        "body": "This PR makes the event emitter by default type safe",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 20049,
        "deletions": 12664,
        "changed_files": 221,
        "created_at": "2023-03-17T12:28:42Z",
        "closed_at": "2023-04-03T22:45:35Z",
        "merged_at": null,
        "body": "This depends on https://github.com/Jarred-Sumner/uSockets/pull/1\r\nTo run the tests, rebuild usockets with the PR source is needed.\r\n\r\nCloses https://github.com/oven-sh/bun/issues/2504",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 155,
        "deletions": 8,
        "changed_files": 8,
        "created_at": "2023-03-16T08:18:51Z",
        "closed_at": "2023-03-17T10:49:41Z",
        "merged_at": "2023-03-17T10:49:41Z",
        "body": "implement toMatch\r\nrelated issue: https://github.com/oven-sh/bun/issues/1825",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 146,
        "deletions": 47,
        "changed_files": 3,
        "created_at": "2023-03-15T20:08:45Z",
        "closed_at": "2023-03-15T21:30:32Z",
        "merged_at": "2023-03-15T21:30:32Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 50,
        "changed_files": 7,
        "created_at": "2023-03-15T07:26:51Z",
        "closed_at": "2023-03-15T15:49:53Z",
        "merged_at": "2023-03-15T15:49:53Z",
        "body": "fixes #2392",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 27,
        "changed_files": 7,
        "created_at": "2023-03-15T06:57:09Z",
        "closed_at": "2023-03-16T03:04:56Z",
        "merged_at": "2023-03-16T03:04:56Z",
        "body": "this is a follow up of previous pr: https://github.com/oven-sh/bun/pull/2389\r\n\r\n1. use `isConstrutor()` replacing `jsType().isFunction()`\r\n2. update `toBeInstanceOf` formatting message\r\n3. update `isInstanceOf` binding ( C API -> C++ Binding), as for C API is not recommended anymore \ud83e\udd14 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-03-14T05:30:19Z",
        "closed_at": "2023-03-14T15:13:48Z",
        "merged_at": "2023-03-14T15:13:48Z",
        "body": "This is mostly because the last item in CONTRIBUTING is incorrect, but using markdown links makes the file more useful...\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-14T04:48:23Z",
        "closed_at": "2023-06-05T16:32:13Z",
        "merged_at": null,
        "body": "This fixes #2381 (prettier)\r\n\r\nIt doesn't cover bun-framework-next as I really can't figure out what that's doing.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 18987,
        "deletions": 3,
        "changed_files": 17,
        "created_at": "2023-03-13T23:33:04Z",
        "closed_at": "2023-03-17T07:05:51Z",
        "merged_at": "2023-03-17T07:05:51Z",
        "body": "TODO List\r\n- [ ] Finish implementing `expectBundled`\r\n- [x] convert every generated TODO comment into a js property\r\n- [ ] (Ideally) hand check all 867 tests for accuracy, and add runtime checks so we rely on more than just snapshots. This will make the bundler bulletproof.\r\n\r\n---\r\n\r\nIntroduces `expectBundled` as a helper for running bundle tests, which can totally be used to write our own tests later.\r\n```ts\r\n/**\r\n * Call within a test to test the bundler. The `id` passed must be unique across the all test. See\r\n * `BundlerTestInput` for all available options.\r\n *\r\n * All bundle entry files and their output files are written to disk at:\r\n * `$TEMP/bun-bundler-tests/{id}`.\r\n * This can be used to inspect and debug bundles, as they are not deleted after runtime.\r\n *\r\n * Instead of comparing the bundle outputs against snapshots, most of our test cases just run the\r\n * bundle and have additional code to assert the logic is happening properly. This allows the\r\n * bundler to change exactly how it writes files (optimizations / variable renaming), without\r\n * breaking any tests- as long as the code in the end achieves the same result.\r\n *\r\n * Also, passing `BUN_BUNDLER_TEST_USE_ESBUILD=1` will bundle with `esbuild` instead, essentially\r\n * testing the `esbuild` CLI instead.\r\n */\r\nfunction expectBundled(id: string, opts: BundlerTestInput)\r\n```\r\n\r\nand the goal is to port every test from https://github.com/evanw/esbuild/tree/main/internal/bundler_tests\r\n\r\nin addition some small changes were made on top of these tests\r\n- add `bierner.comment-tagged-templates` to repo recommendations. it gives syntax highlighting of js strings within the `.test.ts` files.\r\n- edit `test/tsconfig.json` to point to in-repo typedefs\r\n- in `test/package.json`, add `dedent`+`@types/dedent` remove `bun-types`\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2627,
        "deletions": 82,
        "changed_files": 11,
        "created_at": "2023-03-13T21:02:02Z",
        "closed_at": "2023-03-17T12:28:23Z",
        "merged_at": null,
        "body": "This depends on https://github.com/Jarred-Sumner/uSockets/pull/1",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-03-13T20:40:24Z",
        "closed_at": "2023-03-21T04:32:21Z",
        "merged_at": "2023-03-21T04:32:21Z",
        "body": "I'd like to know if I could add my project as part of the ecosystem into docs. `Buchta` is a web framework that currently uses \"legacy\" bun's bundler ( the old one + I don't know if I can call the old bundler \"legacy\" ). It currently supports Svelte and Preact. It's not the fastest framework but has something to it. It allows you to create web applications that can be SSR'd with the ability to export your project. I would be happy if the project could appear in the docs section.\r\n\r\nOfficial website: https://buchtajs.com/\r\nDocumentation page: https://buchtajs.com/docs/\r\nProject's repository: https://github.com/Fire-The-Fox/buchta\r\nSource code of the website: https://github.com/Fire-The-Fox/buchtajs.com\r\n* The exported page is located in `dist` directory / `gh-pages` branch",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-03-12T04:58:05Z",
        "closed_at": "2023-03-12T10:43:33Z",
        "merged_at": "2023-03-12T10:43:33Z",
        "body": "this would segv `require.resolve(\"bun\", {})`\r\n\r\nthis also fixes test in `import-meta.test.js`\r\n\r\nfixes #2370 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 30,
        "changed_files": 1,
        "created_at": "2023-03-11T22:03:40Z",
        "closed_at": "2023-03-17T17:29:06Z",
        "merged_at": null,
        "body": "The current Dockerfile uses Alpine with a set of glibc libraries. This is not sustainable for a few reasons (see #1567). Since container size is important, we switch to distroless which allows a minimal host but based on debian 11.\r\n\r\nAdditionally, add an entrypoint that points to bun.\r\n\r\nThis PR increases the uncompressed container size by ~2MB.\r\n\r\nSidenote: google has aarch64 versions which makes it possible to release this for additional architectures.\r\n\r\n---\r\n\r\nTodo\r\n\r\n- [ ] more testing, I don't use bun much in images\r\n- [ ] fix CI build/label error\r\n- [ ] add opencontainer labels\r\n- [ ] explore more architectures than amd64",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-10T23:31:37Z",
        "closed_at": "2023-03-13T20:47:58Z",
        "merged_at": "2023-03-13T20:47:58Z",
        "body": "proto (https://moonrepo.dev/proto) is a new toolchain (version) manager that has support for Bun. This adds a proto example to the install page.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-08T13:00:00Z",
        "closed_at": "2023-03-08T16:16:07Z",
        "merged_at": "2023-03-08T16:16:07Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 261,
        "deletions": 63,
        "changed_files": 16,
        "created_at": "2023-03-08T02:36:45Z",
        "closed_at": "2023-03-08T08:18:14Z",
        "merged_at": "2023-03-08T08:18:14Z",
        "body": "- Fixes a couple test failures\r\n- Adds a MIMEType hash table to intern mime type strings so we usually won't have to allocate them\r\n- Blob.prototype.type with a non-ascii value should return \"\"\r\n- Uses saturated and/or wrapping arithmetic in .slice() to more clearly handle integer overflow\r\n- Checks isNumber in a couple places we should've been checking",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 896,
        "deletions": 28,
        "changed_files": 5,
        "created_at": "2023-03-07T21:25:37Z",
        "closed_at": "2023-03-13T23:42:36Z",
        "merged_at": "2023-03-13T23:42:35Z",
        "body": "These features are still missing and will come in a later PR:\r\ndedicated option\r\nbacklog\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-07T17:32:10Z",
        "closed_at": "2023-03-07T21:11:54Z",
        "merged_at": "2023-03-07T21:11:54Z",
        "body": "reloadCount was probably meant to be count\r\n\r\nAlso, it might be nice to mention how to do hmr in typescript using `declare global`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 433,
        "deletions": 2321,
        "changed_files": 293,
        "created_at": "2023-03-07T08:05:49Z",
        "closed_at": "2023-03-07T20:22:34Z",
        "merged_at": "2023-03-07T20:22:34Z",
        "body": "This moves around the tests to be grouped in nicer categories.\r\n\r\nNot yet mergable, need to update github actions and makefile to use new paths.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 125,
        "deletions": 105,
        "changed_files": 3,
        "created_at": "2023-03-07T02:27:10Z",
        "closed_at": "2023-03-07T04:00:50Z",
        "merged_at": "2023-03-07T04:00:50Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 452,
        "deletions": 57,
        "changed_files": 2,
        "created_at": "2023-03-07T00:21:53Z",
        "closed_at": "2023-03-07T06:50:12Z",
        "merged_at": "2023-03-07T06:50:12Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-03-06T20:47:02Z",
        "closed_at": "2023-03-09T18:41:55Z",
        "merged_at": null,
        "body": "Changes suggestion from modifying the `tsconfig.json`'s `compilerOptions.types` in favor of a typedef file with a reference to `bun-types`.\r\n\r\nWhen manually supplying packages to `compilerOptions.types` it will disable auto-detection of `@types` packages https://www.typescriptlang.org/tsconfig#types\r\n\r\n> By default all visible \u201d@types\u201d packages are included in your compilation. Packages in node_modules/@types of any enclosing folder are considered visible. For example, that means packages within ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/, and so on.\r\nIf `types` is specified, only packages listed will be included in the global scope. For instance:\r\n\r\nThis change also adheres to community trends, such as Vite's suggestion for referencing its client types https://vitejs.dev/guide/env-and-mode.html#intellisense-for-typescript",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 133,
        "deletions": 148,
        "changed_files": 2,
        "created_at": "2023-03-06T16:32:53Z",
        "closed_at": "2023-03-06T20:09:45Z",
        "merged_at": "2023-03-06T20:09:45Z",
        "body": "- skip flaky tests when running as `root`\r\n- use `expect().toThrow()`\r\n- clean up temporary files after tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-03-06T05:15:06Z",
        "closed_at": "2023-03-06T06:45:28Z",
        "merged_at": "2023-03-06T06:45:28Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 124,
        "deletions": 71,
        "changed_files": 6,
        "created_at": "2023-03-06T00:04:08Z",
        "closed_at": "2023-03-06T01:33:38Z",
        "merged_at": "2023-03-06T01:33:38Z",
        "body": "- fix time-zone-dependent test failure",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 34,
        "changed_files": 4,
        "created_at": "2023-03-05T15:23:41Z",
        "closed_at": "2023-03-05T16:54:01Z",
        "merged_at": "2023-03-05T16:54:01Z",
        "body": "fixes #2298",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48908,
        "deletions": 16125,
        "changed_files": 113,
        "created_at": "2023-03-05T12:52:17Z",
        "closed_at": "2023-04-08T03:08:01Z",
        "merged_at": "2023-04-08T03:08:01Z",
        "body": "## What is this?\r\n\r\nThis implements a new JavaScript bundler designed for production bundling targeting browsers & Bun's runtime. It's mostly based on esbuild's implementation. It outputs ESM and supports code-splitting. Unlike bun's current bundler, this bundles the entire app (not just node_modules), which makes it suitable for production. It also fixes many issues with CommonJS <> ESM interop and some transpiler edgecases due to (previously) lack of correct symbol renaming.\r\n\r\nThis PR is still very much a work-in-progress. It is far enough along to produce bundled output, but not far enough along yet for actual usage or benchmarking.\r\n\r\n#### Breaking changes\r\n\r\nThis PR deprecates the current version of `bun bun` and replaces it with this new bundler. We may also rename `bun bun` to `bun bundle` or `bun build` (not decided yet). **`node_modules.bun` files will no longer be generated**. To smooth the transition, we will alias `bun bun` to the new command for at least one minor version.\r\n\r\n### Important missing features\r\n\r\nLarge missing features:\r\n- [ ] Source Maps\r\n- [ ] JavaScript API\r\n- [x] React Server Components\r\n\r\nBun's runtime specifically:\r\n- [ ] Expose JavaScript API\r\n- [ ] Read `// @bun`, to prevent bundling in the runtime twice\r\n- [ ] Inline `import.meta` object\r\n- [ ] Enable bundling by default in the JavaScript runtime\r\n\r\nMust TODO before merging:\r\n- [x] Port esbuild's tests\r\n- [ ] Free memory when building from JS API (right now it leaks)\r\n- [ ] Source Maps\r\n- [ ] More granular parallelization than chunks. \r\n- [ ] Event loop integration with JS\r\n- [ ] Incremental mode suitable for development\r\n- [ ] IIFE output format\r\n\r\nFixes https://github.com/oven-sh/bun/issues/1968 Fixes https://github.com/oven-sh/bun/issues/1961 Fixes #1032 Fixes #74 Fixes #1724 Fixes #1270 Fixes #875 (more correctly) Fixes #2244 Fixes #2221 Fixes #1169 Fixes #421 (more correctly) ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 53,
        "changed_files": 4,
        "created_at": "2023-03-05T03:23:11Z",
        "closed_at": "2023-03-05T08:21:01Z",
        "merged_at": "2023-03-05T08:21:01Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 146,
        "deletions": 82,
        "changed_files": 7,
        "created_at": "2023-03-04T23:21:03Z",
        "closed_at": "2023-03-05T16:09:18Z",
        "merged_at": "2023-03-05T16:09:18Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-03-04T12:59:42Z",
        "closed_at": "2023-03-04T14:01:04Z",
        "merged_at": "2023-03-04T14:01:04Z",
        "body": "Current example will fail without explicitly configure the server to use port 8080. Hence, replacing it with default port (3000).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-04T12:50:26Z",
        "closed_at": "2023-03-04T14:01:40Z",
        "merged_at": "2023-03-04T14:01:40Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-03-04T00:23:01Z",
        "closed_at": "2023-03-04T01:49:33Z",
        "merged_at": "2023-03-04T01:49:33Z",
        "body": "- [x] show usage when there are no arguments (no arguments parsed as packages, so `bunx --random` is still no arguments) passed to `bunx`\r\n- [x] add tests ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4635,
        "deletions": 131,
        "changed_files": 41,
        "created_at": "2023-03-03T22:39:02Z",
        "closed_at": "2023-03-14T23:50:59Z",
        "merged_at": "2023-03-14T23:50:59Z",
        "body": "`console.log()` formatting changes not related to snapshots in this PR:\r\n- object property names will have quotes.\r\n- `new Boolean(true)` will be logged as `[Boolean: true]`.\r\n- if extended from `Boolean` or `Number`, the class will be logged as `[<super> (<new class name>): <value>]`\r\n\r\nTODO:\r\n\r\n- [x] better overflow checks in `parseFile()`\r\n- [x] handle returned snapshot errors in `toMatchSnapshot()`\r\n- [x] match jest formatting for strings with newlines and `Buffer` types\r\n- [x] more tests for jest formatting, specifically with arrays, objects, buffers, and classes all nested\r\n- [x] optional `propertyMatcher` argument",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-03-03T22:37:25Z",
        "closed_at": "2023-03-04T12:56:25Z",
        "merged_at": "2023-03-04T12:56:25Z",
        "body": "Fixes #2292\r\n\r\n- [x] Works if package is installed\r\n```bash\r\nbun-debug x @antfu/ni --version # ignore that this one failed as it will install it\r\nbun-debug x @antfu/ni --version\r\n```\r\n\r\n- [x] Works if package needs to be installed (clear cache)\r\n```bash\r\nrm -rf /tmp/@antfu\r\nbun-debug x @antfu/ni --version\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-03-03T19:50:32Z",
        "closed_at": "2023-03-11T15:51:10Z",
        "merged_at": null,
        "body": "Fix typos across codebase.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4564,
        "deletions": 3235,
        "changed_files": 332,
        "created_at": "2023-03-03T19:14:00Z",
        "closed_at": "2023-03-07T21:24:50Z",
        "merged_at": null,
        "body": "These features are still missing:\r\n Socket.pause\r\n Socket.resume\r\n dedicated option\r\n path (IPC) listen option\r\n backlog\r\n \r\n unix domain (path) will be implemented in another PR",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-03-03T16:44:34Z",
        "closed_at": "2023-03-04T05:08:26Z",
        "merged_at": "2023-03-04T05:08:26Z",
        "body": "Fixes #2273 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1204,
        "deletions": 249,
        "changed_files": 7,
        "created_at": "2023-03-03T05:31:58Z",
        "closed_at": "2023-03-03T22:24:12Z",
        "merged_at": "2023-03-03T22:24:12Z",
        "body": "Closes #2058",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-03T05:10:52Z",
        "closed_at": "2023-03-20T18:29:12Z",
        "merged_at": null,
        "body": "query param is undefined, even when there is one.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-03-03T04:07:55Z",
        "closed_at": "2023-03-03T05:49:13Z",
        "merged_at": "2023-03-03T05:49:13Z",
        "body": "- Fix invalid named variable `tx` in the second example\r\n- Update variable name `tx` to `transpiler` in the first example to make it consistent across all examples",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1840,
        "deletions": 4393,
        "changed_files": 119,
        "created_at": "2023-03-02T23:36:22Z",
        "closed_at": "2023-03-03T03:02:10Z",
        "merged_at": "2023-03-03T03:02:10Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 100,
        "changed_files": 2,
        "created_at": "2023-03-02T23:26:57Z",
        "closed_at": "2023-03-03T01:33:26Z",
        "merged_at": "2023-03-03T01:33:26Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 221,
        "deletions": 120,
        "changed_files": 11,
        "created_at": "2023-03-02T21:31:35Z",
        "closed_at": "2023-03-02T23:25:28Z",
        "merged_at": null,
        "body": "relevant stuff:\r\nhttps://github.com/oven-sh/bun/blob/4e2b751e5de6b932c73f677992da755612ae008d/src/bun.js/node/node_os.zig#L636-L640\r\n\r\nhttps://github.com/oven-sh/bun/blob/4e2b751e5de6b932c73f677992da755612ae008d/test/bun.js/os.test.js#L45-L49\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-03-02T18:13:46Z",
        "closed_at": "2023-03-02T19:48:11Z",
        "merged_at": "2023-03-02T19:48:11Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 70,
        "deletions": 69,
        "changed_files": 9,
        "created_at": "2023-03-02T17:10:50Z",
        "closed_at": "2023-03-02T19:49:33Z",
        "merged_at": "2023-03-02T19:49:33Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 133,
        "changed_files": 3,
        "created_at": "2023-03-02T04:15:21Z",
        "closed_at": "2023-03-02T05:40:11Z",
        "merged_at": "2023-03-02T05:40:11Z",
        "body": "also removed redundant tests (bun-server.test.ts have better and more consistent tests)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 46,
        "changed_files": 1,
        "created_at": "2023-03-02T03:31:51Z",
        "closed_at": "2023-03-02T05:45:49Z",
        "merged_at": "2023-03-02T05:45:49Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-03-01T21:41:47Z",
        "closed_at": "2023-03-01T23:47:04Z",
        "merged_at": "2023-03-01T23:47:04Z",
        "body": "this avoids use after free when using controller after aborted, all `bun test fetch` related to streams should pass even without luck after this",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 174,
        "deletions": 34,
        "changed_files": 3,
        "created_at": "2023-03-01T17:37:01Z",
        "closed_at": "2023-03-01T21:15:53Z",
        "merged_at": "2023-03-01T21:15:53Z",
        "body": "fix Stream not deinit properly when connection is aborted\r\nfix signal \"abort\" event always firing\r\n\r\nCurrent behavior:\r\nusing `controller.write` after abortion it throws:\r\n```\r\nTypeError: Expected Sink\r\n code: \"ERR_INVALID_THIS\"\r\n\r\n      at /home/cirospaciari/Repos/bun/tests.ts:156:12\r\n ```\r\n\r\nIf using `controller.enqueue` after abortion it throws:\r\n```\r\nTypeError: Cannot start stream with closed controller\r\n```\r\n\r\nThe difference in behaviors:\r\n`{type: \"direct\" }` after throw go to `onResolveStream` path\r\ndefault type with enqueue go to `onRejectStream` path\r\ndefault type uses TypeError but does not show the line of code that throws the error\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-03-01T15:19:43Z",
        "closed_at": "2023-03-01T21:07:22Z",
        "merged_at": "2023-03-01T21:07:22Z",
        "body": "closes https://github.com/oven-sh/bun/issues/2248",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 62,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-03-01T01:05:53Z",
        "closed_at": "2023-03-02T17:00:20Z",
        "merged_at": "2023-03-02T17:00:20Z",
        "body": "`Bun.sleepSync` was treating its argument as seconds rather than milliseconds as the docs stated.  This is a breaking change in that the function now behaves as documented.  Fixed relevant tests.\r\n\r\nFixes #1420 ",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-01T00:43:54Z",
        "closed_at": "2023-03-01T07:35:04Z",
        "merged_at": "2023-03-01T07:35:04Z",
        "body": "The c-ares build expects `lib/libcares.a` to exist after running cmake, but on my system (Fedora, x86_64) it was being generated in `lib64/`.  This simply sets the cmake variable so that the target ends up where we expect.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 291,
        "deletions": 1840,
        "changed_files": 16,
        "created_at": "2023-02-28T19:04:58Z",
        "closed_at": "2023-02-28T21:49:06Z",
        "merged_at": "2023-02-28T21:49:06Z",
        "body": "Major changes:\r\n* Instead of vendoring zig-clap and adding changes, this uses Hejsil/zig-clap directly as a submodule\r\n* `cli.zig` and related files have been updated to use new API (no more `flag()` or `option()`)\r\n* A workaround for the Run and Auto commands has been implemented that allows us to use the official upstream\r\n\r\nMinor change:\r\n* `-i` now has the long option `--install-fallback`; I didn't spend much time thinking about this name, so suggestions weclome.\r\n\r\nMerging this should unblock #1819 and potentially other Node compatibility issues.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-02-28T18:47:14Z",
        "closed_at": "2023-03-01T00:56:13Z",
        "merged_at": "2023-03-01T00:56:13Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-28T18:42:03Z",
        "closed_at": "2023-03-01T01:55:18Z",
        "merged_at": "2023-03-01T01:55:18Z",
        "body": "Closes #2234",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 448,
        "deletions": 42,
        "changed_files": 10,
        "created_at": "2023-02-28T06:42:32Z",
        "closed_at": "2023-02-28T08:01:22Z",
        "merged_at": "2023-02-28T08:01:22Z",
        "body": "This is a big improvement to Bun's plugin system.\r\n\r\n<img width=\"445\" alt=\"image\" src=\"https://user-images.githubusercontent.com/709451/221774386-b968f232-df5a-46b9-abf7-812054e09ddd.png\">\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 222,
        "deletions": 28,
        "changed_files": 4,
        "created_at": "2023-02-28T02:37:25Z",
        "closed_at": "2023-03-02T20:24:44Z",
        "merged_at": "2023-03-02T20:24:44Z",
        "body": "Remakes typings for dlopen/linkSymbols to give types to exported functions. It's a little hacky, so any polish is appreciated. Also, introduces a pointer type, seeing as how all of the argument names are `arg_#`, I introduced a pointer type which is a thin wrapper over number to allow for explicitly typing pointers. Example:\r\n\r\n![image](https://user-images.githubusercontent.com/43508353/221739018-589094d3-cab4-4006-bccc-a3aba91b42e7.png)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-02-27T23:06:17Z",
        "closed_at": "2023-02-28T02:28:43Z",
        "merged_at": "2023-02-28T02:28:43Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-02-27T19:18:21Z",
        "closed_at": "2023-02-28T00:08:01Z",
        "merged_at": "2023-02-28T00:08:01Z",
        "body": "querystring.escape and unescape had been implemented by Bumping querystring-es3 and http module already has all the stuff implemented.\r\n\r\nAlso i have a regex based url.parse implementation which is 23x faster than current one and 10x faster than Node's and isnt WHATWG compilant whereas `new URL().parse` is compilant with WHATWG so it would be better to provide both options to users",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-02-27T19:11:33Z",
        "closed_at": "2023-03-08T18:52:51Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1587,
        "deletions": 6001,
        "changed_files": 75,
        "created_at": "2023-02-27T18:43:49Z",
        "closed_at": "2023-02-27T23:55:30Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 355,
        "deletions": 146,
        "changed_files": 3,
        "created_at": "2023-02-27T15:27:43Z",
        "closed_at": "2023-02-27T17:36:17Z",
        "merged_at": "2023-02-27T17:36:17Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 44,
        "changed_files": 2,
        "created_at": "2023-02-26T15:11:03Z",
        "closed_at": "2023-02-26T20:14:52Z",
        "merged_at": "2023-02-26T20:14:52Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-02-26T14:45:02Z",
        "closed_at": "2023-03-29T21:36:43Z",
        "merged_at": null,
        "body": "First of all, congrats to @Jarred-Sumner and the whole team for building such a fast runtime. At @codedamn, we were some of the first to try to implement bun runtime in our development (and soon production) flows.\r\n\r\nWe released bun playground as soon as it was released publicly last year, and we've been keeping it up-to-date since then (we also have bun.new domain to boot a fast and free bun playground without downloading/installing/signing up anywhere).\r\n\r\nI'm the founder of codedamn - and we would love to contribute to bun docs to make them richer and more interactive with live playground examples laid througout. This PR is a proof-of-concept.\r\n\r\nFor initial few playgrounds, we can work together. Once we have 3-5 playgrounds in the docs, we will be happy to shift the ownership of these playgrounds under a codedamn account owned by someone from the bun team (in case you want to update playgrounds later).\r\n\r\nHere are our docs (relatively simple) on how to embed codedamn playgrounds and meaning of each parameter: https://teach.codedamn.com/docs/instructor-guides/playground-in-article\r\n\r\nAnd here's how you can create a playground: https://codedamn.com/playgrounds\r\n\r\nSome things I'd like to list down:\r\n\r\n- We don't plan to charge/ask to create codedamn accounts from anyone when they're using these embeds\r\n- They'll always be free.\r\n- We have internal systems that detect compute abuse and rate limit people/ban people on IP address level. This shouldn't affect most legit users.\r\n- Our bun playground usually is up to date with current stable bun binary (1-2 days delay maximum).\r\n\r\nHere's the direct URL for you to visit to see how the embed would look like: https://codedamn.com/playground/QfdYRxSPrQscm9SKKmm2b?embed=1&ctl=1",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-26T05:58:31Z",
        "closed_at": "2023-02-26T08:23:58Z",
        "merged_at": "2023-02-26T08:23:58Z",
        "body": "replace `globalThis.reloadCount++;` to `globalThis.count++;`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-02-25T21:10:56Z",
        "closed_at": "2023-02-28T00:06:28Z",
        "merged_at": "2023-02-28T00:06:28Z",
        "body": "When starting the dev server,  there is a logic bug when the default / user provided port is already in use and it tries to pick a new random port. In this case although, the server will listen on the new correct port, the bundler's origin is not updated correctly.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-25T16:47:36Z",
        "closed_at": "2023-02-26T00:37:39Z",
        "merged_at": "2023-02-26T00:37:39Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-02-25T13:41:21Z",
        "closed_at": "2023-02-25T15:49:44Z",
        "merged_at": "2023-02-25T15:49:44Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-25T11:09:06Z",
        "closed_at": "2023-02-25T12:33:22Z",
        "merged_at": "2023-02-25T12:33:22Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-02-25T09:38:06Z",
        "closed_at": "2023-02-25T10:45:12Z",
        "merged_at": "2023-02-25T10:45:12Z",
        "body": "While trying out Bun I stumbled upon this tiny typo. Love the new docs!",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-25T08:02:04Z",
        "closed_at": "2023-02-25T10:45:49Z",
        "merged_at": "2023-02-25T10:45:49Z",
        "body": "Heya!\r\n\r\nI just installed bun for the first time - it's very exciting!\r\n\r\nMy install (on Ubuntu) looked like this:\r\n\r\n```bash\r\ncurl -fsSL https://bun.sh/install | bash\r\n######################################################################## 100.0%\r\nbun was installed successfully to ~/.bun/bin/bun \r\n\r\nAdded \"~/.bun/bin\" to $PATH in \"~/.zshrc\" \r\n\r\nTo get started, run: \r\n\r\n exec /usr/bin/zsh \r\n  bun --help\r\n```\r\n\r\n![screenshot illustrating the above text](https://user-images.githubusercontent.com/1010525/221345990-e35d124f-dd7e-4d35-ac2c-b966b9517c1d.png)\r\n\r\nNote the difference in indentation between `exec /usr/bin/zsh` and `bun --help`.  This seemed likely to be unintentional.  This PR makes it consistent.\r\n\r\nYes - it's a 1 char whitespace PR :wink: \r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-25T04:17:00Z",
        "closed_at": "2023-02-25T10:44:58Z",
        "merged_at": "2023-02-25T10:44:58Z",
        "body": "Fixes broken internal link from the express docs to nodejs compatability information.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-02-25T02:49:21Z",
        "closed_at": "2023-02-25T15:47:11Z",
        "merged_at": "2023-02-25T15:47:11Z",
        "body": "Hey I was reading through this section and I thought these improvements could be made",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-25T02:20:40Z",
        "closed_at": "2023-02-25T10:44:03Z",
        "merged_at": "2023-02-25T10:44:03Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 444,
        "deletions": 5437,
        "changed_files": 18,
        "created_at": "2023-02-24T20:08:55Z",
        "closed_at": "2023-02-25T00:33:54Z",
        "merged_at": "2023-02-25T00:33:53Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 92,
        "deletions": 59,
        "changed_files": 2,
        "created_at": "2023-02-24T19:01:54Z",
        "closed_at": "2023-02-24T20:22:15Z",
        "merged_at": "2023-02-24T20:22:15Z",
        "body": "fixes partially https://github.com/oven-sh/bun/issues/1752\r\nbut do not cover this weird case:\r\n\r\n```javascript\r\nexpect(new Response(\"\").body instanceof ReadableStream).toBe(true)\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-02-24T18:58:31Z",
        "closed_at": "2023-02-24T20:21:44Z",
        "merged_at": null,
        "body": "Fixes broken build for `zig build headers-obj` on x86, it would break due to undefined symbol `__zig_probe_stack`, which requires the `compiler_rt` to be linked on x86 machines.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 546,
        "deletions": 572,
        "changed_files": 55,
        "created_at": "2023-02-24T09:08:32Z",
        "closed_at": "2023-02-24T13:53:27Z",
        "merged_at": "2023-02-24T13:53:27Z",
        "body": "- parse colour code in `Log.add*()`\r\n- fix memory reference issue in `DebugLogs.addNote()`",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-02-24T02:08:36Z",
        "closed_at": "2023-02-28T00:26:34Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-02-23T21:59:44Z",
        "closed_at": "2023-02-23T23:06:09Z",
        "merged_at": null,
        "body": "fixes https://github.com/oven-sh/bun/issues/1752",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 30,
        "changed_files": 1,
        "created_at": "2023-02-23T21:11:58Z",
        "closed_at": "2023-02-24T21:56:41Z",
        "merged_at": "2023-02-24T21:56:41Z",
        "body": "fix https://github.com/oven-sh/bun/issues/2098",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 61,
        "changed_files": 3,
        "created_at": "2023-02-23T19:31:00Z",
        "closed_at": "2023-02-28T00:10:03Z",
        "merged_at": "2023-02-28T00:10:03Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 308,
        "deletions": 10,
        "changed_files": 6,
        "created_at": "2023-02-23T18:27:26Z",
        "closed_at": "2023-02-27T17:58:46Z",
        "merged_at": "2023-02-27T17:58:46Z",
        "body": "Implements `os.networkInterfaces` for both Linux and OSX, ~~partially resolving #1550~~ fully resolves #1550 now that  #2115 is merged.\r\n\r\nTesting locally on Linux produces exact same results as Node aside from field ordering.\r\nTested on x86_64 OSX, same results as Node.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 33,
        "changed_files": 5,
        "created_at": "2023-02-22T20:05:02Z",
        "closed_at": "2023-02-22T21:55:42Z",
        "merged_at": "2023-02-22T21:55:42Z",
        "body": "<img width=\"360\" alt=\"Screenshot 2023-02-22 at 12 47 42 AM\" src=\"https://user-images.githubusercontent.com/35280289/220746649-4740df36-d1dc-44f2-adf1-b4f4ca459d48.png\">\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 43,
        "changed_files": 2,
        "created_at": "2023-02-22T15:48:37Z",
        "closed_at": "2023-02-22T20:39:41Z",
        "merged_at": "2023-02-22T20:39:41Z",
        "body": "Fixes #2127 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-22T10:05:17Z",
        "closed_at": "2023-02-22T22:26:22Z",
        "merged_at": "2023-02-22T22:26:22Z",
        "body": "There's an override error with latest alpine and various versions of glibc (including 2.35): https://github.com/sgerrand/alpine-pkg-glibc/issues/185\r\n\r\nThis MR proposes a workaround (tested on fly.io - it works) so that it's possible to have bun usable with minimal linux dependencies.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 607,
        "deletions": 101,
        "changed_files": 21,
        "created_at": "2023-02-20T22:24:11Z",
        "closed_at": "2023-02-24T19:02:59Z",
        "merged_at": null,
        "body": "- [x] add signal property\r\n- [x] abort async\r\n- [x] abort sync\r\n- [x] exitCode as abort reason\r\n- [x] exitCode as abort reason (sync)\r\n- [ ] tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 174,
        "deletions": 75,
        "changed_files": 3,
        "created_at": "2023-02-20T19:20:24Z",
        "closed_at": "2023-02-24T20:24:04Z",
        "merged_at": "2023-02-24T20:24:04Z",
        "body": "Fixes #1888.\r\n\r\nProvides an implementation of `os.cpus` for Darwin platforms.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 236,
        "deletions": 143,
        "changed_files": 4,
        "created_at": "2023-02-20T16:42:10Z",
        "closed_at": "2023-02-21T00:46:26Z",
        "merged_at": "2023-02-21T00:46:26Z",
        "body": "Currently we don't have any mention of what `--bun` does in the case of `bunx`. This PR adds some info about it.\r\n\r\nI also fixed some issues with auto-formatting I discovered to make things more consistent across edits on different machines with different VSCode configs.\r\n\r\nOne thing we should address though is if `bun --bun x` makes more sense and is more intuitive than `bun x --bun`, where the latter currently doesn't work as you might intuit.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-20T15:01:40Z",
        "closed_at": "2023-02-20T16:55:11Z",
        "merged_at": null,
        "body": "This adds the `unsafeConcurrency` flag to Deno `x/sqlite3` benchmark. I think this was previously mentioned somewhere but got lost in the weeds. Thank you @mlafeldt for reminding me to take a look at updating benchmarks to more accurately represent the current state of affairs benchmark-wise.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-02-19T19:42:34Z",
        "closed_at": "2023-02-20T15:08:32Z",
        "merged_at": "2023-02-20T15:08:32Z",
        "body": "## Current Behavior\r\n\r\n`bun x` is not mentioned in documentation\r\n\r\n## Expected Behavior\r\n\r\n`bun x` has some public documentation",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-02-18T16:42:06Z",
        "closed_at": "2023-02-18T23:44:29Z",
        "merged_at": "2023-02-18T23:44:29Z",
        "body": "This is my first contribution to bun, and I don't really know what I'm doing ;)\r\n\r\nThis PR closes #2006\r\n\r\nIt's unclear to me why the particular casing was necessary. It was added in 30542225c6e140c900078538a6a563561005411b but I wasn't able to deduce the reason from the commit message. @Jarred-Sumner do you remember why it was added? \r\n\r\nI updated the expected output for `Bun.inspect(URL)` because it's documentation says that it returns the output of `console.log(URL)` as a string. ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 624,
        "deletions": 134,
        "changed_files": 18,
        "created_at": "2023-02-18T00:05:38Z",
        "closed_at": "2023-02-23T03:27:26Z",
        "merged_at": "2023-02-23T03:27:26Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-02-16T20:54:39Z",
        "closed_at": "2023-02-16T22:01:08Z",
        "merged_at": "2023-02-16T22:01:08Z",
        "body": "Resolves #1516\r\n\r\n`FileSystemFlags.fromJS` was hardcoded to return `O_RDONLY` when the flag value\r\n was null or undefined and this caused breakage when used with write functions.\r\nUpdated the function to take a `default` argument so that the caller can specify\r\n a sane default for their use.\r\n\r\nIn all usages the caller had already assigned the correct default to target variable, so the usages were easily patched.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-02-16T19:19:25Z",
        "closed_at": "2023-02-16T23:05:15Z",
        "merged_at": "2023-02-16T23:05:15Z",
        "body": "Partially resolves #1981 \r\n\r\nThis implements `os.machine` for Linux only.  It appears that OS X has `uname` ([see this man page](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/uname.3.html)), but the Zig os package doesn't implement it.  High road for Mac support is probably to contribute the implementation to the Zig std lib.\r\n\r\nFor unsupported platforms \"unknown\" is returned.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 253,
        "deletions": 97,
        "changed_files": 2,
        "created_at": "2023-02-16T04:12:17Z",
        "closed_at": "2023-02-16T23:06:35Z",
        "merged_at": "2023-02-16T23:06:35Z",
        "body": "yarn does this:\r\n```json\r\n{\r\n    \"workspaces\": {\r\n        \"packages\": [\r\n           \"my-package\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nnpm does this:\r\n```json\r\n{\r\n     \"workspaces\": [ \"foo\" ]\r\n}\r\n```\r\n\r\nlet's support both, so that people using yarn workspaces (which are more popular than npm workspaces, afaict) don't see an error\r\n\r\n~there are no tests for this PR~",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-02-15T18:10:19Z",
        "closed_at": "2023-02-15T20:58:54Z",
        "merged_at": "2023-02-15T20:58:54Z",
        "body": "Resolves #2063.\r\n\r\nWhen padding is missing, the `calcSizeForSlice` function returns a InvalidPadding error.  When we catch this we need to allow for up to 2 more bytes of decoded output.  It's OK to overestimate because this length should only be used to allocate a buffer and the actual decoded length will be used to slice once decoded.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 342,
        "deletions": 104,
        "changed_files": 6,
        "created_at": "2023-02-14T22:43:43Z",
        "closed_at": "2023-02-15T02:04:07Z",
        "merged_at": "2023-02-15T02:04:07Z",
        "body": "- report error and exit gracefully instead of crashing",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 228,
        "deletions": 94,
        "changed_files": 12,
        "created_at": "2023-02-13T18:32:42Z",
        "closed_at": "2023-02-17T23:54:05Z",
        "merged_at": "2023-02-17T23:54:05Z",
        "body": "Fixes #1602 \r\n\r\nThis PR fixes a number of issues related to FetchHeader handling:\r\n1) A test uncovered a possible segfault.  This was due to [non-exhaustive header conversion](https://github.com/oven-sh/bun/blob/56b75dbac32233b49b33c12ce25a07c9e9083dee/src/bun.js/webcore/response.zig#L1030-L1036) that could result in a null headers object but no exception thrown.  This is now covered by an `else return null`.\r\n2) The C++ FetchHeader API makes extensive use of returning `ExceptionOr<void / String>` but most of these possible exceptions were not handled, which could lead to silent failures on append, put, get, etc.  These have been fixed to ensure that if there's an exception it is propagated as a error in JSC.  This has necessitated expanding the signature of many FetchHeader methods to include a global object parameter.\r\n3) The FetchHeader and JSFetchHeader implementations make use of `convert` to wrangle the incoming JSValue.  These converts were using `IDLByteString` which throw a generic TypeError when encountering a non-Latin1 character.  To ensure more informative error messages, these have been changed to `IDLDOMString` and the FetchHeader `canWriteHeader` checks are now relied on to ensure that header names and values are valid.\r\n4) The [translation of a FetchHeader from JSC](https://github.com/oven-sh/bun/blob/56b75dbac32233b49b33c12ce25a07c9e9083dee/src/bun.js/bindings/bindings.cpp#L762-L777) to actual strings for writing in the request did not check whether the encoding was 8 or 16 bit.  By slicing a string containing for instance, an emoji, it was possible to get an all-ASCII string encoded as UTF16.  I've added `is8Bit` checks and a conversion path if necessary for both header names and values.  This solves the primary problem uncovered by the original issue.  The `copyToUWS` function has been updated in a similar vein, but using `utf8()` to perform the conversion if needed.\r\n5) The `isValidHTTPHeaderValue` function actually doesn't enforce Latin1 or ASCII because it appears that [the spec](https://fetch.spec.whatwg.org/#concept-header) doesn't require it.  However since Node and other common implementations disallow codepoints > 255, I have added a check to prevent the same.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-02-13T08:42:44Z",
        "closed_at": "2023-02-13T11:08:11Z",
        "merged_at": "2023-02-13T11:08:11Z",
        "body": "Servers on unix systems when binding to port 0 get a unique free port assigned dynamically. \r\n\r\nThis simplifies the need for coming up with unique ports ie. across app tests.\r\n\r\nNode already supports that and there are libraries using that ie. `supertest`. This PR adds this feature.\r\n\r\nIt's my first time writing `zig` code so if anything is not ok, I'll be happy to fix that :).\r\n\r\nThis fixes #1544 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-02-13T06:01:05Z",
        "closed_at": "2023-02-13T11:07:19Z",
        "merged_at": "2023-02-13T11:07:19Z",
        "body": "Closes #2056 , tested with `node-addon-api`. \r\n\r\nWe should probably add tests for N-API stuff soon",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-02-12T16:18:57Z",
        "closed_at": "2023-02-12T22:44:39Z",
        "merged_at": "2023-02-12T22:44:39Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2919,
        "deletions": 342,
        "changed_files": 83,
        "created_at": "2023-02-11T14:00:11Z",
        "closed_at": "2023-02-13T08:50:16Z",
        "merged_at": "2023-02-13T08:50:16Z",
        "body": "This adds the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) API as a global.\r\n\r\n- [x] `multipart/form-data`\r\n- [x] [`Response.prototype.formData()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/formData)\r\n- [x] [`Request.prototype.formData()`](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData)\r\n- [x] `application/x-www-form-urlencoded`\r\n- [x] Bun.file() integration\r\n- [x] Blob integration\r\n- [x] `return new Response(myFormData)`\r\n\r\ncc @kentcdodds",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-02-11T04:57:34Z",
        "closed_at": "2023-02-14T23:43:19Z",
        "merged_at": "2023-02-14T23:43:19Z",
        "body": "This is a draft PR since I can't figure out how to compile bun on my computer yet! Will work that out and then run tests to make sure it actually builds and runs.\r\n\r\nResolves #2014",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1045,
        "deletions": 178,
        "changed_files": 27,
        "created_at": "2023-02-11T01:01:18Z",
        "closed_at": "2023-10-17T20:20:56Z",
        "merged_at": null,
        "body": "Still need to finish wiring things and make sure the mode is set properly for a few different cases (namely, async iteration of console, ie:\r\n```ts \r\nfor await (const line of console)...\r\n```\r\nand also for `node:readline` interfaces) \r\nbut this is nearly ready.\r\n\r\nCloses #2025 and closes #2239",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 219,
        "changed_files": 8,
        "created_at": "2023-02-11T00:59:21Z",
        "closed_at": "2023-02-12T04:40:18Z",
        "merged_at": "2023-02-12T04:40:18Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-02-10T18:41:18Z",
        "closed_at": "2023-02-11T03:05:32Z",
        "merged_at": "2023-02-11T03:05:32Z",
        "body": "Fixes #631.  The string literal parsing code was not treating double backslash like the other escaped characters.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-02-10T14:09:21Z",
        "closed_at": "2023-02-10T17:23:41Z",
        "merged_at": "2023-02-10T17:23:41Z",
        "body": "fixes #2037",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 86,
        "deletions": 137,
        "changed_files": 1,
        "created_at": "2023-02-10T13:36:57Z",
        "closed_at": "2023-02-10T17:22:25Z",
        "merged_at": "2023-02-10T17:22:25Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 31,
        "changed_files": 2,
        "created_at": "2023-02-09T23:37:21Z",
        "closed_at": "2023-02-10T01:04:37Z",
        "merged_at": "2023-02-10T01:04:37Z",
        "body": "fixes #1939",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 443,
        "deletions": 58,
        "changed_files": 17,
        "created_at": "2023-02-09T02:35:58Z",
        "closed_at": "2023-02-15T22:20:41Z",
        "merged_at": "2023-02-15T22:20:41Z",
        "body": "- [x] onData abortion\r\n- [x] onWritable abortion\r\n- [x] addEventListener\r\n- [x] fail with the right reason\r\n- [x] detect TimeoutError and AbortError\r\n- [x] fix socket timeout to use TimeoutError\r\n- [x] add tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-02-08T14:55:44Z",
        "closed_at": "2023-02-08T22:39:57Z",
        "merged_at": "2023-02-08T22:39:57Z",
        "body": "Addresses issue #2012 and corrects the minor version to the current minor version",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 476,
        "deletions": 278,
        "changed_files": 13,
        "created_at": "2023-02-08T14:17:58Z",
        "closed_at": "2023-02-08T22:37:14Z",
        "merged_at": "2023-02-08T22:37:14Z",
        "body": "- take `peerDependencies` into account during package placement\r\n- do not recursively resolve `workspaces` (matches `npm`)\r\n- link binaries to non-root packages correctly\r\n- prune empty nodes during dependency tree construction\r\n- support non-standard `workspace:` specifier",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1174,
        "deletions": 0,
        "changed_files": 10,
        "created_at": "2023-02-07T20:00:34Z",
        "closed_at": "2023-02-22T18:34:16Z",
        "merged_at": "2023-02-22T18:34:16Z",
        "body": "Closes #352 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 100,
        "deletions": 59,
        "changed_files": 5,
        "created_at": "2023-02-07T03:01:55Z",
        "closed_at": "2023-02-08T22:57:13Z",
        "merged_at": "2023-02-08T22:57:13Z",
        "body": "Fixes import and export, keeps a copy of \"seed\" for export when key is a private ed25519 key.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 599,
        "deletions": 97,
        "changed_files": 11,
        "created_at": "2023-02-07T02:41:50Z",
        "closed_at": "2023-02-07T05:36:36Z",
        "merged_at": "2023-02-07T05:36:36Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-02-07T00:40:36Z",
        "closed_at": "2023-02-08T22:42:11Z",
        "merged_at": "2023-02-08T22:42:11Z",
        "body": "Fixes tests with unmatched surrogates. There are still failing tests with `base64`, `base64url`, and error throwing",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 443,
        "deletions": 372,
        "changed_files": 8,
        "created_at": "2023-02-06T23:39:33Z",
        "closed_at": "2023-02-07T06:24:35Z",
        "merged_at": "2023-02-07T06:24:35Z",
        "body": "TODO:\r\n- compile on latest `main`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-02-06T19:07:01Z",
        "closed_at": "2023-02-06T20:59:05Z",
        "merged_at": "2023-02-06T20:59:05Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1342,
        "deletions": 153,
        "changed_files": 8,
        "created_at": "2023-02-03T22:14:23Z",
        "closed_at": "2023-02-06T20:57:19Z",
        "merged_at": "2023-02-06T20:57:19Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 138,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-02-03T18:05:49Z",
        "closed_at": "2023-02-04T02:13:33Z",
        "merged_at": "2023-02-04T02:13:33Z",
        "body": "Partially fixes #1888 \r\n\r\n`os.cpus()` currently returns an empty array for all platforms.  This PR implements full functionality for Linux and has been tested on x86-64.  Other OSes will continue to return an empty array.\r\n\r\nNote that Linux on Arm64 may report the CPU model differently; if this is the case the CPU model will currently be reported as \"unknown\".  As I do not have Arm64 hardware to verify and develop against, a todo has been left in the code.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 365,
        "changed_files": 2,
        "created_at": "2023-02-02T12:43:51Z",
        "closed_at": "2023-02-03T01:29:28Z",
        "merged_at": "2023-02-03T01:29:28Z",
        "body": "shows up during `make devcontainer` &minus; might as well commit this to avoid future clutters",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 168,
        "changed_files": 2,
        "created_at": "2023-02-02T12:03:32Z",
        "closed_at": "2023-02-03T22:53:19Z",
        "merged_at": "2023-02-03T22:53:19Z",
        "body": "Fixes #1880 #851 \r\n\r\nFor #1908 :\r\nI am comfortable writing types but there are several colliding issues. Bun provides `WebAssembly.Exception` which is meant for web workers and in `WebAssembly.Global`, According to MDN, `WebAssembly.Global.prototype` should have two properties `valueOf` and `value` but instead of `value` Bun provides `type`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1181,
        "deletions": 45,
        "changed_files": 13,
        "created_at": "2023-02-02T10:47:33Z",
        "closed_at": "2023-02-15T08:11:48Z",
        "merged_at": "2023-02-15T08:11:48Z",
        "body": "This is _mostly_ copied from WebKit but the OpenSSL/BoringSSL-specific parts aren't\r\n\r\nBefore this can be merged:\r\n- [x] Regenerate JS builtins\r\n- [ ] Test it works in [Jose](https://github.com/panva/jose)\r\n- [ ] Get someone to review the OpenSSL parts because I don't know if its correct",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-02-01T22:13:47Z",
        "closed_at": "2023-02-02T02:48:09Z",
        "merged_at": "2023-02-02T02:48:09Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1197,
        "deletions": 62,
        "changed_files": 3,
        "created_at": "2023-01-31T23:13:09Z",
        "closed_at": "2023-02-02T03:22:29Z",
        "merged_at": "2023-02-02T03:22:29Z",
        "body": "Still needs more tests and more cleanup. Going to start porting node tests for this and `node:net` next probably. Discovering small divergences between Node and Bun as testing corner cases, so this is really important to make sure we get closer to 100% Node compatibility\r\n\r\nCloses #1849 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-31T21:40:32Z",
        "closed_at": "2023-02-01T04:35:12Z",
        "merged_at": "2023-02-01T04:35:12Z",
        "body": "```\r\n$ make print-version\r\n$ make get-<variable>\r\n```",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 28,
        "changed_files": 4,
        "created_at": "2023-01-31T19:45:36Z",
        "closed_at": "2023-02-03T01:29:11Z",
        "merged_at": "2023-02-03T01:29:11Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 356,
        "deletions": 836,
        "changed_files": 6,
        "created_at": "2023-01-31T18:03:04Z",
        "closed_at": "2023-01-31T21:05:42Z",
        "merged_at": "2023-01-31T21:05:42Z",
        "body": "fixes #1951",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-01-30T16:10:32Z",
        "closed_at": "2023-01-30T20:20:30Z",
        "merged_at": "2023-01-30T20:20:30Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-01-30T08:34:59Z",
        "closed_at": "2023-01-30T09:55:32Z",
        "merged_at": "2023-01-30T09:55:32Z",
        "body": "fixes #1935",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-01-29T20:25:06Z",
        "closed_at": "2023-01-29T22:58:27Z",
        "merged_at": "2023-01-29T22:58:27Z",
        "body": "Hi, just caught 2 small typos in Readme",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 222,
        "deletions": 33,
        "changed_files": 4,
        "created_at": "2023-01-28T20:12:31Z",
        "closed_at": "2023-01-29T06:14:07Z",
        "merged_at": "2023-01-29T06:14:07Z",
        "body": "fixes #1921\r\n\r\n(the added test conflicts with updates from #1924, hence `[WIP]`)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 448,
        "deletions": 185,
        "changed_files": 5,
        "created_at": "2023-01-28T19:18:20Z",
        "closed_at": "2023-01-29T05:30:46Z",
        "merged_at": "2023-01-29T05:30:46Z",
        "body": "- fix invalid buffer references\r\n\r\nfixes #1920",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-28T18:00:27Z",
        "closed_at": "2023-01-28T22:07:58Z",
        "merged_at": "2023-01-28T22:07:58Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-01-27T17:22:24Z",
        "closed_at": "2023-01-27T21:33:53Z",
        "merged_at": "2023-01-27T21:33:53Z",
        "body": "In canary Express.js stop working because it passes a function as host/hostname and we use toString on it, with gives onListenFailed, this check prevents functions to be used as host/hostname and makes Express.js work again",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 231,
        "deletions": 175,
        "changed_files": 9,
        "created_at": "2023-01-27T10:32:59Z",
        "closed_at": "2023-01-28T15:05:28Z",
        "merged_at": "2023-01-28T15:05:28Z",
        "body": "also some minor fixes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1737,
        "deletions": 523,
        "changed_files": 9,
        "created_at": "2023-01-25T21:40:57Z",
        "closed_at": "2023-01-27T02:36:54Z",
        "merged_at": "2023-01-27T02:36:54Z",
        "body": "- [x] resolveSrv\r\n- [x] resolveTxt\r\n- [x] resolveNs\r\n- [x] resolvePtr\r\n- [x] resolveCname\r\n- [x] ~resolveAny~ will not implement yet\r\n- [x] resolveCaa\r\n- [x] resolveMx\r\n- [x] resolveNaptr\r\n- [x] resolveSoa\r\n- [x] dns.resolve( hostname, rrtype, callback )\r\n\r\nRelated to https://github.com/oven-sh/bun/issues/1744",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 203,
        "deletions": 87,
        "changed_files": 5,
        "created_at": "2023-01-25T05:19:43Z",
        "closed_at": "2023-01-26T09:06:51Z",
        "merged_at": "2023-01-26T09:06:51Z",
        "body": "fixes #861",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 99,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-01-24T21:01:07Z",
        "closed_at": "2023-01-25T03:09:40Z",
        "merged_at": "2023-01-25T03:09:40Z",
        "body": "A simple usage of FileSystemRouter + React to show one way it could be integrated into a SSR project. \r\n\r\nDiscord thread with more context here: https://discord.com/channels/876711213126520882/876711213126520885/1067322696423186452",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-01-24T18:31:47Z",
        "closed_at": "2023-06-05T16:37:27Z",
        "merged_at": null,
        "body": "Hello, @Jarred-Sumner.\r\n\r\nI rewrote `dockerhub/Dockerfile`:\r\n\r\n* Fixed: `ERROR: glibc-2.34-r0: overwriting etc/nsswitch.conf owned by alpine-baselayout-data-3.4.0-r0`.\r\n* Removed adding of the `unzip` package, because it's bundled.\r\n* Using `ADD` instruction instead of `wget` command to enable Docker built-in caching and reduce network usage.\r\n* Created stages: `base`, `bun`, `glibc` and `image` and removed `get` stage to make build parallel.\r\n\r\n## Difference\r\n\r\nNote a difference in the `/lib` directory, because old Alpine GNU/Linux is using the OpenSSL 1.1.1, and newest is using the OpenSSL 3.\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/2821574/214376041-ca2dbb56-a8b5-424e-bd06-7de5b7780e53.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/2821574/214376069-87d68679-7abc-4b84-b244-80e83dcb886b.png)\r\n\r\nBest wishes,\r\nSergey.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 211,
        "deletions": 57,
        "changed_files": 7,
        "created_at": "2023-01-23T18:03:00Z",
        "closed_at": "2023-01-24T00:48:52Z",
        "merged_at": "2023-01-24T00:48:52Z",
        "body": "- [x] arguments miss interpreted in ```Buffer.write```\r\n- [x] utf16 wrong size returned in ```Buffer.write```\r\n- [x] base64  wrong size returned in ```Buffer.bytesLenght```\r\n- [x] hex wrong size returned in ```Buffer.bytesLenght```\r\n- [x] segfault when buffer doesn't have enough room\r\n- [x] ```Buffer.alloc``` missing fill and encoding argument  https://nodejs.org/api/buffer.html#static-method-bufferallocsize-fill-encoding\r\n- [x] Incorrect writing utf16le ( writeU16 into utf16le option)\r\n```\r\nconst buf = Buffer.alloc(8);\r\nexpect(buf.write('\u044b\u044b', 1, 'utf16le')).toBe(4);\r\nexpect([...buf]).toStrictEqual([0, 0x4b, 0x04, 0x4b, 0x04, 0, 0, 0]);\r\nExpected: [ 0, 75, 4, 75, 4, 0, 0, 0 ]\r\nReceived: [ 0, 75, 75, 0, 0, 0, 0, 0 ]\r\n```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 827,
        "deletions": 115,
        "changed_files": 7,
        "created_at": "2023-01-23T01:13:06Z",
        "closed_at": "2023-01-24T19:57:25Z",
        "merged_at": "2023-01-24T19:57:25Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 989,
        "deletions": 0,
        "changed_files": 27,
        "created_at": "2023-01-22T23:54:31Z",
        "closed_at": "2023-01-24T07:06:13Z",
        "merged_at": "2023-01-24T07:06:13Z",
        "body": "TODO:\r\n* GitHub actions",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1129,
        "deletions": 32,
        "changed_files": 12,
        "created_at": "2023-01-21T22:38:56Z",
        "closed_at": "2023-01-22T22:31:08Z",
        "merged_at": "2023-01-22T22:31:08Z",
        "body": "Still missing tests and probably some fixes https://github.com/oven-sh/bun/issues/1822",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 356,
        "deletions": 793,
        "changed_files": 8,
        "created_at": "2023-01-20T17:43:22Z",
        "closed_at": "2023-01-23T22:38:41Z",
        "merged_at": "2023-01-23T22:38:41Z",
        "body": "@Jarred-Sumner as we discussed yesterday I moved the options from the third parameter to the second parameter, used only 1 buffer for URL + proxy, and merged headers when informed headers on Request parameter + second option headers.\r\n\r\nThis also fixes some options of the second parameter not being used when using the Request parameter.\r\n\r\nAdded some tests in proxy.test.js using non-TLS proxy and non-TLS request, for more tests I think is better to use a paid proxy server or something similar.\r\n\r\nNeed to compile the latest version of uWS in your repository for the proxy tests to pass.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-20T16:26:08Z",
        "closed_at": "2023-01-21T18:09:25Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 644,
        "deletions": 249,
        "changed_files": 6,
        "created_at": "2023-01-20T07:17:30Z",
        "closed_at": "2023-01-21T12:16:26Z",
        "merged_at": "2023-01-21T12:16:26Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 330,
        "deletions": 21,
        "changed_files": 3,
        "created_at": "2023-01-20T04:17:21Z",
        "closed_at": "2023-05-17T08:14:20Z",
        "merged_at": null,
        "body": "Fixes for `highWaterMark: 1` and returned error codes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-01-19T12:49:17Z",
        "closed_at": "2023-01-19T14:38:09Z",
        "merged_at": "2023-01-19T14:38:09Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-01-19T11:23:44Z",
        "closed_at": "2023-01-19T18:34:32Z",
        "merged_at": "2023-01-19T18:34:32Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 171,
        "deletions": 128,
        "changed_files": 2,
        "created_at": "2023-01-19T05:42:34Z",
        "closed_at": "2023-01-19T14:39:01Z",
        "merged_at": "2023-01-19T14:39:01Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-19T00:09:29Z",
        "closed_at": "2023-03-29T21:37:19Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-18T13:49:01Z",
        "closed_at": "2023-01-19T18:35:55Z",
        "merged_at": "2023-01-19T18:35:55Z",
        "body": "New code sample with http Range and ETag support\r\nSome code is taken from here https://github.com/gornostay25/svelte-adapter-bun/blob/master/src/sirv.js",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-01-18T02:38:10Z",
        "closed_at": "2023-01-18T07:06:27Z",
        "merged_at": "2023-01-18T07:06:27Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-17T22:08:53Z",
        "closed_at": "2023-01-17T23:45:15Z",
        "merged_at": "2023-01-17T23:45:15Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2160,
        "deletions": 45,
        "changed_files": 9,
        "created_at": "2023-01-17T21:45:13Z",
        "closed_at": "2023-01-18T00:49:19Z",
        "merged_at": "2023-01-18T00:49:19Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 683,
        "deletions": 168,
        "changed_files": 7,
        "created_at": "2023-01-17T18:50:00Z",
        "closed_at": "2023-01-18T01:47:01Z",
        "merged_at": "2023-01-18T01:47:01Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-01-16T06:16:50Z",
        "closed_at": "2023-01-18T05:01:56Z",
        "merged_at": "2023-01-18T05:01:56Z",
        "body": "The [TypeScript documentation](https://www.typescriptlang.org/tsconfig#esModuleInterop) said:\r\n\r\n> Enabling `esModuleInterop` will also enable `allowSyntheticDefaultImports`\r\n\r\nBecause there is already an `esModuleInterop` flag, so `allowSyntheticDefaultImports` is redundant.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-01-15T08:56:34Z",
        "closed_at": "2023-01-15T11:19:37Z",
        "merged_at": "2023-01-15T11:19:37Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-01-15T07:31:32Z",
        "closed_at": "2023-01-15T11:21:34Z",
        "merged_at": "2023-01-15T11:21:34Z",
        "body": "`picohttp` would flop for code above `999`, thus where we draw the line.\r\n\r\nfixes #1768",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 326,
        "deletions": 72,
        "changed_files": 4,
        "created_at": "2023-01-15T02:38:31Z",
        "closed_at": "2023-02-14T23:54:51Z",
        "merged_at": "2023-02-14T23:54:51Z",
        "body": "Fixes #1797 and adds a few tests",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-01-13T00:29:06Z",
        "closed_at": "2023-01-13T01:53:58Z",
        "merged_at": "2023-01-13T01:53:58Z",
        "body": "Likely the same would need to happen to `consume()`",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-01-12T04:29:48Z",
        "closed_at": "2023-03-29T21:27:48Z",
        "merged_at": null,
        "body": "A lot of Node tests have started failing over time. Before we start running tests on every PR in CI, we should get them passing.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 25,
        "changed_files": 6,
        "created_at": "2023-01-12T00:17:10Z",
        "closed_at": "2023-01-16T19:58:58Z",
        "merged_at": "2023-01-16T19:58:58Z",
        "body": "Publishes `bun-types@canary` on each push to `main`. The actual package.json version is in the form `<bun-version>-canary.<commit>`, e.g. `0.4.0-canary.348e091`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 833,
        "deletions": 337,
        "changed_files": 8,
        "created_at": "2023-01-11T08:09:48Z",
        "closed_at": "2023-01-14T15:14:49Z",
        "merged_at": "2023-01-14T15:14:49Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2323,
        "deletions": 13,
        "changed_files": 15,
        "created_at": "2023-01-10T23:28:27Z",
        "closed_at": "2023-01-11T22:56:42Z",
        "merged_at": "2023-01-11T22:56:42Z",
        "body": "- `node:net`\r\n- `node:dns`\r\n- `process.exit` return `never`\r\n- tighten up definition of `ArrayBufferView`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-01-10T09:19:49Z",
        "closed_at": "2023-01-10T12:51:01Z",
        "merged_at": "2023-01-10T12:51:01Z",
        "body": "The `make dev` command fails due to the newly added c-ares dependency.\r\n\r\nThis fix adds the missing dep to the `devcontainer` target so that the `c-ares`\r\ndep is built when the devcontainer is built.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-01-10T06:28:23Z",
        "closed_at": "2023-01-12T20:49:37Z",
        "merged_at": "2023-01-12T20:49:37Z",
        "body": "This PR fixes #1533.\r\n\r\nInstead of printing just the test name in a test success or failure, bun-test will now print the full path of scopes for the test.\r\n\r\nPreviously:\r\n```\r\n\u2713 inner most describe 1 > first\r\n```\r\n\r\nNow:\r\n```\r\n\u2713 outer most describe > mid describe 1 > inner most describe 1 > first\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 183,
        "deletions": 239,
        "changed_files": 2,
        "created_at": "2023-01-08T23:07:17Z",
        "closed_at": "2023-01-10T00:27:56Z",
        "merged_at": "2023-01-10T00:27:56Z",
        "body": "Refactor to support exporting promises from base `readline` module",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5673,
        "deletions": 161,
        "changed_files": 10,
        "created_at": "2023-01-06T23:48:34Z",
        "closed_at": "2023-01-08T09:49:50Z",
        "merged_at": "2023-01-08T09:49:50Z",
        "body": "This PR is a lot of code to look at, readline and a bunch of stuff that can be later extracted into other internal components/conventions.\r\n\r\n# `readline`\r\nThe whole module is more or less completed, but I'm going to do a pass to refactor it. A lot of stuff was modified but I ended up copying a lot of the original code again from node due to some issues that arose from the optimizations I made changing behavior.\r\n\r\nSome tests still need to be ported from node, but I think about half of them already have been. Only a few tests are not passing currently and most are failing due to a scoping issue which I think I have a fix for.\r\n\r\n# Other notable stuff\r\n* `SymbolFor(\"__BUN_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED__\")`: A way to export internal symbols to other internal modules. A little safer and more explicit than just exporting functions or vars with an underscore\r\n* Start polyfilling **Node internal errors** in a way which tests can easily be autoimported from Node without any or little changes to the code. There is still some work to be done here when it comes to creating multiple errors for the same error code (for example,`ERR_INVALID_ARG_VALUE` can be a RangeError or a TypeError confusingly. But not too hard to deal with if we abuse multiple prototype inheritance... But there may be a better solution.\r\n* `node-test-helpers.ts`: A Node test helper library which helps with compatibility of Node tests in the Bun wiptest suite. Basically it exports a wrapped version of assert which calls expect for each assert function and some our own equivalent of `common.mustCall`, `common.mustNotCall` and friends used frequently in Node tests. This is useful for working with callbacks in conjunction with `done` callback, without wrapping everything in Promises.\r\n\r\n# Next\r\n\r\nNeed to implement `tty.setRawMode`, shouldn't be too hard. That should get basically `readline` pretty much 1:1 Node parity.\r\n\r\nAlso because we are using only two files for `readline` and `readline/promises` respectively, need to figure out how to fix a circular dependency we created with `promises` which Node doesn't have because they have separate internal and external modules. This shouldn't be hard but may require a bit of file restructuring, and creating a convention for internal modules which only Node builtins can access.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 158,
        "deletions": 33,
        "changed_files": 3,
        "created_at": "2023-01-06T02:01:45Z",
        "closed_at": "2023-01-06T03:43:33Z",
        "merged_at": "2023-01-06T03:43:33Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 53,
        "changed_files": 3,
        "created_at": "2023-01-05T13:43:56Z",
        "closed_at": "2023-01-05T21:17:15Z",
        "merged_at": "2023-01-05T21:17:15Z",
        "body": "- tidy up `.isEmptyOrUndefinedOrNull()` usage\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 37,
        "changed_files": 1,
        "created_at": "2023-01-04T21:20:43Z",
        "closed_at": "2023-01-04T23:32:40Z",
        "merged_at": "2023-01-04T23:32:40Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-01-04T05:43:36Z",
        "closed_at": "2023-01-05T07:54:18Z",
        "merged_at": "2023-01-05T07:54:18Z",
        "body": "More accurately define the typings for Bun.serve, they were incorrect before",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 216,
        "deletions": 198,
        "changed_files": 1,
        "created_at": "2023-01-04T04:04:23Z",
        "closed_at": "2023-01-04T12:06:25Z",
        "merged_at": "2023-01-04T12:06:25Z",
        "body": "Packages sometimes call `Socket()` instead of `new Socket`\r\n\r\nIs this a suitable workaround without converting to prototype object/non-class? @alexlamsl ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-01-03T11:55:32Z",
        "closed_at": "2023-01-04T00:08:29Z",
        "merged_at": "2023-01-04T00:08:29Z",
        "body": "If `encoding` is set, no `Buffer`s would be exposed thus `Uint8Array` can be used directly.\r\n\r\nMeasured 15% performance increase with `tcp-echo.node.mjs`\r\n\r\nVerified with:\r\n- `child-process-stdio.test.js`\r\n- `fs.test.js` with 1 pre-existing failure\r\n- `node-net.test.ts`\r\n- `node-stream.test.js`\r\n- `process-stdio.test.ts`",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 143,
        "deletions": 95,
        "changed_files": 5,
        "created_at": "2023-01-03T02:16:16Z",
        "closed_at": "2023-01-03T07:06:46Z",
        "merged_at": "2023-01-03T07:06:46Z",
        "body": "assorted clean-ups & fixes",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 432,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-01-02T20:55:43Z",
        "closed_at": "2023-01-02T22:55:02Z",
        "merged_at": "2023-01-02T22:55:02Z",
        "body": "- support TCP sockets for now, i.e. no IPC\r\n- extra features like keep-alive, no-delay etc. are absent due to limitations of uSockets\r\n- fix `jest` to treat `done(nullish)` as success",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 179,
        "deletions": 67,
        "changed_files": 3,
        "created_at": "2023-01-02T06:46:34Z",
        "closed_at": "2023-01-02T10:24:23Z",
        "merged_at": "2023-01-02T10:24:23Z",
        "body": "`Bun.listen()` and `Bun.connect()` would create sockets that under certain conditions with calls to `.end()` or `.stop`,  prevents the process from exiting gracefully.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 127,
        "deletions": 162,
        "changed_files": 14,
        "created_at": "2023-01-01T23:12:17Z",
        "closed_at": "2023-01-02T00:37:45Z",
        "merged_at": "2023-01-02T00:37:45Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 548,
        "deletions": 1,
        "changed_files": 13,
        "created_at": "2022-12-31T21:16:18Z",
        "closed_at": "2023-03-29T21:28:15Z",
        "merged_at": null,
        "body": "Adds support for snapshots by bun-test as proposed in #1642 and #1825.\r\n\r\nThis PR implements the following function:\r\n\r\n### expect(...).toMatchSnapshot(hint?: string): void\r\n\r\nThis is very similar to Jest's `toMatchSnapshot`, a tool to test if a visual component or object has changed. If a file needs to have a new snapshot generated then pass the `--updateSnapshot` argument to `bun wiptest` and a new snapshot file will be generated.\r\n\r\nThere are two key differences between bun's implementation of `toMatchSnapshot` and Jest's implementation:\r\n\r\n1) The formatting of snapshot files is provided by bun's formatter and not the one that Jest uses which leads to objects to be stringified in a different format than in Jest. If migrating from a Jest codebase you will need to `--updateSnapshot` for your tests to pass.\r\n\r\n2) This does not currently support the [Property Matchers](https://jestjs.io/docs/snapshot-testing#property-matchers) argument. This will be updated after some features are added to wiptest.\r\n\r\n\r\n# Open questions for reviewers:\r\n\r\n1) First time writing a major feature in Zig! Any style or conventions tips would be appreciated.\r\n2) Would like some guidance on how to handle mis-formatted snapshot files. See comment [below](https://github.com/oven-sh/bun/pull/1692#discussion_r1091627201)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2778,
        "deletions": 56,
        "changed_files": 31,
        "created_at": "2022-12-31T17:08:10Z",
        "closed_at": "2023-01-07T15:09:48Z",
        "merged_at": "2023-01-07T15:09:48Z",
        "body": "\r\n\r\nTODO:\r\n- [x] `lookup` function on macOS\r\n- [ ] `resolve` function on macOS\r\n- [ ] `reverse` function on macOS\r\n- [x] `lookup` function on Linux\r\n- [ ] `resolve` function on Linux\r\n- [ ] `reverse` function on Linux\r\n- [ ]  Implement `node:dns` wrapper\r\n- [x]  Decide on `Bun.dns`, `bun:dns` or otherwise what the API should be (cc @colinhacks who should probably make the decision)\r\n\r\nProbably will ship once just lookup is done on Linux and macOS. \r\n\r\non macOS, we are using [`dnssd`](https://developer.apple.com/documentation/dnssd?language=objc) which is a builtin macOS library for multi-cast DNS.  There is also an open-source version which can be used on Linux. We could use that. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 189,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2022-12-31T07:23:54Z",
        "closed_at": "2022-12-31T11:14:23Z",
        "merged_at": "2022-12-31T11:14:23Z",
        "body": "- wait for async hooks to complete before running tests\r\n- add support for `done(err)` callbacks in hooks\r\n\r\nfixes #1688",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-12-30T17:10:06Z",
        "closed_at": "2023-03-29T21:28:24Z",
        "merged_at": null,
        "body": "The example show how to use Bun to connect to a WebSocket server.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 94,
        "deletions": 26,
        "changed_files": 8,
        "created_at": "2022-12-28T07:16:24Z",
        "closed_at": "2022-12-28T09:21:21Z",
        "merged_at": "2022-12-28T09:21:21Z",
        "body": "use `Symbol.toStringTag` of the object or that of its `.prototype`\r\n\r\nfixes #1584",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-12-27T19:32:33Z",
        "closed_at": "2022-12-28T00:36:26Z",
        "merged_at": "2022-12-28T00:36:26Z",
        "body": "fixes #1666",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 298,
        "deletions": 442,
        "changed_files": 2,
        "created_at": "2022-12-27T18:34:31Z",
        "closed_at": "2022-12-28T00:34:33Z",
        "merged_at": "2022-12-28T00:34:33Z",
        "body": "fixes #1668",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 163,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-12-25T01:31:34Z",
        "closed_at": "2023-01-11T02:43:58Z",
        "merged_at": "2023-01-11T02:43:58Z",
        "body": "The `Buffer` api is not complete as detailed in https://github.com/oven-sh/bun/issues/155.\r\n\r\nSpecifically `swap16`, `swap32` and `swap64` are unimplemented.\r\n\r\nThis PR:\r\n- Implements `swap16`, `swap32` and `swap64` in `src/bun.js/bindings/JSBuffer.cpp`\r\n- Adds supporting tests to `test/bun.js/buffer.test.js`, testing:\r\n    -  Correct swapping behaviour for several examples\r\n    - An error is thrown if the buffers are not appropriately sized (not multiples of the swap byte size, i.e. 2, 4, or 8 bytes for `swap16`, `swap32` and `swap64` respectively)\r\n\r\nTo do:\r\n- [ ] Port node tests",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4578,
        "deletions": 4110,
        "changed_files": 16,
        "created_at": "2022-12-24T16:27:45Z",
        "closed_at": "2023-06-15T22:11:08Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\nI am trying to set up a \u2018Mock\u2019 class to import via \u2018bun:test\u2019, and was wondering on how to setup the scaffolding.\r\n\r\nI think I\u2019ve set up the correct pieces, but can\u2019t get the Mock class to be imported by a test.\r\n\r\nI set this up by modifying \u2018jest.classes.ts\u2019, set up the struct in \u2018jest.zig\u2019, and then run \u2018make codegen\u2019 and \u2018make build\u2019.\r\n\r\nWould appreciate any direction.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-12-22T18:07:46Z",
        "closed_at": "2023-01-31T20:22:51Z",
        "merged_at": "2023-01-31T20:22:51Z",
        "body": "See: https://share.cleanshot.com/gcB3gbXJz6RQk5tx559n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-12-21T11:41:45Z",
        "closed_at": "2022-12-21T22:36:44Z",
        "merged_at": "2022-12-21T22:36:44Z",
        "body": "### Description\r\n\r\nPR fixes the problem mentioned in #1280 where jest hooks `beforeAll`, `beforeEach`, `afterAll`, and `afterEach` were not working. \r\n\r\n\r\n#### Questions for reviewer:\r\n\r\nShould the type change be to `_: void,` or to type `anyopaque` or `anytype`. I've seen both used throughout the repo. (zig newbie here) ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2022-12-21T01:51:38Z",
        "closed_at": "2022-12-23T08:59:45Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2022-12-20T09:30:11Z",
        "closed_at": "2022-12-21T05:34:25Z",
        "merged_at": "2022-12-21T05:34:25Z",
        "body": "- `setImmediate(fn, ...args)`\r\n- `setInterval(fn, delay, ...args)`\r\n- `setTimeout(fn, delay, ...args)`\r\n\r\ncloses #1633",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 204,
        "deletions": 88,
        "changed_files": 2,
        "created_at": "2022-12-18T06:40:01Z",
        "closed_at": "2023-03-29T21:29:10Z",
        "merged_at": null,
        "body": "This PR implements `url.urlToHttpOptions`, sets up classes required for `http.request` to work and fixes the prototype chain. The actual request doesn't take place yet because I'm not that familiar with bun's internals and how that would work. Would love to work on it and implement it as well",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 49,
        "changed_files": 3,
        "created_at": "2022-12-18T04:32:42Z",
        "closed_at": "2022-12-18T06:37:45Z",
        "merged_at": "2022-12-18T06:37:45Z",
        "body": "- fix variable name typo\r\n- fix tests",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-12-17T16:39:46Z",
        "closed_at": "2022-12-17T18:34:35Z",
        "merged_at": "2022-12-17T18:34:35Z",
        "body": "based on `[oven-sh/bun-types]` repository achieved and moved into `[oven-sh/bun]` current documentation updated.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-12-16T17:16:17Z",
        "closed_at": "2022-12-16T18:36:08Z",
        "merged_at": "2022-12-16T18:36:08Z",
        "body": "occured -> occurred",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2022-12-14T08:13:16Z",
        "closed_at": "2022-12-15T08:25:20Z",
        "merged_at": "2022-12-15T08:25:20Z",
        "body": "This fixes #1608\r\n\r\nWe needed `ReadableState.constructed` to default to `true` instead of `false` to match Node's behavior. This PR puts `ReadableState`'s behavior in spec.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 49,
        "changed_files": 1,
        "created_at": "2022-12-14T01:45:50Z",
        "closed_at": "2022-12-14T03:02:20Z",
        "merged_at": "2022-12-14T03:02:20Z",
        "body": "- workarounds for #1607 & #1608\r\n\r\nfixes #1604",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10259,
        "deletions": 7297,
        "changed_files": 188,
        "created_at": "2022-12-13T20:40:05Z",
        "closed_at": "2022-12-28T08:51:22Z",
        "merged_at": "2022-12-28T08:51:22Z",
        "body": "This is blocked on https://github.com/ziglang/zig/pull/13017. \r\n\r\nPosting this PR here so others can follow progress",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2022-12-11T21:32:15Z",
        "closed_at": "2022-12-13T02:58:29Z",
        "merged_at": "2022-12-13T02:58:28Z",
        "body": "It seems .pipe has been broken due to some debug logs referencing variables that don't exist, even when no-op'd. Obviously it's not ideal that debug statements are included in the output, and we should probably address that either via:\r\n1. Commenting them out before commiting\r\n2. Stripping them via transpiler before embedding the polyfills (probably should do this with comments too tbh)\r\n\r\nBut this PR does fix .pipe in the meantime and adds a test to make sure it's working.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-12-09T19:40:10Z",
        "closed_at": "2022-12-09T22:26:33Z",
        "merged_at": "2022-12-09T22:26:33Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 237,
        "deletions": 84,
        "changed_files": 24,
        "created_at": "2022-12-06T23:36:55Z",
        "closed_at": "2022-12-07T02:48:03Z",
        "merged_at": "2022-12-07T02:48:03Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 317,
        "deletions": 70,
        "changed_files": 14,
        "created_at": "2022-12-06T20:35:52Z",
        "closed_at": "2022-12-06T22:14:27Z",
        "merged_at": "2022-12-06T22:14:27Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 300,
        "deletions": 988,
        "changed_files": 2,
        "created_at": "2022-12-03T10:23:13Z",
        "closed_at": "2022-12-06T21:26:39Z",
        "merged_at": "2022-12-06T21:26:39Z",
        "body": "Doing some fixes for stdio/child_process. Currently fixes ChildProcess.stdin to be `NativeWritable` stream, and fixes a bug with process.nextTick silently failing to queue a stdio flush which caused a very frequent race condition where a child's stdout was never read.\r\n\r\nAlso reverts streams back to function/prototype-based construction rather than classes because of the reliance of being able to derive classes with `.call()` in so many node_modules, which you cannot do with classes in JSC.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 770,
        "deletions": 6,
        "changed_files": 7,
        "created_at": "2022-12-02T20:50:37Z",
        "closed_at": "2022-12-03T04:35:14Z",
        "merged_at": "2022-12-03T04:35:14Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 277,
        "deletions": 48,
        "changed_files": 8,
        "created_at": "2022-11-30T22:40:51Z",
        "closed_at": "2022-12-02T03:36:47Z",
        "merged_at": "2022-12-02T03:36:47Z",
        "body": "Implementation for `toStrictEqual()`. Also fixes a bug where `toEqual()` was incorrectly comparing objects with undefined properties.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 800,
        "deletions": 118,
        "changed_files": 22,
        "created_at": "2022-11-30T14:04:55Z",
        "closed_at": "2023-06-11T07:18:58Z",
        "merged_at": null,
        "body": "Once complete, this change enables us to safely reuse strings from JavaScript in Zig.  Currently, we never reuse strings from JavaScript beyond the scope of a function call which leads to duplicating memory excessively.\r\n\r\nIt also lets us correctly track the lifetime of statically allocated strings (i.e. never free them).\r\n\r\nI'm expecting this to reduce memory usage in Bun while also fixing crashes that happen due to attempting to free statically allocated memory\r\n\r\nThis fixes:\r\n- https://github.com/oven-sh/bun/issues/1562\r\n\r\nThis most likely also will fix:\r\n- https://github.com/oven-sh/bun/issues/1561\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 532,
        "deletions": 118,
        "changed_files": 8,
        "created_at": "2022-11-29T05:06:04Z",
        "closed_at": "2022-11-29T07:15:13Z",
        "merged_at": "2022-11-29T07:15:13Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 156,
        "deletions": 75,
        "changed_files": 10,
        "created_at": "2022-11-24T09:48:07Z",
        "closed_at": "2022-11-24T11:55:43Z",
        "merged_at": "2022-11-24T11:55:43Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 108,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2022-11-19T05:53:22Z",
        "closed_at": "2022-11-22T00:52:00Z",
        "merged_at": "2022-11-22T00:52:00Z",
        "body": "`\\p{<script name>=<script value>}` -> `\\p{<script value>}`\r\n`\\p{^<script name>=<script value>}` -> `\\p{^<script value>}`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 670,
        "deletions": 65,
        "changed_files": 16,
        "created_at": "2022-11-18T22:13:55Z",
        "closed_at": "2022-11-19T07:03:40Z",
        "merged_at": "2022-11-19T07:03:40Z",
        "body": "Adds `toContain(), toBeFalsy(), toBeTruthy(), toBeUndefined(), toBeNull(), toBeDefined(), toBeNaN()` and `not` to bun test.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-11-16T17:14:03Z",
        "closed_at": "2022-11-16T18:17:01Z",
        "merged_at": null,
        "body": "And it works on the package.json file, which is the actual standard, same as yarn or pnpm.\r\nI know, this is a nit, but still I guess the ground truth is `package.json`, not the fact that it's been used by `npm`",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 836,
        "deletions": 406,
        "changed_files": 23,
        "created_at": "2022-11-13T12:10:50Z",
        "closed_at": "2022-11-14T03:14:44Z",
        "merged_at": "2022-11-14T03:14:44Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 305,
        "deletions": 144,
        "changed_files": 2,
        "created_at": "2022-11-13T05:24:55Z",
        "closed_at": "2023-04-06T02:15:06Z",
        "merged_at": "2023-04-06T02:15:06Z",
        "body": "This refactors the types around `Bun.spawn` to properly give strict types, easing development with TypeScript.\r\n\r\n**Before and After**\r\n![image](https://user-images.githubusercontent.com/24465214/201506903-4b138652-5d92-45de-b3c8-f6caf1acb230.png)\r\n![image](https://user-images.githubusercontent.com/24465214/201506925-84426c90-876e-4b73-809e-ad02243aa2e3.png)\r\n\r\nThis is done by changing `Subprocess<IO>` to `Subprocess<In, Out, Err>`, where those three parameters are the values passed. In my opinion this also makes that interface easier to use, since you can do\r\n```ts\r\nfunction readData(process: Subprocess<any, \"pipe\", any>) {\r\n  process.stdin  // FileSink | undefined\r\n  process.stdout // ReadableStream\r\n  process.stdout // ReadableStream | number | undefined\r\n}\r\n\r\nfunction writeData(process: Subprocess<\"pipe\">) {\r\n  process.stdin  // FileSink\r\n  process.stdout // ReadableStream | number | undefined\r\n  process.stdout // ReadableStream | number | undefined\r\n}\r\n\r\nfunction doSomething(process: Subprocess) {\r\n  process.stdin  // FileSink | undefined\r\n  process.stdout // ReadableStream | number | undefined\r\n  process.stdout // ReadableStream | number | undefined\r\n}\r\n```\r\nand then it only accepts the process when it was spawned with `stdout: \"pipe\"`\r\n\r\nTransformations from the `Readable` and `Writable` (unions of allowed options) to the properties that you see on `Subprocess` and `SubprocessSync` are in the following utility types:\r\n- `ReadableToIO`\r\n- `ReadableToSyncIO`\r\n- `WritableToIO`\r\n- `OptionsToSubprocess`\r\n- `OptionsToSyncSubprocess`\r\n\r\nThese are all located in the `SpawnOptions` namespace.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-11-13T03:03:59Z",
        "closed_at": "2022-11-13T04:22:39Z",
        "merged_at": "2022-11-13T04:22:39Z",
        "body": "fixes crashes when handling c++ exceptions in a shared library loaded by bunffi",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1251,
        "deletions": 707,
        "changed_files": 22,
        "created_at": "2022-11-12T10:48:49Z",
        "closed_at": "2022-11-13T02:30:13Z",
        "merged_at": "2022-11-13T02:30:13Z",
        "body": "TODO:\r\n- [ ] Why are child_process tests failing but the Bun.spawn tests passing? cc @ThatOneBro  \r\n- [ ] Fixup/test on macOS\r\n\r\nFixes https://github.com/oven-sh/bun/issues/1320",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2031,
        "deletions": 476,
        "changed_files": 9,
        "created_at": "2022-11-12T06:19:57Z",
        "closed_at": "2022-12-02T16:25:13Z",
        "merged_at": "2022-12-02T16:25:13Z",
        "body": "Still trying to get pipe support and there seems to be some bugs in some edge cases. But overall main functionality is supported. Tests coming too.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1438,
        "deletions": 1483,
        "changed_files": 133,
        "created_at": "2022-11-11T22:47:19Z",
        "closed_at": "2022-12-14T10:44:20Z",
        "merged_at": null,
        "body": "See: https://github.com/oven-sh/bun/issues/1490\r\n\r\nI'm trying to compile a list of things that need changing based on errors I see.\r\n\r\n# Build command\r\n\r\n```\r\nZIG_FLAGS=\"-fstage1 -freference-trace\" \\\r\nZIG=\"/usr/local/Cellar/zig/0.10.0/bin/zig\" \\\r\nCFLAGS=\"-Wno-int-conversion\" \\\r\nmake \\\r\nvendor \\\r\nidentifier-cache \\\r\nbindings \\\r\njsc \\\r\ndev\r\n```\r\n\r\n# Fixes\r\n\r\n## `error: invalid builtin function: '@minimum'`\r\n\r\nFix: Rename `@maximum and @minimum` to `@max and @min`\r\n\r\n- https://github.com/ziglang/zig/issues/12994\r\n\r\n## `error: no field named 'iterate' in struct 'fs.Dir.OpenDirOptions'`\r\n\r\nhttp://ratfactor.com/zig/stdlib-browseable/fs.zig.html\r\n\r\n- https://github.com/ziglang/zig/pull/12060\r\n- https://github.com/ziglang/zig/issues/12007\r\n\r\n## `error: empty test name must be omitted`\r\n\r\n`test \"\"` -> `test`\r\n\r\n## `error: expected 1 argument, found 2 - @popCount`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/string_immutable.zig:586:21: error: expected 1 argument, found 2\r\n        const cmp = @popCount(std.meta.Int(.unsigned, ascii_vector_size), @bitCast(@Vector(ascii_vector_size, u1), vec == splatted));\r\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n- https://github.com/ziglang/zig/pull/2240\r\n\r\n## `error: number '0000010' has leading zero`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/install/lockfile.zig:1447:9: error: number '0000010' has leading zero\r\n        0000010 | 0000100 | 0000001 | 0001000 | 0000040 | 0000004 | 0000002 | 0000400 | 0000200 | 0000020,\r\n        ^~~~~~~\r\n/Users/Vaughan/dev/fork/+bun/bun/src/install/lockfile.zig:1447:9: note: use '0o' prefix for octal literals\r\n```\r\n\r\n## `capture shadows declaration of 'str'`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/install/npm.zig:1048:43: error: capture shadows declaration of 'str'\r\n                            .e_string => |str| {\r\n                                          ^~~\r\n/Users/Vaughan/dev/fork/+bun/bun/src/install/npm.zig:617:9: note: declared here\r\n    pub fn str(self: *const PackageManifest, external: ExternalString) string {\r\n    ~~~~^~\r\n```\r\n\r\n## `pointless discard of function parameter`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/http_client_async.zig:515:9: error: pointless discard of function parameter\r\n    _ = socket;\r\n        ^~~~~~\r\n/Users/Vaughan/dev/fork/+bun/bun/src/http_client_async.zig:527:121: note: used here\r\n                    client.done(comptime is_ssl, if (is_ssl) &http_thread.https_context else &http_thread.http_context, socket);\r\n                                                                                                                        ^~~~~~\r\n```\r\n\r\n## `@ctz - expected 1 argument, found 2`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/lock.zig:27:38: error: expected 1 argument, found 2\r\n            return self.state.bitSet(@ctz(u32, LOCKED), .Acquire) == UNLOCKED;\r\n                                     ^~~~~~~~~~~~~~~~~\r\n```\r\n\r\nFollowing ziglang's approach from here:\r\n\r\nhttps://github.com/ziglang/zig/blob/df7223c7f2504b8f98526a86630bd6a7c07720a9/lib/std/Thread/Mutex.zig#L142-L145\r\n\r\n## HELP WANTED: `error: declaration 'Type' shadows function parameter from outer scope`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/ref_count.zig:78:19: error: declaration 'Type' shadows function parameter from outer scope\r\n        pub const Type = Type;\r\n                  ^~~~\r\n/Users/Vaughan/dev/fork/+bun/bun/src/ref_count.zig:3:26: note: previous declaration here\r\npub fn RefCount(comptime Type: type, comptime deinit_on_zero: bool) type {\r\n                         ^~~~\r\n```\r\n\r\nI used `MyType` to avoid shadowing...maybe you want something different.\r\n\r\n## `error: pointless discard of function parameter`\r\n\r\nThere are a bunch of these...\r\n\r\nNot sure why they exist in the first place...maybe unreachable?\r\n\r\nSee: https://github.com/ziglang/zig/pull/12803\r\n\r\nThere is a proposal to add `unused = foo`: https://github.com/ziglang/zig/issues/10245\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/bun.js/event_loop.zig:782:13: error: pointless discard of function parameter\r\n        _ = loop;\r\n            ^~~~\r\n```\r\n\r\n## `function type cannot have a name`\r\n\r\n```\r\n/Users/Vaughan/dev/fork/+bun/bun/src/panic_handler.zig:19:48: error: function type cannot have a name\r\npub fn NewPanicHandler(comptime panic_func: fn handle_panic(msg: []const u8, error_return_type: ?*std.builtin.StackTrace) noreturn) type {\r\n```\r\n\r\n- https://github.com/ziglang/zig/issues/12660\r\n\r\n## `pub const TypeInfo = @compileError(\"deprecated; use Type\");`\r\n\r\n## fmt - `{s}` -> `{any}`\r\n\r\n- https://github.com/ziglang/zig/issues/1358\r\n\r\n## `enum 'src.tagged_pointer.enum:67:37' has no field named 'Microtask'`\r\n\r\n```\r\n./src/bun.js/event_loop.zig:242:17: error: enum 'src.tagged_pointer.enum:69:37' has no field named 'Microtask'\r\n                .Microtask => {\r\n                ^\r\n./src/tagged_pointer.zig:69:37: note: 'src.tagged_pointer.enum:69:37' declared here\r\n            break :tag_break @Type(.{\r\n```\r\n\r\n...and `FileBlobLoader`, etc.\r\n\r\nRelated: \r\n- https://github.com/ziglang/zig/issues/8114\r\n- https://github.com/ziglang/zig/issues/9483\r\n\r\n## `error: unable to evaluate constant expression`\r\n\r\nThis is caused by using `{}` or `{any}` with `comptimePrint`. It tries to dereference a point which is not valid during comptime.\r\n\r\nThis was probably caused by me changing all `{}` to `{any}`.\r\n\r\n```\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:413:31: error: unable to evaluate constant expression\r\n                try formatInt(@ptrToInt(value), 16, .lower, FormatOptions{}, writer);\r\n                              ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:477:29: note: called from here\r\n        return formatAddress(value, options, writer);\r\n                            ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:183:23: note: called from here\r\n        try formatType(\r\n                      ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:1934:11: note: called from here\r\n    format(counting_writer.writer(), fmt, args) catch |err| switch (err) {};\r\n          ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:1978:76: note: called from here\r\npub fn comptimePrint(comptime fmt: []const u8, args: anytype) *const [count(fmt, args):0]u8 {\r\n                                                                           ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/std/fmt.zig:1978:63: note: called from here\r\npub fn comptimePrint(comptime fmt: []const u8, args: anytype) *const [count(fmt, args):0]u8 {\r\n                                                              ^\r\n./src/http.zig:4056:42: note: called from here\r\n  comptime RequestContext.printStatusLine(101);\r\n```\r\n\r\n## `sys/cdefs.h' file not found`\r\n\r\n```\r\n./src/darwin_c.zig:3:21: error: C import failed\r\nconst sysResource = @cImport(@cInclude(\"sys/resource.h\"));\r\n                    ^\r\n/usr/local/Cellar/zig/0.10.0/lib/zig/libc/include/any-macos-any/sys/resource.h:68:10: note: 'sys/cdefs.h' file not found\r\n#include <sys/cdefs.h>\r\n```\r\n\r\nZig using x86 build instead of arm64. Make sure the run `eval opt/homebew....` command.\r\n\r\n## return val posix_spawnattr_destroy\r\n\r\n```\r\npub fn deinit(self: *Attr) void {\r\n        if (comptime bun.Environment.isMac) {\r\n        // https://github.com/ziglang/zig/issues/12964\r\n        system.posix_spawnattr_destroy(&self.attr);\r\n        } else {\r\n        _ = system.posix_spawnattr_destroy(&self.attr);\r\n        }\r\n\r\n        self.* = undefined;\r\n}\r\n```\r\n\r\nhttps://github.com/ziglang/zig/issues/12964\r\n\r\n## @alignCast\r\n\r\n...",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 228,
        "deletions": 93,
        "changed_files": 3,
        "created_at": "2022-11-11T00:28:49Z",
        "closed_at": "2022-11-22T01:31:03Z",
        "merged_at": "2022-11-22T01:31:03Z",
        "body": "Starting to tackle https://github.com/oven-sh/bun/issues/1402\r\n\r\nGoing though the last few commits on the corresponding esbuild files, including improving the error messages on simple fixable user errors.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 38,
        "changed_files": 3,
        "created_at": "2022-11-10T00:13:02Z",
        "closed_at": "2022-11-10T02:10:30Z",
        "merged_at": "2022-11-10T02:10:29Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1579,
        "deletions": 0,
        "changed_files": 12,
        "created_at": "2022-11-09T06:07:54Z",
        "closed_at": "2022-11-09T08:37:57Z",
        "merged_at": "2022-11-09T08:37:57Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 34093,
        "deletions": 2464,
        "changed_files": 277,
        "created_at": "2022-11-09T02:41:33Z",
        "closed_at": "2022-11-09T23:40:40Z",
        "merged_at": "2022-11-09T23:40:40Z",
        "body": "- Moves `bun-types` into `packages`\r\n- Fixes types throughout the codebase. All code including tests (except some excluded subdirectories) are now typechecked according to the root `tsconfig.json`. There's no need to rebuild `bun-types` to get the latest types - the \"source\" type declaration files are used.\r\n- Removes the labeling workflows from `bun-types`\r\n- Add `child_process` types\r\n\r\nYou can run `bun run typecheck` to run typechecking. This is currently passing. We should consider integrating this into CI at some point if it isn't too burdensome.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 497,
        "deletions": 237,
        "changed_files": 7,
        "created_at": "2022-11-08T18:24:07Z",
        "closed_at": "2022-11-08T23:33:48Z",
        "merged_at": "2022-11-08T23:33:47Z",
        "body": "Fixed up very broken tests from node, added a few utils in `tests/bun.js/our-assert` for testing, including `createDoneDotAll` and `createCallCheckCtx` both very useful for working with callbacks and specifically event emitter callbacks.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2022-11-05T17:27:18Z",
        "closed_at": "2022-11-06T01:51:03Z",
        "merged_at": "2022-11-06T01:51:03Z",
        "body": "fix https://github.com/oven-sh/bun/issues/1455",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 5529,
        "deletions": 1786,
        "changed_files": 35,
        "created_at": "2022-11-05T08:32:01Z",
        "closed_at": "2022-11-07T05:42:05Z",
        "merged_at": "2022-11-07T05:42:05Z",
        "body": "This enables automatically installing npm packages used in a script and resolving from a global shared cache when no node_modules folder is present. \r\n\r\nIt works:\r\n- with and without package.json\r\n- with and without lockfiles\r\n \r\npackage.json can be used the same as with `node_modules`. The version ranges specified in the package.json for dependencies become the default used in the runtime. This makes it so you don't have to run `npm install` or `bun install` to install dependencies in Bun's runtime. There is no special syntax.\r\n\r\n![image](https://user-images.githubusercontent.com/709451/200111081-72781311-fe14-4527-a967-6f78119f199c.png)\r\n\r\n\r\n\r\nTODO:\r\n- [ ] Tests\r\n- [x] Error handling\r\n- [x] Disable version specifier support when a package.json is present\r\n- [x] Update README for changes\r\n- [x] Load lockfile from nearest package.json\r\n- [x] Enable progress bar\r\n- [ ] Save lockfile\r\n- [x] Add a flag that enables it even if a node_modules folder is present. Useful for monorepos with a `<workspace>/scripts` folder. Thinking something like: (cc @colinhacks), though they might actually put it in `\"scripts\"` within package.json\r\n```bash\r\nbun -i scripts/extract-tps-reports.js\r\n```\r\n\r\nOut of scope for this first release:\r\n- [ ] TypeScript support (generate .d.ts)\r\n- [ ] Nested lockfiles",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 118,
        "changed_files": 2,
        "created_at": "2022-11-03T16:00:34Z",
        "closed_at": "2022-11-03T19:42:45Z",
        "merged_at": "2022-11-03T19:42:45Z",
        "body": "labeler.yml\r\nlabels.yml",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-11-03T02:01:10Z",
        "closed_at": "2023-03-29T21:32:06Z",
        "merged_at": null,
        "body": "fixes bug from #1399 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1123,
        "deletions": 4,
        "changed_files": 12,
        "created_at": "2022-11-01T23:17:15Z",
        "closed_at": "2022-11-02T04:25:30Z",
        "merged_at": "2022-11-02T04:25:30Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-11-01T18:25:45Z",
        "closed_at": "2022-11-03T00:34:21Z",
        "merged_at": "2022-11-03T00:34:21Z",
        "body": "$PATH was pointing to `/build/packages/*` instead of `/build/bun/packages/*` where they actually get built.\r\n\r\nThe `code /build/README.md` in the post-create command was also causing some trouble, I replaced it with a generic cat instead.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2022-11-01T17:42:36Z",
        "closed_at": "2022-11-01T20:29:31Z",
        "merged_at": "2022-11-01T20:29:31Z",
        "body": "Expand on the different ways of using dev containers, splitting its use within VSCode and as a CLI.\r\n\r\nUpdate the devcontainer commands to follow the current API.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-11-01T16:42:36Z",
        "closed_at": "2022-11-01T20:29:51Z",
        "merged_at": "2022-11-01T20:29:51Z",
        "body": "Looks like a copy-paste mistake, the `vendor-without-check` target's `.PHONY` was incorrectly depending on `tinycc`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-11-01T13:47:31Z",
        "closed_at": "2022-11-01T20:30:10Z",
        "merged_at": "2022-11-01T20:30:10Z",
        "body": "Even though the package is named ninja-build, the ninja binary is still named ninja, so use `which ninja` to check for it",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6708,
        "deletions": 1772,
        "changed_files": 3,
        "created_at": "2022-11-01T02:29:22Z",
        "closed_at": "2022-11-01T05:10:28Z",
        "merged_at": "2022-11-01T05:10:28Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2756,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2022-10-29T18:02:07Z",
        "closed_at": "2022-11-06T21:43:42Z",
        "merged_at": "2022-11-06T21:43:42Z",
        "body": "Beginning of node:child_process polyfill, adds base case for spawn without any extra options specified, and the necessary functionality of the `ChildProcess` class.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1436,
        "deletions": 1008,
        "changed_files": 4,
        "created_at": "2022-10-29T10:35:36Z",
        "closed_at": "2022-10-30T08:03:11Z",
        "merged_at": "2022-10-30T08:03:11Z",
        "body": "Just an update with [v20.27.0](https://github.com/uNetworking/uWebSockets/releases/tag/v20.27.0) [Latest](https://github.com/uNetworking/uWebSockets/releases/latest) C API\r\n\r\nC API now allow for dynamic removal of http routes, listen with Unix sockets, add uws_get_loop_with_native, uws_app_listen_domain_with_options, uws_app_listen_domain, uws_req_for_each_header, rename uws_res_set_offset to uws_res_override_write_offset to match uWebSockets master in next update, add topic_length in uws_num_subscribers.\r\n\r\nI will bring all methods to uws.zig next (if needed)\r\nExperimental Http3 support is an working progress for CAPI, i will bring it with some compilation option to turn on/off soon.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-10-29T09:55:47Z",
        "closed_at": "2023-03-29T21:32:29Z",
        "merged_at": null,
        "body": "A group of friends and I, 15 developers in our free time at university, studying computer engineering, tried unsuccessfully to use Bun, we realized that many developers are missing the opportunity to use Bun, because after its installation, devs are unable to use Bun when they restart their machines, that's why we decided to support this amazing and nice project, bringing to open source, a crucial step, as it is: make permanent on your machine Bun. Currently Bun is missing the opportunity to be adopted by the masses by not incorporating this step in the guide, we hope and love Bun, that's why we bring this PR.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 353,
        "deletions": 159,
        "changed_files": 3,
        "created_at": "2022-10-29T03:56:55Z",
        "closed_at": "2022-11-01T05:00:27Z",
        "merged_at": "2022-11-01T05:00:27Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 13,
        "changed_files": 4,
        "created_at": "2022-10-28T10:55:43Z",
        "closed_at": "2022-11-03T15:00:14Z",
        "merged_at": null,
        "body": "| Node     | Bytes Before | Bytes After |\r\n|----------|--------------|-------------|\r\n| E.String | 48           | 40          | \r\n| E.Local  | 32           | 24          | \r\n\r\n**Hold on review please - going to add more optimizations.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2022-10-28T10:52:27Z",
        "closed_at": "2023-03-29T21:33:01Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 56,
        "changed_files": 1,
        "created_at": "2022-10-28T04:19:46Z",
        "closed_at": "2022-10-28T19:55:46Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-10-26T10:23:33Z",
        "closed_at": "2022-10-26T16:23:34Z",
        "merged_at": "2022-10-26T16:23:34Z",
        "body": "It seems like the VS Code extension name has changed to Dev Containers, this updates the documentation to reflect that.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-10-24T15:22:43Z",
        "closed_at": "2022-10-25T19:34:41Z",
        "merged_at": "2022-10-25T19:34:41Z",
        "body": "fix https://github.com/oven-sh/bun/issues/1373",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 18727,
        "deletions": 49,
        "changed_files": 240,
        "created_at": "2022-10-24T00:48:03Z",
        "closed_at": "2022-10-24T03:25:18Z",
        "merged_at": "2022-10-24T03:25:18Z",
        "body": "This is directly from WebKit. It uses the OpenSSL version instead of the `CommonCrypto` macOS-specific version. The OpenSSL version appears to be used in PlayStation.\r\n\r\nThis also enables bmalloc iso heaps which is a little better for security\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2022-10-23T18:26:31Z",
        "closed_at": "2023-02-18T21:54:59Z",
        "merged_at": "2023-02-18T21:54:59Z",
        "body": "Ref: https://nodejs.org/api/os.html#osmachine\r\n\r\nPlease wait on CI/CD, not sure about Darwin stuff and I don't have a mac to test it on.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 4337,
        "deletions": 40,
        "changed_files": 29,
        "created_at": "2022-10-23T09:06:40Z",
        "closed_at": "2022-10-25T07:44:26Z",
        "merged_at": "2022-10-25T07:44:26Z",
        "body": "- [ ] Tests\r\n- [ ] Types\r\n- [ ] Fix bugs uncovered from tests\r\n\r\nThis looks a lot like the `websocket` API. It introduces three new classes and two functions:\r\n\r\nFunctions on `Bun`:\r\n- `listen`\r\n- `connect`\r\n\r\nClasses:\r\n- `TCPSocket`\r\n- `TLSSocket`\r\n- `Listener`\r\n\r\n`TCPSocket` and `TLSocket` currently have the same API, but we may want specific features for TLS in there later. It does not implement `ReadableStream` or `WritableStream` yet, but it should.\r\n\r\nExample:\r\n```js\r\nimport {listen} from 'bun';\r\n\r\nconst listener = listen({\r\n  host: \"127.0.0.1\",\r\n  port: 8000,\r\n  socket: { \r\n     data(socket, msg) {\r\n        socket.write(msg);\r\n     }\r\n  }\r\n});\r\n\r\nlistener.stop();\r\n```\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 34,
        "changed_files": 1,
        "created_at": "2022-10-21T13:20:43Z",
        "closed_at": "2022-10-21T16:54:14Z",
        "merged_at": "2022-10-21T16:54:14Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 341,
        "deletions": 27,
        "changed_files": 3,
        "created_at": "2022-10-21T02:13:07Z",
        "closed_at": "2022-10-25T02:02:57Z",
        "merged_at": "2022-10-25T02:02:57Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 89,
        "changed_files": 8,
        "created_at": "2022-10-19T20:15:02Z",
        "closed_at": "2022-10-19T23:19:35Z",
        "merged_at": "2022-10-19T23:19:35Z",
        "body": "Makes various improvements to the issue templates.\r\n\r\n* Added a template for install/upgrade issues\r\n* Revamped documentation template to include reasoning: missing, incorrect, etc.\r\n* Other small copy edits",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2022-10-19T10:41:51Z",
        "closed_at": "2022-10-19T23:19:51Z",
        "merged_at": "2022-10-19T23:19:51Z",
        "body": "This partially addresses https://github.com/oven-sh/bun/issues/696 , by using `$XDG_CACHE_HOME` for those of us who already have that env var set.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2022-10-19T01:27:08Z",
        "closed_at": "2022-10-19T03:11:17Z",
        "merged_at": "2022-10-19T03:11:17Z",
        "body": "fixes #1087",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2835,
        "deletions": 127,
        "changed_files": 63,
        "created_at": "2022-10-15T09:23:06Z",
        "closed_at": "2022-10-18T05:37:19Z",
        "merged_at": "2022-10-18T05:37:19Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-10-14T16:58:37Z",
        "closed_at": "2023-06-03T07:15:12Z",
        "merged_at": null,
        "body": "See #1306\r\n\r\nFrom the issue comments:\r\n\r\n```\r\n1 | import * as i from './export'\r\n2 |\r\n3 | console.log(i.\u0275test())\r\n               ^\r\nTypeError: i[\"\u00c9\u00b5test\"] is not a function. (In 'i[\"\u00c9\u00b5test\"]()', 'i[\"\u00c9\u00b5test\"]' is undefined)\r\n```\r\nwith export.js containing:\r\n```ts\r\nexport function \u0275test() {\r\n  return 1;\r\n};\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2022-10-14T05:42:18Z",
        "closed_at": "2022-10-19T04:12:33Z",
        "merged_at": "2022-10-19T04:12:33Z",
        "body": "Changes the Deno FFI benchmark to use the \"buffer\" type so that the bytes `Uint8Array` can be used directly, aligning it with how the Bun benchmark is done.\r\n\r\nAlso, use the static method version of `Deno.UnsafePointerView.getCString()`",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3784,
        "deletions": 23,
        "changed_files": 63,
        "created_at": "2022-10-14T02:24:43Z",
        "closed_at": "2022-10-19T01:32:59Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1633,
        "changed_files": 73,
        "created_at": "2022-10-13T20:26:02Z",
        "closed_at": "2022-10-17T03:52:40Z",
        "merged_at": "2022-10-17T03:52:40Z",
        "body": "https://github.com/bun-community/create-templates/",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2022-10-12T16:18:26Z",
        "closed_at": "2022-10-13T12:44:08Z",
        "merged_at": "2022-10-13T12:44:08Z",
        "body": "fix https://github.com/oven-sh/bun/issues/1306",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-10-11T16:27:57Z",
        "closed_at": "2022-10-19T01:48:54Z",
        "merged_at": "2022-10-19T01:48:54Z",
        "body": "containg -> contain",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 18,
        "changed_files": 9,
        "created_at": "2022-10-09T04:06:11Z",
        "closed_at": "2022-10-09T05:36:34Z",
        "merged_at": "2022-10-09T05:36:34Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/1119\r\n\r\nAlso find that the generate_class scripts has generated duplicated exports in zig, which could lead to compile error. Fix it in this pr.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 53,
        "changed_files": 2,
        "created_at": "2022-10-07T11:00:56Z",
        "closed_at": "2022-10-07T16:48:37Z",
        "merged_at": "2022-10-07T16:48:37Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/1281",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-10-05T15:20:15Z",
        "closed_at": "2022-10-05T23:49:01Z",
        "merged_at": "2022-10-05T23:49:01Z",
        "body": "Fix https://github.com/oven-sh/bun/issues/1289",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 134,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-10-03T17:12:30Z",
        "closed_at": "2023-08-30T03:16:19Z",
        "merged_at": null,
        "body": "Fixes https://github.com/oven-sh/bun/issues/879",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 375,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-09-25T03:51:26Z",
        "closed_at": "2023-06-05T16:36:35Z",
        "merged_at": null,
        "body": "Tests for https://nodejs.org/api/util.html#utiltypes",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 942,
        "deletions": 585,
        "changed_files": 9,
        "created_at": "2022-09-24T11:13:41Z",
        "closed_at": "2023-06-05T16:19:27Z",
        "merged_at": null,
        "body": "## Fixes\r\n- Fixes https://github.com/oven-sh/bun/issues/622\r\n- Fixes https://github.com/oven-sh/bun/issues/1015\r\n  - Calls with template literals of the form ```foo`\\?`\u200b``` now preserve the raw characters present in template literals, even in ascii mode. This is important for the `raw` field in the first parameter that would be sent to `foo`. Most importantly, `String.raw` relies on this field.\r\n    - ```String.raw`\\?`\u200b``` would erroneously transpile to ```String.raw`?`\u200b```, now it preserves the `'\\\\'` character.\r\n    - Previously, ```String.raw`\ud83d\udca9`\u200b``` would erroneously transpile to ```String.raw`\\ud83d\\udca9`\u200b```. Now it transpiles to:\r\n    ```js\r\n    String.raw(Object.freeze(Object.defineProperty([\"\\u{1F4A9}\"], \"raw\", { value: Object.freeze([\"\\u{1F4A9}\"]) })));\r\n    ```\r\n      - Small size optimization, `\"\\ud83d\\udca9\"` is now `\"\\u{1F4A9}\"` instead. (saves 3 characters in this case, but for larger codepoints which take 6 sextets this strategy saves 2 characters)\r\n        - ~~We could also consider switching to using different kinds of quotes in the ${interpolated spaces} to cut down on characters that way too.~~ We now switch which quote is used based on which would require the fewest number of escape sequences!\r\n          - There is an older, less intelligent function for choosing the best quote character already present in the codebase which I did not change yet, but it could benefit from a logic upgrade too.\r\n \r\n- Fixed '\\b' from erroneously being transpiled to '\\f'\r\n    ```diff\r\n  \t- 0x08 => { if (quote == '`') e.print(0x08) else e.print(\"\\\\f\"); },\r\n  \t+ 0x08 => { if (quote == '`') e.print(0x08) else e.print(\"\\\\b\"); },\r\n\t```\r\n- Fixed \"\\r\\n\" not properly being normalized.\r\n  - Previously, the code which was supposed to look at the next character after '\\r' to see if it is '\\n' would just look at the current character, i.e. '\\r', so it was not very useful.\r\n\t```diff\r\n\t-if (iter.i < text.len and text[iter.i + 1] == '\\n') // potential segfault!\r\n\t+if (iter.i + 1 < text.len and text[iter.i + 1] == '\\n')\r\n\r\n\t-iter.i += @as(u32, @boolToInt(iter.i < text.len and text[iter.i] == '\\n')); // safe, but wrong\r\n\t+iter.i += @as(u32, @boolToInt(iter.i + 1 < text.len and text[iter.i + 1] == '\\n'));\r\n\t```\r\n- Fixed low surrogates from erroneously being checked against `first_high_surrogate` rather than `first_low_surrogate`\r\n  ```diff\r\n  -if (c2 >= first_high_surrogate and c2 <= last_low_surrogate)`\r\n  +if (c2 >= first_low_surrogate and c2 <= last_low_surrogate)`\r\n  ```\r\n- There was a place in the code where `c < 255` would become a two digit hex escape, whereas I believe it should be `c <= 255`. I combined a bunch of the branches together, but here was the bad code:\r\n  ```zig\r\n  if (c < 0xFF) {\r\n      var ptr = e.writer.reserve(4) catch unreachable;\r\n      ptr[0..4].* = [_]u8{ '\\\\', 'x', hex_chars[c >> 4], hex_chars[c & 15] };\r\n      e.writer.advance(4);\r\n      continue;\r\n  }\r\n  ```\r\n- Made it so \\b, \\f, and \\v in template literals transpile to their escape sequence rather than inserting the literal character when in ascii mode\r\n- Tab characters are now fine for string literals of any kind\r\n- Fixed some miscellaneous off-by-one issues that were in my way (and an off-by-two)\r\n\r\n## Debug-mode fixes\r\n- Made it so the following conditions no longer crash debug builds:\r\n  - large codepoints in strings like `\\u{111032}`\r\n  - null pointers produced by empty strings being copied. e.g. \r\n    ```js\r\n    const str = `\\\r\n    `\r\n    ```\r\n\r\n## Gradual improvements\r\nThe groundwork is laid in this PR to get away from internally allocating utf16 strings. The [printProcessedRawQuotedUTF16](https://github.com/oven-sh/bun/blob/31241ae7b20a00948e66611ac157fde6ff63cf53/src/js_printer.zig#L1338-L1504) function allows for strings to be processed as they are being printed, which can just as easily work for utf8 strings. The [bestQuoteCharForProcessedRawString](https://github.com/oven-sh/bun/blob/31241ae7b20a00948e66611ac157fde6ff63cf53/src/js_printer.zig#L1190-L1335) function also has all the functionality one would need to figure out things like what length an equivalent utf16 string would have without needing to allocate it.\r\n  - (There is a function in `js_printer.zig` which already tried to determine which quote would require the fewest number of escape sequences, although it was very na\u00efve and prone to give the wrong answer. However, I did not fully replace it yet.)\r\n\r\n## Minor improvements\r\n\r\n- Made the fast path for string parsing include newline and tab characters when dealing with template literal strings.\r\n- Made reserved space for JS output more closely match what is actually called for by file contents.\r\n- Improved error handling slightly, however in my opinion error handling needs its own revamp.\r\n  - It would probably be ideal to move all parsing and lexxing error methods from out of the functions that do the parsing and lexxing, so that Bun can be optimized for not encountering errors potentially after every character or token. I think errors should be returned as raw error codes, so as to not be handled by a method called directly when the error is encountered. If necessary, Bun could have a little parser to figure out which characters to highlight once an error has been returned. E.g. imagine this JS is transpiled: `\"\\u{FFFFFFF}\"`. This could return `error.UnicodeOverflow` and then after the stack is unwound there could be a parser than runs for `error.UnicodeOverflow` error codes that would parse the aforementioned string to grab all the characters that look like a unicode literal, and then report it as an error from higher up in the stack. Again, the advantage of this is that there would be no need for methods and branches handling these errors in-line where the real workload is being done. Even when methods are set to cold, I believe they should still have some overhead due to having to move registers around, although I have never actually looked at assembly for cold methods before. I could be totally wrong about this so I would love to hear what others have to say. I could imagine a function being generated which does all the bookkeeping after being called, but that would be a bit of a feat for register allocation. \r\n  - For now, a couple of errors are nicer, specifically dealing with e.g. `\\8`, `\\18`, `\\xGH`, `\\uLLLL`, `\\u{FFFFFFFFF}`, etc.\r\n\r\n## Future work\r\n- The code I am the least confident in is some of the `p.lexer.is_potential_template_literal_call = was_potential_template_literal_call;` statements in \"js_parser.zig\". I tried to just stick those in all the places I could find that made sense, but I did not actually read through the code to understand whether all cases are covered. Anyway, I think this PR is large enough, and I will save that task for another day.\r\n- I am not sure how to trigger the following lines of code, so if someone could provide a test case that does so, that would build my confidence in the correctness of my solution. https://github.com/oven-sh/bun/blob/0ca42e81f31d31270c44f81d88fff33361817720/src/js_printer.zig#L2594-L2604\r\n\r\n- I also noticed it is very easy to have the Bun transpiler accidentally remove live code when calling with a template literal instead of normal function arguments.\r\n  ```js\r\n  function kee() {\r\n      console.log('soup')\r\n      return kee;\r\n  }\r\n  const str = kee````; // does not emit\r\n  ```\r\n- As mentioned, the debugging library could use work. I fixed a few cases but not all of them.\r\n- Octal literals should be disallowed in template strings and in strict mode. ~~Currently, they can be used in any string and will transpile to a `\\x` or `\\u` literal.~~\r\n  - These now properly error, at least in some cases. \r\n- ~The compile time `.length` calculator is broken for things like `console.log('\\r'.length)`. This could be super easy to fix, I just haven't looked at it.~\r\n  - Fixed! The issue was that the slow path was not being taken for '\\r' and related situations. Now, the slow path will be taken for any string with a backslash character.\r\n- `String.raw` template literal calls should be optimized away, if possible. \r\n  - Does Bun already have a way of detecting whether a reference to `String.raw` refers to the default one?",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-09-20T01:41:47Z",
        "closed_at": "2022-11-08T05:10:20Z",
        "merged_at": "2022-11-08T05:10:20Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 156,
        "changed_files": 1,
        "created_at": "2022-09-20T00:21:00Z",
        "closed_at": "2022-11-08T05:04:50Z",
        "merged_at": "2022-11-08T05:04:50Z",
        "body": "Fixes #1185\r\n- Environment values are no longer improperly coerced to `undefined`/`null`/`true`/`false`/`1`/`0`\r\n  - `bunfig.toml` macros should still work the same.\r\n- Empty string environment values (e.g. `> QUIET= bun dev`) previously would get `process.env.QUIET` set to '='. This happened because `this.step()` would keep the cursor pointing to the last character once reaching the end, and so `this.source.contents[current..]` on `\"QUIET=\"` would result in `\"=\"`. To remedy this, we set `this.current` to be beyond the last character when `this.cursor.c = -1`. That way `this.source.contents[current..]` correctly gives us an empty string.\r\n\r\n  ```zig\r\n  this.step();\r\n  \r\n  // we don't need to do special parsing on process-level environment variable values\r\n  // if they're quoted, we should keep them quoted.\r\n  // https://github.com/oven-sh/bun/issues/40\r\n  if (comptime is_process_env) {\r\n      const current = this.current;\r\n      // TODO: remove this loop\r\n      // it's not as simple as just setting to the end of the string\r\n      while (this.codepoint() != -1) : (this.step()) {}\r\n      return Variable{\r\n          .key = key,\r\n          .value = this.source.contents[current..],\r\n          // nested values are unsupported in process environment variables\r\n          .has_nested_value = false,\r\n      };\r\n  }\r\n  ```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 956,
        "deletions": 155,
        "changed_files": 13,
        "created_at": "2022-09-19T14:15:34Z",
        "closed_at": "2022-09-27T03:04:28Z",
        "merged_at": "2022-09-27T03:04:28Z",
        "body": "Fixes https://github.com/oven-sh/bun/issues/530\r\n\r\nThis implements request body streaming in the HTTP server and exposes a `ReadableStream` on the `body` property for `Response` and `Request`.\r\n\r\nTODO:\r\n- [ ] Tests\r\n- [ ] Call `.tee()` for `clone` in `Request`\r\n- [ ] Call `.tee()` for `clone` in `Response`",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2022-09-19T09:19:29Z",
        "closed_at": "2022-11-16T18:19:05Z",
        "merged_at": null,
        "body": "I'm assuming that the bun.sh domain is managed via Cloudflare\r\n\r\nThis is a Cloudflare worker that fetches the contents of `src/cli/install.sh` from GitHub when a request is sent to https://bun.sh/install\r\n\r\nSee the README in bun-landing for publishing the worker\r\n\r\nCloses #1128\r\n\r\n(This also means that changes to the install script update on the bun website immediately)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2022-09-17T16:03:49Z",
        "closed_at": "2022-09-18T00:49:47Z",
        "merged_at": "2022-09-18T00:49:47Z",
        "body": "A couple of small improvements to the contributing documentation for macOS.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-09-17T15:28:58Z",
        "closed_at": "2022-09-18T05:11:16Z",
        "merged_at": "2022-09-18T05:11:16Z",
        "body": "Co-authored by @ekil1100.\r\n\r\nAdd support for `${ENV}` syntax to read nested values when defining environment variables.\r\n\r\nCloses #248.\r\n\r\n_Note:\r\nCurrently does not support default value like `${undefined:-default}`.\r\nPlease let me know if I should create an issue for that._",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-09-15T11:52:17Z",
        "closed_at": "2022-10-05T23:49:38Z",
        "merged_at": "2022-10-05T23:49:38Z",
        "body": "Signed-off-by: Ryan Russell <git@ryanrussell.org>\r\n\r\n\r\n## Description\r\nComment readability improvements in `thread_pool.zig`\r\n\r\n\r\n### Notes\r\nAlso grep'd against the rest of the repo, all of these replacements are exclusive to this file.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-09-14T20:34:51Z",
        "closed_at": "2022-11-08T08:42:55Z",
        "merged_at": null,
        "body": "resolves: https://github.com/oven-sh/bun/issues/174",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 208,
        "deletions": 5,
        "changed_files": 10,
        "created_at": "2022-09-11T22:02:42Z",
        "closed_at": "2022-11-08T21:57:20Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1563,
        "deletions": 747,
        "changed_files": 17,
        "created_at": "2022-09-11T19:20:28Z",
        "closed_at": "2022-09-11T20:37:17Z",
        "merged_at": "2022-09-11T20:37:17Z",
        "body": "it's about 6x faster when making several https requests\r\n2x faster when making several http requests",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2022-09-10T06:22:44Z",
        "closed_at": "2022-09-16T18:32:58Z",
        "merged_at": null,
        "body": "- Changes zls-vscode to v1.1.2\r\n  - For some reason, zls-vscode v1.1.3 is broken and will not work.\r\n- Updated settings to include \"zls.path\" to support v1.1.2\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 489,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-09-09T23:30:09Z",
        "closed_at": "2023-02-24T00:24:04Z",
        "merged_at": null,
        "body": "I implement createReadStream using bun apis (Readable api), it's faster \"1.11 \u00b1 1.29\" then NodeJs.\r\nResolve #1207 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 292,
        "deletions": 193,
        "changed_files": 8,
        "created_at": "2022-09-09T11:10:08Z",
        "closed_at": "2022-09-10T05:48:56Z",
        "merged_at": "2022-09-10T05:48:55Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 405,
        "deletions": 138,
        "changed_files": 6,
        "created_at": "2022-09-08T12:37:35Z",
        "closed_at": "2022-09-09T02:52:27Z",
        "merged_at": "2022-09-09T02:52:27Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 526,
        "deletions": 123,
        "changed_files": 12,
        "created_at": "2022-09-05T15:42:26Z",
        "closed_at": "2022-09-06T07:57:17Z",
        "merged_at": "2022-09-06T07:57:16Z",
        "body": "This PR is mainly a translation of: https://github.com/nodejs/readable-stream/blob/e95c7617af81755d91aee0d3de16af9ae47960de/lib/internal/streams/readable.js#L84-L163\r\nand https://github.com/nodejs/readable-stream/blob/e95c7617af81755d91aee0d3de16af9ae47960de/lib/internal/streams/readable.js#L1191-L1208\r\n\r\nTo support `ReadableState`, this PR also changes `BufferList` to `LazyClassStructure`.\r\n\r\nThank you for your time on this long PR :)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 62,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-09-03T07:29:17Z",
        "closed_at": "2022-09-03T08:39:24Z",
        "merged_at": "2022-09-03T08:39:24Z",
        "body": "Removed setting `is_export` for variables used inside generated closures for enums and namespaces. Can be seen in esbuild as well: https://github.com/evanw/esbuild/blob/77194c8fd8026e8e9f09f4480d1be42aaa6fc09c/internal/js_parser/ts_parser.go#L1627\r\n\r\nFixes #1136 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 4,
        "changed_files": 8,
        "created_at": "2022-09-02T23:29:54Z",
        "closed_at": "2023-08-25T07:01:53Z",
        "merged_at": null,
        "body": "resolves: https://github.com/oven-sh/bun/issues/866",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1429,
        "deletions": 28,
        "changed_files": 20,
        "created_at": "2022-09-02T14:03:13Z",
        "closed_at": "2022-09-03T10:57:44Z",
        "merged_at": "2022-09-03T10:57:44Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-09-02T04:00:01Z",
        "closed_at": "2022-09-02T06:11:09Z",
        "merged_at": "2022-09-02T06:11:09Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 766,
        "deletions": 10,
        "changed_files": 13,
        "created_at": "2022-09-01T06:03:06Z",
        "closed_at": "2022-09-01T19:56:41Z",
        "merged_at": "2022-09-01T19:56:41Z",
        "body": "The code is a migration of https://github.com/nodejs/string_decoder. And the tests are from https://github.com/nodejs/node/blob/main/test/parallel/test-string-decoder.js.\r\n\r\nNote that I also fixed the `buffer.toString(\"utf16le\")`.\r\n\r\nThank you for your time on this PR :)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-31T15:44:15Z",
        "closed_at": "2022-09-01T07:14:20Z",
        "merged_at": "2022-09-01T07:14:20Z",
        "body": "Therefor -> Therefore",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-30T21:05:15Z",
        "closed_at": "2022-09-01T07:14:02Z",
        "merged_at": "2022-09-01T07:14:02Z",
        "body": "It shouldn't be necessary to recurse since its only done for the binary.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/1180",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-29T10:49:28Z",
        "closed_at": "2022-09-04T01:52:33Z",
        "merged_at": "2022-09-04T01:52:33Z",
        "body": "Sorry if there are any errors in the manner in which this is my first PR.\r\nThe version of `react-is` did not match React, which was in issue (#1155), so I had to do a `bun create` and then separately install the latest version.\r\nThis fix raises `react-is` to v18. Please check.\r\n\r\nFixes: #1155 ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1453,
        "deletions": 149,
        "changed_files": 27,
        "created_at": "2022-08-29T10:27:32Z",
        "closed_at": "2023-08-30T03:15:11Z",
        "merged_at": null,
        "body": "does not run yet",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-29T01:12:16Z",
        "closed_at": "2023-06-05T16:20:11Z",
        "merged_at": null,
        "body": "These steps seem to be missing from the build instructions. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-28T17:24:14Z",
        "closed_at": "2022-09-03T12:01:26Z",
        "merged_at": "2022-09-03T12:01:26Z",
        "body": "Closes https://github.com/oven-sh/bun/issues/935",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 607,
        "deletions": 144,
        "changed_files": 13,
        "created_at": "2022-08-28T10:30:29Z",
        "closed_at": "2022-08-29T04:28:05Z",
        "merged_at": "2022-08-29T04:28:05Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1211,
        "deletions": 1084,
        "changed_files": 67,
        "created_at": "2022-08-28T05:29:50Z",
        "closed_at": "2022-08-28T06:46:05Z",
        "merged_at": "2022-08-28T06:46:05Z",
        "body": "This makes promises and async/await faster\r\n\r\nWaiting on https://github.com/oven-sh/WebKit to be \ud83d\udfe2 \r\n```zig\r\n\u276f bun async-overhead.mjs # New\r\ncpu: Apple M1 Max\r\nruntime: bun 0.1.11 (arm64-darwin)\r\n\r\nbenchmark                                    time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nnoop                                     324.75 ps/iter       (300 ps \u2026 9.6 ns)  320.9 ps  362.5 ps  387.5 ps\r\nasync function(){}                        76.64 ns/iter  (71.44 ns \u2026 336.79 ns)  75.18 ns 145.71 ns 188.13 ns\r\nawait 1                                  146.04 ns/iter (138.09 ns \u2026 493.42 ns) 143.86 ns 256.63 ns 319.42 ns\r\nawait new Promise(resolve => resolve())  165.15 ns/iter    (157 ns \u2026 228.15 ns) 164.55 ns 211.77 ns 225.93 ns\r\n```\r\n\r\n```zig\r\n\u276f /tmp/bun-can async-overhead.mjs # Previous canary\r\ncpu: Apple M1 Max\r\nruntime: bun 0.1.11 (arm64-darwin)\r\n\r\nbenchmark                                    time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nnoop                                     322.86 ps/iter      (300 ps \u2026 9.38 ns)  320.8 ps  358.4 ps  416.7 ps\r\nasync function(){}                       135.01 ns/iter (117.54 ns \u2026 761.33 ns) 126.05 ns 433.13 ns 502.45 ns\r\nawait 1                                  253.47 ns/iter (231.92 ns \u2026 659.78 ns) 247.38 ns  481.2 ns  567.2 ns\r\nawait new Promise(resolve => resolve())  270.69 ns/iter  (247.5 ns \u2026 508.29 ns) 262.68 ns 492.54 ns 508.29 ns\r\n```\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 184,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-08-27T21:21:34Z",
        "closed_at": "2023-06-05T16:33:59Z",
        "merged_at": null,
        "body": "Closes https://github.com/oven-sh/bun/issues/1021\r\n\r\nChecks:\r\n- package_json main field\r\n- index.js\r\n- index.ts\r\n- index.mjs\r\n- index.cjs\r\n\r\nfallback: index.js\r\n\r\nCant find any file:\r\n![image](https://user-images.githubusercontent.com/56601352/187074421-ed67af82-6b90-4688-8f66-dd053bf3fb42.png)\r\n\r\nInvalid main field but `index.xx` exist:\r\n![image](https://user-images.githubusercontent.com/56601352/187074376-723a4213-059a-4223-a7c4-3da8708053e5.png)\r\n\r\nInvalid main field + cant find file:\r\n![image](https://user-images.githubusercontent.com/56601352/187075003-afbcbfc1-4ea8-4c24-b0be-d35a8332ba4e.png)\r\n\r\nCorrect main field/found file:\r\n![image](https://user-images.githubusercontent.com/56601352/187074389-994d801f-9254-442f-b170-b6bcbb72faba.png)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2022-08-27T14:25:20Z",
        "closed_at": "2022-08-28T13:19:54Z",
        "merged_at": "2022-08-28T13:19:54Z",
        "body": "A hacky way to support `NULL` in ffi. The origin problem is that we cannot have `(double)DoubleEncodeOffset` in js. Not sure if this is a good method...",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 39,
        "changed_files": 4,
        "created_at": "2022-08-27T11:41:41Z",
        "closed_at": "2022-08-27T19:32:14Z",
        "merged_at": "2022-08-27T19:32:14Z",
        "body": "There were 2 bugs:\r\n- `JSC__JSValue__toUInt64NoTruncate` should have 2 arguments;\r\n- should use `Number.MAX_SAFE_INTEGER` instead of `Number.MAX_VALUE` for upper bound of `int64_t` and `uint64_t`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2022-08-27T07:49:19Z",
        "closed_at": "2022-08-27T09:59:08Z",
        "merged_at": "2022-08-27T09:59:08Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-08-26T03:43:19Z",
        "closed_at": "2022-08-26T09:51:58Z",
        "merged_at": "2022-08-26T09:51:58Z",
        "body": "## Description\r\nWhen viewing the DB benchmark, I noticed the link `404`'d. After running bun through [markdown-link-check](https://github.com/tcort/markdown-link-check), I found 3 dead links.\r\n\r\n### DB Link\r\nFound the commit SHA that the `curl` command downloads (in the [download.sh](https://github.com/oven-sh/bun/blob/main/bench/sqlite/src/download.sh#L8) file)\r\n\r\n### Pointer Conversion\r\nUsed `git log -L '/val instanceof ArrayBuffer/,+1:src/bun.js/ffi.exports.js'` to find commit 98393ca to change the referenced lines\r\n\r\n### Dynamic Requires\r\nThis one is just odd, not exactly sure what happened there. But the link now works (insert shrug emote here)?\r\n\r\n----\r\n\r\n**Let me know if any of these updated links are wrong and I'll take another pass at em!**",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2022-08-25T21:14:43Z",
        "closed_at": "2022-08-29T04:21:21Z",
        "merged_at": "2022-08-29T04:21:21Z",
        "body": "https://github.com/oven-sh/bun/issues/72\r\n\r\nI will preface this PR by saying this is my first time touching Zig, so this code needs some work, but it does two things:\r\n\r\n- Fixes a bug with tsconfig `paths` that are purely a wildcard prefix (i.e, `'*': [\"foo/*\"]`), these previously caused a segfault while trying to slice the key.\r\n- Handle `extends` when the property is encountered in a tsconfig. We look up all parent tsconfigs until we hit the base config, then apply the tsconfigs starting from the base to generate a merged tsconfig. \r\n\r\nThe solution really needs some caching and memoization so that we don't keep reading and reparsing parent tsconfigs. But I think this is at odds with how Bun currently stores tsconfigs on DirEntry objects. I think there needs to be a dedicated cache of TsConfigJSONs, which includes both the DirEntry tsconfigs as well as ones referenced by `extends`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 500,
        "deletions": 167,
        "changed_files": 8,
        "created_at": "2022-08-25T16:36:38Z",
        "closed_at": "2022-08-26T04:12:45Z",
        "merged_at": "2022-08-26T04:12:45Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-08-25T15:10:23Z",
        "closed_at": "2022-10-07T13:41:16Z",
        "merged_at": null,
        "body": "+ adds info for how to update wsl\r\n+ reorders documentation to match the order in the table of contents\r\n\r\n\r\nHad this issue and couldn't find any documentation for it and went on the Discord to ask for help. Found this solution, but I've since seen at least one other person come into the Discord asking the same question.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-08-24T14:46:26Z",
        "closed_at": "2022-08-24T16:10:50Z",
        "merged_at": "2022-08-24T16:10:50Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2022-08-24T10:03:40Z",
        "closed_at": "2022-08-24T16:12:20Z",
        "merged_at": "2022-08-24T16:12:20Z",
        "body": "fix #1135\r\n\r\nIt seems that there were lots of bugs for `setTimeout`/`setInterval`. So I'll try to clarify what I'm trying to do in this PR, in case it introduces some new bugs :p\r\n\r\nThe rationale is, for each timeout event, the `vm.active_tasks` will be added twice:\r\n- one in event loop, just like any other `IOTask` (`IOTask.createOnJSThread`);\r\n- the other in `Timer.set`, which is an additional count for timer.\r\n\r\n`active_tasks` will prevent bun from exit: bun will loop to wait until `active_task` is zero.\r\n\r\nAnd correpsond to the 2 add, there will be 2 minus:\r\n- one in event loop, when a task is finished, event loop will minus 1 to `active_task`\r\n- the other in `Timer`, when a timer is triggered, and it won't happen again, `active_task` need to be `-|= 1`ed.\r\n\r\nThe reason timer events need 2 adds instead of 1 is that, when a timer event  will repeat, we can just not do the second minus and keep bun alive.\r\n\r\nThere were several problem with the origin implementation.\r\n- when clear the timeout (`clearTimer`), we should do `-|= 2`, so that bun could exit immediately. Instead, currently it only set `timer.cancelled` to `true`.\r\n- no need to add to `active_task` when repeating, not minusing is good enough, otherwise, the `setInterval` cannot be cancelled.\r\n\r\nAnd in this pr, I changed the code into:\r\n- `active_tasks -|= 2` in `clearTimer`\r\n- don't `active_tasks +|= 1` for repeat timer\r\n- don't `active_tasks -|= 1` in `clear`, as the timer may be canceled already.\r\n\r\nAlso, for linux timeout, we should not set the count field in `io_uring_prep_timeout`, as it has a special function. For more information, please check: https://github.com/axboe/liburing/issues/232\r\n\r\nThank you for your time on this PR :)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2022-08-23T07:07:47Z",
        "closed_at": "2022-08-23T12:12:58Z",
        "merged_at": "2022-08-23T12:12:58Z",
        "body": "fix #1131 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-22T23:14:44Z",
        "closed_at": "2022-08-23T18:25:37Z",
        "merged_at": "2022-08-23T18:25:37Z",
        "body": "#772 updated the polyfill but not the minified one. Not sure what was used to minify this, so I just did the replacement by hand. This should probably be done automatically so this doesn't happen again.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 195,
        "deletions": 183,
        "changed_files": 2,
        "created_at": "2022-08-22T00:40:35Z",
        "closed_at": "2022-08-22T02:20:13Z",
        "merged_at": null,
        "body": "I was trying to build bun for the first time and it was confusing to me where to start. \r\n\r\nPer https://github.com/oven-sh/bun/issues/798 - I think this would be helpful to getting more people started. \r\n\r\nA few other TODOs:\r\n\r\n- [ ] There is not a clear list of system requirements - per the section `Troubleshooting (general)` at the bottom it appears that 22 GB of RAM is necessary to compile. It may be helpful to add that to a doc like this. \r\n- [ ] It may be helpful to have an overview of how the code is structured and some description of the submodules. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-21T15:52:20Z",
        "closed_at": "2022-08-22T02:20:33Z",
        "merged_at": "2022-08-22T02:20:33Z",
        "body": "- explicitly refer to `$HOME` bash variable in the examples. \r\n- Add missing `$HOME` reference",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1241,
        "deletions": 1,
        "changed_files": 16,
        "created_at": "2022-08-21T06:45:21Z",
        "closed_at": "2022-08-21T12:34:31Z",
        "merged_at": "2022-08-21T12:34:31Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-20T17:58:13Z",
        "closed_at": "2022-08-20T23:40:29Z",
        "merged_at": "2022-08-20T23:40:29Z",
        "body": "Major fix, resolves\r\n\r\n![image](https://user-images.githubusercontent.com/56601352/185760274-4b30c276-2252-4132-9621-bee545d1a52a.png)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1820,
        "deletions": 15,
        "changed_files": 27,
        "created_at": "2022-08-20T08:47:06Z",
        "closed_at": "2022-08-26T02:38:28Z",
        "merged_at": "2022-08-26T02:38:28Z",
        "body": "> ~~**Warning**~~\r\n> ~~In huge WIP~~\r\n\r\n> **Note**\r\n> Implemented, our first PR (@Fire-The-Fox, @xHyroM)\r\n\r\n- [x] tests\r\n- [x] bun-types\r\n- [x] faster than other runtimes\r\n- [x] benchmarks\r\n   - [x] cpus()\r\n   - [x] networkInterfaces()\r\n   - [x] arch()\r\n   - [x] endianness()\r\n   - [x] freemem()\r\n   - [x] getPriority()\r\n   - [x] homedir()\r\n   - [x] hostname()\r\n   - [x] loadavg()\r\n   - [x] platform()\r\n   - [x] release()\r\n   - [x] setPriority()\r\n   - [x] tmpdir()\r\n   - [x] totalmem()\r\n   - [x] type()\r\n   - [x] uptime()\r\n   - [x] userInfo()\r\n   - [x] version()\r\n\r\n### Required before ready to review:\r\n- [x] Install MacOS on VMWare (in progress, my net is slow)\r\n- [x] Make support for MacOS\r\n   - [x] cpus()\r\n   - [x] freemem()\r\n   - [x] loadavg()\r\n   - [x] networkInterfaces()\r\n   - [x] uptime()\r\n   - [x] version()\r\n   - [x] release()\r\n- [ ] Test every function\r\n   - [x] linux\r\n   - [ ] darwin\r\n\r\n```js\r\nimport os from \"node:os\";\r\n\r\nfor (const p of Object.getOwnPropertyNames(os)) {\r\n    if (p === \"setPriority\" || p === \"default\") continue;\r\n\r\n    if (typeof os[p] === 'function') console.log(p, os[p]());\r\n    else console.log(p, os[p]);\r\n}\r\n\r\nconsole.log(`priority ${os.getPriority()} (should be 0)`);\r\nos.setPriority(0, 2);\r\nconsole.log(`priority ${os.getPriority()} (should be 2)`);\r\nos.setPriority(4);\r\nconsole.log(`priority ${os.getPriority()} (should be 4)`);\r\n```\r\n\r\n### Must be implemented:\r\n- [x] os.EOL\r\n- [x] os.arch()\r\n- [x] os.cpus()\r\n- [x] os.devNull\r\n- [x] os.endianness()\r\n- [x] os.freemem()\r\n- [x] os.getPriority() - missing info field in error\r\n- [x] os.homedir()\r\n- [x] os.hostname()\r\n- [x] os.loadavg()\r\n- [x] os.networkInterfaces()\r\n- [x] os.platform()\r\n- [x] os.release()\r\n- [x] os.setPriority() - missing info field in error\r\n- [x] os.tmpdir()\r\n- [x] os.totalmem()\r\n- [x] os.type()\r\n- [x] os.uptime()\r\n- [x] os.userInfo() - missing `encoding` option\r\n- [x] os.version()\r\n- [x] os.constants\r\n   - [x] os.constants.signals\r\n   - [x] os.constants.errno\r\n   - [x] os.constants.dlopen\r\n   - [x] os.constants.priority\r\n   - [x] UV_UDP_REUSEADDR\r\n\r\n```js\r\n// RUN WITH NODEJS NO BUN\r\nconst os = require(\"node:os\");\r\n\r\nlet declarations = \"\";\r\nlet addToModule = \"\";\r\nfor (const [key, value] of Object.entries(os.constants.signals)) {\r\n    declarations += `   pub const ${key} = ${value};\\n`;\r\n    addToModule += `    constantsModule.put(globalObject, &JSC.ZigString.init(\"${key}\"), JSC.JSValue.jsNumber(${key}));\\n`\r\n}\r\n\r\nconsole.log([\r\n    declarations,\r\n    '',\r\n    'pub fn create(module: JSC.JSValue, globalObject: *JSC.JSGlobalObject) callconv(.C) void {',\r\n    `   const constantsModule = JSC.JSValue.createEmptyObject(globalObject, ${Object.keys(os.constants.signals).length});`,\r\n    `   ${addToModule}`,\r\n    '   module.put(globalObject, &JSC.ZigString.init(\"dlopen\"), constantsModule);',\r\n    '}',\r\n].join('\\n'));\r\n```\r\n\r\nBig \u2764\ufe0f for @Fire-The-Fox . He help me with cpus and networkInterfaces",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 237,
        "deletions": 32,
        "changed_files": 2,
        "created_at": "2022-08-20T05:37:14Z",
        "closed_at": "2022-08-20T07:17:17Z",
        "merged_at": "2022-08-20T07:17:17Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2022-08-20T01:01:15Z",
        "closed_at": "2022-08-31T02:31:59Z",
        "merged_at": "2022-08-31T02:31:59Z",
        "body": "JSC's builtin profiler has the ability to dump profiles to a file or return JSON encoded runtime stack traces.\r\n\r\nThree API's are exposed\r\n\r\n```javascript\r\nstartSamplingProfiler(/*optional*/ dir_to_dump_profiles, /*optional*/ sample_rate_in_us);\r\nconst json = samplingProfilerStackTraces(); // get a running list of stack traces from the sampler\r\nnoInline(func); // tell the JIT compiler not to inline the named function - useful for getting better stack traces\r\n```\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 344,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2022-08-18T01:12:21Z",
        "closed_at": "2022-11-16T18:20:59Z",
        "merged_at": null,
        "body": "This PR adds a simple CRUD Rest API example to showcase the built in sqlite database, as well as the ease of developing apps with Bun.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 256,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2022-08-15T03:50:37Z",
        "closed_at": "2023-06-05T16:13:18Z",
        "merged_at": null,
        "body": "Example for usage for [express-js like api](https://www.npmjs.com/package/bunrest). ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-15T02:17:05Z",
        "closed_at": "2022-08-15T04:23:17Z",
        "merged_at": "2022-08-15T04:23:17Z",
        "body": "Update mostly to get: https://github.com/libarchive/libarchive/pull/1761",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 21,
        "changed_files": 4,
        "created_at": "2022-08-14T16:18:25Z",
        "closed_at": "2022-08-15T01:08:25Z",
        "merged_at": "2022-08-15T01:08:25Z",
        "body": "With this PR, we can finally run the express example :tada: :\r\n```js\r\n'use strict';\r\nconst express = require('express')\r\nconst app = express()\r\n\r\napp.get('/', (req, res) => {\r\n  return  res.send('Hello World!')\r\n})\r\n\r\napp.listen(8080)\r\n```\r\n\r\nNotice that we need to add `JavaScriptCore/runtime/JSModuleNamespaceObject.h` to WebKit release.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2022-08-13T22:28:31Z",
        "closed_at": "2023-08-30T03:16:07Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2022-08-13T15:57:21Z",
        "closed_at": "2022-08-14T01:36:40Z",
        "merged_at": "2022-08-14T01:36:40Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 266,
        "deletions": 62,
        "changed_files": 18,
        "created_at": "2022-08-13T13:07:54Z",
        "closed_at": "2022-08-14T04:01:38Z",
        "merged_at": "2022-08-14T04:01:37Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-12T19:12:51Z",
        "closed_at": "2022-08-13T07:46:54Z",
        "merged_at": null,
        "body": "After this PR, we can run `res.send` in express.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2022-08-10T19:09:45Z",
        "closed_at": "2022-08-16T14:55:47Z",
        "merged_at": null,
        "body": "## A Little bit of context\r\n\r\nAs I was developing a backend with hono and bun, to run a dev server with auto-reload I used `bun dev` but It returns a js file in CJS syntax(possibly tranpiled version of my code) instead of a response from a rest api but the api worked fine when using `bun run src/index.ts`. That made it obvious to me that the file watcher only works with frontend for now so based off a stackoverflow post I decided to add nodemon with some basic config to hono app example as a file watcher is neccessary in backend development and bun's own `dev` does not work with backend code like hono nor does it have any official documentation.\r\n\r\nSo this works as a file watcher for hono for until when bun's own HMR or hot-reload is implemented for backend(hono). Also the command to be used now should be `bun run dev`",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-10T17:43:08Z",
        "closed_at": "2023-06-05T16:14:24Z",
        "merged_at": null,
        "body": "2nd attempt... I wiped changes from my branch, forgetting that I still had an unmerged PR open, and it automatically closed PR #998 \r\n\r\n> Issue was from wrapping `assert` in an ESM-style `export * from assert` statement. ESBuild, instead of copying the exported variable straight from `assert`, created a new object and populated it with all the properties. This lost the handy dandy fact that `assert` was actually a function at heart, not an object.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-10T17:34:15Z",
        "closed_at": "2023-03-29T21:21:24Z",
        "merged_at": null,
        "body": "Include basic info on `bun build` to view Bun's transpiler output",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2022-08-10T12:04:48Z",
        "closed_at": "2022-08-12T10:04:01Z",
        "merged_at": "2022-08-12T10:04:01Z",
        "body": "Signed-off-by: Ryan Russell <git@ryanrussell.org>\r\n\r\nReadability fix in `src/tagged_pointer.zig`: `IntPrimtiive` -> `IntPrimitive` \r\n\r\nConfirmed with grep post-fix that there are no more dangling `IntPrimtiive` references in the codebase.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 331,
        "deletions": 0,
        "changed_files": 18,
        "created_at": "2022-08-09T08:49:19Z",
        "closed_at": "2023-03-29T21:24:04Z",
        "merged_at": null,
        "body": "#967 adding the react typescript template",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 23,
        "changed_files": 2,
        "created_at": "2022-08-09T08:43:20Z",
        "closed_at": "2022-08-09T12:44:40Z",
        "merged_at": "2022-08-09T12:44:40Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 299,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-08-07T19:49:06Z",
        "closed_at": "2022-09-25T02:05:18Z",
        "merged_at": "2022-09-25T02:05:18Z",
        "body": "## General Description\r\nThis PR is supposed to cover tests in [here ](https://github.com/nodejs/node/blob/main/test/parallel/test-util-promisify.js). \r\n\r\n[Link to discussion](https://github.com/oven-sh/bun/discussions/852)\r\n\r\n## TODOs\r\n\r\n- [x] File structure to map with node's functions.\r\n- [x] Promisify tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-07T14:10:56Z",
        "closed_at": "2022-08-07T16:23:45Z",
        "merged_at": "2022-08-07T16:23:45Z",
        "body": "fix #506. \r\n`setInterval` was not registered to the VM repeatly, therefore vm exited after the first call.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 6,
        "changed_files": 8,
        "created_at": "2022-08-07T04:59:54Z",
        "closed_at": "2022-08-08T17:58:00Z",
        "merged_at": "2022-08-08T17:58:00Z",
        "body": "fix #970, #953\r\n\r\nThis is a simpler version of `RejectedPromiseTracker` in WebKit, which will save the unhandled promises in a vector.\r\n\r\nThank you for your time on this PR :)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-06T11:08:43Z",
        "closed_at": "2023-03-29T21:25:29Z",
        "merged_at": null,
        "body": "Differential ShellCheck is a GitHub action that performs differential ShellCheck scans on files changed via PR and reports results directly in PR.\r\n\r\nSince this repository contains some shell scripts I think you might find it useful to have Shell linter.\r\n\r\nDocumentation is available at: [@redhat-plumbers-in-action/differential-shellcheck](https://github.com/redhat-plumbers-in-action/differential-shellcheck#readme). Let me know If you are missing some feature or setting. I'm always happy to extend functionality.\r\n\r\nExamples - [screenshots](https://github.com/redhat-plumbers-in-action/differential-shellcheck/tree/main/doc/images)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2022-08-06T07:01:15Z",
        "closed_at": "2022-08-10T17:28:10Z",
        "merged_at": "2022-08-10T17:28:10Z",
        "body": "Issue was from wrapping `assert` in an ESM-style `export * from assert` statement. ESBuild, instead of copying the exported variable straight from `assert`, created a new object and populated it with all the properties. This lost the handy dandy fact that `assert` was actually a function at heart, not an object.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-05T15:29:49Z",
        "closed_at": "2022-08-13T02:22:32Z",
        "merged_at": "2022-08-13T02:22:32Z",
        "body": "happend -> happened",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 120,
        "deletions": 118,
        "changed_files": 1,
        "created_at": "2022-08-05T11:26:37Z",
        "closed_at": "2022-08-05T17:34:50Z",
        "merged_at": "2022-08-05T17:34:50Z",
        "body": "Fix of panic in threads while downloading scoped packages to progress with #190 \r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 56,
        "changed_files": 4,
        "created_at": "2022-08-05T09:20:00Z",
        "closed_at": "2022-08-05T17:42:53Z",
        "merged_at": "2022-08-05T17:42:53Z",
        "body": "Something like https://github.com/oven-sh/bun/pull/844 but for TextDecoder\r\n\r\nMy first PR to bun source code \ud83d\ude80",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-05T09:05:26Z",
        "closed_at": "2022-08-05T17:36:33Z",
        "merged_at": "2022-08-05T17:36:33Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-05T03:23:16Z",
        "closed_at": "2022-08-05T04:44:26Z",
        "merged_at": "2022-08-05T04:44:26Z",
        "body": "fix #976.\r\n\r\nWe should raise `RangeError` when the status code is not one of the redirect code, but it seems like RangeError is not exposed in zig yet.\r\n\r\nThank you for your time on this PR :)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2022-08-04T23:08:41Z",
        "closed_at": "2022-08-05T19:42:43Z",
        "merged_at": "2022-08-05T19:42:43Z",
        "body": "1. Included info on Docker being necessary\r\n2. Updated instructions for modern devcontainer cli\r\n3. Added general troubleshooting section (only one rn)\r\n\r\n@ maintainers: Feel free to update the wording or placement of the additions/edits. I don't know how you'd like it to be organized.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 32,
        "changed_files": 3,
        "created_at": "2022-08-04T13:23:11Z",
        "closed_at": "2022-08-04T17:42:37Z",
        "merged_at": null,
        "body": "Bun used to disable paths in the `browser` field of package.json, however, this will disable many node packages, e.g. `object-inspect` and `iconv-lite` relied by express (#496). \r\n\r\nThis PR is trying to make bun continue to resolve those disabled paths and allow user to pass the platform info from cli to resolver. After this PR, bun could start the basic express server:tada: (not able to send response back though...):\r\n\r\n```js\r\nconst express = require('express')\r\nconst app = express()\r\nconst port = 8080\r\n\r\napp.get('/', (req, res) => {\r\n  console.log(\"receive req\")\r\n  res.send('Hello World!')\r\n})\r\n\r\napp.listen(port, () => {\r\n  console.log(`Example app listening on port ${port}`)\r\n})\r\n```\r\n\r\nThank you for your time on reviewing this PR :)\r\n\r\ngently ping @Jarred-Sumner @evanwashere ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-08-03T16:30:40Z",
        "closed_at": "2022-08-04T01:31:40Z",
        "merged_at": "2022-08-04T01:31:40Z",
        "body": "fix #949 #884\r\n\r\nThank you for your time on this PR :)\r\n\r\nrelates to #496",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 289,
        "deletions": 153,
        "changed_files": 5,
        "created_at": "2022-08-03T12:08:23Z",
        "closed_at": "2022-08-03T21:05:39Z",
        "merged_at": "2022-08-03T21:05:39Z",
        "body": "This also fixes multiple memory leaks and double frees and opens the doors for the code that utilizes this iterator to easily add UTF-8 and UTF-16 support based on the encoding provided by JSC.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2022-08-02T16:01:44Z",
        "closed_at": "2023-08-30T03:15:29Z",
        "merged_at": null,
        "body": "In a process of trying to build Bun on Windows I found some problems and prepared some fixes. Bun still doesn't build on Windows and obviously it's very far from it, but it's a few additional steps to that goal.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-02T11:55:00Z",
        "closed_at": "2022-08-04T04:14:08Z",
        "merged_at": "2022-08-04T04:14:08Z",
        "body": "fix #131\r\n\r\nThe origin bug is that paths like `...` and `..foo` are treated as `..`\r\n\r\nThank you for your time on reviewing this PR:)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-02T09:23:42Z",
        "closed_at": "2022-08-02T23:45:19Z",
        "merged_at": "2022-08-02T23:45:18Z",
        "body": "Before this PR, `bun-debug run examples/hashing.js` will raise `integer cast truncated bits` for crc32.\r\n\r\nThank you for your time on reviewing this PR:)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-08-02T06:45:06Z",
        "closed_at": "2022-08-02T23:45:57Z",
        "merged_at": "2022-08-02T23:45:57Z",
        "body": "This PR adds npm-install and sqlite to devcontainer rule and move runtime_js_dev to the front of dev in makefile, because:\r\n\r\n- api rule will need `./node_modules/.bin/peechy` which is downloaded from npm-install;\r\n- dev need `sqlite3.o` which is compiled by sqlite rule;\r\n- dev needs files like `src/runtime.node.out.js`, which is generated from runtime_js_dev.\r\n\r\nAfter these 3 changes we could build the develop container in the readme.\r\n\r\nThank you for your time on this PR:)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-08-02T06:01:05Z",
        "closed_at": "2023-08-30T03:15:49Z",
        "merged_at": null,
        "body": "The build requires GNU sed so let's error out early if we're using BSD\r\nsed so that you don't have to wait half of the build to run to discover\r\nthat.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 262,
        "deletions": 4184,
        "changed_files": 18,
        "created_at": "2022-08-01T02:02:12Z",
        "closed_at": "2022-08-05T07:37:34Z",
        "merged_at": "2022-08-05T07:37:34Z",
        "body": "This PR converts the custom React SSR landing page for bun.sh to a static, zero JavaScript Next.js application.\r\n\r\nYou can try it out here -> https://bun-landing-one.vercel.app/",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 19,
        "changed_files": 13,
        "created_at": "2022-07-31T18:38:52Z",
        "closed_at": "2022-07-31T22:41:46Z",
        "merged_at": "2022-07-31T22:41:46Z",
        "body": "Fixes #943 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2022-07-31T05:12:11Z",
        "closed_at": "2022-07-31T08:10:10Z",
        "merged_at": "2022-07-31T08:10:10Z",
        "body": "Add landmark role to page. Change \"header\" to more semantically correct \"article\". Use proper h1 element instead of h3. Update CSS to keep h1 same size as former h3.\r\n\r\nShould now pass AAA for WCAG 2.2.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 155,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2022-07-31T02:43:51Z",
        "closed_at": "2022-08-21T18:08:06Z",
        "merged_at": null,
        "body": "This `dns` fallback uses cloudflare DoH to implement a basic lookup",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-30T22:00:26Z",
        "closed_at": "2022-07-31T08:10:50Z",
        "merged_at": "2022-07-31T08:10:50Z",
        "body": "\u2026mPrototypeMap_getter`\r\n\r\nPurely a small readability fix. \r\n\r\nGrep'd to double check and no other references exist outside `ZigGlobalObject.cpp`.\r\n\r\nSigned-off-by: Ryan Russell <git@ryanrussell.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-29T11:03:27Z",
        "closed_at": "2022-07-29T21:00:04Z",
        "merged_at": "2022-07-29T21:00:04Z",
        "body": "I can't update benchmark image because I'm not on computer :((",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2022-07-29T09:37:43Z",
        "closed_at": "2022-07-31T22:43:16Z",
        "merged_at": "2022-07-31T22:43:16Z",
        "body": "Quoting https://www.npmjs.com/package/@vscode/dev-container-cli#user-content-deprecation:\r\n\r\n> This CLI is deprecated. Please update to the replacement at https://www.npmjs.com/package/@devcontainers/cli.\r\n\r\nA few things to note:\r\n\r\n- Maybe the Makefile can directly do `npx -y` instead of having to `npm install -g`\r\n- The `devcontainer open` command is missing in either `@vscode/dev-container-cli` or `@devcontainers/cli`, so I'm not sure what it is supposed to do? This piece of info needs to be updated too.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2022-07-29T01:09:36Z",
        "closed_at": "2022-10-26T13:17:50Z",
        "merged_at": null,
        "body": "1. Fix VSCode typescript plugin warnings\r\n<img width=\"914\" alt=\"Screen Shot 2022-07-29 at 9 56 55\" src=\"https://user-images.githubusercontent.com/7160998/181661963-4d79b307-9971-4cb0-abd0-c70adf5ff0fd.png\">\r\n2. Use index.ts by default",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2022-07-28T19:41:56Z",
        "closed_at": "2022-12-16T16:48:47Z",
        "merged_at": null,
        "body": "## WHAT\r\n\r\nAdded more `.PHONY` and help comments in the Makefile.\r\n\r\nPS: this is more like a continuation of these two merged PR : \r\n       - https://github.com/oven-sh/bun/pull/847\r\n       - https://github.com/oven-sh/bun/pull/804",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-28T12:59:34Z",
        "closed_at": "2023-03-29T21:26:33Z",
        "merged_at": null,
        "body": "Added extra details to the README.md like a small description and the link to the KingWorld GitHub repository.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-28T12:44:35Z",
        "closed_at": "2022-07-31T08:11:26Z",
        "merged_at": "2022-07-31T08:11:26Z",
        "body": "i hope it will fix",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 649,
        "deletions": 1199,
        "changed_files": 10,
        "created_at": "2022-07-28T12:41:43Z",
        "closed_at": "2023-03-29T21:20:38Z",
        "merged_at": null,
        "body": "> **Warning**\r\n> Haven't tested, can't test it\r\n\r\nEvery `matrix.settings` element will run as new job\r\n\r\nAdded `bun-build.yml` that builds macos + linux\r\n\r\nNot sure if it works ",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 988,
        "deletions": 706,
        "changed_files": 50,
        "created_at": "2022-07-28T08:06:54Z",
        "closed_at": "2023-01-17T07:33:55Z",
        "merged_at": null,
        "body": "The idea here is to have (some) unit tests use minimum dependencies so that it can be quickly compiled and run.\r\n\r\n- packages added: `global`, `logger`, `js_ast`, with corresponding stubs for tests;\r\n- added `make quick-tests` command for a set of unit tests (see `src/__quick_tests.zig`);\r\n- some not-so-quick tests are in `src/__all_quick_tests.zig`;\r\n- refactoring:\r\n    - `__global.zig` removed, `Global` struct moved to `global.zig`;\r\n    - `UpdateRequest` moved out from `install.zig`;\r\n    - all allocators moved to `src/allocators/`, `allocators.zig` renamed to `data_structures.zig` (not directly related to tests, I just find it less confusing, can revert this though);\r\n    - some global utility functions moved to `global_utils.zig`;\r\n- bugs fixed:\r\n    - `SizeFormatter` will print `0.51 KB` instead of `1 KB` for `fmt.size(513)` (special thanks to Zig anonymous struct literal);\r\n    - `indexOfNotChar` will find a char (that's not equal to provided) as intended;\r\n- added tests for:\r\n    - `SizeFormatter`\r\n    - `range`\r\n    - `copy`\r\n    - scoped package test for `UpdateRequests.parse`\r\n- avoid using `brew --prefix <FORMULA>` on MacOS, it's *very* slow.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-26T20:49:38Z",
        "closed_at": "2023-03-29T21:16:57Z",
        "merged_at": null,
        "body": "Adding a cache step. Not sure if I have the right folder for this, would appreciate pointers.\r\n\r\nAlso, we'll need to run this at least 2 times to see if caching it does anything.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-26T10:30:59Z",
        "closed_at": "2022-07-27T01:40:03Z",
        "merged_at": null,
        "body": "The 'make jsc' target fails as follows on macOS:\r\n\r\n  /usr/bin/sed -i \"s/USE(PTHREAD_JIT_PERMISSIONS_API)/CPU(ARM64)/g\" /Users/penberg/src/bun/bun/src/bun.js/WebKit/Source/JavaScriptCore/jit/ExecutableAllocator.h\r\n  sed: 1: \"/Users/penberg/src/bun/ ...\": extra characters at the end of p command\r\n\r\nFix it up.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2022-07-25T22:45:41Z",
        "closed_at": "2022-07-28T19:00:00Z",
        "merged_at": null,
        "body": "## WHAT\r\n\r\n- clean curl since it's installed on precedent stage\r\n- added a new stage to benefit from docker cache\r\n- remove wget install since it's available from a precedent stage",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2022-07-25T22:01:23Z",
        "closed_at": "2022-12-16T16:48:47Z",
        "merged_at": null,
        "body": "## WHAT\r\n\r\nreplace loops to one instruction (printf) from the install shell script",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-25T01:54:18Z",
        "closed_at": "2022-07-25T07:36:33Z",
        "merged_at": "2022-07-25T07:36:33Z",
        "body": "\u2026 bun's latest file",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-24T14:50:16Z",
        "closed_at": "2023-03-29T21:16:24Z",
        "merged_at": null,
        "body": "## Description\r\n\r\nDockerHub has imposed a rate limits of 100 container image requests per six hours for anonymous usage, and 200 container image requests per six hours. Reference: https://www.docker.com/increase-rate-limits/\r\n\r\nThis PR allows to publish parallel images to GitHub Container registry which is tightly integrated with the Bun's GitHub repository and is free of rate limiting, hence giving more flexibility to end users using Bun in CI environments. \r\n\r\nThis PR also adds another step to sync the repository's `README.md` file with the DockerHub description which is currently empty.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 232,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-24T10:08:09Z",
        "closed_at": "2022-07-25T07:38:37Z",
        "merged_at": "2022-07-25T07:38:37Z",
        "body": "Hello,\r\n\r\nPorting tests from https://github.com/nodejs/node/blob/main/test/parallel/test-util.js\r\nWith some exceptions, added comments to track these.\r\nTracking node compatibility in this table https://github.com/oven-sh/bun/discussions/852\r\n\r\nThanks,\r\nSoney",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-07-23T20:10:44Z",
        "closed_at": "2022-07-25T07:42:12Z",
        "merged_at": null,
        "body": "Added code/instruction for installing specific bun version. The issue is #843 ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2022-07-23T15:51:26Z",
        "closed_at": "2022-07-23T19:38:28Z",
        "merged_at": "2022-07-23T19:38:28Z",
        "body": "## WHAT\r\n\r\nAdded .PHONY in some targets in the Makefile.\r\n\r\n## WHY\r\n> A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request. There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance.\r\n\r\ncf : https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html#:~:text=%5D-,4.6%20Phony%20Targets,-A%20phony%20target",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-23T14:14:16Z",
        "closed_at": "2022-07-23T19:38:47Z",
        "merged_at": "2022-07-23T19:38:47Z",
        "body": "Reference: https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#cache-backend-api",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2022-07-23T14:00:58Z",
        "closed_at": "2022-07-23T19:39:12Z",
        "merged_at": "2022-07-23T19:39:12Z",
        "body": "## WHAT\r\n\r\nadded info, info_bod and success method to wrap type of messages to the cli install script",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-23T11:02:39Z",
        "closed_at": "2022-07-23T22:51:27Z",
        "merged_at": "2022-07-23T22:51:27Z",
        "body": "Hello @SheetJSDev / @Jarred-Sumner ,\r\n\r\nAdded support for util.TextEncoder as discussed.\r\nPlease check if this approach is correct and if this needs more changes. \ud83d\ude4f \r\nTested it with https://gist.github.com/soneymathew/63a8996a5cf40ae61b43361a4aa78c04 which is fork of https://gist.github.com/Jarred-Sumner/aa5ebe17d2244221f83cec3dd249d06c\r\n\r\nThanks,\r\nSoney",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 156,
        "deletions": 148,
        "changed_files": 1,
        "created_at": "2022-07-23T04:52:28Z",
        "closed_at": "2022-07-25T01:16:47Z",
        "merged_at": "2022-07-25T01:16:47Z",
        "body": "## WHAT\r\n\r\nIf we want in the future set, change those value it may be frustrating since it's the same across stages, that's why i factorize those argument in this PR !",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-23T01:17:17Z",
        "closed_at": "2022-07-28T01:28:39Z",
        "merged_at": "2022-07-28T01:28:39Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-22T11:26:08Z",
        "closed_at": "2022-07-23T14:16:41Z",
        "merged_at": "2022-07-23T14:16:41Z",
        "body": "Changed the 'our' in \"Check out **our** [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\" to 'the'.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-22T04:00:25Z",
        "closed_at": "2022-07-22T22:55:24Z",
        "merged_at": "2022-07-22T22:55:24Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 108,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2022-07-20T16:14:43Z",
        "closed_at": "2022-07-20T17:19:42Z",
        "merged_at": "2022-07-20T17:19:42Z",
        "body": "Implements `Stat.isBlockDevice()`, `Stat.isCharacterDevice()`, `Stat.isFIFO()`, `Stat.isSocket()`, and `Stat.isSymbolicLink()` using the equivalent sys calls.\r\n\r\nSee https://nodejs.org/api/fs.html#class-fsstats for reference\r\n\r\nCloses #797",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-07-20T11:17:41Z",
        "closed_at": "2022-07-23T00:31:59Z",
        "merged_at": "2022-07-23T00:31:59Z",
        "body": "## WHAT\r\n\r\nJust added an helper target for the huge makefile, it could be nice to fill it up along the way but since it's not the goal of this PR, i wanted to propose it like that !\r\n\r\n## SCREENSHOTS\r\n![Screenshot from 2022-07-20 13-17-10](https://user-images.githubusercontent.com/22576758/179969246-edfa2e6b-65b5-4727-baf4-f57bcac00682.png)\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 162,
        "deletions": 171,
        "changed_files": 2,
        "created_at": "2022-07-20T11:05:20Z",
        "closed_at": "2022-07-23T04:52:39Z",
        "merged_at": null,
        "body": "## WHAT \r\n\r\n- If we want in the future to set, change those value it may be frustrating, that's why i factorize those argument in this PR !\r\n- I also cleaned some redundant installation inside the Dockerfile.base\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-07-20T07:53:23Z",
        "closed_at": "2022-07-23T00:32:57Z",
        "merged_at": "2022-07-23T00:32:57Z",
        "body": "Fixes #645 \r\n\r\n| Before | After |\r\n|-----|-----|\r\n| <img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/790659/179925316-adf67064-d92f-441d-bce1-46eda725e4bd.png\"> | <img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/790659/179925388-6762d4a9-6b47-4d98-b9f1-163187579e19.png\"> |\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-20T05:48:21Z",
        "closed_at": "2022-08-07T20:03:52Z",
        "merged_at": null,
        "body": "As we know **curl** and **wget** are the most popular download tools . very few people are familiar with **curl** commands.\r\n\r\nAdding **wget** into this project will help them installing **bun** more easier \ud83d\ude42\r\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2022-07-19T23:06:37Z",
        "closed_at": "2022-07-20T04:05:53Z",
        "merged_at": "2022-07-20T04:05:52Z",
        "body": "Closes #786 and also solves a segfault with the same cause which seems to not have been found yet when using the JSX prop array.\r\n\r\nWhen you release the `JSPropertyNameArrayRef`, it actually deallocates the underlying names.  However, we were freeing the individual names and then the property name array ref was freeing them.  Jarred found the cause of the double free in the Discord.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2022-07-19T10:06:06Z",
        "closed_at": "2022-07-30T04:05:32Z",
        "merged_at": null,
        "body": "Hi team, I will need your assistance, what's the best way to test this without publishing to npm. Does bun package.json supports local / workspace dependencies? i.e. \r\n\r\n`\"devDependencies\": {\r\n    \"@types/react\": \"^18\",\r\n    \"bun-framework-next\": \"file:../foo/bar\",\r\n    \"typescript\": \"latest\"\r\n  },`",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-07-19T09:21:48Z",
        "closed_at": "2023-03-29T21:15:32Z",
        "merged_at": null,
        "body": "Subjectively, I do find it useful to have either docs or examples folders added to the install script print out (we love to reverse-engineer things). \r\n\r\nFeel free to adjust or drop me a comment. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-19T03:30:00Z",
        "closed_at": "2022-07-19T05:26:56Z",
        "merged_at": "2022-07-19T05:26:56Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-18T17:25:07Z",
        "closed_at": "2022-07-21T11:07:40Z",
        "merged_at": "2022-07-21T11:07:40Z",
        "body": "Improvement reactjs example readme file, Added learning resources",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-18T09:58:19Z",
        "closed_at": "2022-07-18T18:33:24Z",
        "merged_at": null,
        "body": "https://github.com/oven-sh/bun/issues/190#issuecomment-1179399154",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2022-07-18T09:57:48Z",
        "closed_at": "2022-07-27T18:42:40Z",
        "merged_at": "2022-07-27T18:42:39Z",
        "body": "latin1, binary and ascii are now stored as full bytes. It's consistent with that Node.js does. The conversion of ascii buffers is only done in `toString`.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2022-07-18T06:06:42Z",
        "closed_at": "2022-07-24T20:51:41Z",
        "merged_at": "2022-07-24T20:51:41Z",
        "body": "* Bump up Hono version number\r\n* Simplify the script\r\n* Add tests",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 2,
        "changed_files": 7,
        "created_at": "2022-07-18T04:23:53Z",
        "closed_at": "2022-07-18T23:30:58Z",
        "merged_at": "2022-07-18T23:30:58Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-17T20:04:05Z",
        "closed_at": "2022-07-24T20:55:16Z",
        "merged_at": "2022-07-24T20:55:16Z",
        "body": "Very impressive crazy I know.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 56,
        "changed_files": 1,
        "created_at": "2022-07-17T13:15:53Z",
        "closed_at": "2022-07-17T20:24:36Z",
        "merged_at": "2022-07-17T20:24:35Z",
        "body": "Fixes #757 \r\n(stack trace/code still needs to be printed)",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-17T09:09:58Z",
        "closed_at": "2022-07-17T14:56:37Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-17T08:39:42Z",
        "closed_at": "2022-07-17T14:58:29Z",
        "merged_at": "2022-07-17T14:58:29Z",
        "body": "Hopefully fixes https://github.com/oven-sh/bun/issues/682\r\n\r\n<img width=\"543\" alt=\"image\" src=\"https://user-images.githubusercontent.com/790659/179392030-41bdcc07-4679-4c89-8d2e-bd141a8b2acb.png\">\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-17T07:07:45Z",
        "closed_at": "2022-07-17T14:58:49Z",
        "merged_at": "2022-07-17T14:58:49Z",
        "body": "[lol-html](https://github.com/cloudflare/lol-html/blob/master/LICENSE) is BSD 3-Clause licensed, [uSockets](https://github.com/uNetworking/uSockets/blob/master/LICENSE) and [uWebsockets](https://github.com/Jarred-Sumner/uWebSockets/blob/master/LICENSE) are Apache 2.0 licensed.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-07-16T21:22:14Z",
        "closed_at": "2023-08-30T03:15:38Z",
        "merged_at": null,
        "body": "Previously it was copying the jsc `.a` files to `BUN_DEPS_OUT_DIR `, but `make release` was looking for them in `JSC_LIB`, which caused the build to fail.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2022-07-16T19:57:58Z",
        "closed_at": "2022-07-16T22:23:18Z",
        "merged_at": "2022-07-16T22:23:18Z",
        "body": "These function are confusingly named. `btoa` converts \"Binary\" to Ascii by encoding the input using base64. `atob` reverses that process by base64 decoding the Ascii input into a \"Binary\" output.\r\n\r\nThe names come from the Unix utilities with the same names, which \"converts a binary file to ascii for transmission over a telephone line\" (https://www.unix.com/man-page/minix/1/btoa/)\r\n\r\nSee:\r\n- https://developer.mozilla.org/en-US/docs/Web/API/atob\r\n- https://developer.mozilla.org/en-US/docs/Web/API/btoa\r\n- https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa-dev\r\n\r\nNote: the actual implementation of `btoa` and `atob` are correct, but the docs were backwards.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-16T11:32:54Z",
        "closed_at": "2022-07-17T16:57:29Z",
        "merged_at": "2022-07-17T16:57:29Z",
        "body": "Updated hono",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 162,
        "deletions": 122,
        "changed_files": 1,
        "created_at": "2022-07-16T10:47:46Z",
        "closed_at": "2022-07-19T18:56:28Z",
        "merged_at": "2022-07-19T18:56:28Z",
        "body": "Did a little overhaul of the install script\r\n\r\nSome notable changes:\r\n- Added `set -euo pipefail` to make the script fail on errors & undefined variables\r\n- Corrected bad practices, like using double square brackets for if conditions for better performance & syntax\r\n- Fixed various dangerous statements with the help of the [ShellCheck linter](https://www.shellcheck.net/)\r\n- Removed a lot of duplicate code\r\n- Changed the fish config to use `set --export PATH` instead of `fish_add_path`, since the latter modifies `$PATH` permanently with `$fish_user_paths` ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 13,
        "changed_files": 4,
        "created_at": "2022-07-16T02:48:42Z",
        "closed_at": "2022-07-23T08:29:03Z",
        "merged_at": null,
        "body": "Currently, bun doesn't even build on non-AVX2 environment.\r\n[some package managers](https://github.com/Homebrew/homebrew-core/pull/105263#issuecomment-1185819052) intentionally disable AVX2 to support older systems.\r\n\r\nThis PR fixes the build on non-AVX2 env, though I don't assure bun runs properly.\r\n\r\nDisclaimer: I have not tested this because I don't have a non-AVX2 machine.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 136,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-15T17:32:44Z",
        "closed_at": "2022-09-11T14:42:53Z",
        "merged_at": null,
        "body": "I have no idea how bun implements installing the completions, but I made a module that adds bun completions when sourced in the config file. This was mostly for myself, but I thought it might be useful.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-15T16:16:26Z",
        "closed_at": "2022-07-15T19:00:16Z",
        "merged_at": "2022-07-15T19:00:16Z",
        "body": "`URLSearchParams` is typed but also missing some method types.\r\n\r\nCurrently `URLSearchParams` type is missing `keys`, `values`, `entries` iterator, which is available in Bun but not displayed by IDE because the type is missing.\r\n\r\nIDE autocompletion (VSCode):\r\n<img width=\"523\" alt=\"Screen Shot 2565-07-15 at 23 06 52\" src=\"https://user-images.githubusercontent.com/35027979/179263441-c9bdc008-6592-418e-9a8c-35abeb2c7475.png\">\r\n\r\nAn actual type after `console.log`:\r\n<img width=\"792\" alt=\"Screen Shot 2565-07-15 at 23 07 17\" src=\"https://user-images.githubusercontent.com/35027979/179263376-ddb590bf-3b64-4ec7-aa07-f10fd6b7f212.png\">\r\n\r\nThis PR adds an additional type to `interface URLSearchParams` in `types/global.d.ts` for the missing `keys`, `values`, and `entries` typed as the following in order that printed in `console.log`:\r\n```typescript\r\ninterface URLSearchParams {\r\n  // ...existing type\r\n  /** Returns an iterator allowing to go through all key/value pairs of this search parameter. */\r\n  entries(): IterableIterator<[string, string]>;\r\n  /** Returns an iterator allowing to go through all keys of the key/value pairs of this search parameter. */\r\n  keys(): IterableIterator<string>;\r\n  /** Returns an iterator allowing to go through all values of the key/value pairs of this search parameter. */\r\n  values(): IterableIterator<string>;\r\n  // ...existing type\r\n}\r\n```\r\n\r\nThe description of types is copied from [typescript/lib.dom.iterable.d.ts](https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.iterable.d.ts) at line 117 but changed from **\"this object\"** to **\"this search parameter\"**\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-15T13:12:46Z",
        "closed_at": "2022-07-15T20:09:56Z",
        "merged_at": "2022-07-15T20:09:56Z",
        "body": "Added a readme file for blank template so that it can convey clear messages what to expect and how to run the code.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 2,
        "changed_files": 9,
        "created_at": "2022-07-14T21:35:04Z",
        "closed_at": "2022-07-14T23:06:44Z",
        "merged_at": null,
        "body": "## What is the problem this feature will solve?\r\nwhenever bun reads a tsconfig it doesn't understand a warning is presented, I guess that's ok if the intention is to use bun for compilation but it isn't very nice if I am simply using bun as a JS runtime.\r\n\r\n## feature you are proposing to solve the problem?\r\nA flag to disable ts processing, something like --disable-ts\r\n\r\ncloses #615 ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 474,
        "deletions": 466,
        "changed_files": 1,
        "created_at": "2022-07-14T21:29:27Z",
        "closed_at": "2022-07-15T19:01:47Z",
        "merged_at": null,
        "body": "Please comment if any of the changes shouldn't be merged or if there's anything I missed.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-14T18:56:57Z",
        "closed_at": "2022-07-15T19:00:48Z",
        "merged_at": "2022-07-15T19:00:48Z",
        "body": "Accidentally closed while cleaning up fork.\r\n\r\nRe-open #690\r\n> This will automatically make sure that changes to `dockerhub/Dockerfile` build successfully as well as publish new bun releases to DockerHub with semantic versioning tags `X`, `X.Y`, `X.Y.Z`, and `latest`.\r\n>Requires action secrets `DOCKERHUB_USERNAME` and `DOCKERHUB_TOKEN` to be set for the repo.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2022-07-14T15:55:49Z",
        "closed_at": "2022-07-15T19:01:13Z",
        "merged_at": null,
        "body": "Updated a few wordings, and punctuation and fixed a few typos. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 189,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2022-07-14T13:20:56Z",
        "closed_at": "2022-07-15T11:54:19Z",
        "merged_at": "2022-07-15T11:54:19Z",
        "body": "Add template for [kingworld](https://github.com/saltyaom/kingworld) to use with `bun create`",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-14T11:40:04Z",
        "closed_at": "2022-07-14T17:56:51Z",
        "merged_at": "2022-07-14T17:56:51Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-14T11:11:44Z",
        "closed_at": "2022-07-14T18:43:02Z",
        "merged_at": "2022-07-14T18:43:02Z",
        "body": "Change version to latest",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 152,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2022-07-14T07:58:44Z",
        "closed_at": "2022-07-15T19:02:28Z",
        "merged_at": "2022-07-15T19:02:28Z",
        "body": "- [x] Labeler\r\n- [x] Label syncer (using the `labels.yml` file instead of creating, updating and deleting labels in the GitHub UI) \r\n\r\n---\r\n\r\n### Removed tags:\r\n[bun binary size](https://github.com/oven-sh/bun/labels/bun%20binary%20size)\r\n[bun create](https://github.com/oven-sh/bun/labels/bun%20create)\r\n[bun dev](https://github.com/oven-sh/bun/labels/bun%20dev)\r\n[bun install](https://github.com/oven-sh/bun/labels/bun%20install)\r\n[bun.js](https://github.com/oven-sh/bun/labels/bun.js)\r\n[bun run](https://github.com/oven-sh/bun/labels/bun%20run)\r\n[bun upgrade](https://github.com/oven-sh/bun/labels/bun%20upgrade)\r\n[contributor wanted](https://github.com/oven-sh/bun/labels/contributor%20wanted)\r\n[framework](https://github.com/oven-sh/bun/labels/framework)\r\n[linux](https://github.com/oven-sh/bun/labels/linux)\r\n[next.js](https://github.com/oven-sh/bun/labels/next.js)\r\n[node](https://github.com/oven-sh/bun/labels/node) (duplicate of node.js)\r\n![image](https://user-images.githubusercontent.com/56601352/179230686-874d1713-3249-4abe-beef-15e29dc21f75.png)\r\n\r\n[parser](https://github.com/oven-sh/bun/labels/parser)\r\n[printer](https://github.com/oven-sh/bun/labels/printer)\r\n[resolver](https://github.com/oven-sh/bun/labels/resolver)\r\n[unicode](https://github.com/oven-sh/bun/labels/unicode)\r\n[website](https://github.com/oven-sh/bun/labels/website)\r\n[workspace](https://github.com/oven-sh/bun/labels/workspace)\r\n\r\n---\r\n\r\n### New tags:\r\nchore\r\nbenchmarks\r\ntests\r\npackages:bun\r\npackages:bun-darwin-aarch64\r\npackages:bun-error\r\npackages:bun-framework-next\r\npackages:bun-landing\r\npackages:bun-linux-x64\r\npackages:bun-macro-relay\r\npackages:bun-types\r\npackages:bun-wasm",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 451,
        "deletions": 2,
        "changed_files": 8,
        "created_at": "2022-07-14T06:42:12Z",
        "closed_at": "2022-07-17T03:36:46Z",
        "merged_at": "2022-07-17T03:36:46Z",
        "body": "This adds a really basic test runner that will execute test files using `bun wiptest` and compare the output to make sure it's correct. It could definitely be improved, especially in the speed department, but it's at least functional now, which is better than we had before!\r\n\r\nThis is still in draft because I want to add a few more tests before this gets merged, but I wanted to start the review process in case anything needs to change / anyone wants to help out. :)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-14T06:31:51Z",
        "closed_at": "2022-07-15T19:02:03Z",
        "merged_at": "2022-07-15T19:02:03Z",
        "body": "We are using ``gitignore`` instead of ``.gitignore`` as a workaround for npm not publishing ``.gitignore`` files.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 87,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-13T19:40:00Z",
        "closed_at": "2022-07-14T18:37:41Z",
        "merged_at": null,
        "body": "This will automatically make sure that changes to `dockerhub/Dockerfile` build successfully as well as publish new bun releases to DockerHub with semantic versioning tags `X`, `X.Y`, `X.Y.Z`, and `latest`.\r\n\r\nRequires action secrets `DOCKERHUB_USERNAME` and `DOCKERHUB_TOKEN` to be set for the repo.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-13T17:29:48Z",
        "closed_at": "2022-07-13T21:32:46Z",
        "merged_at": "2022-07-13T21:32:46Z",
        "body": "gurantee -> guarantee",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-13T14:26:12Z",
        "closed_at": "2022-07-13T17:39:52Z",
        "merged_at": "2022-07-13T17:39:52Z",
        "body": "I created a share image yesterday but it doesn't work. I discovered that is because the `content` is not the full url.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 63,
        "changed_files": 1,
        "created_at": "2022-07-13T12:29:13Z",
        "closed_at": "2022-07-13T21:36:42Z",
        "merged_at": null,
        "body": "Readme.md has been reordered, following the standard model of all the projects in Github, Credits and License should go at the bottom, in this way, by moving them in the index as well, gives more seriousness and professionalism when showing our projects to the world.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-13T12:13:54Z",
        "closed_at": "2022-07-29T12:22:14Z",
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-13T10:42:15Z",
        "closed_at": "2022-07-15T23:42:54Z",
        "merged_at": "2022-07-15T23:42:54Z",
        "body": "Suggested command for installing ninja build, depending on package manager",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-13T09:44:58Z",
        "closed_at": "2022-07-13T21:44:08Z",
        "merged_at": "2022-07-13T21:44:08Z",
        "body": "Closes #662 ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-13T06:59:00Z",
        "closed_at": "2023-03-29T21:11:04Z",
        "merged_at": null,
        "body": "Created a basic PR template that will hopefully help people make sure they have followed the correct steps when creating a PR.\r\n\r\nThis is just a start and could be improved later by making it more bun-centric.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4585,
        "deletions": 0,
        "changed_files": 31,
        "created_at": "2022-07-13T06:54:26Z",
        "closed_at": "2022-07-18T08:44:16Z",
        "merged_at": null,
        "body": "Link: https://bun-docs.vercel.app/\r\n\r\nFeatures: \r\n- Navigation menu\r\n- Sidebar navigation\r\n- Search\r\n- Light and Dark theme",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-07-13T03:39:14Z",
        "closed_at": "2022-07-13T04:57:17Z",
        "merged_at": null,
        "body": "also, can you update Deno to 1.23.4? thanks",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-13T03:29:56Z",
        "closed_at": "2022-07-13T06:53:04Z",
        "merged_at": null,
        "body": "Response.json() should not return global JSON object",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2022-07-12T23:04:22Z",
        "closed_at": "2023-02-17T16:09:11Z",
        "merged_at": null,
        "body": "No logic changes, just cleaning up code.\r\nBecause a software's quality is often judged on its example implementations.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-12T21:50:35Z",
        "closed_at": "2022-07-13T04:37:39Z",
        "merged_at": "2022-07-13T04:37:39Z",
        "body": "This was tested here: https://github.com/pnxdxt/bun-actions-test",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2022-07-12T21:16:03Z",
        "closed_at": "2022-07-13T20:40:29Z",
        "merged_at": "2022-07-13T20:40:29Z",
        "body": "Closes https://github.com/Kapsonfire-DE/bun-bakery/issues/2\r\njust a template for using bun-bakery",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4484,
        "deletions": 0,
        "changed_files": 29,
        "created_at": "2022-07-12T19:06:34Z",
        "closed_at": "2022-07-13T06:13:52Z",
        "merged_at": null,
        "body": "Link: https://bun-docs.vercel.app/\r\n\r\nFeatures:\r\n\r\nNavigation menu\r\nSidebar navigation\r\nSearch\r\nLight and Dark theme",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-12T18:46:05Z",
        "closed_at": "2022-07-12T20:11:43Z",
        "merged_at": "2022-07-12T20:11:43Z",
        "body": "Backticks cannot be used to quote codes within html. Replaced `` ` ` `` with `<code></code>`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-12T18:27:08Z",
        "closed_at": "2022-07-12T20:10:05Z",
        "merged_at": "2022-07-12T20:10:05Z",
        "body": "Add a period at the end of \"What does the lockfile store?\" in README.md to make this section consistent with others in the documentation.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-07-12T15:53:14Z",
        "closed_at": "2022-07-14T18:42:19Z",
        "merged_at": "2022-07-14T18:42:19Z",
        "body": "It seems that the port only accepts Integer.\r\n\r\n### before\r\n```bash\r\n$ PORT=3001 bun run start\r\n$ bun run src/index.ts\r\nRunning at http://localhost:3001\r\n```\r\n```bash\r\n$ curl localhost:3001\r\ncurl: (7) Failed to connect to localhost port 3001: Connection refused\r\n```\r\n\r\n### after\r\n```bash\r\n$ PORT=3001 bun run start\r\n$ bun run src/index.ts\r\nRunning at http://localhost:3001\r\n```\r\n```bash\r\n$ curl localhost:3001\r\n{\"message\":\"Hello World!\"}\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-12T14:48:42Z",
        "closed_at": "2022-07-12T20:20:39Z",
        "merged_at": "2022-07-12T20:20:39Z",
        "body": "I see that the landing page doesn't have a image when someone share in Twitter/Facebook/LinkedIn. I created an image and put in the code.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2022-07-12T14:24:07Z",
        "closed_at": "2022-07-15T10:17:38Z",
        "merged_at": "2022-07-15T10:17:38Z",
        "body": "I updated the React template to be more inline with the most recent version of create-react-app's default template, including:\r\n- upgraded to most recent version of `react` and `react-dom`, and made necessary usage updates\r\n- removed reference to jest in `eslintConfig`, since `jest` is no longer in the template\r\n- added `reportWebVitals` to be more inline with most recent version of `create-react-app`",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-12T11:20:58Z",
        "closed_at": "2022-07-25T07:45:57Z",
        "merged_at": "2022-07-25T07:45:57Z",
        "body": "There's no 'nproc' on macOS by default so add a helper script that uses\r\nsysctl instead. Simplifies build environment setup on macOS.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2022-07-12T06:39:17Z",
        "closed_at": "2022-07-13T12:40:55Z",
        "merged_at": null,
        "body": "Add a fix on `no such file or directory: /home/<usernanme>/.sde/sde` for those experiencing such errors",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 31,
        "changed_files": 1,
        "created_at": "2022-07-12T04:16:09Z",
        "closed_at": "2022-07-13T21:20:55Z",
        "merged_at": "2022-07-13T21:20:54Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2022-07-12T03:41:13Z",
        "closed_at": "2022-07-13T02:38:04Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2022-07-11T23:13:39Z",
        "closed_at": "2022-07-13T21:51:22Z",
        "merged_at": "2022-07-13T21:51:22Z",
        "body": "I added dots for consistency where it doesn't prevent users to understand code.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-11T23:10:16Z",
        "closed_at": "2022-07-12T08:42:36Z",
        "merged_at": "2022-07-12T08:42:36Z",
        "body": "Closes #519. Before this PR, ``.env`` files like ``PORT =8080`` wouldn't get parsed.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-11T22:22:00Z",
        "closed_at": "2022-07-12T08:47:37Z",
        "merged_at": "2022-07-12T08:47:36Z",
        "body": "Signed-off-by: Ryan Russell <git@ryanrussell.org>\r\n\r\nReadability improvements to `src/bun.js/bindings/exports.zig`\r\n- `WebSocketHTTSPClient` -> `WebSocketHTTPSClient`\r\n- Fix typo in comment",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18606,
        "deletions": 1361,
        "changed_files": 80,
        "created_at": "2022-07-11T20:09:08Z",
        "closed_at": "2022-07-12T08:40:12Z",
        "merged_at": "2022-07-12T08:40:12Z",
        "body": "- cleanup folder structure\r\n- fix some benchmarks and add more\r\n- make it easy to test any version of bun by using environment variable\r\n\r\nthis also should make @FinnRG's benchmarks automation job much easier",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2022-07-11T19:04:02Z",
        "closed_at": "2022-07-12T14:44:47Z",
        "merged_at": null,
        "body": "Moved the Install step below the Table of Contents, as it could confuse people searching for the install step again after reading the Table of Contents",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-11T16:30:26Z",
        "closed_at": "2022-07-11T22:38:42Z",
        "merged_at": "2022-07-11T22:38:42Z",
        "body": "closes #584 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-11T15:35:21Z",
        "closed_at": "2022-07-25T07:38:55Z",
        "merged_at": "2022-07-25T07:38:55Z",
        "body": "https://github.com/oven-sh/bun instead of https://github.com/Jarred-Sumner/bun-releases-for-updater",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-11T14:52:27Z",
        "closed_at": "2022-07-11T22:33:03Z",
        "merged_at": "2022-07-11T22:33:03Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 112,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-11T13:49:45Z",
        "closed_at": "2022-07-25T07:39:26Z",
        "merged_at": "2022-07-25T07:39:26Z",
        "body": "> **Warning**\r\n> I copied these types from https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.d.ts",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2022-07-11T13:21:08Z",
        "closed_at": "2022-07-12T09:46:22Z",
        "merged_at": "2022-07-12T09:46:22Z",
        "body": "hono example with typescript",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 556,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-07-11T09:45:56Z",
        "closed_at": "2022-07-13T14:08:57Z",
        "merged_at": "2022-07-13T14:08:57Z",
        "body": "big step towards #496 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-11T06:18:08Z",
        "closed_at": "2022-07-11T12:39:04Z",
        "merged_at": "2022-07-11T12:39:04Z",
        "body": "# This pr does:\r\nFixes a typo in the file `src/c.zig` .\r\nConstant name renamed from `Enviroment` to `Environment`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-07-11T03:21:29Z",
        "closed_at": "2022-07-12T08:47:58Z",
        "merged_at": "2022-07-12T08:47:58Z",
        "body": "TODO:\r\nRemove white space\r\nTest",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 47,
        "changed_files": 22,
        "created_at": "2022-07-10T17:34:35Z",
        "closed_at": "2022-07-11T02:37:30Z",
        "merged_at": "2022-07-11T02:37:30Z",
        "body": "This PR aims on updating the old repository URLs to the new organization. \r\n\r\nMost notably the Landing page has been updated, which will need to be published (if not done automatically already, im not sure)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-10T17:29:39Z",
        "closed_at": "2022-07-11T12:31:00Z",
        "merged_at": "2022-07-11T12:31:00Z",
        "body": "Fixes #531\r\n\r\nBefore this, using 'bun install' on a directory in different filesystem\r\nsuch as tmpfs (/tmp) would have caused \"Error: NotSameFileSystem\".\r\n\r\nThis commit fixes that by handling this error, and at end of function it\r\nwill fall back to use copyfile (same as --backend=copyfile).\r\n\r\nThe discussion is in https://github.com/oven-sh/bun/issues/531#issuecomment-1179732743.\r\n\r\nCredit due to [@Beamnawap](https://github.com/BeamNawapat), who suggested me about --backend=copyfile as a fix.\r\n\r\n> Note: **I think** this error (NotSameFileSystem) may occur in case of `clonefile_each_dir` too, and should be handled there similarly:\r\n>\r\n> https://github.com/oven-sh/bun/blob/f5d896542ae5a9e0b62c73d386727392d32489e0/src/install/install.zig#L1085-L1087\r\n>\r\n> changed to:\r\n> \r\n> ```diff\r\n> -error.NotSupported => {\r\n> +error.NotSameFileSystem, error.NotSupported => {\r\n>      supported_method = .copyfile;\r\n> },\r\n> ```\r\n>\r\n> Does it seem okay, should I add that in this PR?",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2022-07-10T17:02:59Z",
        "closed_at": "2022-07-11T03:46:31Z",
        "merged_at": "2022-07-11T03:46:31Z",
        "body": "- Disable blank issues\r\n- Add contact link\r\n- Add bug & need repro label to bug report template\r\n\r\nPlease, create tag `need repro`\r\nThe `need repro` tag is used for when the bug is not yet confirmed.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 154,
        "deletions": 147,
        "changed_files": 20,
        "created_at": "2022-07-10T15:17:31Z",
        "closed_at": "2022-12-23T17:26:01Z",
        "merged_at": null,
        "body": "It's slightly different from what I described in the PR description of https://github.com/oven-sh/bun/pull/535. Now `Global.exit()` means successful exit, `Global.crash()` retains its meaning of unsuccessful exit, and `Global.exitOther(n)` is used for any other specific exit code, with the latter two having `@setCold(true)` set for hints to the compiler.\r\n\r\nWhile looking over the diff I notice that a lot of times the success-indicating `Global.exit()` is used after an error was printed. It seems like it's not well defined when exactly `Global.crash()` should be used and when `Global.exit()`.\r\nIt'd probably be better if there was an error printing function that prints both a message and also exits with 1.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-10T10:54:25Z",
        "closed_at": "2022-07-10T13:42:10Z",
        "merged_at": "2022-07-10T13:42:10Z",
        "body": "![](https://get.snaz.in/95f7dBr.png)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 137,
        "changed_files": 19,
        "created_at": "2022-07-10T10:08:21Z",
        "closed_at": "2022-07-10T13:44:57Z",
        "merged_at": "2022-07-10T13:44:57Z",
        "body": "I thought about this a bit more and realized that we could remove `Global.exit`'s `code` parameter because in 99.5% of all cases we only ever exit with either 1 or 0, so we could actually make `Global.crash()` always exit with 1 (which it does already) and `Global.exit()` always exit with 0, indicating failure and success, respectively. We might also want to rename `Global.crash` to `Global.fail` because `Global.crash` can mislead people that it's only called when a bug is encountered. And we should explicitly mention in the docs of those two that they already flush output. This way we can prevent these mistakes in the future.\r\nOr maybe we could only have one function that exits and we let it take an `enum`. So you can do `Global.exit(.error)` and `Global.exit(.success)`. I think that might actually be the best and most readable solution.\r\nIn fact we could make it a `union(enum)` and allow `exit(.{ .custom = 50 });` too for codes that are not 0 or 1.\r\nShould I do the above in a followup PR?\r\nThis PR would be in preparation for that.\r\n\r\nAdditionally, the first commit fixes this issue I found:\r\n```\r\n$ bun run\r\nNo \"scripts\" in package.json found.$ \r\n```\r\n(missing newline)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-10T10:00:52Z",
        "closed_at": "2022-07-10T14:23:09Z",
        "merged_at": "2022-07-10T14:23:09Z",
        "body": "the last step in this README instructs the client to run `bun` to 'launch bun', but this would just lead the client to receive the command's usage, which I imagine is not the intent.\r\n\r\ni added some clarifications that instead instruct the client to launch bun's dev server as well as where to reach that server, which seemed like a more logical next step. If this was an incorrect assumption, lmk and I'll close this PR \ud83d\ude42",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-10T05:58:52Z",
        "closed_at": "2022-07-10T08:51:10Z",
        "merged_at": null,
        "body": "For those having problems with bun installation on the illegal operation",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 358,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2022-07-10T05:35:53Z",
        "closed_at": "2022-07-11T15:11:02Z",
        "merged_at": "2022-07-11T15:11:02Z",
        "body": "Closes #448\r\n\r\nFollows Deno's style for logging and (mostly) the web spec https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#simple-dialogs",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 94,
        "changed_files": 3,
        "created_at": "2022-07-10T04:47:35Z",
        "closed_at": "2022-07-11T08:52:30Z",
        "merged_at": "2022-07-11T08:52:30Z",
        "body": "Hello!\r\n\r\nI want to help with some bun development, but I ran into a few hurdles while setting up my dev environment. I figured I wouldn't be the only one, so I fixed up the problems I encountered (at least I _think_ I fixed all of them, I might have forgotten a step I had to do), and am submitting them here!\r\n\r\nI'm brand new to zig, and my Makefile is a bit rusty, so if you notice anything that could/should be done differently/better, please let me know!",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-10T04:34:38Z",
        "closed_at": "2022-07-11T12:33:05Z",
        "merged_at": null,
        "body": "Since [fix: update build files to latest Zig version by sno2 \u00b7 Pull Request #522 \u00b7 Jarred-Sumner/bun](https://github.com/Jarred-Sumner/bun/pull/522) and [Migrate to Zig v0.10.0 (HEAD) by alexkuz \u00b7 Pull Request #491 \u00b7 Jarred-Sumner/bun](https://github.com/Jarred-Sumner/bun/pull/491) are merged, we now need to use the latest zig for building both zls and bun.\r\n\r\nSo this pull request is needed instead of [Use the latest to build zls by hnakamur \u00b7 Pull Request #265 \u00b7 Jarred-Sumner/bun](https://github.com/Jarred-Sumner/bun/pull/265).\r\n\r\n\r\n## The steps for local build\r\n\r\nThe following steps are needed until Docker image `bunbunbunbun/bun-base-with-zig-and-webkit` is updated after this pull request is merged.\r\n\r\n### Steps on the host machine\r\n\r\nBuild local docker image.\r\n\r\n```\r\nDOCKER_BUILDARCH=amd64\r\nBUILDKIT=1 docker build -f Dockerfile.base --build-arg GITHUB_WORKSPACE=/build --platform=linux/${DOCKER_BUILDARCH} --tag local/bun-base --target bun-base .\r\nBUILDKIT=1 docker build -f Dockerfile.base --build-arg GITHUB_WORKSPACE=/build --platform=linux/${DOCKER_BUILDARCH} --tag local/bun-base-with-zig-and-webkit --target bun-base-with-zig-and-webkit .\r\n```\r\n\r\nUse node 18.x\r\n```\r\nsed -i 's|bunbunbunbun/bun-base|local/bun-base|' Dockerfile\r\n```\r\n\r\nUse latest zig \r\n\r\n```\r\nsed -i 's|bunbunbunbun/bun-base-with-zig-and-webkit|local/bun-base-with-zig-and-webkit|' Dockerfile\r\n```\r\n\r\nBuild the devcontainer\r\n\r\n```\r\ndevcontainer build\r\n```\r\n\r\n### Steps in the devcontainer\r\n\r\nConfirm commits of bun and submodules.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a \r\n\u2b22 [Systemd] \u276f git git log -1 | cat\r\n\r\ncommit 0acf8a66181624e11ec83a0e4031eb8c2facc9d2\r\nAuthor: Ryan Russell <git@ryanrussell.org>\r\nDate:   Fri Jul 8 18:04:32 2022 -0500\r\n\r\n    refactor(websockets): Rename `connectedWebSocketContext()`\r\n    \r\n    Signed-off-by: Ryan Russell <git@ryanrussell.org>\r\n\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a \r\n\u2b22 [Systemd] \u276f git submodule status\r\n 7e7774dabf1c2d94fe3604defb3c54a4c989c3b7 src/bun.js/WebKit (jul4)\r\n fa3fbda07bbf70925453d6a3c25a7aa455aa1cef src/deps/boringssl (fa3fbda)\r\n dc321febde83dd0f31158e1be61a7aedda65e7a2 src/deps/libarchive (dc321fe)\r\n 4d2dd0b172f2c9192f83ba93425f868f2a13c553 src/deps/libbacktrace (heads/master)\r\n 2eed349dcdfa4ff5c19fe7c6e501cfd687601033 src/deps/lol-html (2eed349)\r\n 6d07c0b9ba535617cf9665ea77d099dad265818a src/deps/mimalloc (6d07c0b)\r\n 066d2b1e9ab820703db0837a7255d92d30f0c9f5 src/deps/picohttpparser (heads/master)\r\n 2d3ad9e0d32194ad7fd867b66ebe218dcc8cb5cd src/deps/tinycc (heads/mob)\r\n 1b46cf9ace5f55f713d55bb8c086f5878d132457 src/deps/uws (heads/master)\r\n 959b4ea305821e753385e873ec4edfaa9a5d49b7 src/deps/zlib (959b4ea)\r\n```\r\n\r\nAlso confirm node and zig version.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f node --version\r\nv18.5.0\r\n```\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f zig version\r\n0.10.0-dev.2882+13d58258a\r\n```\r\n\r\nNow run `make devcontainer`. It fails with missing dependencies.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f make devcontainer\r\n\r\n...(snip)...\r\n\r\nrm -f /tmp/build-jsc-headers src/bun.js/bindings/headers.zig\r\ntouch src/bun.js/bindings/headers.zig\r\nmkdir -p src/bun.js/bindings-obj/\r\n/build/zig/zig build headers-obj\r\n/usr/bin/clang++-13  -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic /build/bun-webkit/lib/libJavaScriptCore.a /build/bun-webkit/lib/libWTF.a  /build/bun-webkit/lib/libbmalloc.a /build/bun-webkit/lib/libLowLevelInterpreterLib.a  /build/icu/source/lib/libicuuc.a /build/icu/source/lib/libicudata.a /build/icu/source/lib/libicui18n.a /build/bun-deps/picohttpparser.o -L/build/bun-deps -llolhtml -lz -larchive -lssl -lbase64 -ltcc /build/bun-deps/libmimalloc.o /build/bun-deps/libbacktrace.a -lcrypto -lusockets /build/bun-deps/libuwsockets.o  -I/build/bun/src/deps/uws/uSockets/src -I/build/bun/src/deps/uws/src -I/build/bun/src/deps -I/build/bun/src/deps/mimalloc/include -Isrc/napi -I/build/bun-webkit/include -Isrc/bun.js/builtins/ -Isrc/bun.js/bindings/ -Isrc/bun.js/bindings/webcore -Isrc/bun.js/bindings/sqlite -Isrc/bun.js/builtins/cpp -I/build/bun/src/deps/zlib -std=c++2a -DSTATICALLY_LINKED_WITH_JavaScriptCore=1 -DSTATICALLY_LINKED_WITH_WTF=1 -DSTATICALLY_LINKED_WITH_BMALLOC=1 -DBUILDING_WITH_CMAKE=1 -DBUN_SINGLE_THREADED_PER_VM_ENTRY_SCOPE=1 -DNDEBUG=1 -DNOMINMAX -DIS_BUILD -DENABLE_INSPECTOR_ALTERNATE_DISPATCHERS=1 -DBUILDING_JSCONLY__ -DASSERT_ENABLED=0 -fvisibility=hidden -fvisibility-inlines-hidden -pthread -ldl   -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic /build/bun-deps/sqlite3.o  /build/icu/source/lib/libicuuc.a /build/icu/source/lib/libicudata.a /build/icu/source/lib/libicui18n.a  -g /build/bun/packages/debug-bun-linux-x64//headers.o -W -o /tmp/build-jsc-headers -lc;\r\nclang: error: no such file or directory: '/build/bun-deps/libbacktrace.a'\r\nclang: error: no such file or directory: '/build/bun-deps/libuwsockets.o'\r\nclang: error: no such file or directory: '/build/bun-deps/sqlite3.o'\r\nmake: *** [Makefile:723: jsc-bindings-headers] Error 1\r\n```\r\n\r\nTry again with dependencies.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f make libbacktrace uws sqlite devcontainer\r\n\r\n...(snip)...\r\n\r\nrm -f /tmp/build-jsc-headers src/bun.js/bindings/headers.zig\r\ntouch src/bun.js/bindings/headers.zig\r\nmkdir -p src/bun.js/bindings-obj/\r\n/build/zig/zig build headers-obj\r\n/usr/bin/clang++-13  -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic /build/bun-webkit/lib/libJavaScriptCore.a /build/bun-webkit/lib/libWTF.a  /build/bun-webkit/lib/libbmalloc.a /build/bun-webkit/lib/libLowLevelInterpreterLib.a  /build/icu/source/lib/libicuuc.a /build/icu/source/lib/libicudata.a /build/icu/source/lib/libicui18n.a /build/bun-deps/picohttpparser.o -L/build/bun-deps -llolhtml -lz -larchive -lssl -lbase64 -ltcc /build/bun-deps/libmimalloc.o /build/bun-deps/libbacktrace.a -lcrypto -lusockets /build/bun-deps/libuwsockets.o  -I/build/bun/src/deps/uws/uSockets/src -I/build/bun/src/deps/uws/src -I/build/bun/src/deps -I/build/bun/src/deps/mimalloc/include -Isrc/napi -I/build/bun-webkit/include -Isrc/bun.js/builtins/ -Isrc/bun.js/bindings/ -Isrc/bun.js/bindings/webcore -Isrc/bun.js/bindings/sqlite -Isrc/bun.js/builtins/cpp -I/build/bun/src/deps/zlib -std=c++2a -DSTATICALLY_LINKED_WITH_JavaScriptCore=1 -DSTATICALLY_LINKED_WITH_WTF=1 -DSTATICALLY_LINKED_WITH_BMALLOC=1 -DBUILDING_WITH_CMAKE=1 -DBUN_SINGLE_THREADED_PER_VM_ENTRY_SCOPE=1 -DNDEBUG=1 -DNOMINMAX -DIS_BUILD -DENABLE_INSPECTOR_ALTERNATE_DISPATCHERS=1 -DBUILDING_JSCONLY__ -DASSERT_ENABLED=0 -fvisibility=hidden -fvisibility-inlines-hidden -pthread -ldl   -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic /build/bun-deps/sqlite3.o  /build/icu/source/lib/libicuuc.a /build/icu/source/lib/libicudata.a /build/icu/source/lib/libicui18n.a  -g /build/bun/packages/debug-bun-linux-x64//headers.o -W -o /tmp/build-jsc-headers -lc;\r\nld.lld: error: unable to find library -llolhtml\r\nld.lld: error: unable to find library -lbase64\r\nld.lld: error: unable to find library -ltcc\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [Makefile:723: jsc-bindings-headers] Error 1\r\n```\r\n\r\nTry again with another dependencies.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f make lolhtml base64 tinycc devcontainer\r\n\r\n...(snip)...\r\n\r\ncd /build/bun/src/deps/uws/uSockets/ && llvm-ar-13 rcvs /build/bun-deps/libusockets.a *.bc\r\n/usr/bin/clang++-13 -fdata-sections -ffunction-sections -emit-llvm -flto=\"full\" -fPIC -I/build/bun/src/deps/uws/uSockets/src -I/build/bun/src/deps/uws/uSockets/src -I/build/bun/src/deps/uws/src -I/build/bun/src/deps -I/build/bun/src/deps/mimalloc/include -Isrc/napi -I/build/bun-webkit/include -Isrc/bun.js/builtins/ -Isrc/bun.js/bindings/ -Isrc/bun.js/bindings/webcore -Isrc/bun.js/bindings/sqlite -Isrc/bun.js/builtins/cpp -I/build/bun/src/deps/zlib -std=c++2a -DSTATICALLY_LINKED_WITH_JavaScriptCore=1 -DSTATICALLY_LINKED_WITH_WTF=1 -DSTATICALLY_LINKED_WITH_BMALLOC=1 -DBUILDING_WITH_CMAKE=1 -DBUN_SINGLE_THREADED_PER_VM_ENTRY_SCOPE=1 -DNDEBUG=1 -DNOMINMAX -DIS_BUILD -DENABLE_INSPECTOR_ALTERNATE_DISPATCHERS=1 -DBUILDING_JSCONLY__ -DASSERT_ENABLED=0 -fvisibility=hidden -fvisibility-inlines-hidden  -march=native -mtune=native -fdata-sections -ffunction-sections -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -pthread  -DLIBUS_USE_OPENSSL=1 -DUWS_HTTPRESPONSE_NO_WRITEMARK=1  -DLIBUS_USE_BORINGSSL=1 -DWITH_BORINGSSL=1 -Wpedantic -Wall -Wextra -Wsign-conversion -Wconversion  -DUWS_WITH_PROXY -std=c++2a -fno-exceptions -I/build/bun/src/deps/boringssl/include -I/build/bun/src/deps/zlib  -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic -c -I/build/bun/src/deps /build/bun-deps/libusockets.a /build/bun/src/deps/libuwsockets.cpp -o /build/bun-deps/libuwsockets.o\r\nclang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,--as-needed: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,--gc-sections: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,-z,stack-size=12800000: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,--compress-debug-sections,zlib: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,-Bsymbolic-functions: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: /build/bun-deps/libusockets.a: 'linker' input unused [-Wunused-command-line-argument]\r\nclang: warning: argument unused during compilation: '-fuse-ld=lld' [-Wunused-command-line-argument]\r\nclang: warning: argument unused during compilation: '-static-libstdc++' [-Wunused-command-line-argument]\r\nclang: warning: argument unused during compilation: '-static-libgcc' [-Wunused-command-line-argument]\r\nclang: warning: argument unused during compilation: '-rdynamic' [-Wunused-command-line-argument]\r\n/build/bun/src/deps/libuwsockets.cpp:481:71: warning: unused parameter 'length' [-Wunused-parameter]\r\n                                          const char *message, size_t length,\r\n                                                                      ^\r\n/build/bun/src/deps/libuwsockets.cpp:513:73: warning: unused parameter 'length' [-Wunused-parameter]\r\n                                            const char *message, size_t length,\r\n                                                                        ^\r\n/build/bun/src/deps/libuwsockets.cpp:960:26: warning: unused parameter 'ssl' [-Wunused-parameter]\r\nvoid uws_res_upgrade(int ssl, uws_res_t *res, void *data,\r\n                         ^\r\nIn file included from /build/bun/src/deps/libuwsockets.cpp:3:\r\nIn file included from /build/bun/src/deps/uws/src/App.h:65:\r\nIn file included from /build/bun/src/deps/uws/src/HttpResponse.h:31:\r\n/build/bun/src/deps/uws/src/WebSocket.h:216:18: warning: unused variable '[written, failed]' [-Wunused-variable]\r\n            auto [written, failed] = Super::uncork();\r\n                 ^\r\n/build/bun/src/deps/libuwsockets.cpp:576:10: note: in instantiation of member function 'uWS::WebSocket<true, true, void *>::cork' requested here\r\n    uws->cork([handler, user_data]() { handler(user_data); });\r\n         ^\r\nIn file included from /build/bun/src/deps/libuwsockets.cpp:3:\r\nIn file included from /build/bun/src/deps/uws/src/App.h:65:\r\nIn file included from /build/bun/src/deps/uws/src/HttpResponse.h:31:\r\n/build/bun/src/deps/uws/src/WebSocket.h:216:18: warning: unused variable '[written, failed]' [-Wunused-variable]\r\n            auto [written, failed] = Super::uncork();\r\n                 ^\r\n/build/bun/src/deps/libuwsockets.cpp:581:10: note: in instantiation of member function 'uWS::WebSocket<false, true, void *>::cork' requested here\r\n    uws->cork([handler, user_data]() { handler(user_data); });\r\n         ^\r\n5 warnings generated.\r\n```\r\n\r\nWe got 5 warnings, but build succeeds.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a took 4m15s\r\n\u2b22 [Systemd] \u276f echo $?\r\n0\r\n```\r\n\r\nNow run `make dev`.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f make dev\r\nmkdir -p /build/bun/packages/debug-bun-linux-x64/bin\r\n/build/zig/zig build obj --prominent-compile-errors\r\nBuild linux-x64 v5.15 - v5.15\r\n/usr/bin/clang++-13 /build/bun-deps/picohttpparser.o -L/build/bun-deps -llolhtml -lz -larchive -lssl -lbase64 -ltcc /build/bun-deps/libmimalloc.o /build/bun-deps/libbacktrace.a -lcrypto -lusockets /build/bun-deps/libuwsockets.o  -I/build/bun/src/deps/uws/uSockets/src -I/build/bun/src/deps/uws/src -I/build/bun/src/deps -I/build/bun/src/deps/mimalloc/include -Isrc/napi -I/build/bun-webkit/include -Isrc/bun.js/builtins/ -Isrc/bun.js/bindings/ -Isrc/bun.js/bindings/webcore -Isrc/bun.js/bindings/sqlite -Isrc/bun.js/builtins/cpp -I/build/bun/src/deps/zlib -std=c++2a -DSTATICALLY_LINKED_WITH_JavaScriptCore=1 -DSTATICALLY_LINKED_WITH_WTF=1 -DSTATICALLY_LINKED_WITH_BMALLOC=1 -DBUILDING_WITH_CMAKE=1 -DBUN_SINGLE_THREADED_PER_VM_ENTRY_SCOPE=1 -DNDEBUG=1 -DNOMINMAX -DIS_BUILD -DENABLE_INSPECTOR_ALTERNATE_DISPATCHERS=1 -DBUILDING_JSCONLY__ -DASSERT_ENABLED=0 -fvisibility=hidden -fvisibility-inlines-hidden -pthread -ldl   -march=native -mtune=native  -O3 -march=native -mtune=native -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -fuse-ld=lld -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,stack-size=12800000 -static-libstdc++ -static-libgcc -fno-omit-frame-pointer -Wl,--compress-debug-sections,zlib  -Wl,-Bsymbolic-functions -fno-semantic-interposition -flto -Wl,--allow-multiple-definition -rdynamic /build/bun-deps/sqlite3.o  /build/icu/source/lib/libicuuc.a /build/icu/source/lib/libicudata.a /build/icu/source/lib/libicui18n.a /build/bun-webkit/lib/libJavaScriptCore.a /build/bun-webkit/lib/libWTF.a  /build/bun-webkit/lib/libbmalloc.a /build/bun-webkit/lib/libLowLevelInterpreterLib.a src/bun.js/bindings-obj/JSDOMExceptionHandling.o src/bun.js/bindings-obj/URLSearchParams.o src/bun.js/bindings-obj/ImportMetaObject.o src/bun.js/bindings-obj/napi.o src/bun.js/bindings-obj/wtf-bindings.o src/bun.js/bindings-obj/DOMException.o src/bun.js/bindings-obj/ScriptExecutionContext.o src/bun.js/bindings-obj/URLDecomposition.o src/bun.js/bindings-obj/Path.o src/bun.js/bindings-obj/Process.o src/bun.js/bindings-obj/napi_external.o src/bun.js/bindings-obj/JSDOMGlobalObject.o src/bun.js/bindings-obj/JSDOMWrapperCache.o src/bun.js/bindings-obj/bindings.o src/bun.js/bindings-obj/BunGCOutputConstraint.o src/bun.js/bindings-obj/JSBuffer.o src/bun.js/bindings-obj/inlines.o src/bun.js/bindings-obj/ZigConsoleClient.o src/bun.js/bindings-obj/MarkingConstraint.o src/bun.js/bindings-obj/JSFFIFunction.o src/bun.js/bindings-obj/BunJSCModule.o src/bun.js/bindings-obj/JSBufferEncodingType.o src/bun.js/bindings-obj/DOMURL.o src/bun.js/bindings-obj/DOMWrapperWorld.o src/bun.js/bindings-obj/ActiveDOMCallback.o src/bun.js/bindings-obj/BunClientData.o src/bun.js/bindings-obj/JSSink.o src/bun.js/bindings-obj/ZigSourceProvider.o src/bun.js/bindings-obj/objects.o src/bun.js/bindings-obj/JSDOMWrapper.o src/bun.js/bindings-obj/Buffer.o src/bun.js/bindings-obj/ZigGlobalObject.o src/bun.js/bindings-obj/JSCustomEvent.o src/bun.js/bindings-obj/WebCoreTypedArrayController.o src/bun.js/bindings-obj/JSEventListenerOptions.o src/bun.js/bindings-obj/CustomEventCustom.o src/bun.js/bindings-obj/TextEncoder.o src/bun.js/bindings-obj/JSReadableByteStreamController.o src/bun.js/bindings-obj/EventTarget.o src/bun.js/bindings-obj/JSWritableStreamDefaultController.o src/bun.js/bindings-obj/JSMessageEvent.o src/bun.js/bindings-obj/JSDOMURL.o src/bun.js/bindings-obj/JSAbortSignalCustom.o src/bun.js/bindings-obj/JSEventCustom.o src/bun.js/bindings-obj/HTTPHeaderField.o src/bun.js/bindings-obj/EventContext.o src/bun.js/bindings-obj/EventNames.o src/bun.js/bindings-obj/CustomEvent.o src/bun.js/bindings-obj/JSReadableStreamSink.o src/bun.js/bindings-obj/JSCloseEvent.o src/bun.js/bindings-obj/JSFetchHeaders.o src/bun.js/bindings-obj/JSTransformStreamDefaultController.o src/bun.js/bindings-obj/JSAbortController.o src/bun.js/bindings-obj/JSEventModifierInit.o src/bun.js/bindings-obj/ErrorCallback.o src/bun.js/bindings-obj/EventTargetConcrete.o src/bun.js/bindings-obj/MessageEvent.o src/bun.js/bindings-obj/ReadableStreamDefaultController.o src/bun.js/bindings-obj/JSEventInit.o src/bun.js/bindings-obj/ReadableStream.o src/bun.js/bindings-obj/CommonAtomStrings.o src/bun.js/bindings-obj/JSErrorCallback.o src/bun.js/bindings-obj/JSAbortAlgorithm.o src/bun.js/bindings-obj/JSDOMConvertDate.o src/bun.js/bindings-obj/JSEventTargetCustom.o src/bun.js/bindings-obj/JSDOMBindingInternalsBuiltins.o src/bun.js/bindings-obj/EventDispatcher.o src/bun.js/bindings-obj/ScriptWrappable.o src/bun.js/bindings-obj/JSDOMConvertWebGL.o src/bun.js/bindings-obj/JSDOMConstructorBase.o src/bun.js/bindings-obj/InternalWritableStream.o src/bun.js/bindings-obj/JSEventListener.o src/bun.js/bindings-obj/weak_handle.o src/bun.js/bindings-obj/JSAbortSignal.o src/bun.js/bindings-obj/JSReadableStreamBYOBRequest.o src/bun.js/bindings-obj/JSErrorHandler.o src/bun.js/bindings-obj/ErrorEvent.o src/bun.js/bindings-obj/JSTransformStream.o src/bun.js/bindings-obj/JSReadableStream.o src/bun.js/bindings-obj/JSAddEventListenerOptions.o src/bun.js/bindings-obj/JSDOMException.o src/bun.js/bindings-obj/HTTPParsers.o src/bun.js/bindings-obj/StructuredClone.o src/bun.js/bindings-obj/EventListenerMap.o src/bun.js/bindings-obj/JSEvent.o src/bun.js/bindings-obj/JSDOMConvertNumbers.o src/bun.js/bindings-obj/ReadableStreamSink.o src/bun.js/bindings-obj/ParsedContentType.o src/bun.js/bindings-obj/JSTextEncoder.o src/bun.js/bindings-obj/JSDOMPromiseDeferred.o src/bun.js/bindings-obj/JSByteLengthQueuingStrategy.o src/bun.js/bindings-obj/EventFactory.o src/bun.js/bindings-obj/ActiveDOMObject.o src/bun.js/bindings-obj/JSReadableStreamDefaultController.o src/bun.js/bindings-obj/CloseEvent.o src/bun.js/bindings-obj/JSMessageEventCustom.o src/bun.js/bindings-obj/AbortController.o src/bun.js/bindings-obj/JSWebSocket.o src/bun.js/bindings-obj/JSErrorEventCustom.o src/bun.js/bindings-obj/JSDOMGuardedObject.o src/bun.js/bindings-obj/HTTPHeaderNames.o src/bun.js/bindings-obj/FetchHeaders.o src/bun.js/bindings-obj/JSEventTarget.o src/bun.js/bindings-obj/ReadableStreamSource.o src/bun.js/bindings-obj/JSReadableStreamSourceCustom.o src/bun.js/bindings-obj/JSDOMConvertStrings.o src/bun.js/bindings-obj/JSCountQueuingStrategy.o src/bun.js/bindings-obj/JSCallbackData.o src/bun.js/bindings-obj/JSWritableStreamDefaultWriter.o src/bun.js/bindings-obj/EventTargetFactory.o src/bun.js/bindings-obj/JSURLSearchParams.o src/bun.js/bindings-obj/WritableStream.o src/bun.js/bindings-obj/HTTPHeaderValues.o src/bun.js/bindings-obj/JSWritableStreamSink.o src/bun.js/bindings-obj/HTTPHeaderMap.o src/bun.js/bindings-obj/JSReadableStreamDefaultReader.o src/bun.js/bindings-obj/Event.o src/bun.js/bindings-obj/AbortSignal.o src/bun.js/bindings-obj/EventPath.o src/bun.js/bindings-obj/JSDOMIterator.o src/bun.js/bindings-obj/JSReadableStreamBYOBReader.o src/bun.js/bindings-obj/JSWritableStream.o src/bun.js/bindings-obj/JSErrorEvent.o src/bun.js/bindings-obj/JSReadableStreamSource.o src/bun.js/bindings-obj/JSDOMBuiltinConstructorBase.o src/bun.js/bindings-obj/JSDOMPromise.o src/bun.js/bindings-obj/WebSocket.o src/bun.js/bindings-obj/JSSQLStatement.o src/bun.js/bindings-obj/WebCoreJSBuiltinInternals.o src/bun.js/bindings-obj/WebCoreJSBuiltins.o  -Wl,--dynamic-list /build/bun/src/symbols.dyn \\\r\n        -g \\\r\n        /build/bun/packages/debug-bun-linux-x64//bun-debug.o \\\r\n        -W \\\r\n        -o /build/bun/packages/debug-bun-linux-x64//bun-debug\r\n```\r\n\r\nCheck the version of built `bun-debug`.\r\n\r\n```\r\nroot in bun on \ue0a0 main [$!?] via \ue718 v18.5.0 via \u21af v0.10.0-dev.2882+13d58258a\r\n\u2b22 [Systemd] \u276f /build/bun/packages/debug-bun-linux-x64/bun-debug --version\r\n0.1.2_debug\r\n```\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-10T01:34:16Z",
        "closed_at": "2022-07-12T10:03:18Z",
        "merged_at": "2022-07-12T10:03:17Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-09T21:35:43Z",
        "closed_at": "2022-07-11T08:53:46Z",
        "merged_at": "2022-07-11T08:53:46Z",
        "body": "another step towards #496 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2022-07-09T20:42:17Z",
        "closed_at": "2022-07-09T23:29:58Z",
        "merged_at": "2022-07-09T23:29:58Z",
        "body": "one step closer to #496 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-09T16:25:49Z",
        "closed_at": "2022-07-10T01:27:57Z",
        "merged_at": "2022-07-10T01:27:57Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 16,
        "changed_files": 16,
        "created_at": "2022-07-09T16:25:29Z",
        "closed_at": "2022-07-10T01:28:33Z",
        "merged_at": "2022-07-10T01:28:32Z",
        "body": "# Commands for reference\r\n- oneliner used to replace the shebangs treewide\r\n```bash\r\nfor f in $(rg -l '#!/bin/bash'); do sed -i 's;#!/bin/bash;#!/usr/bin/env bash;' $f; done\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 32,
        "changed_files": 1,
        "created_at": "2022-07-09T16:23:30Z",
        "closed_at": "2022-07-10T01:29:25Z",
        "merged_at": null,
        "body": ".gitignore is the correct file, this is a duplicate in the incorrect format",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-09T09:40:27Z",
        "closed_at": "2022-07-09T18:29:16Z",
        "merged_at": "2022-07-09T18:29:16Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2022-07-09T06:48:08Z",
        "closed_at": "2022-07-09T18:29:04Z",
        "merged_at": "2022-07-09T18:29:04Z",
        "body": "- \"builtin\" -> \"built-in\"\r\n- \"to create new a React App\" -> \"to create a new React App\"\r\n- \"and still in it's early days\" -> \"and is still in it's early days\"\r\n- \"its\" -> \"it's\"",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23551,
        "deletions": 60,
        "changed_files": 24,
        "created_at": "2022-07-09T01:16:17Z",
        "closed_at": "2022-07-11T12:40:08Z",
        "merged_at": "2022-07-11T12:40:08Z",
        "body": "This PR includes the following changes:\r\n- [x] `__dirname` and `__filename` are now typed, but deprecated to point people to use import\r\n- [x] `entries()`, `keys()`, and `values()` are typed in `Headers`\r\n- [x] `stream()` is typed in `Blob`\r\n- [x] `process.isBun` is typed\r\n\r\n###### Added Module Types ([listed here](https://github.com/Jarred-Sumner/bun/blob/main/src/node-fallbacks/tsconfig.json), mainly from [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node))\r\n- [x] `assert`\r\n\t- `assert.doesNotMatch` is typed, but is not defined in the polyfill\r\n- [x] `buffer`\r\n  - Not sure if I should comment out functions that don't work right now (like `toJSON`)\r\n  - Should deprecations like `new Buffer()` and `Buffer.slice` be kept?\r\n- [x] `constants`\r\n- [x] `crypto`\r\n- [x] `domain`\r\n- [x] `events`\r\n- [x] `http`\r\n- [x] `https`\r\n- [x] `os`\r\n\t- For types like `Platform`, `Architecture` and `Signals`, not sure whether to have them global, put them in a NodeJS namespace or a BunJS namespace\r\n\t- `os` needs to have a better polyfill, since none of the functions seem to give proper information\r\n- [x] `punycode`\r\n- [x] `process`\r\n- [x] `querystring`\r\n- [x] `stream`\r\n- [x] `string_decoder`\r\n- [x] `sys`\r\n- [x] `timers`\r\n- [x] `tty`\r\n- [x] `url`\r\n- [x] `util`\r\n- [x] `zlib`\r\n- [x] `supports-color`\r\n \r\n<details>\r\n  <summary>Missing Buffer methods</summary>\r\n\r\n```\r\ntoJSON\r\nwriteUIntLE\r\nwriteUintLE\r\nwriteUIntBE\r\nwriteUintBE\r\nwriteIntLE\r\nwriteIntBE\r\nreadUIntLE\r\nreadUIntBE\r\nreadIntLE\r\nreadIntBE\r\n```\r\n\r\n</details>",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 178,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2022-07-09T00:38:57Z",
        "closed_at": "2022-07-12T23:52:43Z",
        "merged_at": null,
        "body": "BunYouTubeScaper (BYS).\r\n\r\nA simple youtube written with pure Js and Bun.\r\n\r\nVideo Usage:\r\n\r\nhttps://user-images.githubusercontent.com/29004070/178085014-906227ff-3ee8-45c3-bc69-20c38e073275.mp4\r\n\r\n ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 86,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2022-07-09T00:17:09Z",
        "closed_at": "2022-07-10T01:34:20Z",
        "merged_at": "2022-07-10T01:34:20Z",
        "body": "fix templating issue from #308 \r\n\r\nHeavily inspired from [node's templates](https://github.com/nodejs/node/tree/main/.github/ISSUE_TEMPLATE).\r\n\r\nFeel free to request a change.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T23:48:49Z",
        "closed_at": "2022-07-11T03:42:44Z",
        "merged_at": "2022-07-11T03:42:44Z",
        "body": "The `bun create react ./app` command posts an initial commit when it is done, but that commit contains extra quotes that don't appear to be necessary.\r\n\r\n![image](https://user-images.githubusercontent.com/551858/178082827-38c9a22f-582a-4275-a1ca-fd30a6abc201.png)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2022-07-08T23:06:37Z",
        "closed_at": "2022-07-10T01:34:46Z",
        "merged_at": "2022-07-10T01:34:46Z",
        "body": "Signed-off-by: Ryan Russell <git@ryanrussell.org>\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T18:23:17Z",
        "closed_at": "2022-07-11T12:34:21Z",
        "merged_at": "2022-07-11T12:34:21Z",
        "body": "Slight improvements to the discord-interactions readme.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T16:08:19Z",
        "closed_at": "2022-07-09T19:39:02Z",
        "merged_at": "2022-07-09T19:39:02Z",
        "body": "\"still in it's early days\" -> \"still in its early days\"",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T15:30:10Z",
        "closed_at": "2022-07-09T18:14:41Z",
        "merged_at": null,
        "body": " \u2600\ufe0f Comment out manifest since 'bun dev' could not load manifest correctly and caused the following errors:\r\n\r\n1. GET http://localhost:3000/manifest.json 404 (Not Found)\r\n2. Manifest: Line: 1, column: 1, Syntax error.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T12:17:23Z",
        "closed_at": "2022-07-09T19:49:37Z",
        "merged_at": "2022-07-09T19:49:37Z",
        "body": "The dotenv config snippet on the website isn't correct.\r\n\r\n[dotenv package usage](https://github.com/motdotla/dotenv#usage)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 97,
        "changed_files": 1,
        "created_at": "2022-07-08T11:32:34Z",
        "closed_at": "2022-07-08T21:09:14Z",
        "merged_at": "2022-07-08T21:09:14Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-08T10:38:10Z",
        "closed_at": "2022-07-08T13:24:25Z",
        "merged_at": "2022-07-08T13:24:25Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-08T10:19:40Z",
        "closed_at": "2022-07-09T19:01:18Z",
        "merged_at": null,
        "body": "Remove dependency to another runtime",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 162,
        "changed_files": 3,
        "created_at": "2022-07-08T10:14:16Z",
        "closed_at": "2022-07-08T11:25:46Z",
        "merged_at": null,
        "body": "These files were just copies of the example .gitignore files and were useless.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-08T10:00:08Z",
        "closed_at": "2022-07-10T01:33:52Z",
        "merged_at": "2022-07-10T01:33:52Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 280,
        "deletions": 126,
        "changed_files": 11,
        "created_at": "2022-07-08T07:10:56Z",
        "closed_at": "2022-07-09T07:57:53Z",
        "merged_at": "2022-07-09T07:57:53Z",
        "body": "This PR makes the following changes:\r\n- Added `<meta name=\"description\">` mainly for that one SEO lighthouse check\r\n- Added `og:locale` and `twitter:site` metadata tags (not sure using your twitter for the website would make sense, if there was a twitter account for bun, I'd use that instead)\r\n- Made an [SVG logo](https://github.com/Snazzah/bun/blob/feature/landing-improvements/packages/bun-landing/public/logo.svg) to replace some logos on the site\r\n- Added a manifest for the site\r\n- Made icons for the website (so the favicon actually shows up)\r\n- `robots.txt` should 404 now when starting with SSR (was failing an SEO check)\r\n- Removed a space next to the ZIG icon under the \"Why is Bun fast?\" section",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-08T02:01:51Z",
        "closed_at": "2022-07-08T08:05:03Z",
        "merged_at": null,
        "body": "I just found one typo, I think another people already fix what I found last night. It's me who are doing PR Farm several hours ago. I'm not expert in software, so I wish I can help open source project by checking its grammar in the README, I hope mr.maintainer understand what I think, I just want to help.\r\n\r\nI've changed \"compatibiltiy\" to \"compatibility\"",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 229,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2022-07-08T01:21:47Z",
        "closed_at": "2022-07-25T07:47:34Z",
        "merged_at": "2022-07-25T07:47:34Z",
        "body": "This PR adds support for buns autocompletion in bash.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-07T23:52:23Z",
        "closed_at": "2022-07-09T11:51:23Z",
        "merged_at": "2022-07-09T11:51:23Z",
        "body": "Required dependencies to run bun on older cpus.\r\n![image](https://user-images.githubusercontent.com/50429450/177889939-d3fbfd79-e6e6-49ae-a6aa-b939fad83baa.png)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 34,
        "changed_files": 3,
        "created_at": "2022-07-07T19:31:12Z",
        "closed_at": "2022-07-07T21:14:57Z",
        "merged_at": "2022-07-07T21:14:57Z",
        "body": "Minor updates to the Next.js + Bun example app including:\r\n- Cleaning up README\r\n- Deleting unused page & imports",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-07T18:50:58Z",
        "closed_at": "2022-07-07T21:15:15Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T18:46:05Z",
        "closed_at": "2022-07-07T21:15:46Z",
        "merged_at": "2022-07-07T21:15:45Z",
        "body": "I had this problem on my PC, and i want to prevent others from having the same issue and get stuck. \r\nRelated Issues: #356",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T15:51:26Z",
        "closed_at": "2022-07-08T01:27:57Z",
        "merged_at": null,
        "body": "Change \"compatibiltiy\" to \"compatibility\"",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T15:50:05Z",
        "closed_at": "2022-07-07T16:55:02Z",
        "merged_at": null,
        "body": "Change \"addressible\" to \"addressable\"",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T15:48:54Z",
        "closed_at": "2022-07-07T16:55:01Z",
        "merged_at": null,
        "body": "Change \"propietary\" to \"proprietary\"",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T15:47:52Z",
        "closed_at": "2022-07-07T16:55:01Z",
        "merged_at": null,
        "body": "Change \"constributors\" to \"contributors\"",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-07T15:46:35Z",
        "closed_at": "2022-07-07T16:55:00Z",
        "merged_at": null,
        "body": "Change \"automaticallly\" to \"automatically\"",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 26,
        "changed_files": 1,
        "created_at": "2022-07-07T15:40:50Z",
        "closed_at": "2022-07-07T16:57:41Z",
        "merged_at": "2022-07-07T16:57:41Z",
        "body": "docs: improved readability ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2022-07-07T15:34:11Z",
        "closed_at": "2022-07-08T01:27:50Z",
        "merged_at": null,
        "body": "The phrase \"right now\" indicates whether this is a permanent thing or something that will change over time. A better way to explain what will change is to change it if it changes or provide a brief description, such as explaining whether this is something on the to-do list or left alone.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2022-07-07T15:28:16Z",
        "closed_at": "2022-07-07T18:52:27Z",
        "merged_at": "2022-07-07T18:52:27Z",
        "body": "\r\n- fix #226 \r\n\r\n### Before: \r\n<img width=\"1552\" alt=\"Screen Shot 2022-07-07 at 11 24 28 AM\" src=\"https://user-images.githubusercontent.com/32559031/177811730-d196e872-e7bb-4725-8371-bf85dc8d742d.png\">\r\n\r\n### After: \r\n<img width=\"1552\" alt=\"Screen Shot 2022-07-07 at 11 24 21 AM\" src=\"https://user-images.githubusercontent.com/32559031/177811780-5275ca67-2ba1-4007-bf28-b51062e92095.png\">\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-07T10:03:52Z",
        "closed_at": "2022-07-11T22:36:51Z",
        "merged_at": "2022-07-11T22:36:51Z",
        "body": "Mentions AVX2 and Intel SDE in the README.md as mentioned in #181. ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-07T09:33:33Z",
        "closed_at": "2022-07-07T11:36:55Z",
        "merged_at": null,
        "body": "Corrected the use and spelling of  \"builtin\" to \"built-in\", then corrected its use to \"inbuilt\". I also added the link to the JavaScript Core documentation by Apple to the appropriate anchor text. All these changes aim to improve the overall readability of the documentation.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 115,
        "changed_files": 2,
        "created_at": "2022-07-07T05:34:10Z",
        "closed_at": "2022-07-08T13:13:50Z",
        "merged_at": "2022-07-08T13:13:50Z",
        "body": "This PR improves the following potential accessibility pitfalls on the site:\r\n- Adds `lang=\"en\"` to `<html>` which helps screenreaders correctly identify the site's language.\r\n- Adds a `<ul>` element to the navbar so their children `<li>`s have valid semantic meaning.\r\n- Removes `<li>` elements from benchmarks tabbar as ARIA requires the `tablist` role's direct children to have `tabitem` roles, making them redundant and potentially harmful to screenreaders. This also inadvertently fixes a regression with some missing selection styling introduced by #225.\r\n- Adjusts the text color of tag links to better contrast against their respective backgrounds.\r\n- Refactors InstallBox to not use IDs since it's used multiple times for mobile/desktop, resulting in invalid (well, more unorthodox) HTML, that could behave strangely.\r\n- Removes the `unselectable` class repetition from CodeBox and just slaps a `user-select: none;` on it's base element to simplify things CSS-wise.\r\n- Iterates over the copy button to ensure that all instances get the listener (unsure if this is required since mobile ~~removes~~ hides the second potential instance.)",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 167,
        "deletions": 81,
        "changed_files": 10,
        "created_at": "2022-07-07T03:31:35Z",
        "closed_at": "2022-07-08T19:59:29Z",
        "merged_at": null,
        "body": "fix: add the favicon. fixes #262",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-07T01:04:38Z",
        "closed_at": "2022-07-07T02:22:29Z",
        "merged_at": "2022-07-07T02:22:29Z",
        "body": "This pull request fixes HMR with leaving `std.Thread.SpawnConfig` config blank in case of other OSs except macOS.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-06T21:53:34Z",
        "closed_at": "2022-07-08T01:36:41Z",
        "merged_at": "2022-07-08T01:36:41Z",
        "body": "This adds the \"Unzip is required\" section to the ReadMe. This section is linked when the installation of bun is failing and `unzip` is not installed. There are instructions for a variety of Linux distributions (shamelessly stolen from https://www.tecmint.com/install-zip-and-unzip-in-linux/). After applying this the link in the installation process will scroll down the page to that section as intended:\r\nhttps://github.com/MoritzLoewenstein/bun#unzip-is-required",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2022-07-06T19:34:06Z",
        "closed_at": "2022-07-08T09:32:55Z",
        "merged_at": "2022-07-08T09:32:55Z",
        "body": "I created this simple template when people want to start from scratch so that they at least have `package.json`",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 108,
        "deletions": 108,
        "changed_files": 1,
        "created_at": "2022-07-06T19:10:02Z",
        "closed_at": "2022-07-14T06:35:24Z",
        "merged_at": null,
        "body": "The changes was made by running:\r\n\r\n```bash\r\nnpx @strdr4605/jump2header --slug table-of-contents\r\n```\r\n\r\n[Demo](https://github.com/strdr4605/bun/blob/main/README.md#configuration=)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-06T18:43:34Z",
        "closed_at": "2022-07-08T01:56:45Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2022-07-06T18:40:37Z",
        "closed_at": "2022-07-14T18:20:43Z",
        "merged_at": "2022-07-14T18:20:43Z",
        "body": "Congratulations on the launch, much excited for this project.\r\nFixed a punctuation on home page.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2022-07-06T18:04:16Z",
        "closed_at": "2022-07-06T21:00:48Z",
        "merged_at": "2022-07-06T21:00:48Z",
        "body": "## Description\r\n\r\nPlace BigInt tests inside of describe block to match test structure of\r\nthe rest of the codebase.\r\n\r\n## Notes\r\n\r\nI noticed the `describe` import wasn't being used. Instead of removing it, I decided to place the two tests inside a `describe` block.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-06T17:35:13Z",
        "closed_at": "2022-07-07T02:22:53Z",
        "merged_at": "2022-07-07T02:22:53Z",
        "body": "- adds callout for adding `bun-types` to the project\r\n- adds callout for adding `bun-types` to the project's `tsconfig.json`\r\n- adds link in TOC\r\n\r\n````md\r\n### Adding Type Definitions\r\n\r\nTo get TypeScript working with the global API, add `bun-types` to your project:\r\n\r\n```sh\r\nbun add -d bun-types\r\n```\r\n\r\nAnd to the `types` field in your `tsconfig.json`:\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"types\": [\"bun-types\"]\r\n  }\r\n}\r\n```\r\n````\r\n\r\nWould it almost be better to ship `bun-types` as `@types/bun` as to not clash with manually specifying `compilerOptions.types` and `@types/*` packages? https://www.typescriptlang.org/tsconfig#types\r\n\r\nOR push folks into creating a `global.d.ts` file with:\r\n\r\n```ts\r\n/// <reference types=\"bun-types\" />\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-06T17:12:29Z",
        "closed_at": "2022-07-07T09:46:32Z",
        "merged_at": "2022-07-07T09:46:32Z",
        "body": "occurences -> occurrences",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-06T14:21:21Z",
        "closed_at": "2022-07-06T21:41:40Z",
        "merged_at": "2022-07-06T21:41:40Z",
        "body": "Or if we do not want to add dependencies here, update the following line\r\nhttps://github.com/Jarred-Sumner/bun/blob/f0c283c632816143d8eb3a9dc9ed41d326dcbde1/.devcontainer/scripts/getting-started.sh#L10\r\nto\r\n```\r\nmake devcontainer libarchive libbacktrace lolhtml usockets uws base64 tinycc\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-06T14:17:35Z",
        "closed_at": "2022-07-07T09:47:57Z",
        "merged_at": "2022-07-07T09:47:57Z",
        "body": "Node.js in Ubuntu focal does not have string.replaceAll method.\r\n```\r\nroot@focal:~# node --version\r\nv10.19.0\r\nroot@focal:~# echo \"console.log(''.replace)\" | node\r\n[Function: replace]\r\nroot@focal:~# echo \"console.log(''.replaceAll)\" | node\r\nundefined\r\n```\r\n\r\nAnd it gives the following error at\r\nhttps://github.com/Jarred-Sumner/bun/blob/f0c283c632816143d8eb3a9dc9ed41d326dcbde1/Makefile#L722\r\n\r\n```\r\n/build/bun/misctools/headers-cleaner.js:33\r\ninput = input.replaceAll(\"*WebCore__\", \"*bindings.\");\r\n              ^\r\n\r\nTypeError: input.replaceAll is not a function\r\n    at Object.<anonymous>\r\n(/build/bun/misctools/headers-cleaner.js:33:15)\r\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\r\n    at Object.Module._extensions..js\r\n(internal/modules/cjs/loader.js:789:10)\r\n    at Module.load (internal/modules/cjs/loader.js:653:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)\r\n    at startup (internal/bootstrap/node.js:283:19)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)\r\nmake: *** [Makefile:722: jsc-bindings-headers] Error 1\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2022-07-06T13:46:38Z",
        "closed_at": "2022-07-15T19:13:02Z",
        "merged_at": "2022-07-15T19:13:02Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-07-06T13:44:04Z",
        "closed_at": "2022-07-10T04:35:25Z",
        "merged_at": null,
        "body": "The latest Zig is needed according to https://github.com/zigtools/zls#from-source\r\n\r\nWith an old version of zig, building zls gives the following error:\r\n\r\n  #0 44.55 Submodule path 'src/known-folders': checked out '9db1b99219c767d5e24994b1525273fe4031e464'\r\n  #0 46.23 From https://github.com/wolfpld/tracy\r\n  #0 46.23  * branch            2d8723b69b39721eadcc296451012828899c0f17 -> FETCH_HEAD\r\n  #0 46.34 Submodule path 'src/tracy': checked out '2d8723b69b39721eadcc296451012828899c0f17'\r\n  #0 48.85 ./build.zig:45:48: error: no member named 'source' in struct 'std.build.Pkg'\r\n  #0 48.85     exe.addPackage(.{ .name = \"known-folders\", .source = .{ .path = \"src/known-folders/known-folders.zig\" } });\r\n  #0 48.85                                                ^",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-06T13:40:36Z",
        "closed_at": "2022-07-07T05:03:07Z",
        "merged_at": "2022-07-07T05:03:07Z",
        "body": "Just a very simple fix for an issue I noticed on the landing page where a space was not applying to the text:\r\n\r\n**Before**\r\n<img width=\"704\" alt=\"Screen Shot 2022-07-06 at 16 33 09\" src=\"https://user-images.githubusercontent.com/16276358/177562837-9d6a5628-ee4d-4c94-ac62-5794852dc676.png\">\r\n\r\n**After** \r\n<img width=\"752\" alt=\"Screen Shot 2022-07-06 at 16 34 34\" src=\"https://user-images.githubusercontent.com/16276358/177562879-a1dfe750-9d5c-4225-9c2f-c78e33dff463.png\">\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-06T09:01:43Z",
        "closed_at": "2022-07-06T11:08:53Z",
        "merged_at": "2022-07-06T11:08:53Z",
        "body": "**Note** I have no idea what I am doing here because I am still cloning the whole thing ... I hope this works.\r\n\r\n- - -\r\n\r\n**P.S.** should I file an issue as follow up to [crypto-browserify](https://www.npmjs.com/package/crypto-browserify) module? it's 5 years old module I am not sure they would/should care \ud83e\udd14",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2022-07-06T07:01:45Z",
        "closed_at": "2022-07-06T08:17:09Z",
        "merged_at": "2022-07-06T08:17:09Z",
        "body": "Congrats on the launch! Found some broken links on the home page.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-06T05:35:41Z",
        "closed_at": "2022-07-08T19:58:55Z",
        "merged_at": null,
        "body": "fix: ignore bun-landing when running ci.\r\n\r\nfixes #238 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2022-07-06T05:30:37Z",
        "closed_at": "2022-07-06T08:17:31Z",
        "merged_at": "2022-07-06T08:17:31Z",
        "body": "I spent the evening working on trying to make a Homebrew formula for bun, and ended up needing the ability to customize these values to get things working. Figured I'd upstream the changes. :)\r\n\r\n(I also tweaked the indentation for the `ifeq` that I touched, to better match the rest of the file)\r\n\r\nCongrats on 0.1 btw!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2022-07-06T05:26:36Z",
        "closed_at": "2022-07-06T08:16:19Z",
        "merged_at": "2022-07-06T08:16:19Z",
        "body": "fix: typo in the word enormous. fixes #214",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 88,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-06T04:04:25Z",
        "closed_at": "2022-07-06T11:11:31Z",
        "merged_at": "2022-07-06T11:11:31Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-07-06T03:24:32Z",
        "closed_at": "2022-07-06T11:12:45Z",
        "merged_at": "2022-07-06T11:12:45Z",
        "body": "Add Bun logo at the top of README\r\n![image](https://user-images.githubusercontent.com/5665358/177461016-cab0fbec-36be-4184-8d41-7eea657b94bd.png)\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 158,
        "deletions": 89,
        "changed_files": 2,
        "created_at": "2022-07-06T02:57:16Z",
        "closed_at": "2022-07-06T21:04:35Z",
        "merged_at": "2022-07-06T21:04:35Z",
        "body": "- fix low contrast issues\r\n- make tabbed widget accessible\r\n- fix headers hierarchy and other semantic issues\r\n- improve readability for screenreader",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2022-07-06T01:49:45Z",
        "closed_at": "2022-07-13T21:10:15Z",
        "merged_at": null,
        "body": "- fix #210\r\n- remove useless nodes (and duplicated by `id`)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2022-07-06T00:34:06Z",
        "closed_at": "2022-07-06T21:03:20Z",
        "merged_at": "2022-07-06T21:03:20Z",
        "body": "I fixed some broken links :)\r\ntip: you can see broken links easily in preview mode while editing in GitHub",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 310,
        "deletions": 0,
        "changed_files": 11,
        "created_at": "2022-07-05T15:26:50Z",
        "closed_at": "2022-07-05T16:26:59Z",
        "merged_at": "2022-07-05T16:26:59Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-07-01T20:27:12Z",
        "closed_at": "2022-07-02T02:12:01Z",
        "merged_at": "2022-07-02T02:12:01Z",
        "body": "This commit adds the bun dev step in creating a new Next.js app example in cli comment\r\n\r\nfixes: https://github.com/Jarred-Sumner/bun/issues/200",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8544,
        "deletions": 812,
        "changed_files": 82,
        "created_at": "2022-06-17T11:49:00Z",
        "closed_at": "2022-06-22T13:56:47Z",
        "merged_at": "2022-06-22T13:56:47Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-06-15T07:15:52Z",
        "closed_at": "2022-07-11T23:20:10Z",
        "merged_at": "2022-07-11T23:20:10Z",
        "body": "Just a small typo fix",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-29T13:28:15Z",
        "closed_at": "2022-05-30T10:52:11Z",
        "merged_at": null,
        "body": "This commit adds the `bun dev` step in creating a new Next.js app example in the README\r\n\r\nfixes: #183",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1057,
        "changed_files": 10,
        "created_at": "2022-05-29T04:43:43Z",
        "closed_at": "2022-05-30T08:13:13Z",
        "merged_at": "2022-05-30T08:13:13Z",
        "body": "- remove and ignore generated files\r\n- full path to `llvm-ar` on MacOS",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-20T13:35:11Z",
        "closed_at": "2022-05-20T19:26:15Z",
        "merged_at": "2022-05-20T19:26:15Z",
        "body": "Hello and thanks for the insightful tool.\r\n\r\nJust fix a typo in the README.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32118,
        "deletions": 2028,
        "changed_files": 247,
        "created_at": "2022-05-18T11:55:01Z",
        "closed_at": "2022-06-08T05:32:46Z",
        "merged_at": "2022-06-08T05:32:46Z",
        "body": "- [x] Import from WebKit\r\n- [x] `Blob.stream()`\r\n- [x] `Bun.file(pathOrFd).stream()`\r\n- [ ] `new Response(readableStream)`\r\n- [ ] `new Response({body: readableStream})`\r\n- [ ] `new Request({body: readableStream})`\r\n- [ ] `Response.body`\r\n- [ ] `Request.body`\r\n- [ ] `Bun.reader(pathOrFd)` (new api)\r\n- [ ] `Bun.writer(pathOrFd)` (new api)\r\n- [ ] HTMLRewriter support",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2022-05-16T17:11:05Z",
        "closed_at": "2022-05-16T20:55:14Z",
        "merged_at": "2022-05-16T20:55:14Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 258362,
        "deletions": 136,
        "changed_files": 52,
        "created_at": "2022-05-14T12:35:24Z",
        "closed_at": "2022-05-16T22:46:21Z",
        "merged_at": "2022-05-16T22:46:21Z",
        "body": "TODO:\r\n- [x] Why is `Buffer.from` crashing now?\r\n- [x] Update TypeScript types\r\n- [x] Add documentation to readme\r\n- [ ] Write some tests for transactions\r\n- [ ] Add an example to examples folder",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-05-12T19:26:40Z",
        "closed_at": "2022-05-12T21:43:45Z",
        "merged_at": "2022-05-12T21:43:44Z",
        "body": "[Wrangler 2](https://www.npmjs.com/package/wrangler) is officially released, and _wrangler@beta_ is on its way out.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 359,
        "deletions": 535,
        "changed_files": 1,
        "created_at": "2022-04-19T06:05:24Z",
        "closed_at": "2023-07-31T13:39:26Z",
        "merged_at": null,
        "body": "# Refactoring the code and adding improvements\r\n\r\n## Autocomplete for --define flag\r\n\r\n- Reads the environment variables and autocomplete them in json format\r\n- Autocomplete the environment variable\r\n  `process.env.NODE_ENV`\r\n\r\n![define completion](https://user-images.githubusercontent.com/50985135/163933211-b58d7e19-58db-43ed-9f3d-725bf207789f.gif)\r\n\r\n## Autocomplete for --load flag\r\n\r\nAuto complete file extensions with valid loaders\r\n\r\n![load completion](https://user-images.githubusercontent.com/50985135/163934290-7ef9c430-7699-445e-bc26-6af1df147d6d.gif)\r\n\r\n## Fixed bug when autocompleting recent packages\r\n\r\nPreviously, when adding multiple packages in the same command, the autocomplete did not work well.\r\n\r\n```bash\r\nbun add react vite esbuild nanoid\r\n```\r\n\r\nBefore:\r\n![recent packages completion before](https://user-images.githubusercontent.com/50985135/163934755-7f5493ac-1ea4-49cf-b178-d6f95241203d.gif)\r\n\r\nAfter:\r\nSegmentation in\r\n\r\n- recent\r\n- popular\r\n\r\n![recent packages completion after](https://user-images.githubusercontent.com/50985135/163935298-1d43a252-af0d-436d-8855-73392393fa77.gif)\r\n\r\n## Autocomplete for remove command\r\n\r\nSegmentation in\r\n\r\n- Dependencies\r\n- Dev Dependencies\r\n- Optional Dependencies\r\n- Peer Dependencies\r\n\r\n![remove package completion](https://user-images.githubusercontent.com/50985135/163935862-eaa3b061-74ac-405c-a4ab-38e70ef91d6b.gif)\r\n## Segmentation for the run command\r\n\r\nSegmentation in\r\n\r\n- files\r\n- binaries\r\n- scripts\r\n\r\n![run completion](https://user-images.githubusercontent.com/50985135/163935955-31e9979f-d589-4db9-b216-ed581fdfa677.gif)\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 33,
        "changed_files": 6,
        "created_at": "2022-04-19T03:14:34Z",
        "closed_at": "2022-04-19T04:25:54Z",
        "merged_at": "2022-04-19T04:25:54Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2022-04-19T01:56:35Z",
        "closed_at": "2022-04-19T09:13:47Z",
        "merged_at": null,
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2022-04-19T01:29:18Z",
        "closed_at": "2022-04-19T04:19:04Z",
        "merged_at": "2022-04-19T04:19:04Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2022-04-19T01:21:37Z",
        "closed_at": "2022-04-19T04:26:06Z",
        "merged_at": "2022-04-19T04:26:06Z",
        "body": "... fs.exports.js\n\nBug: #130\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-04-12T19:39:09Z",
        "closed_at": "2022-04-13T01:30:03Z",
        "merged_at": "2022-04-13T01:30:03Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2022-04-12T19:30:13Z",
        "closed_at": "2022-04-14T02:08:57Z",
        "merged_at": "2022-04-14T02:08:57Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-04-05T06:02:53Z",
        "closed_at": "2022-04-05T07:24:15Z",
        "merged_at": "2022-04-05T07:24:14Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-03-18T07:00:37Z",
        "closed_at": "2022-03-18T08:26:50Z",
        "merged_at": "2022-03-18T08:26:50Z",
        "body": "**Things that don\u2019t work yet** are no longer work, just change it to **Not implemented yet**",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2022-03-09T18:09:42Z",
        "closed_at": "2023-03-29T21:10:34Z",
        "merged_at": null,
        "body": "Update using bun with an existing CRA instructions in README to include a few caveats I ran into.\r\n\r\nhttps://discord.com/channels/876711213126520882/887787428973281300/951179760988459048",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2022-02-24T20:55:09Z",
        "closed_at": "2022-02-25T08:24:22Z",
        "merged_at": "2022-02-25T08:24:22Z",
        "body": "https://github.com/Jarred-Sumner/bun/commit/90c573cd42be1abab86db5820d1f6d1666eade8e",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 195,
        "deletions": 195,
        "changed_files": 44,
        "created_at": "2022-01-02T09:11:24Z",
        "closed_at": "2022-01-02T11:09:51Z",
        "merged_at": "2022-01-02T11:09:51Z",
        "body": "Most CLI tools have the style convention of referring to themselves in\r\nlowercase. It is, after all, the name that users type in when using\r\nthe tool. This PR maintains that convention in bun.\r\n\r\n\"Drop the uppercase B, it's cleaner\"",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 173,
        "deletions": 132,
        "changed_files": 1,
        "created_at": "2021-12-22T22:10:57Z",
        "closed_at": "2021-12-23T03:23:31Z",
        "merged_at": "2021-12-23T03:23:31Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 37,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2021-12-12T02:39:34Z",
        "closed_at": "2023-07-31T13:39:26Z",
        "merged_at": null,
        "body": "As discussed in the discord, this PR adds experimental Nix support via a `default.nix` file and a small note in the README. While this is great and all, it still leaves many unanswered questions:\r\n\r\n- Should we be building from source instead? (Currently unfeasible for multiple reasons, but good long term)\r\n- How should we handle updating versions?\r\n  - Should we just use the latest version at all times?\r\n  - ~~Should use/update check-sums?~~ \r\n    As mentioned in the discord by @Jarred-Sumner \r\n    > There have been a couple cases where I had to re-upload the version after some build issue\r\n    > so it might make sense to forgo the checksum for now\r\n  - Should we dynamically update the `default.zig` file upon each new release with the `Makefile`?\r\n- Should we provide more detailed instructions on how to install with Nix?\r\n- When is the right time to submit to nixpkgs?\r\n- How should we handle configuring Bun's cache directory?\r\n\r\n*and the list goes on.*\r\n\r\nThere are definitely a few things that should be fixed here, this is a decent starting point to build upon.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 153,
        "deletions": 132,
        "changed_files": 2,
        "created_at": "2021-11-24T17:14:05Z",
        "closed_at": "2021-11-24T21:16:26Z",
        "merged_at": "2021-11-24T21:16:26Z",
        "body": "Reduce the amount of dependencies which need to be externally built before Bun can be built.\r\n\r\nRemove clause to enforce that Bash syntax is used in Makefile, as the clause only works on a few Linux distros which assume bash is located at /bin/bash.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1960,
        "deletions": 193,
        "changed_files": 14,
        "created_at": "2021-11-11T19:02:36Z",
        "closed_at": "2021-11-24T00:35:46Z",
        "merged_at": "2021-11-24T00:35:46Z",
        "body": "- Add typed polyfills for URL & TextEncoded/Decoder\r\n- Add prettier to root\r\n- Adds some boilerplate for executing actions on GH\r\n- Adds Next & Typescript as DevDeps for `bun-framework-next` (Next remains a peer dependency as well)\r\n- Consolidate empty files / references to a single `empty.js`\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2021-11-09T16:19:45Z",
        "closed_at": "2021-11-09T21:04:13Z",
        "merged_at": "2021-11-09T21:04:12Z",
        "body": "should fix #55, untested",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2021-11-08T22:00:43Z",
        "closed_at": "2021-11-08T23:47:58Z",
        "merged_at": "2021-11-08T23:47:58Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 196,
        "deletions": 40,
        "changed_files": 7,
        "created_at": "2021-11-07T19:55:16Z",
        "closed_at": "2021-11-07T21:18:30Z",
        "merged_at": "2021-11-07T21:18:30Z",
        "body": "This PR starts cleaning up `bun-framework-next`, lot's of unused imports/commented code, etc. I can keep going if this isn't obviously wrong or the direction you'd like to take things...\r\n\r\nI bump `bun-framework-next` to `12.0.3` (latest Next.js version).\r\n\r\nHappy to remove/unstage some of these changes if they are in fact needed or you're intending on doing something with them.\r\n\r\nIt'd probably be valuable to clean up as much of the unused / dead code as possible so the codepaths are more clear (also, adding tests will be much less intimidating \ud83d\ude05).\r\n\r\nAlso some `pnpm-lock` file changes, not 100% why, I'm using the latest version of PNPM, `6.20.3`\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2021-10-29T19:15:23Z",
        "closed_at": "2021-10-29T22:39:36Z",
        "merged_at": "2021-10-29T22:39:36Z",
        "body": "Before:\r\n```bash\r\nexport BUN_INSTALL=\"/Users/mike/.bun\r\n```\r\n\r\nAfter:\r\n```bash\r\nexport BUN_INSTALL=\"/Users/mike/.bun\"\r\n```\r\n\r\nP.s. Thank you for bun, I'm PSYCHED! \ud83d\ude80 ",
        "comments": 0
    }
]